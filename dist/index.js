"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __name = (target, value) =>
    __defProp(target, "name", { value, configurable: true });
  var __require = /* @__PURE__ */ ((x) =>
    typeof require !== "undefined"
      ? require
      : typeof Proxy !== "undefined"
        ? new Proxy(x, {
            get: (a, b) => (typeof require !== "undefined" ? require : a)[b],
          })
        : x)(function (x) {
    if (typeof require !== "undefined") return require.apply(this, arguments);
    throw Error('Dynamic require of "' + x + '" is not supported');
  });
  var __esm = (fn, res) =>
    function __init() {
      return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])((fn = 0))), res;
    };
  var __commonJS = (cb, mod) =>
    function __require2() {
      return (
        mod ||
          (0, cb[__getOwnPropNames(cb)[0]])(
            (mod = { exports: {} }).exports,
            mod,
          ),
        mod.exports
      );
    };
  var __export = (target, all2) => {
    for (var name in all2)
      __defProp(target, name, { get: all2[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if ((from && typeof from === "object") || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, {
            get: () => from[key],
            enumerable:
              !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
          });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (
    (target = mod != null ? __create(__getProtoOf(mod)) : {}),
    __copyProps(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule
        ? __defProp(target, "default", { value: mod, enumerable: true })
        : target,
      mod,
    )
  );
  var __toCommonJS = (mod) =>
    __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/utils.js
  var require_utils = __commonJS({
    "node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/utils.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toCommandProperties = exports.toCommandValue = void 0;
      function toCommandValue(input) {
        if (input === null || input === void 0) {
          return "";
        } else if (typeof input === "string" || input instanceof String) {
          return input;
        }
        return JSON.stringify(input);
      }
      __name(toCommandValue, "toCommandValue");
      exports.toCommandValue = toCommandValue;
      function toCommandProperties(annotationProperties) {
        if (!Object.keys(annotationProperties).length) {
          return {};
        }
        return {
          title: annotationProperties.title,
          file: annotationProperties.file,
          line: annotationProperties.startLine,
          endLine: annotationProperties.endLine,
          col: annotationProperties.startColumn,
          endColumn: annotationProperties.endColumn,
        };
      }
      __name(toCommandProperties, "toCommandProperties");
      exports.toCommandProperties = toCommandProperties;
    },
  });

  // node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/command.js
  var require_command = __commonJS({
    "node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/command.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: /* @__PURE__ */ __name(function () {
                  return m[k];
                }, "get"),
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.issue = exports.issueCommand = void 0;
      var os = __importStar(__require("os"));
      var utils_1 = require_utils();
      function issueCommand(command, properties, message) {
        const cmd = new Command(command, properties, message);
        process.stdout.write(cmd.toString() + os.EOL);
      }
      __name(issueCommand, "issueCommand");
      exports.issueCommand = issueCommand;
      function issue(name, message = "") {
        issueCommand(name, {}, message);
      }
      __name(issue, "issue");
      exports.issue = issue;
      var CMD_STRING = "::";
      var Command = class {
        static {
          __name(this, "Command");
        }
        constructor(command, properties, message) {
          if (!command) {
            command = "missing.command";
          }
          this.command = command;
          this.properties = properties;
          this.message = message;
        }
        toString() {
          let cmdStr = CMD_STRING + this.command;
          if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += " ";
            let first = true;
            for (const key in this.properties) {
              if (this.properties.hasOwnProperty(key)) {
                const val = this.properties[key];
                if (val) {
                  if (first) {
                    first = false;
                  } else {
                    cmdStr += ",";
                  }
                  cmdStr += `${key}=${escapeProperty(val)}`;
                }
              }
            }
          }
          cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
          return cmdStr;
        }
      };
      function escapeData(s) {
        return utils_1
          .toCommandValue(s)
          .replace(/%/g, "%25")
          .replace(/\r/g, "%0D")
          .replace(/\n/g, "%0A");
      }
      __name(escapeData, "escapeData");
      function escapeProperty(s) {
        return utils_1
          .toCommandValue(s)
          .replace(/%/g, "%25")
          .replace(/\r/g, "%0D")
          .replace(/\n/g, "%0A")
          .replace(/:/g, "%3A")
          .replace(/,/g, "%2C");
      }
      __name(escapeProperty, "escapeProperty");
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/rng.js
  function rng() {
    if (poolPtr > rnds8Pool.length - 16) {
      import_crypto.default.randomFillSync(rnds8Pool);
      poolPtr = 0;
    }
    return rnds8Pool.slice(poolPtr, (poolPtr += 16));
  }
  var import_crypto, rnds8Pool, poolPtr;
  var init_rng = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/rng.js"() {
      import_crypto = __toESM(__require("crypto"));
      rnds8Pool = new Uint8Array(256);
      poolPtr = rnds8Pool.length;
      __name(rng, "rng");
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/regex.js
  var regex_default;
  var init_regex = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/regex.js"() {
      regex_default =
        /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/validate.js
  function validate(uuid) {
    return typeof uuid === "string" && regex_default.test(uuid);
  }
  var validate_default;
  var init_validate = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/validate.js"() {
      init_regex();
      __name(validate, "validate");
      validate_default = validate;
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/stringify.js
  function stringify(arr, offset = 0) {
    const uuid = (
      byteToHex[arr[offset + 0]] +
      byteToHex[arr[offset + 1]] +
      byteToHex[arr[offset + 2]] +
      byteToHex[arr[offset + 3]] +
      "-" +
      byteToHex[arr[offset + 4]] +
      byteToHex[arr[offset + 5]] +
      "-" +
      byteToHex[arr[offset + 6]] +
      byteToHex[arr[offset + 7]] +
      "-" +
      byteToHex[arr[offset + 8]] +
      byteToHex[arr[offset + 9]] +
      "-" +
      byteToHex[arr[offset + 10]] +
      byteToHex[arr[offset + 11]] +
      byteToHex[arr[offset + 12]] +
      byteToHex[arr[offset + 13]] +
      byteToHex[arr[offset + 14]] +
      byteToHex[arr[offset + 15]]
    ).toLowerCase();
    if (!validate_default(uuid)) {
      throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
  }
  var byteToHex, stringify_default;
  var init_stringify = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/stringify.js"() {
      init_validate();
      byteToHex = [];
      for (let i = 0; i < 256; ++i) {
        byteToHex.push((i + 256).toString(16).substr(1));
      }
      __name(stringify, "stringify");
      stringify_default = stringify;
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v1.js
  function v1(options, buf, offset) {
    let i = (buf && offset) || 0;
    const b = buf || new Array(16);
    options = options || {};
    let node2 = options.node || _nodeId;
    let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
    if (node2 == null || clockseq == null) {
      const seedBytes = options.random || (options.rng || rng)();
      if (node2 == null) {
        node2 = _nodeId = [
          seedBytes[0] | 1,
          seedBytes[1],
          seedBytes[2],
          seedBytes[3],
          seedBytes[4],
          seedBytes[5],
        ];
      }
      if (clockseq == null) {
        clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 16383;
      }
    }
    let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
    let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
    const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
    if (dt < 0 && options.clockseq === void 0) {
      clockseq = (clockseq + 1) & 16383;
    }
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
      nsecs = 0;
    }
    if (nsecs >= 1e4) {
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    msecs += 122192928e5;
    const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
    b[i++] = (tl >>> 24) & 255;
    b[i++] = (tl >>> 16) & 255;
    b[i++] = (tl >>> 8) & 255;
    b[i++] = tl & 255;
    const tmh = ((msecs / 4294967296) * 1e4) & 268435455;
    b[i++] = (tmh >>> 8) & 255;
    b[i++] = tmh & 255;
    b[i++] = ((tmh >>> 24) & 15) | 16;
    b[i++] = (tmh >>> 16) & 255;
    b[i++] = (clockseq >>> 8) | 128;
    b[i++] = clockseq & 255;
    for (let n = 0; n < 6; ++n) {
      b[i + n] = node2[n];
    }
    return buf || stringify_default(b);
  }
  var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
  var init_v1 = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v1.js"() {
      init_rng();
      init_stringify();
      _lastMSecs = 0;
      _lastNSecs = 0;
      __name(v1, "v1");
      v1_default = v1;
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/parse.js
  function parse(uuid) {
    if (!validate_default(uuid)) {
      throw TypeError("Invalid UUID");
    }
    let v;
    const arr = new Uint8Array(16);
    arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
    arr[1] = (v >>> 16) & 255;
    arr[2] = (v >>> 8) & 255;
    arr[3] = v & 255;
    arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
    arr[5] = v & 255;
    arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
    arr[7] = v & 255;
    arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
    arr[9] = v & 255;
    arr[10] = ((v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776) & 255;
    arr[11] = (v / 4294967296) & 255;
    arr[12] = (v >>> 24) & 255;
    arr[13] = (v >>> 16) & 255;
    arr[14] = (v >>> 8) & 255;
    arr[15] = v & 255;
    return arr;
  }
  var parse_default;
  var init_parse = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/parse.js"() {
      init_validate();
      __name(parse, "parse");
      parse_default = parse;
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v35.js
  function stringToBytes(str) {
    str = unescape(encodeURIComponent(str));
    const bytes = [];
    for (let i = 0; i < str.length; ++i) {
      bytes.push(str.charCodeAt(i));
    }
    return bytes;
  }
  function v35_default(name, version2, hashfunc) {
    function generateUUID(value, namespace, buf, offset) {
      if (typeof value === "string") {
        value = stringToBytes(value);
      }
      if (typeof namespace === "string") {
        namespace = parse_default(namespace);
      }
      if (namespace.length !== 16) {
        throw TypeError(
          "Namespace must be array-like (16 iterable integer values, 0-255)",
        );
      }
      let bytes = new Uint8Array(16 + value.length);
      bytes.set(namespace);
      bytes.set(value, namespace.length);
      bytes = hashfunc(bytes);
      bytes[6] = (bytes[6] & 15) | version2;
      bytes[8] = (bytes[8] & 63) | 128;
      if (buf) {
        offset = offset || 0;
        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = bytes[i];
        }
        return buf;
      }
      return stringify_default(bytes);
    }
    __name(generateUUID, "generateUUID");
    try {
      generateUUID.name = name;
    } catch (err) {}
    generateUUID.DNS = DNS;
    generateUUID.URL = URL2;
    return generateUUID;
  }
  var DNS, URL2;
  var init_v35 = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v35.js"() {
      init_stringify();
      init_parse();
      __name(stringToBytes, "stringToBytes");
      DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
      URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
      __name(v35_default, "default");
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/md5.js
  function md5(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
      bytes = Buffer.from(bytes, "utf8");
    }
    return import_crypto2.default.createHash("md5").update(bytes).digest();
  }
  var import_crypto2, md5_default;
  var init_md5 = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/md5.js"() {
      import_crypto2 = __toESM(__require("crypto"));
      __name(md5, "md5");
      md5_default = md5;
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v3.js
  var v3, v3_default;
  var init_v3 = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v3.js"() {
      init_v35();
      init_md5();
      v3 = v35_default("v3", 48, md5_default);
      v3_default = v3;
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v4.js
  function v4(options, buf, offset) {
    options = options || {};
    const rnds = options.random || (options.rng || rng)();
    rnds[6] = (rnds[6] & 15) | 64;
    rnds[8] = (rnds[8] & 63) | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }
      return buf;
    }
    return stringify_default(rnds);
  }
  var v4_default;
  var init_v4 = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v4.js"() {
      init_rng();
      init_stringify();
      __name(v4, "v4");
      v4_default = v4;
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/sha1.js
  function sha1(bytes) {
    if (Array.isArray(bytes)) {
      bytes = Buffer.from(bytes);
    } else if (typeof bytes === "string") {
      bytes = Buffer.from(bytes, "utf8");
    }
    return import_crypto3.default.createHash("sha1").update(bytes).digest();
  }
  var import_crypto3, sha1_default;
  var init_sha1 = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/sha1.js"() {
      import_crypto3 = __toESM(__require("crypto"));
      __name(sha1, "sha1");
      sha1_default = sha1;
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v5.js
  var v5, v5_default;
  var init_v5 = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/v5.js"() {
      init_v35();
      init_sha1();
      v5 = v35_default("v5", 80, sha1_default);
      v5_default = v5;
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/nil.js
  var nil_default;
  var init_nil = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/nil.js"() {
      nil_default = "00000000-0000-0000-0000-000000000000";
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/version.js
  function version(uuid) {
    if (!validate_default(uuid)) {
      throw TypeError("Invalid UUID");
    }
    return parseInt(uuid.substr(14, 1), 16);
  }
  var version_default;
  var init_version = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/version.js"() {
      init_validate();
      __name(version, "version");
      version_default = version;
    },
  });

  // node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/index.js
  var esm_node_exports = {};
  __export(esm_node_exports, {
    NIL: () => nil_default,
    parse: () => parse_default,
    stringify: () => stringify_default,
    v1: () => v1_default,
    v3: () => v3_default,
    v4: () => v4_default,
    v5: () => v5_default,
    validate: () => validate_default,
    version: () => version_default,
  });
  var init_esm_node = __esm({
    "node_modules/.pnpm/uuid@8.3.2/node_modules/uuid/dist/esm-node/index.js"() {
      init_v1();
      init_v3();
      init_v4();
      init_v5();
      init_nil();
      init_version();
      init_validate();
      init_stringify();
      init_parse();
    },
  });

  // node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/file-command.js
  var require_file_command = __commonJS({
    "node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/file-command.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: /* @__PURE__ */ __name(function () {
                  return m[k];
                }, "get"),
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
      var fs6 = __importStar(__require("fs"));
      var os = __importStar(__require("os"));
      var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
      var utils_1 = require_utils();
      function issueFileCommand(command, message) {
        const filePath = process.env[`GITHUB_${command}`];
        if (!filePath) {
          throw new Error(
            `Unable to find environment variable for file command ${command}`,
          );
        }
        if (!fs6.existsSync(filePath)) {
          throw new Error(`Missing file at path: ${filePath}`);
        }
        fs6.appendFileSync(
          filePath,
          `${utils_1.toCommandValue(message)}${os.EOL}`,
          {
            encoding: "utf8",
          },
        );
      }
      __name(issueFileCommand, "issueFileCommand");
      exports.issueFileCommand = issueFileCommand;
      function prepareKeyValueMessage(key, value) {
        const delimiter = `ghadelimiter_${uuid_1.v4()}`;
        const convertedValue = utils_1.toCommandValue(value);
        if (key.includes(delimiter)) {
          throw new Error(
            `Unexpected input: name should not contain the delimiter "${delimiter}"`,
          );
        }
        if (convertedValue.includes(delimiter)) {
          throw new Error(
            `Unexpected input: value should not contain the delimiter "${delimiter}"`,
          );
        }
        return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
      }
      __name(prepareKeyValueMessage, "prepareKeyValueMessage");
      exports.prepareKeyValueMessage = prepareKeyValueMessage;
    },
  });

  // node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/proxy.js
  var require_proxy = __commonJS({
    "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/proxy.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.checkBypass = exports.getProxyUrl = void 0;
      function getProxyUrl(reqUrl) {
        const usingSsl = reqUrl.protocol === "https:";
        if (checkBypass(reqUrl)) {
          return void 0;
        }
        const proxyVar = (() => {
          if (usingSsl) {
            return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
          } else {
            return process.env["http_proxy"] || process.env["HTTP_PROXY"];
          }
        })();
        if (proxyVar) {
          try {
            return new DecodedURL(proxyVar);
          } catch (_a) {
            if (
              !proxyVar.startsWith("http://") &&
              !proxyVar.startsWith("https://")
            )
              return new DecodedURL(`http://${proxyVar}`);
          }
        } else {
          return void 0;
        }
      }
      __name(getProxyUrl, "getProxyUrl");
      exports.getProxyUrl = getProxyUrl;
      function checkBypass(reqUrl) {
        if (!reqUrl.hostname) {
          return false;
        }
        const reqHost = reqUrl.hostname;
        if (isLoopbackAddress(reqHost)) {
          return true;
        }
        const noProxy =
          process.env["no_proxy"] || process.env["NO_PROXY"] || "";
        if (!noProxy) {
          return false;
        }
        let reqPort;
        if (reqUrl.port) {
          reqPort = Number(reqUrl.port);
        } else if (reqUrl.protocol === "http:") {
          reqPort = 80;
        } else if (reqUrl.protocol === "https:") {
          reqPort = 443;
        }
        const upperReqHosts = [reqUrl.hostname.toUpperCase()];
        if (typeof reqPort === "number") {
          upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
        }
        for (const upperNoProxyItem of noProxy
          .split(",")
          .map((x) => x.trim().toUpperCase())
          .filter((x) => x)) {
          if (
            upperNoProxyItem === "*" ||
            upperReqHosts.some(
              (x) =>
                x === upperNoProxyItem ||
                x.endsWith(`.${upperNoProxyItem}`) ||
                (upperNoProxyItem.startsWith(".") &&
                  x.endsWith(`${upperNoProxyItem}`)),
            )
          ) {
            return true;
          }
        }
        return false;
      }
      __name(checkBypass, "checkBypass");
      exports.checkBypass = checkBypass;
      function isLoopbackAddress(host) {
        const hostLower = host.toLowerCase();
        return (
          hostLower === "localhost" ||
          hostLower.startsWith("127.") ||
          hostLower.startsWith("[::1]") ||
          hostLower.startsWith("[0:0:0:0:0:0:0:1]")
        );
      }
      __name(isLoopbackAddress, "isLoopbackAddress");
      var DecodedURL = class extends URL {
        static {
          __name(this, "DecodedURL");
        }
        constructor(url, base) {
          super(url, base);
          this._decodedUsername = decodeURIComponent(super.username);
          this._decodedPassword = decodeURIComponent(super.password);
        }
        get username() {
          return this._decodedUsername;
        }
        get password() {
          return this._decodedPassword;
        }
      };
    },
  });

  // node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js
  var require_tunnel = __commonJS({
    "node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js"(
      exports,
    ) {
      "use strict";
      var net = __require("net");
      var tls = __require("tls");
      var http = __require("http");
      var https = __require("https");
      var events = __require("events");
      var assert = __require("assert");
      var util2 = __require("util");
      exports.httpOverHttp = httpOverHttp;
      exports.httpsOverHttp = httpsOverHttp;
      exports.httpOverHttps = httpOverHttps;
      exports.httpsOverHttps = httpsOverHttps;
      function httpOverHttp(options) {
        var agent = new TunnelingAgent(options);
        agent.request = http.request;
        return agent;
      }
      __name(httpOverHttp, "httpOverHttp");
      function httpsOverHttp(options) {
        var agent = new TunnelingAgent(options);
        agent.request = http.request;
        agent.createSocket = createSecureSocket;
        agent.defaultPort = 443;
        return agent;
      }
      __name(httpsOverHttp, "httpsOverHttp");
      function httpOverHttps(options) {
        var agent = new TunnelingAgent(options);
        agent.request = https.request;
        return agent;
      }
      __name(httpOverHttps, "httpOverHttps");
      function httpsOverHttps(options) {
        var agent = new TunnelingAgent(options);
        agent.request = https.request;
        agent.createSocket = createSecureSocket;
        agent.defaultPort = 443;
        return agent;
      }
      __name(httpsOverHttps, "httpsOverHttps");
      function TunnelingAgent(options) {
        var self2 = this;
        self2.options = options || {};
        self2.proxyOptions = self2.options.proxy || {};
        self2.maxSockets =
          self2.options.maxSockets || http.Agent.defaultMaxSockets;
        self2.requests = [];
        self2.sockets = [];
        self2.on(
          "free",
          /* @__PURE__ */ __name(function onFree(
            socket,
            host,
            port,
            localAddress,
          ) {
            var options2 = toOptions(host, port, localAddress);
            for (var i = 0, len = self2.requests.length; i < len; ++i) {
              var pending = self2.requests[i];
              if (
                pending.host === options2.host &&
                pending.port === options2.port
              ) {
                self2.requests.splice(i, 1);
                pending.request.onSocket(socket);
                return;
              }
            }
            socket.destroy();
            self2.removeSocket(socket);
          }, "onFree"),
        );
      }
      __name(TunnelingAgent, "TunnelingAgent");
      util2.inherits(TunnelingAgent, events.EventEmitter);
      TunnelingAgent.prototype.addRequest = /* @__PURE__ */ __name(
        function addRequest(req, host, port, localAddress) {
          var self2 = this;
          var options = mergeOptions(
            { request: req },
            self2.options,
            toOptions(host, port, localAddress),
          );
          if (self2.sockets.length >= this.maxSockets) {
            self2.requests.push(options);
            return;
          }
          self2.createSocket(options, function (socket) {
            socket.on("free", onFree);
            socket.on("close", onCloseOrRemove);
            socket.on("agentRemove", onCloseOrRemove);
            req.onSocket(socket);
            function onFree() {
              self2.emit("free", socket, options);
            }
            __name(onFree, "onFree");
            function onCloseOrRemove(err) {
              self2.removeSocket(socket);
              socket.removeListener("free", onFree);
              socket.removeListener("close", onCloseOrRemove);
              socket.removeListener("agentRemove", onCloseOrRemove);
            }
            __name(onCloseOrRemove, "onCloseOrRemove");
          });
        },
        "addRequest",
      );
      TunnelingAgent.prototype.createSocket = /* @__PURE__ */ __name(
        function createSocket(options, cb) {
          var self2 = this;
          var placeholder = {};
          self2.sockets.push(placeholder);
          var connectOptions = mergeOptions({}, self2.proxyOptions, {
            method: "CONNECT",
            path: options.host + ":" + options.port,
            agent: false,
            headers: {
              host: options.host + ":" + options.port,
            },
          });
          if (options.localAddress) {
            connectOptions.localAddress = options.localAddress;
          }
          if (connectOptions.proxyAuth) {
            connectOptions.headers = connectOptions.headers || {};
            connectOptions.headers["Proxy-Authorization"] =
              "Basic " +
              new Buffer(connectOptions.proxyAuth).toString("base64");
          }
          debug("making CONNECT request");
          var connectReq = self2.request(connectOptions);
          connectReq.useChunkedEncodingByDefault = false;
          connectReq.once("response", onResponse);
          connectReq.once("upgrade", onUpgrade);
          connectReq.once("connect", onConnect);
          connectReq.once("error", onError);
          connectReq.end();
          function onResponse(res) {
            res.upgrade = true;
          }
          __name(onResponse, "onResponse");
          function onUpgrade(res, socket, head) {
            process.nextTick(function () {
              onConnect(res, socket, head);
            });
          }
          __name(onUpgrade, "onUpgrade");
          function onConnect(res, socket, head) {
            connectReq.removeAllListeners();
            socket.removeAllListeners();
            if (res.statusCode !== 200) {
              debug(
                "tunneling socket could not be established, statusCode=%d",
                res.statusCode,
              );
              socket.destroy();
              var error = new Error(
                "tunneling socket could not be established, statusCode=" +
                  res.statusCode,
              );
              error.code = "ECONNRESET";
              options.request.emit("error", error);
              self2.removeSocket(placeholder);
              return;
            }
            if (head.length > 0) {
              debug("got illegal response body from proxy");
              socket.destroy();
              var error = new Error("got illegal response body from proxy");
              error.code = "ECONNRESET";
              options.request.emit("error", error);
              self2.removeSocket(placeholder);
              return;
            }
            debug("tunneling connection has established");
            self2.sockets[self2.sockets.indexOf(placeholder)] = socket;
            return cb(socket);
          }
          __name(onConnect, "onConnect");
          function onError(cause) {
            connectReq.removeAllListeners();
            debug(
              "tunneling socket could not be established, cause=%s\n",
              cause.message,
              cause.stack,
            );
            var error = new Error(
              "tunneling socket could not be established, cause=" +
                cause.message,
            );
            error.code = "ECONNRESET";
            options.request.emit("error", error);
            self2.removeSocket(placeholder);
          }
          __name(onError, "onError");
        },
        "createSocket",
      );
      TunnelingAgent.prototype.removeSocket = /* @__PURE__ */ __name(
        function removeSocket(socket) {
          var pos = this.sockets.indexOf(socket);
          if (pos === -1) {
            return;
          }
          this.sockets.splice(pos, 1);
          var pending = this.requests.shift();
          if (pending) {
            this.createSocket(pending, function (socket2) {
              pending.request.onSocket(socket2);
            });
          }
        },
        "removeSocket",
      );
      function createSecureSocket(options, cb) {
        var self2 = this;
        TunnelingAgent.prototype.createSocket.call(
          self2,
          options,
          function (socket) {
            var hostHeader = options.request.getHeader("host");
            var tlsOptions = mergeOptions({}, self2.options, {
              socket,
              servername: hostHeader
                ? hostHeader.replace(/:.*$/, "")
                : options.host,
            });
            var secureSocket = tls.connect(0, tlsOptions);
            self2.sockets[self2.sockets.indexOf(socket)] = secureSocket;
            cb(secureSocket);
          },
        );
      }
      __name(createSecureSocket, "createSecureSocket");
      function toOptions(host, port, localAddress) {
        if (typeof host === "string") {
          return {
            host,
            port,
            localAddress,
          };
        }
        return host;
      }
      __name(toOptions, "toOptions");
      function mergeOptions(target) {
        for (var i = 1, len = arguments.length; i < len; ++i) {
          var overrides = arguments[i];
          if (typeof overrides === "object") {
            var keys = Object.keys(overrides);
            for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
              var k = keys[j];
              if (overrides[k] !== void 0) {
                target[k] = overrides[k];
              }
            }
          }
        }
        return target;
      }
      __name(mergeOptions, "mergeOptions");
      var debug;
      if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
        debug = /* @__PURE__ */ __name(function () {
          var args = Array.prototype.slice.call(arguments);
          if (typeof args[0] === "string") {
            args[0] = "TUNNEL: " + args[0];
          } else {
            args.unshift("TUNNEL:");
          }
          console.error.apply(console, args);
        }, "debug");
      } else {
        debug = /* @__PURE__ */ __name(function () {}, "debug");
      }
      exports.debug = debug;
    },
  });

  // node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js
  var require_tunnel2 = __commonJS({
    "node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js"(
      exports,
      module,
    ) {
      module.exports = require_tunnel();
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/symbols.js
  var require_symbols = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/symbols.js"(
      exports,
      module,
    ) {
      module.exports = {
        kClose: Symbol("close"),
        kDestroy: Symbol("destroy"),
        kDispatch: Symbol("dispatch"),
        kUrl: Symbol("url"),
        kWriting: Symbol("writing"),
        kResuming: Symbol("resuming"),
        kQueue: Symbol("queue"),
        kConnect: Symbol("connect"),
        kConnecting: Symbol("connecting"),
        kHeadersList: Symbol("headers list"),
        kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
        kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
        kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
        kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
        kKeepAlive: Symbol("keep alive"),
        kHeadersTimeout: Symbol("headers timeout"),
        kBodyTimeout: Symbol("body timeout"),
        kServerName: Symbol("server name"),
        kLocalAddress: Symbol("local address"),
        kHost: Symbol("host"),
        kNoRef: Symbol("no ref"),
        kBodyUsed: Symbol("used"),
        kRunning: Symbol("running"),
        kBlocking: Symbol("blocking"),
        kPending: Symbol("pending"),
        kSize: Symbol("size"),
        kBusy: Symbol("busy"),
        kQueued: Symbol("queued"),
        kFree: Symbol("free"),
        kConnected: Symbol("connected"),
        kClosed: Symbol("closed"),
        kNeedDrain: Symbol("need drain"),
        kReset: Symbol("reset"),
        kDestroyed: Symbol.for("nodejs.stream.destroyed"),
        kMaxHeadersSize: Symbol("max headers size"),
        kRunningIdx: Symbol("running index"),
        kPendingIdx: Symbol("pending index"),
        kError: Symbol("error"),
        kClients: Symbol("clients"),
        kClient: Symbol("client"),
        kParser: Symbol("parser"),
        kOnDestroyed: Symbol("destroy callbacks"),
        kPipelining: Symbol("pipelining"),
        kSocket: Symbol("socket"),
        kHostHeader: Symbol("host header"),
        kConnector: Symbol("connector"),
        kStrictContentLength: Symbol("strict content length"),
        kMaxRedirections: Symbol("maxRedirections"),
        kMaxRequests: Symbol("maxRequestsPerClient"),
        kProxy: Symbol("proxy agent options"),
        kCounter: Symbol("socket request counter"),
        kInterceptors: Symbol("dispatch interceptors"),
        kMaxResponseSize: Symbol("max response size"),
        kHTTP2Session: Symbol("http2Session"),
        kHTTP2SessionState: Symbol("http2Session state"),
        kHTTP2BuildRequest: Symbol("http2 build request"),
        kHTTP1BuildRequest: Symbol("http1 build request"),
        kHTTP2CopyHeaders: Symbol("http2 copy headers"),
        kHTTPConnVersion: Symbol("http connection version"),
        kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
        kConstruct: Symbol("constructable"),
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/errors.js
  var require_errors = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/errors.js"(
      exports,
      module,
    ) {
      "use strict";
      var UndiciError = class extends Error {
        static {
          __name(this, "UndiciError");
        }
        constructor(message) {
          super(message);
          this.name = "UndiciError";
          this.code = "UND_ERR";
        }
      };
      var ConnectTimeoutError = class _ConnectTimeoutError extends UndiciError {
        static {
          __name(this, "ConnectTimeoutError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _ConnectTimeoutError);
          this.name = "ConnectTimeoutError";
          this.message = message || "Connect Timeout Error";
          this.code = "UND_ERR_CONNECT_TIMEOUT";
        }
      };
      var HeadersTimeoutError = class _HeadersTimeoutError extends UndiciError {
        static {
          __name(this, "HeadersTimeoutError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _HeadersTimeoutError);
          this.name = "HeadersTimeoutError";
          this.message = message || "Headers Timeout Error";
          this.code = "UND_ERR_HEADERS_TIMEOUT";
        }
      };
      var HeadersOverflowError = class _HeadersOverflowError extends UndiciError {
        static {
          __name(this, "HeadersOverflowError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _HeadersOverflowError);
          this.name = "HeadersOverflowError";
          this.message = message || "Headers Overflow Error";
          this.code = "UND_ERR_HEADERS_OVERFLOW";
        }
      };
      var BodyTimeoutError = class _BodyTimeoutError extends UndiciError {
        static {
          __name(this, "BodyTimeoutError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _BodyTimeoutError);
          this.name = "BodyTimeoutError";
          this.message = message || "Body Timeout Error";
          this.code = "UND_ERR_BODY_TIMEOUT";
        }
      };
      var ResponseStatusCodeError = class _ResponseStatusCodeError extends UndiciError {
        static {
          __name(this, "ResponseStatusCodeError");
        }
        constructor(message, statusCode, headers, body) {
          super(message);
          Error.captureStackTrace(this, _ResponseStatusCodeError);
          this.name = "ResponseStatusCodeError";
          this.message = message || "Response Status Code Error";
          this.code = "UND_ERR_RESPONSE_STATUS_CODE";
          this.body = body;
          this.status = statusCode;
          this.statusCode = statusCode;
          this.headers = headers;
        }
      };
      var InvalidArgumentError = class _InvalidArgumentError extends UndiciError {
        static {
          __name(this, "InvalidArgumentError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _InvalidArgumentError);
          this.name = "InvalidArgumentError";
          this.message = message || "Invalid Argument Error";
          this.code = "UND_ERR_INVALID_ARG";
        }
      };
      var InvalidReturnValueError = class _InvalidReturnValueError extends UndiciError {
        static {
          __name(this, "InvalidReturnValueError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _InvalidReturnValueError);
          this.name = "InvalidReturnValueError";
          this.message = message || "Invalid Return Value Error";
          this.code = "UND_ERR_INVALID_RETURN_VALUE";
        }
      };
      var RequestAbortedError = class _RequestAbortedError extends UndiciError {
        static {
          __name(this, "RequestAbortedError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _RequestAbortedError);
          this.name = "AbortError";
          this.message = message || "Request aborted";
          this.code = "UND_ERR_ABORTED";
        }
      };
      var InformationalError = class _InformationalError extends UndiciError {
        static {
          __name(this, "InformationalError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _InformationalError);
          this.name = "InformationalError";
          this.message = message || "Request information";
          this.code = "UND_ERR_INFO";
        }
      };
      var RequestContentLengthMismatchError = class _RequestContentLengthMismatchError extends UndiciError {
        static {
          __name(this, "RequestContentLengthMismatchError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _RequestContentLengthMismatchError);
          this.name = "RequestContentLengthMismatchError";
          this.message =
            message ||
            "Request body length does not match content-length header";
          this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
        }
      };
      var ResponseContentLengthMismatchError = class _ResponseContentLengthMismatchError extends UndiciError {
        static {
          __name(this, "ResponseContentLengthMismatchError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _ResponseContentLengthMismatchError);
          this.name = "ResponseContentLengthMismatchError";
          this.message =
            message ||
            "Response body length does not match content-length header";
          this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
        }
      };
      var ClientDestroyedError = class _ClientDestroyedError extends UndiciError {
        static {
          __name(this, "ClientDestroyedError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _ClientDestroyedError);
          this.name = "ClientDestroyedError";
          this.message = message || "The client is destroyed";
          this.code = "UND_ERR_DESTROYED";
        }
      };
      var ClientClosedError = class _ClientClosedError extends UndiciError {
        static {
          __name(this, "ClientClosedError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _ClientClosedError);
          this.name = "ClientClosedError";
          this.message = message || "The client is closed";
          this.code = "UND_ERR_CLOSED";
        }
      };
      var SocketError = class _SocketError extends UndiciError {
        static {
          __name(this, "SocketError");
        }
        constructor(message, socket) {
          super(message);
          Error.captureStackTrace(this, _SocketError);
          this.name = "SocketError";
          this.message = message || "Socket error";
          this.code = "UND_ERR_SOCKET";
          this.socket = socket;
        }
      };
      var NotSupportedError = class _NotSupportedError extends UndiciError {
        static {
          __name(this, "NotSupportedError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _NotSupportedError);
          this.name = "NotSupportedError";
          this.message = message || "Not supported error";
          this.code = "UND_ERR_NOT_SUPPORTED";
        }
      };
      var BalancedPoolMissingUpstreamError = class extends UndiciError {
        static {
          __name(this, "BalancedPoolMissingUpstreamError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, NotSupportedError);
          this.name = "MissingUpstreamError";
          this.message =
            message || "No upstream has been added to the BalancedPool";
          this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
        }
      };
      var HTTPParserError = class _HTTPParserError extends Error {
        static {
          __name(this, "HTTPParserError");
        }
        constructor(message, code2, data) {
          super(message);
          Error.captureStackTrace(this, _HTTPParserError);
          this.name = "HTTPParserError";
          this.code = code2 ? `HPE_${code2}` : void 0;
          this.data = data ? data.toString() : void 0;
        }
      };
      var ResponseExceededMaxSizeError = class _ResponseExceededMaxSizeError extends UndiciError {
        static {
          __name(this, "ResponseExceededMaxSizeError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _ResponseExceededMaxSizeError);
          this.name = "ResponseExceededMaxSizeError";
          this.message = message || "Response content exceeded max size";
          this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
        }
      };
      var RequestRetryError = class _RequestRetryError extends UndiciError {
        static {
          __name(this, "RequestRetryError");
        }
        constructor(message, code2, { headers, data }) {
          super(message);
          Error.captureStackTrace(this, _RequestRetryError);
          this.name = "RequestRetryError";
          this.message = message || "Request retry error";
          this.code = "UND_ERR_REQ_RETRY";
          this.statusCode = code2;
          this.data = data;
          this.headers = headers;
        }
      };
      module.exports = {
        HTTPParserError,
        UndiciError,
        HeadersTimeoutError,
        HeadersOverflowError,
        BodyTimeoutError,
        RequestContentLengthMismatchError,
        ConnectTimeoutError,
        ResponseStatusCodeError,
        InvalidArgumentError,
        InvalidReturnValueError,
        RequestAbortedError,
        ClientDestroyedError,
        ClientClosedError,
        InformationalError,
        SocketError,
        NotSupportedError,
        ResponseContentLengthMismatchError,
        BalancedPoolMissingUpstreamError,
        ResponseExceededMaxSizeError,
        RequestRetryError,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/constants.js
  var require_constants = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/constants.js"(
      exports,
      module,
    ) {
      "use strict";
      var headerNameLowerCasedRecord = {};
      var wellknownHeaderNames = [
        "Accept",
        "Accept-Encoding",
        "Accept-Language",
        "Accept-Ranges",
        "Access-Control-Allow-Credentials",
        "Access-Control-Allow-Headers",
        "Access-Control-Allow-Methods",
        "Access-Control-Allow-Origin",
        "Access-Control-Expose-Headers",
        "Access-Control-Max-Age",
        "Access-Control-Request-Headers",
        "Access-Control-Request-Method",
        "Age",
        "Allow",
        "Alt-Svc",
        "Alt-Used",
        "Authorization",
        "Cache-Control",
        "Clear-Site-Data",
        "Connection",
        "Content-Disposition",
        "Content-Encoding",
        "Content-Language",
        "Content-Length",
        "Content-Location",
        "Content-Range",
        "Content-Security-Policy",
        "Content-Security-Policy-Report-Only",
        "Content-Type",
        "Cookie",
        "Cross-Origin-Embedder-Policy",
        "Cross-Origin-Opener-Policy",
        "Cross-Origin-Resource-Policy",
        "Date",
        "Device-Memory",
        "Downlink",
        "ECT",
        "ETag",
        "Expect",
        "Expect-CT",
        "Expires",
        "Forwarded",
        "From",
        "Host",
        "If-Match",
        "If-Modified-Since",
        "If-None-Match",
        "If-Range",
        "If-Unmodified-Since",
        "Keep-Alive",
        "Last-Modified",
        "Link",
        "Location",
        "Max-Forwards",
        "Origin",
        "Permissions-Policy",
        "Pragma",
        "Proxy-Authenticate",
        "Proxy-Authorization",
        "RTT",
        "Range",
        "Referer",
        "Referrer-Policy",
        "Refresh",
        "Retry-After",
        "Sec-WebSocket-Accept",
        "Sec-WebSocket-Extensions",
        "Sec-WebSocket-Key",
        "Sec-WebSocket-Protocol",
        "Sec-WebSocket-Version",
        "Server",
        "Server-Timing",
        "Service-Worker-Allowed",
        "Service-Worker-Navigation-Preload",
        "Set-Cookie",
        "SourceMap",
        "Strict-Transport-Security",
        "Supports-Loading-Mode",
        "TE",
        "Timing-Allow-Origin",
        "Trailer",
        "Transfer-Encoding",
        "Upgrade",
        "Upgrade-Insecure-Requests",
        "User-Agent",
        "Vary",
        "Via",
        "WWW-Authenticate",
        "X-Content-Type-Options",
        "X-DNS-Prefetch-Control",
        "X-Frame-Options",
        "X-Permitted-Cross-Domain-Policies",
        "X-Powered-By",
        "X-Requested-With",
        "X-XSS-Protection",
      ];
      for (let i = 0; i < wellknownHeaderNames.length; ++i) {
        const key = wellknownHeaderNames[i];
        const lowerCasedKey = key.toLowerCase();
        headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[
          lowerCasedKey
        ] = lowerCasedKey;
      }
      Object.setPrototypeOf(headerNameLowerCasedRecord, null);
      module.exports = {
        wellknownHeaderNames,
        headerNameLowerCasedRecord,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/util.js
  var require_util = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/util.js"(
      exports,
      module,
    ) {
      "use strict";
      var assert = __require("assert");
      var { kDestroyed, kBodyUsed } = require_symbols();
      var { IncomingMessage } = __require("http");
      var stream = __require("stream");
      var net = __require("net");
      var { InvalidArgumentError } = require_errors();
      var { Blob: Blob2 } = __require("buffer");
      var nodeUtil = __require("util");
      var { stringify: stringify2 } = __require("querystring");
      var { headerNameLowerCasedRecord } = require_constants();
      var [nodeMajor, nodeMinor] = process.versions.node
        .split(".")
        .map((v) => Number(v));
      function nop() {}
      __name(nop, "nop");
      function isStream(obj) {
        return (
          obj &&
          typeof obj === "object" &&
          typeof obj.pipe === "function" &&
          typeof obj.on === "function"
        );
      }
      __name(isStream, "isStream");
      function isBlobLike(object) {
        return (
          (Blob2 && object instanceof Blob2) ||
          (object &&
            typeof object === "object" &&
            (typeof object.stream === "function" ||
              typeof object.arrayBuffer === "function") &&
            /^(Blob|File)$/.test(object[Symbol.toStringTag]))
        );
      }
      __name(isBlobLike, "isBlobLike");
      function buildURL(url, queryParams) {
        if (url.includes("?") || url.includes("#")) {
          throw new Error(
            'Query params cannot be passed when url already contains "?" or "#".',
          );
        }
        const stringified = stringify2(queryParams);
        if (stringified) {
          url += "?" + stringified;
        }
        return url;
      }
      __name(buildURL, "buildURL");
      function parseURL(url) {
        if (typeof url === "string") {
          url = new URL(url);
          if (!/^https?:/.test(url.origin || url.protocol)) {
            throw new InvalidArgumentError(
              "Invalid URL protocol: the URL must start with `http:` or `https:`.",
            );
          }
          return url;
        }
        if (!url || typeof url !== "object") {
          throw new InvalidArgumentError(
            "Invalid URL: The URL argument must be a non-null object.",
          );
        }
        if (!/^https?:/.test(url.origin || url.protocol)) {
          throw new InvalidArgumentError(
            "Invalid URL protocol: the URL must start with `http:` or `https:`.",
          );
        }
        if (!(url instanceof URL)) {
          if (
            url.port != null &&
            url.port !== "" &&
            !Number.isFinite(parseInt(url.port))
          ) {
            throw new InvalidArgumentError(
              "Invalid URL: port must be a valid integer or a string representation of an integer.",
            );
          }
          if (url.path != null && typeof url.path !== "string") {
            throw new InvalidArgumentError(
              "Invalid URL path: the path must be a string or null/undefined.",
            );
          }
          if (url.pathname != null && typeof url.pathname !== "string") {
            throw new InvalidArgumentError(
              "Invalid URL pathname: the pathname must be a string or null/undefined.",
            );
          }
          if (url.hostname != null && typeof url.hostname !== "string") {
            throw new InvalidArgumentError(
              "Invalid URL hostname: the hostname must be a string or null/undefined.",
            );
          }
          if (url.origin != null && typeof url.origin !== "string") {
            throw new InvalidArgumentError(
              "Invalid URL origin: the origin must be a string or null/undefined.",
            );
          }
          const port =
            url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
          let origin =
            url.origin != null
              ? url.origin
              : `${url.protocol}//${url.hostname}:${port}`;
          let path4 =
            url.path != null
              ? url.path
              : `${url.pathname || ""}${url.search || ""}`;
          if (origin.endsWith("/")) {
            origin = origin.substring(0, origin.length - 1);
          }
          if (path4 && !path4.startsWith("/")) {
            path4 = `/${path4}`;
          }
          url = new URL(origin + path4);
        }
        return url;
      }
      __name(parseURL, "parseURL");
      function parseOrigin(url) {
        url = parseURL(url);
        if (url.pathname !== "/" || url.search || url.hash) {
          throw new InvalidArgumentError("invalid url");
        }
        return url;
      }
      __name(parseOrigin, "parseOrigin");
      function getHostname(host) {
        if (host[0] === "[") {
          const idx2 = host.indexOf("]");
          assert(idx2 !== -1);
          return host.substring(1, idx2);
        }
        const idx = host.indexOf(":");
        if (idx === -1) return host;
        return host.substring(0, idx);
      }
      __name(getHostname, "getHostname");
      function getServerName(host) {
        if (!host) {
          return null;
        }
        assert.strictEqual(typeof host, "string");
        const servername = getHostname(host);
        if (net.isIP(servername)) {
          return "";
        }
        return servername;
      }
      __name(getServerName, "getServerName");
      function deepClone(obj) {
        return JSON.parse(JSON.stringify(obj));
      }
      __name(deepClone, "deepClone");
      function isAsyncIterable(obj) {
        return !!(
          obj != null && typeof obj[Symbol.asyncIterator] === "function"
        );
      }
      __name(isAsyncIterable, "isAsyncIterable");
      function isIterable(obj) {
        return !!(
          obj != null &&
          (typeof obj[Symbol.iterator] === "function" ||
            typeof obj[Symbol.asyncIterator] === "function")
        );
      }
      __name(isIterable, "isIterable");
      function bodyLength(body) {
        if (body == null) {
          return 0;
        } else if (isStream(body)) {
          const state = body._readableState;
          return state &&
            state.objectMode === false &&
            state.ended === true &&
            Number.isFinite(state.length)
            ? state.length
            : null;
        } else if (isBlobLike(body)) {
          return body.size != null ? body.size : null;
        } else if (isBuffer(body)) {
          return body.byteLength;
        }
        return null;
      }
      __name(bodyLength, "bodyLength");
      function isDestroyed(stream2) {
        return !stream2 || !!(stream2.destroyed || stream2[kDestroyed]);
      }
      __name(isDestroyed, "isDestroyed");
      function isReadableAborted(stream2) {
        const state = stream2 && stream2._readableState;
        return isDestroyed(stream2) && state && !state.endEmitted;
      }
      __name(isReadableAborted, "isReadableAborted");
      function destroy(stream2, err) {
        if (stream2 == null || !isStream(stream2) || isDestroyed(stream2)) {
          return;
        }
        if (typeof stream2.destroy === "function") {
          if (Object.getPrototypeOf(stream2).constructor === IncomingMessage) {
            stream2.socket = null;
          }
          stream2.destroy(err);
        } else if (err) {
          process.nextTick(
            (stream3, err2) => {
              stream3.emit("error", err2);
            },
            stream2,
            err,
          );
        }
        if (stream2.destroyed !== true) {
          stream2[kDestroyed] = true;
        }
      }
      __name(destroy, "destroy");
      var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
      function parseKeepAliveTimeout(val) {
        const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
        return m ? parseInt(m[1], 10) * 1e3 : null;
      }
      __name(parseKeepAliveTimeout, "parseKeepAliveTimeout");
      function headerNameToString(value) {
        return headerNameLowerCasedRecord[value] || value.toLowerCase();
      }
      __name(headerNameToString, "headerNameToString");
      function parseHeaders(headers, obj = {}) {
        if (!Array.isArray(headers)) return headers;
        for (let i = 0; i < headers.length; i += 2) {
          const key = headers[i].toString().toLowerCase();
          let val = obj[key];
          if (!val) {
            if (Array.isArray(headers[i + 1])) {
              obj[key] = headers[i + 1].map((x) => x.toString("utf8"));
            } else {
              obj[key] = headers[i + 1].toString("utf8");
            }
          } else {
            if (!Array.isArray(val)) {
              val = [val];
              obj[key] = val;
            }
            val.push(headers[i + 1].toString("utf8"));
          }
        }
        if ("content-length" in obj && "content-disposition" in obj) {
          obj["content-disposition"] = Buffer.from(
            obj["content-disposition"],
          ).toString("latin1");
        }
        return obj;
      }
      __name(parseHeaders, "parseHeaders");
      function parseRawHeaders(headers) {
        const ret = [];
        let hasContentLength = false;
        let contentDispositionIdx = -1;
        for (let n = 0; n < headers.length; n += 2) {
          const key = headers[n + 0].toString();
          const val = headers[n + 1].toString("utf8");
          if (
            key.length === 14 &&
            (key === "content-length" || key.toLowerCase() === "content-length")
          ) {
            ret.push(key, val);
            hasContentLength = true;
          } else if (
            key.length === 19 &&
            (key === "content-disposition" ||
              key.toLowerCase() === "content-disposition")
          ) {
            contentDispositionIdx = ret.push(key, val) - 1;
          } else {
            ret.push(key, val);
          }
        }
        if (hasContentLength && contentDispositionIdx !== -1) {
          ret[contentDispositionIdx] = Buffer.from(
            ret[contentDispositionIdx],
          ).toString("latin1");
        }
        return ret;
      }
      __name(parseRawHeaders, "parseRawHeaders");
      function isBuffer(buffer) {
        return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
      }
      __name(isBuffer, "isBuffer");
      function validateHandler(handler, method, upgrade) {
        if (!handler || typeof handler !== "object") {
          throw new InvalidArgumentError("handler must be an object");
        }
        if (typeof handler.onConnect !== "function") {
          throw new InvalidArgumentError("invalid onConnect method");
        }
        if (typeof handler.onError !== "function") {
          throw new InvalidArgumentError("invalid onError method");
        }
        if (
          typeof handler.onBodySent !== "function" &&
          handler.onBodySent !== void 0
        ) {
          throw new InvalidArgumentError("invalid onBodySent method");
        }
        if (upgrade || method === "CONNECT") {
          if (typeof handler.onUpgrade !== "function") {
            throw new InvalidArgumentError("invalid onUpgrade method");
          }
        } else {
          if (typeof handler.onHeaders !== "function") {
            throw new InvalidArgumentError("invalid onHeaders method");
          }
          if (typeof handler.onData !== "function") {
            throw new InvalidArgumentError("invalid onData method");
          }
          if (typeof handler.onComplete !== "function") {
            throw new InvalidArgumentError("invalid onComplete method");
          }
        }
      }
      __name(validateHandler, "validateHandler");
      function isDisturbed(body) {
        return !!(
          body &&
          (stream.isDisturbed
            ? stream.isDisturbed(body) || body[kBodyUsed]
            : body[kBodyUsed] ||
              body.readableDidRead ||
              (body._readableState && body._readableState.dataEmitted) ||
              isReadableAborted(body))
        );
      }
      __name(isDisturbed, "isDisturbed");
      function isErrored(body) {
        return !!(
          body &&
          (stream.isErrored
            ? stream.isErrored(body)
            : /state: 'errored'/.test(nodeUtil.inspect(body)))
        );
      }
      __name(isErrored, "isErrored");
      function isReadable(body) {
        return !!(
          body &&
          (stream.isReadable
            ? stream.isReadable(body)
            : /state: 'readable'/.test(nodeUtil.inspect(body)))
        );
      }
      __name(isReadable, "isReadable");
      function getSocketInfo(socket) {
        return {
          localAddress: socket.localAddress,
          localPort: socket.localPort,
          remoteAddress: socket.remoteAddress,
          remotePort: socket.remotePort,
          remoteFamily: socket.remoteFamily,
          timeout: socket.timeout,
          bytesWritten: socket.bytesWritten,
          bytesRead: socket.bytesRead,
        };
      }
      __name(getSocketInfo, "getSocketInfo");
      async function* convertIterableToBuffer(iterable) {
        for await (const chunk of iterable) {
          yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
        }
      }
      __name(convertIterableToBuffer, "convertIterableToBuffer");
      var ReadableStream;
      function ReadableStreamFrom(iterable) {
        if (!ReadableStream) {
          ReadableStream = __require("stream/web").ReadableStream;
        }
        if (ReadableStream.from) {
          return ReadableStream.from(convertIterableToBuffer(iterable));
        }
        let iterator;
        return new ReadableStream(
          {
            async start() {
              iterator = iterable[Symbol.asyncIterator]();
            },
            async pull(controller) {
              const { done, value } = await iterator.next();
              if (done) {
                queueMicrotask(() => {
                  controller.close();
                });
              } else {
                const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
                controller.enqueue(new Uint8Array(buf));
              }
              return controller.desiredSize > 0;
            },
            async cancel(reason) {
              await iterator.return();
            },
          },
          0,
        );
      }
      __name(ReadableStreamFrom, "ReadableStreamFrom");
      function isFormDataLike(object) {
        return (
          object &&
          typeof object === "object" &&
          typeof object.append === "function" &&
          typeof object.delete === "function" &&
          typeof object.get === "function" &&
          typeof object.getAll === "function" &&
          typeof object.has === "function" &&
          typeof object.set === "function" &&
          object[Symbol.toStringTag] === "FormData"
        );
      }
      __name(isFormDataLike, "isFormDataLike");
      function throwIfAborted(signal) {
        if (!signal) {
          return;
        }
        if (typeof signal.throwIfAborted === "function") {
          signal.throwIfAborted();
        } else {
          if (signal.aborted) {
            const err = new Error("The operation was aborted");
            err.name = "AbortError";
            throw err;
          }
        }
      }
      __name(throwIfAborted, "throwIfAborted");
      function addAbortListener(signal, listener) {
        if ("addEventListener" in signal) {
          signal.addEventListener("abort", listener, { once: true });
          return () => signal.removeEventListener("abort", listener);
        }
        signal.addListener("abort", listener);
        return () => signal.removeListener("abort", listener);
      }
      __name(addAbortListener, "addAbortListener");
      var hasToWellFormed = !!String.prototype.toWellFormed;
      function toUSVString(val) {
        if (hasToWellFormed) {
          return `${val}`.toWellFormed();
        } else if (nodeUtil.toUSVString) {
          return nodeUtil.toUSVString(val);
        }
        return `${val}`;
      }
      __name(toUSVString, "toUSVString");
      function parseRangeHeader(range) {
        if (range == null || range === "")
          return { start: 0, end: null, size: null };
        const m = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
        return m
          ? {
              start: parseInt(m[1]),
              end: m[2] ? parseInt(m[2]) : null,
              size: m[3] ? parseInt(m[3]) : null,
            }
          : null;
      }
      __name(parseRangeHeader, "parseRangeHeader");
      var kEnumerableProperty = /* @__PURE__ */ Object.create(null);
      kEnumerableProperty.enumerable = true;
      module.exports = {
        kEnumerableProperty,
        nop,
        isDisturbed,
        isErrored,
        isReadable,
        toUSVString,
        isReadableAborted,
        isBlobLike,
        parseOrigin,
        parseURL,
        getServerName,
        isStream,
        isIterable,
        isAsyncIterable,
        isDestroyed,
        headerNameToString,
        parseRawHeaders,
        parseHeaders,
        parseKeepAliveTimeout,
        destroy,
        bodyLength,
        deepClone,
        ReadableStreamFrom,
        isBuffer,
        validateHandler,
        getSocketInfo,
        isFormDataLike,
        buildURL,
        throwIfAborted,
        addAbortListener,
        parseRangeHeader,
        nodeMajor,
        nodeMinor,
        nodeHasAutoSelectFamily:
          nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 13),
        safeHTTPMethods: ["GET", "HEAD", "OPTIONS", "TRACE"],
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/timers.js
  var require_timers = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/timers.js"(
      exports,
      module,
    ) {
      "use strict";
      var fastNow = Date.now();
      var fastNowTimeout;
      var fastTimers = [];
      function onTimeout() {
        fastNow = Date.now();
        let len = fastTimers.length;
        let idx = 0;
        while (idx < len) {
          const timer = fastTimers[idx];
          if (timer.state === 0) {
            timer.state = fastNow + timer.delay;
          } else if (timer.state > 0 && fastNow >= timer.state) {
            timer.state = -1;
            timer.callback(timer.opaque);
          }
          if (timer.state === -1) {
            timer.state = -2;
            if (idx !== len - 1) {
              fastTimers[idx] = fastTimers.pop();
            } else {
              fastTimers.pop();
            }
            len -= 1;
          } else {
            idx += 1;
          }
        }
        if (fastTimers.length > 0) {
          refreshTimeout();
        }
      }
      __name(onTimeout, "onTimeout");
      function refreshTimeout() {
        if (fastNowTimeout && fastNowTimeout.refresh) {
          fastNowTimeout.refresh();
        } else {
          clearTimeout(fastNowTimeout);
          fastNowTimeout = setTimeout(onTimeout, 1e3);
          if (fastNowTimeout.unref) {
            fastNowTimeout.unref();
          }
        }
      }
      __name(refreshTimeout, "refreshTimeout");
      var Timeout = class {
        static {
          __name(this, "Timeout");
        }
        constructor(callback, delay, opaque) {
          this.callback = callback;
          this.delay = delay;
          this.opaque = opaque;
          this.state = -2;
          this.refresh();
        }
        refresh() {
          if (this.state === -2) {
            fastTimers.push(this);
            if (!fastNowTimeout || fastTimers.length === 1) {
              refreshTimeout();
            }
          }
          this.state = 0;
        }
        clear() {
          this.state = -1;
        }
      };
      module.exports = {
        setTimeout(callback, delay, opaque) {
          return delay < 1e3
            ? setTimeout(callback, delay, opaque)
            : new Timeout(callback, delay, opaque);
        },
        clearTimeout(timeout) {
          if (timeout instanceof Timeout) {
            timeout.clear();
          } else {
            clearTimeout(timeout);
          }
        },
      };
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/streamsearch/sbmh.js
  var require_sbmh = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/streamsearch/sbmh.js"(
      exports,
      module,
    ) {
      "use strict";
      var EventEmitter = __require("node:events").EventEmitter;
      var inherits = __require("node:util").inherits;
      function SBMH(needle) {
        if (typeof needle === "string") {
          needle = Buffer.from(needle);
        }
        if (!Buffer.isBuffer(needle)) {
          throw new TypeError("The needle has to be a String or a Buffer.");
        }
        const needleLength = needle.length;
        if (needleLength === 0) {
          throw new Error("The needle cannot be an empty String/Buffer.");
        }
        if (needleLength > 256) {
          throw new Error("The needle cannot have a length bigger than 256.");
        }
        this.maxMatches = Infinity;
        this.matches = 0;
        this._occ = new Array(256).fill(needleLength);
        this._lookbehind_size = 0;
        this._needle = needle;
        this._bufpos = 0;
        this._lookbehind = Buffer.alloc(needleLength);
        for (var i = 0; i < needleLength - 1; ++i) {
          this._occ[needle[i]] = needleLength - 1 - i;
        }
      }
      __name(SBMH, "SBMH");
      inherits(SBMH, EventEmitter);
      SBMH.prototype.reset = function () {
        this._lookbehind_size = 0;
        this.matches = 0;
        this._bufpos = 0;
      };
      SBMH.prototype.push = function (chunk, pos) {
        if (!Buffer.isBuffer(chunk)) {
          chunk = Buffer.from(chunk, "binary");
        }
        const chlen = chunk.length;
        this._bufpos = pos || 0;
        let r;
        while (r !== chlen && this.matches < this.maxMatches) {
          r = this._sbmh_feed(chunk);
        }
        return r;
      };
      SBMH.prototype._sbmh_feed = function (data) {
        const len = data.length;
        const needle = this._needle;
        const needleLength = needle.length;
        const lastNeedleChar = needle[needleLength - 1];
        let pos = -this._lookbehind_size;
        let ch;
        if (pos < 0) {
          while (pos < 0 && pos <= len - needleLength) {
            ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
            if (
              ch === lastNeedleChar &&
              this._sbmh_memcmp(data, pos, needleLength - 1)
            ) {
              this._lookbehind_size = 0;
              ++this.matches;
              this.emit("info", true);
              return (this._bufpos = pos + needleLength);
            }
            pos += this._occ[ch];
          }
          if (pos < 0) {
            while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) {
              ++pos;
            }
          }
          if (pos >= 0) {
            this.emit(
              "info",
              false,
              this._lookbehind,
              0,
              this._lookbehind_size,
            );
            this._lookbehind_size = 0;
          } else {
            const bytesToCutOff = this._lookbehind_size + pos;
            if (bytesToCutOff > 0) {
              this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
            }
            this._lookbehind.copy(
              this._lookbehind,
              0,
              bytesToCutOff,
              this._lookbehind_size - bytesToCutOff,
            );
            this._lookbehind_size -= bytesToCutOff;
            data.copy(this._lookbehind, this._lookbehind_size);
            this._lookbehind_size += len;
            this._bufpos = len;
            return len;
          }
        }
        pos += (pos >= 0) * this._bufpos;
        if (data.indexOf(needle, pos) !== -1) {
          pos = data.indexOf(needle, pos);
          ++this.matches;
          if (pos > 0) {
            this.emit("info", true, data, this._bufpos, pos);
          } else {
            this.emit("info", true);
          }
          return (this._bufpos = pos + needleLength);
        } else {
          pos = len - needleLength;
        }
        while (
          pos < len &&
          (data[pos] !== needle[0] ||
            Buffer.compare(
              data.subarray(pos, pos + len - pos),
              needle.subarray(0, len - pos),
            ) !== 0)
        ) {
          ++pos;
        }
        if (pos < len) {
          data.copy(this._lookbehind, 0, pos, pos + (len - pos));
          this._lookbehind_size = len - pos;
        }
        if (pos > 0) {
          this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
        }
        this._bufpos = len;
        return len;
      };
      SBMH.prototype._sbmh_lookup_char = function (data, pos) {
        return pos < 0
          ? this._lookbehind[this._lookbehind_size + pos]
          : data[pos];
      };
      SBMH.prototype._sbmh_memcmp = function (data, pos, len) {
        for (var i = 0; i < len; ++i) {
          if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) {
            return false;
          }
        }
        return true;
      };
      module.exports = SBMH;
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js
  var require_PartStream = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js"(
      exports,
      module,
    ) {
      "use strict";
      var inherits = __require("node:util").inherits;
      var ReadableStream = __require("node:stream").Readable;
      function PartStream(opts) {
        ReadableStream.call(this, opts);
      }
      __name(PartStream, "PartStream");
      inherits(PartStream, ReadableStream);
      PartStream.prototype._read = function (n) {};
      module.exports = PartStream;
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/getLimit.js
  var require_getLimit = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/getLimit.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = /* @__PURE__ */ __name(function getLimit(
        limits,
        name,
        defaultLimit,
      ) {
        if (!limits || limits[name] === void 0 || limits[name] === null) {
          return defaultLimit;
        }
        if (typeof limits[name] !== "number" || isNaN(limits[name])) {
          throw new TypeError("Limit " + name + " is not a valid number");
        }
        return limits[name];
      }, "getLimit");
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js
  var require_HeaderParser = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js"(
      exports,
      module,
    ) {
      "use strict";
      var EventEmitter = __require("node:events").EventEmitter;
      var inherits = __require("node:util").inherits;
      var getLimit = require_getLimit();
      var StreamSearch = require_sbmh();
      var B_DCRLF = Buffer.from("\r\n\r\n");
      var RE_CRLF = /\r\n/g;
      var RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
      function HeaderParser(cfg) {
        EventEmitter.call(this);
        cfg = cfg || {};
        const self2 = this;
        this.nread = 0;
        this.maxed = false;
        this.npairs = 0;
        this.maxHeaderPairs = getLimit(cfg, "maxHeaderPairs", 2e3);
        this.maxHeaderSize = getLimit(cfg, "maxHeaderSize", 80 * 1024);
        this.buffer = "";
        this.header = {};
        this.finished = false;
        this.ss = new StreamSearch(B_DCRLF);
        this.ss.on("info", function (isMatch, data, start, end) {
          if (data && !self2.maxed) {
            if (self2.nread + end - start >= self2.maxHeaderSize) {
              end = self2.maxHeaderSize - self2.nread + start;
              self2.nread = self2.maxHeaderSize;
              self2.maxed = true;
            } else {
              self2.nread += end - start;
            }
            self2.buffer += data.toString("binary", start, end);
          }
          if (isMatch) {
            self2._finish();
          }
        });
      }
      __name(HeaderParser, "HeaderParser");
      inherits(HeaderParser, EventEmitter);
      HeaderParser.prototype.push = function (data) {
        const r = this.ss.push(data);
        if (this.finished) {
          return r;
        }
      };
      HeaderParser.prototype.reset = function () {
        this.finished = false;
        this.buffer = "";
        this.header = {};
        this.ss.reset();
      };
      HeaderParser.prototype._finish = function () {
        if (this.buffer) {
          this._parseHeader();
        }
        this.ss.matches = this.ss.maxMatches;
        const header = this.header;
        this.header = {};
        this.buffer = "";
        this.finished = true;
        this.nread = this.npairs = 0;
        this.maxed = false;
        this.emit("header", header);
      };
      HeaderParser.prototype._parseHeader = function () {
        if (this.npairs === this.maxHeaderPairs) {
          return;
        }
        const lines = this.buffer.split(RE_CRLF);
        const len = lines.length;
        let m, h;
        for (var i = 0; i < len; ++i) {
          if (lines[i].length === 0) {
            continue;
          }
          if (lines[i][0] === "	" || lines[i][0] === " ") {
            if (h) {
              this.header[h][this.header[h].length - 1] += lines[i];
              continue;
            }
          }
          const posColon = lines[i].indexOf(":");
          if (posColon === -1 || posColon === 0) {
            return;
          }
          m = RE_HDR.exec(lines[i]);
          h = m[1].toLowerCase();
          this.header[h] = this.header[h] || [];
          this.header[h].push(m[2] || "");
          if (++this.npairs === this.maxHeaderPairs) {
            break;
          }
        }
      };
      module.exports = HeaderParser;
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js
  var require_Dicer = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js"(
      exports,
      module,
    ) {
      "use strict";
      var WritableStream = __require("node:stream").Writable;
      var inherits = __require("node:util").inherits;
      var StreamSearch = require_sbmh();
      var PartStream = require_PartStream();
      var HeaderParser = require_HeaderParser();
      var DASH = 45;
      var B_ONEDASH = Buffer.from("-");
      var B_CRLF = Buffer.from("\r\n");
      var EMPTY_FN = /* @__PURE__ */ __name(function () {}, "EMPTY_FN");
      function Dicer(cfg) {
        if (!(this instanceof Dicer)) {
          return new Dicer(cfg);
        }
        WritableStream.call(this, cfg);
        if (!cfg || (!cfg.headerFirst && typeof cfg.boundary !== "string")) {
          throw new TypeError("Boundary required");
        }
        if (typeof cfg.boundary === "string") {
          this.setBoundary(cfg.boundary);
        } else {
          this._bparser = void 0;
        }
        this._headerFirst = cfg.headerFirst;
        this._dashes = 0;
        this._parts = 0;
        this._finished = false;
        this._realFinish = false;
        this._isPreamble = true;
        this._justMatched = false;
        this._firstWrite = true;
        this._inHeader = true;
        this._part = void 0;
        this._cb = void 0;
        this._ignoreData = false;
        this._partOpts = { highWaterMark: cfg.partHwm };
        this._pause = false;
        const self2 = this;
        this._hparser = new HeaderParser(cfg);
        this._hparser.on("header", function (header) {
          self2._inHeader = false;
          self2._part.emit("header", header);
        });
      }
      __name(Dicer, "Dicer");
      inherits(Dicer, WritableStream);
      Dicer.prototype.emit = function (ev) {
        if (ev === "finish" && !this._realFinish) {
          if (!this._finished) {
            const self2 = this;
            process.nextTick(function () {
              self2.emit(
                "error",
                new Error("Unexpected end of multipart data"),
              );
              if (self2._part && !self2._ignoreData) {
                const type = self2._isPreamble ? "Preamble" : "Part";
                self2._part.emit(
                  "error",
                  new Error(
                    type +
                      " terminated early due to unexpected end of multipart data",
                  ),
                );
                self2._part.push(null);
                process.nextTick(function () {
                  self2._realFinish = true;
                  self2.emit("finish");
                  self2._realFinish = false;
                });
                return;
              }
              self2._realFinish = true;
              self2.emit("finish");
              self2._realFinish = false;
            });
          }
        } else {
          WritableStream.prototype.emit.apply(this, arguments);
        }
      };
      Dicer.prototype._write = function (data, encoding, cb) {
        if (!this._hparser && !this._bparser) {
          return cb();
        }
        if (this._headerFirst && this._isPreamble) {
          if (!this._part) {
            this._part = new PartStream(this._partOpts);
            if (this.listenerCount("preamble") !== 0) {
              this.emit("preamble", this._part);
            } else {
              this._ignore();
            }
          }
          const r = this._hparser.push(data);
          if (!this._inHeader && r !== void 0 && r < data.length) {
            data = data.slice(r);
          } else {
            return cb();
          }
        }
        if (this._firstWrite) {
          this._bparser.push(B_CRLF);
          this._firstWrite = false;
        }
        this._bparser.push(data);
        if (this._pause) {
          this._cb = cb;
        } else {
          cb();
        }
      };
      Dicer.prototype.reset = function () {
        this._part = void 0;
        this._bparser = void 0;
        this._hparser = void 0;
      };
      Dicer.prototype.setBoundary = function (boundary) {
        const self2 = this;
        this._bparser = new StreamSearch("\r\n--" + boundary);
        this._bparser.on("info", function (isMatch, data, start, end) {
          self2._oninfo(isMatch, data, start, end);
        });
      };
      Dicer.prototype._ignore = function () {
        if (this._part && !this._ignoreData) {
          this._ignoreData = true;
          this._part.on("error", EMPTY_FN);
          this._part.resume();
        }
      };
      Dicer.prototype._oninfo = function (isMatch, data, start, end) {
        let buf;
        const self2 = this;
        let i = 0;
        let r;
        let shouldWriteMore = true;
        if (!this._part && this._justMatched && data) {
          while (this._dashes < 2 && start + i < end) {
            if (data[start + i] === DASH) {
              ++i;
              ++this._dashes;
            } else {
              if (this._dashes) {
                buf = B_ONEDASH;
              }
              this._dashes = 0;
              break;
            }
          }
          if (this._dashes === 2) {
            if (start + i < end && this.listenerCount("trailer") !== 0) {
              this.emit("trailer", data.slice(start + i, end));
            }
            this.reset();
            this._finished = true;
            if (self2._parts === 0) {
              self2._realFinish = true;
              self2.emit("finish");
              self2._realFinish = false;
            }
          }
          if (this._dashes) {
            return;
          }
        }
        if (this._justMatched) {
          this._justMatched = false;
        }
        if (!this._part) {
          this._part = new PartStream(this._partOpts);
          this._part._read = function (n) {
            self2._unpause();
          };
          if (this._isPreamble && this.listenerCount("preamble") !== 0) {
            this.emit("preamble", this._part);
          } else if (
            this._isPreamble !== true &&
            this.listenerCount("part") !== 0
          ) {
            this.emit("part", this._part);
          } else {
            this._ignore();
          }
          if (!this._isPreamble) {
            this._inHeader = true;
          }
        }
        if (data && start < end && !this._ignoreData) {
          if (this._isPreamble || !this._inHeader) {
            if (buf) {
              shouldWriteMore = this._part.push(buf);
            }
            shouldWriteMore = this._part.push(data.slice(start, end));
            if (!shouldWriteMore) {
              this._pause = true;
            }
          } else if (!this._isPreamble && this._inHeader) {
            if (buf) {
              this._hparser.push(buf);
            }
            r = this._hparser.push(data.slice(start, end));
            if (!this._inHeader && r !== void 0 && r < end) {
              this._oninfo(false, data, start + r, end);
            }
          }
        }
        if (isMatch) {
          this._hparser.reset();
          if (this._isPreamble) {
            this._isPreamble = false;
          } else {
            if (start !== end) {
              ++this._parts;
              this._part.on("end", function () {
                if (--self2._parts === 0) {
                  if (self2._finished) {
                    self2._realFinish = true;
                    self2.emit("finish");
                    self2._realFinish = false;
                  } else {
                    self2._unpause();
                  }
                }
              });
            }
          }
          this._part.push(null);
          this._part = void 0;
          this._ignoreData = false;
          this._justMatched = true;
          this._dashes = 0;
        }
      };
      Dicer.prototype._unpause = function () {
        if (!this._pause) {
          return;
        }
        this._pause = false;
        if (this._cb) {
          const cb = this._cb;
          this._cb = void 0;
          cb();
        }
      };
      module.exports = Dicer;
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/decodeText.js
  var require_decodeText = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/decodeText.js"(
      exports,
      module,
    ) {
      "use strict";
      var utf8Decoder = new TextDecoder("utf-8");
      var textDecoders = /* @__PURE__ */ new Map([
        ["utf-8", utf8Decoder],
        ["utf8", utf8Decoder],
      ]);
      function getDecoder(charset) {
        let lc;
        while (true) {
          switch (charset) {
            case "utf-8":
            case "utf8":
              return decoders.utf8;
            case "latin1":
            case "ascii":
            // TODO: Make these a separate, strict decoder?
            case "us-ascii":
            case "iso-8859-1":
            case "iso8859-1":
            case "iso88591":
            case "iso_8859-1":
            case "windows-1252":
            case "iso_8859-1:1987":
            case "cp1252":
            case "x-cp1252":
              return decoders.latin1;
            case "utf16le":
            case "utf-16le":
            case "ucs2":
            case "ucs-2":
              return decoders.utf16le;
            case "base64":
              return decoders.base64;
            default:
              if (lc === void 0) {
                lc = true;
                charset = charset.toLowerCase();
                continue;
              }
              return decoders.other.bind(charset);
          }
        }
      }
      __name(getDecoder, "getDecoder");
      var decoders = {
        utf8: /* @__PURE__ */ __name((data, sourceEncoding) => {
          if (data.length === 0) {
            return "";
          }
          if (typeof data === "string") {
            data = Buffer.from(data, sourceEncoding);
          }
          return data.utf8Slice(0, data.length);
        }, "utf8"),
        latin1: /* @__PURE__ */ __name((data, sourceEncoding) => {
          if (data.length === 0) {
            return "";
          }
          if (typeof data === "string") {
            return data;
          }
          return data.latin1Slice(0, data.length);
        }, "latin1"),
        utf16le: /* @__PURE__ */ __name((data, sourceEncoding) => {
          if (data.length === 0) {
            return "";
          }
          if (typeof data === "string") {
            data = Buffer.from(data, sourceEncoding);
          }
          return data.ucs2Slice(0, data.length);
        }, "utf16le"),
        base64: /* @__PURE__ */ __name((data, sourceEncoding) => {
          if (data.length === 0) {
            return "";
          }
          if (typeof data === "string") {
            data = Buffer.from(data, sourceEncoding);
          }
          return data.base64Slice(0, data.length);
        }, "base64"),
        other: /* @__PURE__ */ __name((data, sourceEncoding) => {
          if (data.length === 0) {
            return "";
          }
          if (typeof data === "string") {
            data = Buffer.from(data, sourceEncoding);
          }
          if (textDecoders.has(exports.toString())) {
            try {
              return textDecoders.get(exports).decode(data);
            } catch {}
          }
          return typeof data === "string" ? data : data.toString();
        }, "other"),
      };
      function decodeText(text4, sourceEncoding, destEncoding) {
        if (text4) {
          return getDecoder(destEncoding)(text4, sourceEncoding);
        }
        return text4;
      }
      __name(decodeText, "decodeText");
      module.exports = decodeText;
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/parseParams.js
  var require_parseParams = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/parseParams.js"(
      exports,
      module,
    ) {
      "use strict";
      var decodeText = require_decodeText();
      var RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
      var EncodedLookup = {
        "%00": "\0",
        "%01": "",
        "%02": "",
        "%03": "",
        "%04": "",
        "%05": "",
        "%06": "",
        "%07": "\x07",
        "%08": "\b",
        "%09": "	",
        "%0a": "\n",
        "%0A": "\n",
        "%0b": "\v",
        "%0B": "\v",
        "%0c": "\f",
        "%0C": "\f",
        "%0d": "\r",
        "%0D": "\r",
        "%0e": "",
        "%0E": "",
        "%0f": "",
        "%0F": "",
        "%10": "",
        "%11": "",
        "%12": "",
        "%13": "",
        "%14": "",
        "%15": "",
        "%16": "",
        "%17": "",
        "%18": "",
        "%19": "",
        "%1a": "",
        "%1A": "",
        "%1b": "\x1B",
        "%1B": "\x1B",
        "%1c": "",
        "%1C": "",
        "%1d": "",
        "%1D": "",
        "%1e": "",
        "%1E": "",
        "%1f": "",
        "%1F": "",
        "%20": " ",
        "%21": "!",
        "%22": '"',
        "%23": "#",
        "%24": "$",
        "%25": "%",
        "%26": "&",
        "%27": "'",
        "%28": "(",
        "%29": ")",
        "%2a": "*",
        "%2A": "*",
        "%2b": "+",
        "%2B": "+",
        "%2c": ",",
        "%2C": ",",
        "%2d": "-",
        "%2D": "-",
        "%2e": ".",
        "%2E": ".",
        "%2f": "/",
        "%2F": "/",
        "%30": "0",
        "%31": "1",
        "%32": "2",
        "%33": "3",
        "%34": "4",
        "%35": "5",
        "%36": "6",
        "%37": "7",
        "%38": "8",
        "%39": "9",
        "%3a": ":",
        "%3A": ":",
        "%3b": ";",
        "%3B": ";",
        "%3c": "<",
        "%3C": "<",
        "%3d": "=",
        "%3D": "=",
        "%3e": ">",
        "%3E": ">",
        "%3f": "?",
        "%3F": "?",
        "%40": "@",
        "%41": "A",
        "%42": "B",
        "%43": "C",
        "%44": "D",
        "%45": "E",
        "%46": "F",
        "%47": "G",
        "%48": "H",
        "%49": "I",
        "%4a": "J",
        "%4A": "J",
        "%4b": "K",
        "%4B": "K",
        "%4c": "L",
        "%4C": "L",
        "%4d": "M",
        "%4D": "M",
        "%4e": "N",
        "%4E": "N",
        "%4f": "O",
        "%4F": "O",
        "%50": "P",
        "%51": "Q",
        "%52": "R",
        "%53": "S",
        "%54": "T",
        "%55": "U",
        "%56": "V",
        "%57": "W",
        "%58": "X",
        "%59": "Y",
        "%5a": "Z",
        "%5A": "Z",
        "%5b": "[",
        "%5B": "[",
        "%5c": "\\",
        "%5C": "\\",
        "%5d": "]",
        "%5D": "]",
        "%5e": "^",
        "%5E": "^",
        "%5f": "_",
        "%5F": "_",
        "%60": "`",
        "%61": "a",
        "%62": "b",
        "%63": "c",
        "%64": "d",
        "%65": "e",
        "%66": "f",
        "%67": "g",
        "%68": "h",
        "%69": "i",
        "%6a": "j",
        "%6A": "j",
        "%6b": "k",
        "%6B": "k",
        "%6c": "l",
        "%6C": "l",
        "%6d": "m",
        "%6D": "m",
        "%6e": "n",
        "%6E": "n",
        "%6f": "o",
        "%6F": "o",
        "%70": "p",
        "%71": "q",
        "%72": "r",
        "%73": "s",
        "%74": "t",
        "%75": "u",
        "%76": "v",
        "%77": "w",
        "%78": "x",
        "%79": "y",
        "%7a": "z",
        "%7A": "z",
        "%7b": "{",
        "%7B": "{",
        "%7c": "|",
        "%7C": "|",
        "%7d": "}",
        "%7D": "}",
        "%7e": "~",
        "%7E": "~",
        "%7f": "\x7F",
        "%7F": "\x7F",
        "%80": "\x80",
        "%81": "\x81",
        "%82": "\x82",
        "%83": "\x83",
        "%84": "\x84",
        "%85": "\x85",
        "%86": "\x86",
        "%87": "\x87",
        "%88": "\x88",
        "%89": "\x89",
        "%8a": "\x8A",
        "%8A": "\x8A",
        "%8b": "\x8B",
        "%8B": "\x8B",
        "%8c": "\x8C",
        "%8C": "\x8C",
        "%8d": "\x8D",
        "%8D": "\x8D",
        "%8e": "\x8E",
        "%8E": "\x8E",
        "%8f": "\x8F",
        "%8F": "\x8F",
        "%90": "\x90",
        "%91": "\x91",
        "%92": "\x92",
        "%93": "\x93",
        "%94": "\x94",
        "%95": "\x95",
        "%96": "\x96",
        "%97": "\x97",
        "%98": "\x98",
        "%99": "\x99",
        "%9a": "\x9A",
        "%9A": "\x9A",
        "%9b": "\x9B",
        "%9B": "\x9B",
        "%9c": "\x9C",
        "%9C": "\x9C",
        "%9d": "\x9D",
        "%9D": "\x9D",
        "%9e": "\x9E",
        "%9E": "\x9E",
        "%9f": "\x9F",
        "%9F": "\x9F",
        "%a0": "\xA0",
        "%A0": "\xA0",
        "%a1": "\xA1",
        "%A1": "\xA1",
        "%a2": "\xA2",
        "%A2": "\xA2",
        "%a3": "\xA3",
        "%A3": "\xA3",
        "%a4": "\xA4",
        "%A4": "\xA4",
        "%a5": "\xA5",
        "%A5": "\xA5",
        "%a6": "\xA6",
        "%A6": "\xA6",
        "%a7": "\xA7",
        "%A7": "\xA7",
        "%a8": "\xA8",
        "%A8": "\xA8",
        "%a9": "\xA9",
        "%A9": "\xA9",
        "%aa": "\xAA",
        "%Aa": "\xAA",
        "%aA": "\xAA",
        "%AA": "\xAA",
        "%ab": "\xAB",
        "%Ab": "\xAB",
        "%aB": "\xAB",
        "%AB": "\xAB",
        "%ac": "\xAC",
        "%Ac": "\xAC",
        "%aC": "\xAC",
        "%AC": "\xAC",
        "%ad": "\xAD",
        "%Ad": "\xAD",
        "%aD": "\xAD",
        "%AD": "\xAD",
        "%ae": "\xAE",
        "%Ae": "\xAE",
        "%aE": "\xAE",
        "%AE": "\xAE",
        "%af": "\xAF",
        "%Af": "\xAF",
        "%aF": "\xAF",
        "%AF": "\xAF",
        "%b0": "\xB0",
        "%B0": "\xB0",
        "%b1": "\xB1",
        "%B1": "\xB1",
        "%b2": "\xB2",
        "%B2": "\xB2",
        "%b3": "\xB3",
        "%B3": "\xB3",
        "%b4": "\xB4",
        "%B4": "\xB4",
        "%b5": "\xB5",
        "%B5": "\xB5",
        "%b6": "\xB6",
        "%B6": "\xB6",
        "%b7": "\xB7",
        "%B7": "\xB7",
        "%b8": "\xB8",
        "%B8": "\xB8",
        "%b9": "\xB9",
        "%B9": "\xB9",
        "%ba": "\xBA",
        "%Ba": "\xBA",
        "%bA": "\xBA",
        "%BA": "\xBA",
        "%bb": "\xBB",
        "%Bb": "\xBB",
        "%bB": "\xBB",
        "%BB": "\xBB",
        "%bc": "\xBC",
        "%Bc": "\xBC",
        "%bC": "\xBC",
        "%BC": "\xBC",
        "%bd": "\xBD",
        "%Bd": "\xBD",
        "%bD": "\xBD",
        "%BD": "\xBD",
        "%be": "\xBE",
        "%Be": "\xBE",
        "%bE": "\xBE",
        "%BE": "\xBE",
        "%bf": "\xBF",
        "%Bf": "\xBF",
        "%bF": "\xBF",
        "%BF": "\xBF",
        "%c0": "\xC0",
        "%C0": "\xC0",
        "%c1": "\xC1",
        "%C1": "\xC1",
        "%c2": "\xC2",
        "%C2": "\xC2",
        "%c3": "\xC3",
        "%C3": "\xC3",
        "%c4": "\xC4",
        "%C4": "\xC4",
        "%c5": "\xC5",
        "%C5": "\xC5",
        "%c6": "\xC6",
        "%C6": "\xC6",
        "%c7": "\xC7",
        "%C7": "\xC7",
        "%c8": "\xC8",
        "%C8": "\xC8",
        "%c9": "\xC9",
        "%C9": "\xC9",
        "%ca": "\xCA",
        "%Ca": "\xCA",
        "%cA": "\xCA",
        "%CA": "\xCA",
        "%cb": "\xCB",
        "%Cb": "\xCB",
        "%cB": "\xCB",
        "%CB": "\xCB",
        "%cc": "\xCC",
        "%Cc": "\xCC",
        "%cC": "\xCC",
        "%CC": "\xCC",
        "%cd": "\xCD",
        "%Cd": "\xCD",
        "%cD": "\xCD",
        "%CD": "\xCD",
        "%ce": "\xCE",
        "%Ce": "\xCE",
        "%cE": "\xCE",
        "%CE": "\xCE",
        "%cf": "\xCF",
        "%Cf": "\xCF",
        "%cF": "\xCF",
        "%CF": "\xCF",
        "%d0": "\xD0",
        "%D0": "\xD0",
        "%d1": "\xD1",
        "%D1": "\xD1",
        "%d2": "\xD2",
        "%D2": "\xD2",
        "%d3": "\xD3",
        "%D3": "\xD3",
        "%d4": "\xD4",
        "%D4": "\xD4",
        "%d5": "\xD5",
        "%D5": "\xD5",
        "%d6": "\xD6",
        "%D6": "\xD6",
        "%d7": "\xD7",
        "%D7": "\xD7",
        "%d8": "\xD8",
        "%D8": "\xD8",
        "%d9": "\xD9",
        "%D9": "\xD9",
        "%da": "\xDA",
        "%Da": "\xDA",
        "%dA": "\xDA",
        "%DA": "\xDA",
        "%db": "\xDB",
        "%Db": "\xDB",
        "%dB": "\xDB",
        "%DB": "\xDB",
        "%dc": "\xDC",
        "%Dc": "\xDC",
        "%dC": "\xDC",
        "%DC": "\xDC",
        "%dd": "\xDD",
        "%Dd": "\xDD",
        "%dD": "\xDD",
        "%DD": "\xDD",
        "%de": "\xDE",
        "%De": "\xDE",
        "%dE": "\xDE",
        "%DE": "\xDE",
        "%df": "\xDF",
        "%Df": "\xDF",
        "%dF": "\xDF",
        "%DF": "\xDF",
        "%e0": "\xE0",
        "%E0": "\xE0",
        "%e1": "\xE1",
        "%E1": "\xE1",
        "%e2": "\xE2",
        "%E2": "\xE2",
        "%e3": "\xE3",
        "%E3": "\xE3",
        "%e4": "\xE4",
        "%E4": "\xE4",
        "%e5": "\xE5",
        "%E5": "\xE5",
        "%e6": "\xE6",
        "%E6": "\xE6",
        "%e7": "\xE7",
        "%E7": "\xE7",
        "%e8": "\xE8",
        "%E8": "\xE8",
        "%e9": "\xE9",
        "%E9": "\xE9",
        "%ea": "\xEA",
        "%Ea": "\xEA",
        "%eA": "\xEA",
        "%EA": "\xEA",
        "%eb": "\xEB",
        "%Eb": "\xEB",
        "%eB": "\xEB",
        "%EB": "\xEB",
        "%ec": "\xEC",
        "%Ec": "\xEC",
        "%eC": "\xEC",
        "%EC": "\xEC",
        "%ed": "\xED",
        "%Ed": "\xED",
        "%eD": "\xED",
        "%ED": "\xED",
        "%ee": "\xEE",
        "%Ee": "\xEE",
        "%eE": "\xEE",
        "%EE": "\xEE",
        "%ef": "\xEF",
        "%Ef": "\xEF",
        "%eF": "\xEF",
        "%EF": "\xEF",
        "%f0": "\xF0",
        "%F0": "\xF0",
        "%f1": "\xF1",
        "%F1": "\xF1",
        "%f2": "\xF2",
        "%F2": "\xF2",
        "%f3": "\xF3",
        "%F3": "\xF3",
        "%f4": "\xF4",
        "%F4": "\xF4",
        "%f5": "\xF5",
        "%F5": "\xF5",
        "%f6": "\xF6",
        "%F6": "\xF6",
        "%f7": "\xF7",
        "%F7": "\xF7",
        "%f8": "\xF8",
        "%F8": "\xF8",
        "%f9": "\xF9",
        "%F9": "\xF9",
        "%fa": "\xFA",
        "%Fa": "\xFA",
        "%fA": "\xFA",
        "%FA": "\xFA",
        "%fb": "\xFB",
        "%Fb": "\xFB",
        "%fB": "\xFB",
        "%FB": "\xFB",
        "%fc": "\xFC",
        "%Fc": "\xFC",
        "%fC": "\xFC",
        "%FC": "\xFC",
        "%fd": "\xFD",
        "%Fd": "\xFD",
        "%fD": "\xFD",
        "%FD": "\xFD",
        "%fe": "\xFE",
        "%Fe": "\xFE",
        "%fE": "\xFE",
        "%FE": "\xFE",
        "%ff": "\xFF",
        "%Ff": "\xFF",
        "%fF": "\xFF",
        "%FF": "\xFF",
      };
      function encodedReplacer(match) {
        return EncodedLookup[match];
      }
      __name(encodedReplacer, "encodedReplacer");
      var STATE_KEY = 0;
      var STATE_VALUE = 1;
      var STATE_CHARSET = 2;
      var STATE_LANG = 3;
      function parseParams(str) {
        const res = [];
        let state = STATE_KEY;
        let charset = "";
        let inquote = false;
        let escaping = false;
        let p = 0;
        let tmp = "";
        const len = str.length;
        for (var i = 0; i < len; ++i) {
          const char = str[i];
          if (char === "\\" && inquote) {
            if (escaping) {
              escaping = false;
            } else {
              escaping = true;
              continue;
            }
          } else if (char === '"') {
            if (!escaping) {
              if (inquote) {
                inquote = false;
                state = STATE_KEY;
              } else {
                inquote = true;
              }
              continue;
            } else {
              escaping = false;
            }
          } else {
            if (escaping && inquote) {
              tmp += "\\";
            }
            escaping = false;
            if (
              (state === STATE_CHARSET || state === STATE_LANG) &&
              char === "'"
            ) {
              if (state === STATE_CHARSET) {
                state = STATE_LANG;
                charset = tmp.substring(1);
              } else {
                state = STATE_VALUE;
              }
              tmp = "";
              continue;
            } else if (
              state === STATE_KEY &&
              (char === "*" || char === "=") &&
              res.length
            ) {
              state = char === "*" ? STATE_CHARSET : STATE_VALUE;
              res[p] = [tmp, void 0];
              tmp = "";
              continue;
            } else if (!inquote && char === ";") {
              state = STATE_KEY;
              if (charset) {
                if (tmp.length) {
                  tmp = decodeText(
                    tmp.replace(RE_ENCODED, encodedReplacer),
                    "binary",
                    charset,
                  );
                }
                charset = "";
              } else if (tmp.length) {
                tmp = decodeText(tmp, "binary", "utf8");
              }
              if (res[p] === void 0) {
                res[p] = tmp;
              } else {
                res[p][1] = tmp;
              }
              tmp = "";
              ++p;
              continue;
            } else if (!inquote && (char === " " || char === "	")) {
              continue;
            }
          }
          tmp += char;
        }
        if (charset && tmp.length) {
          tmp = decodeText(
            tmp.replace(RE_ENCODED, encodedReplacer),
            "binary",
            charset,
          );
        } else if (tmp) {
          tmp = decodeText(tmp, "binary", "utf8");
        }
        if (res[p] === void 0) {
          if (tmp) {
            res[p] = tmp;
          }
        } else {
          res[p][1] = tmp;
        }
        return res;
      }
      __name(parseParams, "parseParams");
      module.exports = parseParams;
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/basename.js
  var require_basename = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/basename.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = /* @__PURE__ */ __name(function basename(path4) {
        if (typeof path4 !== "string") {
          return "";
        }
        for (var i = path4.length - 1; i >= 0; --i) {
          switch (path4.charCodeAt(i)) {
            case 47:
            // '/'
            case 92:
              path4 = path4.slice(i + 1);
              return path4 === ".." || path4 === "." ? "" : path4;
          }
        }
        return path4 === ".." || path4 === "." ? "" : path4;
      }, "basename");
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/multipart.js
  var require_multipart = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/multipart.js"(
      exports,
      module,
    ) {
      "use strict";
      var { Readable } = __require("node:stream");
      var { inherits } = __require("node:util");
      var Dicer = require_Dicer();
      var parseParams = require_parseParams();
      var decodeText = require_decodeText();
      var basename = require_basename();
      var getLimit = require_getLimit();
      var RE_BOUNDARY = /^boundary$/i;
      var RE_FIELD = /^form-data$/i;
      var RE_CHARSET = /^charset$/i;
      var RE_FILENAME = /^filename$/i;
      var RE_NAME = /^name$/i;
      Multipart.detect = /^multipart\/form-data/i;
      function Multipart(boy, cfg) {
        let i;
        let len;
        const self2 = this;
        let boundary;
        const limits = cfg.limits;
        const isPartAFile =
          cfg.isPartAFile ||
          ((fieldName, contentType, fileName) =>
            contentType === "application/octet-stream" || fileName !== void 0);
        const parsedConType = cfg.parsedConType || [];
        const defCharset = cfg.defCharset || "utf8";
        const preservePath = cfg.preservePath;
        const fileOpts = { highWaterMark: cfg.fileHwm };
        for (i = 0, len = parsedConType.length; i < len; ++i) {
          if (
            Array.isArray(parsedConType[i]) &&
            RE_BOUNDARY.test(parsedConType[i][0])
          ) {
            boundary = parsedConType[i][1];
            break;
          }
        }
        function checkFinished() {
          if (nends === 0 && finished && !boy._done) {
            finished = false;
            self2.end();
          }
        }
        __name(checkFinished, "checkFinished");
        if (typeof boundary !== "string") {
          throw new Error("Multipart: Boundary not found");
        }
        const fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
        const fileSizeLimit = getLimit(limits, "fileSize", Infinity);
        const filesLimit = getLimit(limits, "files", Infinity);
        const fieldsLimit = getLimit(limits, "fields", Infinity);
        const partsLimit = getLimit(limits, "parts", Infinity);
        const headerPairsLimit = getLimit(limits, "headerPairs", 2e3);
        const headerSizeLimit = getLimit(limits, "headerSize", 80 * 1024);
        let nfiles = 0;
        let nfields = 0;
        let nends = 0;
        let curFile;
        let curField;
        let finished = false;
        this._needDrain = false;
        this._pause = false;
        this._cb = void 0;
        this._nparts = 0;
        this._boy = boy;
        const parserCfg = {
          boundary,
          maxHeaderPairs: headerPairsLimit,
          maxHeaderSize: headerSizeLimit,
          partHwm: fileOpts.highWaterMark,
          highWaterMark: cfg.highWaterMark,
        };
        this.parser = new Dicer(parserCfg);
        this.parser
          .on("drain", function () {
            self2._needDrain = false;
            if (self2._cb && !self2._pause) {
              const cb = self2._cb;
              self2._cb = void 0;
              cb();
            }
          })
          .on(
            "part",
            /* @__PURE__ */ __name(function onPart(part) {
              if (++self2._nparts > partsLimit) {
                self2.parser.removeListener("part", onPart);
                self2.parser.on("part", skipPart);
                boy.hitPartsLimit = true;
                boy.emit("partsLimit");
                return skipPart(part);
              }
              if (curField) {
                const field = curField;
                field.emit("end");
                field.removeAllListeners("end");
              }
              part
                .on("header", function (header) {
                  let contype;
                  let fieldname;
                  let parsed;
                  let charset;
                  let encoding;
                  let filename;
                  let nsize = 0;
                  if (header["content-type"]) {
                    parsed = parseParams(header["content-type"][0]);
                    if (parsed[0]) {
                      contype = parsed[0].toLowerCase();
                      for (i = 0, len = parsed.length; i < len; ++i) {
                        if (RE_CHARSET.test(parsed[i][0])) {
                          charset = parsed[i][1].toLowerCase();
                          break;
                        }
                      }
                    }
                  }
                  if (contype === void 0) {
                    contype = "text/plain";
                  }
                  if (charset === void 0) {
                    charset = defCharset;
                  }
                  if (header["content-disposition"]) {
                    parsed = parseParams(header["content-disposition"][0]);
                    if (!RE_FIELD.test(parsed[0])) {
                      return skipPart(part);
                    }
                    for (i = 0, len = parsed.length; i < len; ++i) {
                      if (RE_NAME.test(parsed[i][0])) {
                        fieldname = parsed[i][1];
                      } else if (RE_FILENAME.test(parsed[i][0])) {
                        filename = parsed[i][1];
                        if (!preservePath) {
                          filename = basename(filename);
                        }
                      }
                    }
                  } else {
                    return skipPart(part);
                  }
                  if (header["content-transfer-encoding"]) {
                    encoding =
                      header["content-transfer-encoding"][0].toLowerCase();
                  } else {
                    encoding = "7bit";
                  }
                  let onData, onEnd;
                  if (isPartAFile(fieldname, contype, filename)) {
                    if (nfiles === filesLimit) {
                      if (!boy.hitFilesLimit) {
                        boy.hitFilesLimit = true;
                        boy.emit("filesLimit");
                      }
                      return skipPart(part);
                    }
                    ++nfiles;
                    if (boy.listenerCount("file") === 0) {
                      self2.parser._ignore();
                      return;
                    }
                    ++nends;
                    const file = new FileStream(fileOpts);
                    curFile = file;
                    file.on("end", function () {
                      --nends;
                      self2._pause = false;
                      checkFinished();
                      if (self2._cb && !self2._needDrain) {
                        const cb = self2._cb;
                        self2._cb = void 0;
                        cb();
                      }
                    });
                    file._read = function (n) {
                      if (!self2._pause) {
                        return;
                      }
                      self2._pause = false;
                      if (self2._cb && !self2._needDrain) {
                        const cb = self2._cb;
                        self2._cb = void 0;
                        cb();
                      }
                    };
                    boy.emit(
                      "file",
                      fieldname,
                      file,
                      filename,
                      encoding,
                      contype,
                    );
                    onData = /* @__PURE__ */ __name(function (data) {
                      if ((nsize += data.length) > fileSizeLimit) {
                        const extralen = fileSizeLimit - nsize + data.length;
                        if (extralen > 0) {
                          file.push(data.slice(0, extralen));
                        }
                        file.truncated = true;
                        file.bytesRead = fileSizeLimit;
                        part.removeAllListeners("data");
                        file.emit("limit");
                        return;
                      } else if (!file.push(data)) {
                        self2._pause = true;
                      }
                      file.bytesRead = nsize;
                    }, "onData");
                    onEnd = /* @__PURE__ */ __name(function () {
                      curFile = void 0;
                      file.push(null);
                    }, "onEnd");
                  } else {
                    if (nfields === fieldsLimit) {
                      if (!boy.hitFieldsLimit) {
                        boy.hitFieldsLimit = true;
                        boy.emit("fieldsLimit");
                      }
                      return skipPart(part);
                    }
                    ++nfields;
                    ++nends;
                    let buffer = "";
                    let truncated = false;
                    curField = part;
                    onData = /* @__PURE__ */ __name(function (data) {
                      if ((nsize += data.length) > fieldSizeLimit) {
                        const extralen = fieldSizeLimit - (nsize - data.length);
                        buffer += data.toString("binary", 0, extralen);
                        truncated = true;
                        part.removeAllListeners("data");
                      } else {
                        buffer += data.toString("binary");
                      }
                    }, "onData");
                    onEnd = /* @__PURE__ */ __name(function () {
                      curField = void 0;
                      if (buffer.length) {
                        buffer = decodeText(buffer, "binary", charset);
                      }
                      boy.emit(
                        "field",
                        fieldname,
                        buffer,
                        false,
                        truncated,
                        encoding,
                        contype,
                      );
                      --nends;
                      checkFinished();
                    }, "onEnd");
                  }
                  part._readableState.sync = false;
                  part.on("data", onData);
                  part.on("end", onEnd);
                })
                .on("error", function (err) {
                  if (curFile) {
                    curFile.emit("error", err);
                  }
                });
            }, "onPart"),
          )
          .on("error", function (err) {
            boy.emit("error", err);
          })
          .on("finish", function () {
            finished = true;
            checkFinished();
          });
      }
      __name(Multipart, "Multipart");
      Multipart.prototype.write = function (chunk, cb) {
        const r = this.parser.write(chunk);
        if (r && !this._pause) {
          cb();
        } else {
          this._needDrain = !r;
          this._cb = cb;
        }
      };
      Multipart.prototype.end = function () {
        const self2 = this;
        if (self2.parser.writable) {
          self2.parser.end();
        } else if (!self2._boy._done) {
          process.nextTick(function () {
            self2._boy._done = true;
            self2._boy.emit("finish");
          });
        }
      };
      function skipPart(part) {
        part.resume();
      }
      __name(skipPart, "skipPart");
      function FileStream(opts) {
        Readable.call(this, opts);
        this.bytesRead = 0;
        this.truncated = false;
      }
      __name(FileStream, "FileStream");
      inherits(FileStream, Readable);
      FileStream.prototype._read = function (n) {};
      module.exports = Multipart;
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js
  var require_Decoder = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js"(
      exports,
      module,
    ) {
      "use strict";
      var RE_PLUS = /\+/g;
      var HEX = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0,
      ];
      function Decoder() {
        this.buffer = void 0;
      }
      __name(Decoder, "Decoder");
      Decoder.prototype.write = function (str) {
        str = str.replace(RE_PLUS, " ");
        let res = "";
        let i = 0;
        let p = 0;
        const len = str.length;
        for (; i < len; ++i) {
          if (this.buffer !== void 0) {
            if (!HEX[str.charCodeAt(i)]) {
              res += "%" + this.buffer;
              this.buffer = void 0;
              --i;
            } else {
              this.buffer += str[i];
              ++p;
              if (this.buffer.length === 2) {
                res += String.fromCharCode(parseInt(this.buffer, 16));
                this.buffer = void 0;
              }
            }
          } else if (str[i] === "%") {
            if (i > p) {
              res += str.substring(p, i);
              p = i;
            }
            this.buffer = "";
            ++p;
          }
        }
        if (p < len && this.buffer === void 0) {
          res += str.substring(p);
        }
        return res;
      };
      Decoder.prototype.reset = function () {
        this.buffer = void 0;
      };
      module.exports = Decoder;
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/urlencoded.js
  var require_urlencoded = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/urlencoded.js"(
      exports,
      module,
    ) {
      "use strict";
      var Decoder = require_Decoder();
      var decodeText = require_decodeText();
      var getLimit = require_getLimit();
      var RE_CHARSET = /^charset$/i;
      UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
      function UrlEncoded(boy, cfg) {
        const limits = cfg.limits;
        const parsedConType = cfg.parsedConType;
        this.boy = boy;
        this.fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
        this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100);
        this.fieldsLimit = getLimit(limits, "fields", Infinity);
        let charset;
        for (var i = 0, len = parsedConType.length; i < len; ++i) {
          if (
            Array.isArray(parsedConType[i]) &&
            RE_CHARSET.test(parsedConType[i][0])
          ) {
            charset = parsedConType[i][1].toLowerCase();
            break;
          }
        }
        if (charset === void 0) {
          charset = cfg.defCharset || "utf8";
        }
        this.decoder = new Decoder();
        this.charset = charset;
        this._fields = 0;
        this._state = "key";
        this._checkingBytes = true;
        this._bytesKey = 0;
        this._bytesVal = 0;
        this._key = "";
        this._val = "";
        this._keyTrunc = false;
        this._valTrunc = false;
        this._hitLimit = false;
      }
      __name(UrlEncoded, "UrlEncoded");
      UrlEncoded.prototype.write = function (data, cb) {
        if (this._fields === this.fieldsLimit) {
          if (!this.boy.hitFieldsLimit) {
            this.boy.hitFieldsLimit = true;
            this.boy.emit("fieldsLimit");
          }
          return cb();
        }
        let idxeq;
        let idxamp;
        let i;
        let p = 0;
        const len = data.length;
        while (p < len) {
          if (this._state === "key") {
            idxeq = idxamp = void 0;
            for (i = p; i < len; ++i) {
              if (!this._checkingBytes) {
                ++p;
              }
              if (data[i] === 61) {
                idxeq = i;
                break;
              } else if (data[i] === 38) {
                idxamp = i;
                break;
              }
              if (
                this._checkingBytes &&
                this._bytesKey === this.fieldNameSizeLimit
              ) {
                this._hitLimit = true;
                break;
              } else if (this._checkingBytes) {
                ++this._bytesKey;
              }
            }
            if (idxeq !== void 0) {
              if (idxeq > p) {
                this._key += this.decoder.write(
                  data.toString("binary", p, idxeq),
                );
              }
              this._state = "val";
              this._hitLimit = false;
              this._checkingBytes = true;
              this._val = "";
              this._bytesVal = 0;
              this._valTrunc = false;
              this.decoder.reset();
              p = idxeq + 1;
            } else if (idxamp !== void 0) {
              ++this._fields;
              let key;
              const keyTrunc = this._keyTrunc;
              if (idxamp > p) {
                key = this._key += this.decoder.write(
                  data.toString("binary", p, idxamp),
                );
              } else {
                key = this._key;
              }
              this._hitLimit = false;
              this._checkingBytes = true;
              this._key = "";
              this._bytesKey = 0;
              this._keyTrunc = false;
              this.decoder.reset();
              if (key.length) {
                this.boy.emit(
                  "field",
                  decodeText(key, "binary", this.charset),
                  "",
                  keyTrunc,
                  false,
                );
              }
              p = idxamp + 1;
              if (this._fields === this.fieldsLimit) {
                return cb();
              }
            } else if (this._hitLimit) {
              if (i > p) {
                this._key += this.decoder.write(data.toString("binary", p, i));
              }
              p = i;
              if (
                (this._bytesKey = this._key.length) === this.fieldNameSizeLimit
              ) {
                this._checkingBytes = false;
                this._keyTrunc = true;
              }
            } else {
              if (p < len) {
                this._key += this.decoder.write(data.toString("binary", p));
              }
              p = len;
            }
          } else {
            idxamp = void 0;
            for (i = p; i < len; ++i) {
              if (!this._checkingBytes) {
                ++p;
              }
              if (data[i] === 38) {
                idxamp = i;
                break;
              }
              if (
                this._checkingBytes &&
                this._bytesVal === this.fieldSizeLimit
              ) {
                this._hitLimit = true;
                break;
              } else if (this._checkingBytes) {
                ++this._bytesVal;
              }
            }
            if (idxamp !== void 0) {
              ++this._fields;
              if (idxamp > p) {
                this._val += this.decoder.write(
                  data.toString("binary", p, idxamp),
                );
              }
              this.boy.emit(
                "field",
                decodeText(this._key, "binary", this.charset),
                decodeText(this._val, "binary", this.charset),
                this._keyTrunc,
                this._valTrunc,
              );
              this._state = "key";
              this._hitLimit = false;
              this._checkingBytes = true;
              this._key = "";
              this._bytesKey = 0;
              this._keyTrunc = false;
              this.decoder.reset();
              p = idxamp + 1;
              if (this._fields === this.fieldsLimit) {
                return cb();
              }
            } else if (this._hitLimit) {
              if (i > p) {
                this._val += this.decoder.write(data.toString("binary", p, i));
              }
              p = i;
              if (
                (this._val === "" && this.fieldSizeLimit === 0) ||
                (this._bytesVal = this._val.length) === this.fieldSizeLimit
              ) {
                this._checkingBytes = false;
                this._valTrunc = true;
              }
            } else {
              if (p < len) {
                this._val += this.decoder.write(data.toString("binary", p));
              }
              p = len;
            }
          }
        }
        cb();
      };
      UrlEncoded.prototype.end = function () {
        if (this.boy._done) {
          return;
        }
        if (this._state === "key" && this._key.length > 0) {
          this.boy.emit(
            "field",
            decodeText(this._key, "binary", this.charset),
            "",
            this._keyTrunc,
            false,
          );
        } else if (this._state === "val") {
          this.boy.emit(
            "field",
            decodeText(this._key, "binary", this.charset),
            decodeText(this._val, "binary", this.charset),
            this._keyTrunc,
            this._valTrunc,
          );
        }
        this.boy._done = true;
        this.boy.emit("finish");
      };
      module.exports = UrlEncoded;
    },
  });

  // node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/main.js
  var require_main = __commonJS({
    "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/main.js"(
      exports,
      module,
    ) {
      "use strict";
      var WritableStream = __require("node:stream").Writable;
      var { inherits } = __require("node:util");
      var Dicer = require_Dicer();
      var MultipartParser = require_multipart();
      var UrlencodedParser = require_urlencoded();
      var parseParams = require_parseParams();
      function Busboy(opts) {
        if (!(this instanceof Busboy)) {
          return new Busboy(opts);
        }
        if (typeof opts !== "object") {
          throw new TypeError("Busboy expected an options-Object.");
        }
        if (typeof opts.headers !== "object") {
          throw new TypeError(
            "Busboy expected an options-Object with headers-attribute.",
          );
        }
        if (typeof opts.headers["content-type"] !== "string") {
          throw new TypeError("Missing Content-Type-header.");
        }
        const { headers, ...streamOptions } = opts;
        this.opts = {
          autoDestroy: false,
          ...streamOptions,
        };
        WritableStream.call(this, this.opts);
        this._done = false;
        this._parser = this.getParserByHeaders(headers);
        this._finished = false;
      }
      __name(Busboy, "Busboy");
      inherits(Busboy, WritableStream);
      Busboy.prototype.emit = function (ev) {
        if (ev === "finish") {
          if (!this._done) {
            this._parser?.end();
            return;
          } else if (this._finished) {
            return;
          }
          this._finished = true;
        }
        WritableStream.prototype.emit.apply(this, arguments);
      };
      Busboy.prototype.getParserByHeaders = function (headers) {
        const parsed = parseParams(headers["content-type"]);
        const cfg = {
          defCharset: this.opts.defCharset,
          fileHwm: this.opts.fileHwm,
          headers,
          highWaterMark: this.opts.highWaterMark,
          isPartAFile: this.opts.isPartAFile,
          limits: this.opts.limits,
          parsedConType: parsed,
          preservePath: this.opts.preservePath,
        };
        if (MultipartParser.detect.test(parsed[0])) {
          return new MultipartParser(this, cfg);
        }
        if (UrlencodedParser.detect.test(parsed[0])) {
          return new UrlencodedParser(this, cfg);
        }
        throw new Error("Unsupported Content-Type.");
      };
      Busboy.prototype._write = function (chunk, encoding, cb) {
        this._parser.write(chunk, cb);
      };
      module.exports = Busboy;
      module.exports.default = Busboy;
      module.exports.Busboy = Busboy;
      module.exports.Dicer = Dicer;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/constants.js
  var require_constants2 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/constants.js"(
      exports,
      module,
    ) {
      "use strict";
      var { MessageChannel, receiveMessageOnPort } =
        __require("worker_threads");
      var corsSafeListedMethods = ["GET", "HEAD", "POST"];
      var corsSafeListedMethodsSet = new Set(corsSafeListedMethods);
      var nullBodyStatus = [101, 204, 205, 304];
      var redirectStatus = [301, 302, 303, 307, 308];
      var redirectStatusSet = new Set(redirectStatus);
      var badPorts = [
        "1",
        "7",
        "9",
        "11",
        "13",
        "15",
        "17",
        "19",
        "20",
        "21",
        "22",
        "23",
        "25",
        "37",
        "42",
        "43",
        "53",
        "69",
        "77",
        "79",
        "87",
        "95",
        "101",
        "102",
        "103",
        "104",
        "109",
        "110",
        "111",
        "113",
        "115",
        "117",
        "119",
        "123",
        "135",
        "137",
        "139",
        "143",
        "161",
        "179",
        "389",
        "427",
        "465",
        "512",
        "513",
        "514",
        "515",
        "526",
        "530",
        "531",
        "532",
        "540",
        "548",
        "554",
        "556",
        "563",
        "587",
        "601",
        "636",
        "989",
        "990",
        "993",
        "995",
        "1719",
        "1720",
        "1723",
        "2049",
        "3659",
        "4045",
        "5060",
        "5061",
        "6000",
        "6566",
        "6665",
        "6666",
        "6667",
        "6668",
        "6669",
        "6697",
        "10080",
      ];
      var badPortsSet = new Set(badPorts);
      var referrerPolicy = [
        "",
        "no-referrer",
        "no-referrer-when-downgrade",
        "same-origin",
        "origin",
        "strict-origin",
        "origin-when-cross-origin",
        "strict-origin-when-cross-origin",
        "unsafe-url",
      ];
      var referrerPolicySet = new Set(referrerPolicy);
      var requestRedirect = ["follow", "manual", "error"];
      var safeMethods = ["GET", "HEAD", "OPTIONS", "TRACE"];
      var safeMethodsSet = new Set(safeMethods);
      var requestMode = ["navigate", "same-origin", "no-cors", "cors"];
      var requestCredentials = ["omit", "same-origin", "include"];
      var requestCache = [
        "default",
        "no-store",
        "reload",
        "no-cache",
        "force-cache",
        "only-if-cached",
      ];
      var requestBodyHeader = [
        "content-encoding",
        "content-language",
        "content-location",
        "content-type",
        // See https://github.com/nodejs/undici/issues/2021
        // 'Content-Length' is a forbidden header name, which is typically
        // removed in the Headers implementation. However, undici doesn't
        // filter out headers, so we add it here.
        "content-length",
      ];
      var requestDuplex = ["half"];
      var forbiddenMethods = ["CONNECT", "TRACE", "TRACK"];
      var forbiddenMethodsSet = new Set(forbiddenMethods);
      var subresource = [
        "audio",
        "audioworklet",
        "font",
        "image",
        "manifest",
        "paintworklet",
        "script",
        "style",
        "track",
        "video",
        "xslt",
        "",
      ];
      var subresourceSet = new Set(subresource);
      var DOMException2 =
        globalThis.DOMException ??
        (() => {
          try {
            atob("~");
          } catch (err) {
            return Object.getPrototypeOf(err).constructor;
          }
        })();
      var channel;
      var structuredClone =
        globalThis.structuredClone ?? // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js
        // structuredClone was added in v17.0.0, but fetch supports v16.8
        /* @__PURE__ */ __name(function structuredClone2(
          value,
          options = void 0,
        ) {
          if (arguments.length === 0) {
            throw new TypeError("missing argument");
          }
          if (!channel) {
            channel = new MessageChannel();
          }
          channel.port1.unref();
          channel.port2.unref();
          channel.port1.postMessage(value, options?.transfer);
          return receiveMessageOnPort(channel.port2).message;
        }, "structuredClone");
      module.exports = {
        DOMException: DOMException2,
        structuredClone,
        subresource,
        forbiddenMethods,
        requestBodyHeader,
        referrerPolicy,
        requestRedirect,
        requestMode,
        requestCredentials,
        requestCache,
        redirectStatus,
        corsSafeListedMethods,
        nullBodyStatus,
        safeMethods,
        badPorts,
        requestDuplex,
        subresourceSet,
        badPortsSet,
        redirectStatusSet,
        corsSafeListedMethodsSet,
        safeMethodsSet,
        forbiddenMethodsSet,
        referrerPolicySet,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/global.js
  var require_global = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/global.js"(
      exports,
      module,
    ) {
      "use strict";
      var globalOrigin = Symbol.for("undici.globalOrigin.1");
      function getGlobalOrigin() {
        return globalThis[globalOrigin];
      }
      __name(getGlobalOrigin, "getGlobalOrigin");
      function setGlobalOrigin(newOrigin) {
        if (newOrigin === void 0) {
          Object.defineProperty(globalThis, globalOrigin, {
            value: void 0,
            writable: true,
            enumerable: false,
            configurable: false,
          });
          return;
        }
        const parsedURL = new URL(newOrigin);
        if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") {
          throw new TypeError(
            `Only http & https urls are allowed, received ${parsedURL.protocol}`,
          );
        }
        Object.defineProperty(globalThis, globalOrigin, {
          value: parsedURL,
          writable: true,
          enumerable: false,
          configurable: false,
        });
      }
      __name(setGlobalOrigin, "setGlobalOrigin");
      module.exports = {
        getGlobalOrigin,
        setGlobalOrigin,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/util.js
  var require_util2 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/util.js"(
      exports,
      module,
    ) {
      "use strict";
      var {
        redirectStatusSet,
        referrerPolicySet: referrerPolicyTokens,
        badPortsSet,
      } = require_constants2();
      var { getGlobalOrigin } = require_global();
      var { performance: performance2 } = __require("perf_hooks");
      var { isBlobLike, toUSVString, ReadableStreamFrom } = require_util();
      var assert = __require("assert");
      var { isUint8Array: isUint8Array3 } = __require("util/types");
      var supportedHashes = [];
      var crypto4;
      try {
        crypto4 = __require("crypto");
        const possibleRelevantHashes = ["sha256", "sha384", "sha512"];
        supportedHashes = crypto4
          .getHashes()
          .filter((hash) => possibleRelevantHashes.includes(hash));
      } catch {}
      function responseURL(response) {
        const urlList = response.urlList;
        const length = urlList.length;
        return length === 0 ? null : urlList[length - 1].toString();
      }
      __name(responseURL, "responseURL");
      function responseLocationURL(response, requestFragment) {
        if (!redirectStatusSet.has(response.status)) {
          return null;
        }
        let location = response.headersList.get("location");
        if (location !== null && isValidHeaderValue(location)) {
          location = new URL(location, responseURL(response));
        }
        if (location && !location.hash) {
          location.hash = requestFragment;
        }
        return location;
      }
      __name(responseLocationURL, "responseLocationURL");
      function requestCurrentURL(request) {
        return request.urlList[request.urlList.length - 1];
      }
      __name(requestCurrentURL, "requestCurrentURL");
      function requestBadPort(request) {
        const url = requestCurrentURL(request);
        if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {
          return "blocked";
        }
        return "allowed";
      }
      __name(requestBadPort, "requestBadPort");
      function isErrorLike(object) {
        return (
          object instanceof Error ||
          object?.constructor?.name === "Error" ||
          object?.constructor?.name === "DOMException"
        );
      }
      __name(isErrorLike, "isErrorLike");
      function isValidReasonPhrase(statusText) {
        for (let i = 0; i < statusText.length; ++i) {
          const c = statusText.charCodeAt(i);
          if (
            !(
              c === 9 || // HTAB
              (c >= 32 && c <= 126) || // SP / VCHAR
              (c >= 128 && c <= 255)
            )
          ) {
            return false;
          }
        }
        return true;
      }
      __name(isValidReasonPhrase, "isValidReasonPhrase");
      function isTokenCharCode(c) {
        switch (c) {
          case 34:
          case 40:
          case 41:
          case 44:
          case 47:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 63:
          case 64:
          case 91:
          case 92:
          case 93:
          case 123:
          case 125:
            return false;
          default:
            return c >= 33 && c <= 126;
        }
      }
      __name(isTokenCharCode, "isTokenCharCode");
      function isValidHTTPToken(characters) {
        if (characters.length === 0) {
          return false;
        }
        for (let i = 0; i < characters.length; ++i) {
          if (!isTokenCharCode(characters.charCodeAt(i))) {
            return false;
          }
        }
        return true;
      }
      __name(isValidHTTPToken, "isValidHTTPToken");
      function isValidHeaderName(potentialValue) {
        return isValidHTTPToken(potentialValue);
      }
      __name(isValidHeaderName, "isValidHeaderName");
      function isValidHeaderValue(potentialValue) {
        if (
          potentialValue.startsWith("	") ||
          potentialValue.startsWith(" ") ||
          potentialValue.endsWith("	") ||
          potentialValue.endsWith(" ")
        ) {
          return false;
        }
        if (
          potentialValue.includes("\0") ||
          potentialValue.includes("\r") ||
          potentialValue.includes("\n")
        ) {
          return false;
        }
        return true;
      }
      __name(isValidHeaderValue, "isValidHeaderValue");
      function setRequestReferrerPolicyOnRedirect(request, actualResponse) {
        const { headersList } = actualResponse;
        const policyHeader = (headersList.get("referrer-policy") ?? "").split(
          ",",
        );
        let policy = "";
        if (policyHeader.length > 0) {
          for (let i = policyHeader.length; i !== 0; i--) {
            const token = policyHeader[i - 1].trim();
            if (referrerPolicyTokens.has(token)) {
              policy = token;
              break;
            }
          }
        }
        if (policy !== "") {
          request.referrerPolicy = policy;
        }
      }
      __name(
        setRequestReferrerPolicyOnRedirect,
        "setRequestReferrerPolicyOnRedirect",
      );
      function crossOriginResourcePolicyCheck() {
        return "allowed";
      }
      __name(crossOriginResourcePolicyCheck, "crossOriginResourcePolicyCheck");
      function corsCheck() {
        return "success";
      }
      __name(corsCheck, "corsCheck");
      function TAOCheck() {
        return "success";
      }
      __name(TAOCheck, "TAOCheck");
      function appendFetchMetadata(httpRequest) {
        let header = null;
        header = httpRequest.mode;
        httpRequest.headersList.set("sec-fetch-mode", header);
      }
      __name(appendFetchMetadata, "appendFetchMetadata");
      function appendRequestOriginHeader(request) {
        let serializedOrigin = request.origin;
        if (
          request.responseTainting === "cors" ||
          request.mode === "websocket"
        ) {
          if (serializedOrigin) {
            request.headersList.append("origin", serializedOrigin);
          }
        } else if (request.method !== "GET" && request.method !== "HEAD") {
          switch (request.referrerPolicy) {
            case "no-referrer":
              serializedOrigin = null;
              break;
            case "no-referrer-when-downgrade":
            case "strict-origin":
            case "strict-origin-when-cross-origin":
              if (
                request.origin &&
                urlHasHttpsScheme(request.origin) &&
                !urlHasHttpsScheme(requestCurrentURL(request))
              ) {
                serializedOrigin = null;
              }
              break;
            case "same-origin":
              if (!sameOrigin(request, requestCurrentURL(request))) {
                serializedOrigin = null;
              }
              break;
            default:
          }
          if (serializedOrigin) {
            request.headersList.append("origin", serializedOrigin);
          }
        }
      }
      __name(appendRequestOriginHeader, "appendRequestOriginHeader");
      function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
        return performance2.now();
      }
      __name(coarsenedSharedCurrentTime, "coarsenedSharedCurrentTime");
      function createOpaqueTimingInfo(timingInfo) {
        return {
          startTime: timingInfo.startTime ?? 0,
          redirectStartTime: 0,
          redirectEndTime: 0,
          postRedirectStartTime: timingInfo.startTime ?? 0,
          finalServiceWorkerStartTime: 0,
          finalNetworkResponseStartTime: 0,
          finalNetworkRequestStartTime: 0,
          endTime: 0,
          encodedBodySize: 0,
          decodedBodySize: 0,
          finalConnectionTimingInfo: null,
        };
      }
      __name(createOpaqueTimingInfo, "createOpaqueTimingInfo");
      function makePolicyContainer() {
        return {
          referrerPolicy: "strict-origin-when-cross-origin",
        };
      }
      __name(makePolicyContainer, "makePolicyContainer");
      function clonePolicyContainer(policyContainer) {
        return {
          referrerPolicy: policyContainer.referrerPolicy,
        };
      }
      __name(clonePolicyContainer, "clonePolicyContainer");
      function determineRequestsReferrer(request) {
        const policy = request.referrerPolicy;
        assert(policy);
        let referrerSource = null;
        if (request.referrer === "client") {
          const globalOrigin = getGlobalOrigin();
          if (!globalOrigin || globalOrigin.origin === "null") {
            return "no-referrer";
          }
          referrerSource = new URL(globalOrigin);
        } else if (request.referrer instanceof URL) {
          referrerSource = request.referrer;
        }
        let referrerURL = stripURLForReferrer(referrerSource);
        const referrerOrigin = stripURLForReferrer(referrerSource, true);
        if (referrerURL.toString().length > 4096) {
          referrerURL = referrerOrigin;
        }
        const areSameOrigin = sameOrigin(request, referrerURL);
        const isNonPotentiallyTrustWorthy =
          isURLPotentiallyTrustworthy(referrerURL) &&
          !isURLPotentiallyTrustworthy(request.url);
        switch (policy) {
          case "origin":
            return referrerOrigin != null
              ? referrerOrigin
              : stripURLForReferrer(referrerSource, true);
          case "unsafe-url":
            return referrerURL;
          case "same-origin":
            return areSameOrigin ? referrerOrigin : "no-referrer";
          case "origin-when-cross-origin":
            return areSameOrigin ? referrerURL : referrerOrigin;
          case "strict-origin-when-cross-origin": {
            const currentURL = requestCurrentURL(request);
            if (sameOrigin(referrerURL, currentURL)) {
              return referrerURL;
            }
            if (
              isURLPotentiallyTrustworthy(referrerURL) &&
              !isURLPotentiallyTrustworthy(currentURL)
            ) {
              return "no-referrer";
            }
            return referrerOrigin;
          }
          case "strict-origin":
          // eslint-disable-line
          /**
           * 1. If referrerURL is a potentially trustworthy URL and
           * request’s current URL is not a potentially trustworthy URL,
           * then return no referrer.
           * 2. Return referrerOrigin
           */
          case "no-referrer-when-downgrade":
          // eslint-disable-line
          /**
           * 1. If referrerURL is a potentially trustworthy URL and
           * request’s current URL is not a potentially trustworthy URL,
           * then return no referrer.
           * 2. Return referrerOrigin
           */
          default:
            return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
        }
      }
      __name(determineRequestsReferrer, "determineRequestsReferrer");
      function stripURLForReferrer(url, originOnly) {
        assert(url instanceof URL);
        if (
          url.protocol === "file:" ||
          url.protocol === "about:" ||
          url.protocol === "blank:"
        ) {
          return "no-referrer";
        }
        url.username = "";
        url.password = "";
        url.hash = "";
        if (originOnly) {
          url.pathname = "";
          url.search = "";
        }
        return url;
      }
      __name(stripURLForReferrer, "stripURLForReferrer");
      function isURLPotentiallyTrustworthy(url) {
        if (!(url instanceof URL)) {
          return false;
        }
        if (url.href === "about:blank" || url.href === "about:srcdoc") {
          return true;
        }
        if (url.protocol === "data:") return true;
        if (url.protocol === "file:") return true;
        return isOriginPotentiallyTrustworthy(url.origin);
        function isOriginPotentiallyTrustworthy(origin) {
          if (origin == null || origin === "null") return false;
          const originAsURL = new URL(origin);
          if (
            originAsURL.protocol === "https:" ||
            originAsURL.protocol === "wss:"
          ) {
            return true;
          }
          if (
            /^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(
              originAsURL.hostname,
            ) ||
            originAsURL.hostname === "localhost" ||
            originAsURL.hostname.includes("localhost.") ||
            originAsURL.hostname.endsWith(".localhost")
          ) {
            return true;
          }
          return false;
        }
        __name(
          isOriginPotentiallyTrustworthy,
          "isOriginPotentiallyTrustworthy",
        );
      }
      __name(isURLPotentiallyTrustworthy, "isURLPotentiallyTrustworthy");
      function bytesMatch(bytes, metadataList) {
        if (crypto4 === void 0) {
          return true;
        }
        const parsedMetadata = parseMetadata(metadataList);
        if (parsedMetadata === "no metadata") {
          return true;
        }
        if (parsedMetadata.length === 0) {
          return true;
        }
        const strongest = getStrongestMetadata(parsedMetadata);
        const metadata = filterMetadataListByAlgorithm(
          parsedMetadata,
          strongest,
        );
        for (const item of metadata) {
          const algorithm = item.algo;
          const expectedValue = item.hash;
          let actualValue = crypto4
            .createHash(algorithm)
            .update(bytes)
            .digest("base64");
          if (actualValue[actualValue.length - 1] === "=") {
            if (actualValue[actualValue.length - 2] === "=") {
              actualValue = actualValue.slice(0, -2);
            } else {
              actualValue = actualValue.slice(0, -1);
            }
          }
          if (compareBase64Mixed(actualValue, expectedValue)) {
            return true;
          }
        }
        return false;
      }
      __name(bytesMatch, "bytesMatch");
      var parseHashWithOptions =
        /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
      function parseMetadata(metadata) {
        const result = [];
        let empty2 = true;
        for (const token of metadata.split(" ")) {
          empty2 = false;
          const parsedToken = parseHashWithOptions.exec(token);
          if (
            parsedToken === null ||
            parsedToken.groups === void 0 ||
            parsedToken.groups.algo === void 0
          ) {
            continue;
          }
          const algorithm = parsedToken.groups.algo.toLowerCase();
          if (supportedHashes.includes(algorithm)) {
            result.push(parsedToken.groups);
          }
        }
        if (empty2 === true) {
          return "no metadata";
        }
        return result;
      }
      __name(parseMetadata, "parseMetadata");
      function getStrongestMetadata(metadataList) {
        let algorithm = metadataList[0].algo;
        if (algorithm[3] === "5") {
          return algorithm;
        }
        for (let i = 1; i < metadataList.length; ++i) {
          const metadata = metadataList[i];
          if (metadata.algo[3] === "5") {
            algorithm = "sha512";
            break;
          } else if (algorithm[3] === "3") {
            continue;
          } else if (metadata.algo[3] === "3") {
            algorithm = "sha384";
          }
        }
        return algorithm;
      }
      __name(getStrongestMetadata, "getStrongestMetadata");
      function filterMetadataListByAlgorithm(metadataList, algorithm) {
        if (metadataList.length === 1) {
          return metadataList;
        }
        let pos = 0;
        for (let i = 0; i < metadataList.length; ++i) {
          if (metadataList[i].algo === algorithm) {
            metadataList[pos++] = metadataList[i];
          }
        }
        metadataList.length = pos;
        return metadataList;
      }
      __name(filterMetadataListByAlgorithm, "filterMetadataListByAlgorithm");
      function compareBase64Mixed(actualValue, expectedValue) {
        if (actualValue.length !== expectedValue.length) {
          return false;
        }
        for (let i = 0; i < actualValue.length; ++i) {
          if (actualValue[i] !== expectedValue[i]) {
            if (
              (actualValue[i] === "+" && expectedValue[i] === "-") ||
              (actualValue[i] === "/" && expectedValue[i] === "_")
            ) {
              continue;
            }
            return false;
          }
        }
        return true;
      }
      __name(compareBase64Mixed, "compareBase64Mixed");
      function tryUpgradeRequestToAPotentiallyTrustworthyURL(request) {}
      __name(
        tryUpgradeRequestToAPotentiallyTrustworthyURL,
        "tryUpgradeRequestToAPotentiallyTrustworthyURL",
      );
      function sameOrigin(A, B) {
        if (A.origin === B.origin && A.origin === "null") {
          return true;
        }
        if (
          A.protocol === B.protocol &&
          A.hostname === B.hostname &&
          A.port === B.port
        ) {
          return true;
        }
        return false;
      }
      __name(sameOrigin, "sameOrigin");
      function createDeferredPromise() {
        let res;
        let rej;
        const promise = new Promise((resolve, reject) => {
          res = resolve;
          rej = reject;
        });
        return { promise, resolve: res, reject: rej };
      }
      __name(createDeferredPromise, "createDeferredPromise");
      function isAborted(fetchParams) {
        return fetchParams.controller.state === "aborted";
      }
      __name(isAborted, "isAborted");
      function isCancelled(fetchParams) {
        return (
          fetchParams.controller.state === "aborted" ||
          fetchParams.controller.state === "terminated"
        );
      }
      __name(isCancelled, "isCancelled");
      var normalizeMethodRecord = {
        delete: "DELETE",
        DELETE: "DELETE",
        get: "GET",
        GET: "GET",
        head: "HEAD",
        HEAD: "HEAD",
        options: "OPTIONS",
        OPTIONS: "OPTIONS",
        post: "POST",
        POST: "POST",
        put: "PUT",
        PUT: "PUT",
      };
      Object.setPrototypeOf(normalizeMethodRecord, null);
      function normalizeMethod(method) {
        return normalizeMethodRecord[method.toLowerCase()] ?? method;
      }
      __name(normalizeMethod, "normalizeMethod");
      function serializeJavascriptValueToJSONString(value) {
        const result = JSON.stringify(value);
        if (result === void 0) {
          throw new TypeError("Value is not JSON serializable");
        }
        assert(typeof result === "string");
        return result;
      }
      __name(
        serializeJavascriptValueToJSONString,
        "serializeJavascriptValueToJSONString",
      );
      var esIteratorPrototype = Object.getPrototypeOf(
        Object.getPrototypeOf([][Symbol.iterator]()),
      );
      function makeIterator(iterator, name, kind) {
        const object = {
          index: 0,
          kind,
          target: iterator,
        };
        const i = {
          next() {
            if (Object.getPrototypeOf(this) !== i) {
              throw new TypeError(
                `'next' called on an object that does not implement interface ${name} Iterator.`,
              );
            }
            const { index: index2, kind: kind2, target } = object;
            const values = target();
            const len = values.length;
            if (index2 >= len) {
              return { value: void 0, done: true };
            }
            const pair = values[index2];
            object.index = index2 + 1;
            return iteratorResult(pair, kind2);
          },
          // The class string of an iterator prototype object for a given interface is the
          // result of concatenating the identifier of the interface and the string " Iterator".
          [Symbol.toStringTag]: `${name} Iterator`,
        };
        Object.setPrototypeOf(i, esIteratorPrototype);
        return Object.setPrototypeOf({}, i);
      }
      __name(makeIterator, "makeIterator");
      function iteratorResult(pair, kind) {
        let result;
        switch (kind) {
          case "key": {
            result = pair[0];
            break;
          }
          case "value": {
            result = pair[1];
            break;
          }
          case "key+value": {
            result = pair;
            break;
          }
        }
        return { value: result, done: false };
      }
      __name(iteratorResult, "iteratorResult");
      async function fullyReadBody(body, processBody, processBodyError) {
        const successSteps = processBody;
        const errorSteps = processBodyError;
        let reader;
        try {
          reader = body.stream.getReader();
        } catch (e) {
          errorSteps(e);
          return;
        }
        try {
          const result = await readAllBytes(reader);
          successSteps(result);
        } catch (e) {
          errorSteps(e);
        }
      }
      __name(fullyReadBody, "fullyReadBody");
      var ReadableStream = globalThis.ReadableStream;
      function isReadableStreamLike(stream) {
        if (!ReadableStream) {
          ReadableStream = __require("stream/web").ReadableStream;
        }
        return (
          stream instanceof ReadableStream ||
          (stream[Symbol.toStringTag] === "ReadableStream" &&
            typeof stream.tee === "function")
        );
      }
      __name(isReadableStreamLike, "isReadableStreamLike");
      var MAXIMUM_ARGUMENT_LENGTH = 65535;
      function isomorphicDecode(input) {
        if (input.length < MAXIMUM_ARGUMENT_LENGTH) {
          return String.fromCharCode(...input);
        }
        return input.reduce(
          (previous2, current) => previous2 + String.fromCharCode(current),
          "",
        );
      }
      __name(isomorphicDecode, "isomorphicDecode");
      function readableStreamClose(controller) {
        try {
          controller.close();
        } catch (err) {
          if (!err.message.includes("Controller is already closed")) {
            throw err;
          }
        }
      }
      __name(readableStreamClose, "readableStreamClose");
      function isomorphicEncode(input) {
        for (let i = 0; i < input.length; i++) {
          assert(input.charCodeAt(i) <= 255);
        }
        return input;
      }
      __name(isomorphicEncode, "isomorphicEncode");
      async function readAllBytes(reader) {
        const bytes = [];
        let byteLength = 0;
        while (true) {
          const { done, value: chunk } = await reader.read();
          if (done) {
            return Buffer.concat(bytes, byteLength);
          }
          if (!isUint8Array3(chunk)) {
            throw new TypeError("Received non-Uint8Array chunk");
          }
          bytes.push(chunk);
          byteLength += chunk.length;
        }
      }
      __name(readAllBytes, "readAllBytes");
      function urlIsLocal(url) {
        assert("protocol" in url);
        const protocol = url.protocol;
        return (
          protocol === "about:" || protocol === "blob:" || protocol === "data:"
        );
      }
      __name(urlIsLocal, "urlIsLocal");
      function urlHasHttpsScheme(url) {
        if (typeof url === "string") {
          return url.startsWith("https:");
        }
        return url.protocol === "https:";
      }
      __name(urlHasHttpsScheme, "urlHasHttpsScheme");
      function urlIsHttpHttpsScheme(url) {
        assert("protocol" in url);
        const protocol = url.protocol;
        return protocol === "http:" || protocol === "https:";
      }
      __name(urlIsHttpHttpsScheme, "urlIsHttpHttpsScheme");
      var hasOwn =
        Object.hasOwn ||
        ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
      module.exports = {
        isAborted,
        isCancelled,
        createDeferredPromise,
        ReadableStreamFrom,
        toUSVString,
        tryUpgradeRequestToAPotentiallyTrustworthyURL,
        coarsenedSharedCurrentTime,
        determineRequestsReferrer,
        makePolicyContainer,
        clonePolicyContainer,
        appendFetchMetadata,
        appendRequestOriginHeader,
        TAOCheck,
        corsCheck,
        crossOriginResourcePolicyCheck,
        createOpaqueTimingInfo,
        setRequestReferrerPolicyOnRedirect,
        isValidHTTPToken,
        requestBadPort,
        requestCurrentURL,
        responseURL,
        responseLocationURL,
        isBlobLike,
        isURLPotentiallyTrustworthy,
        isValidReasonPhrase,
        sameOrigin,
        normalizeMethod,
        serializeJavascriptValueToJSONString,
        makeIterator,
        isValidHeaderName,
        isValidHeaderValue,
        hasOwn,
        isErrorLike,
        fullyReadBody,
        bytesMatch,
        isReadableStreamLike,
        readableStreamClose,
        isomorphicEncode,
        isomorphicDecode,
        urlIsLocal,
        urlHasHttpsScheme,
        urlIsHttpHttpsScheme,
        readAllBytes,
        normalizeMethodRecord,
        parseMetadata,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/symbols.js
  var require_symbols2 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/symbols.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = {
        kUrl: Symbol("url"),
        kHeaders: Symbol("headers"),
        kSignal: Symbol("signal"),
        kState: Symbol("state"),
        kGuard: Symbol("guard"),
        kRealm: Symbol("realm"),
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/webidl.js
  var require_webidl = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/webidl.js"(
      exports,
      module,
    ) {
      "use strict";
      var { types } = __require("util");
      var { hasOwn, toUSVString } = require_util2();
      var webidl = {};
      webidl.converters = {};
      webidl.util = {};
      webidl.errors = {};
      webidl.errors.exception = function (message) {
        return new TypeError(`${message.header}: ${message.message}`);
      };
      webidl.errors.conversionFailed = function (context2) {
        const plural = context2.types.length === 1 ? "" : " one of";
        const message = `${context2.argument} could not be converted to${plural}: ${context2.types.join(", ")}.`;
        return webidl.errors.exception({
          header: context2.prefix,
          message,
        });
      };
      webidl.errors.invalidArgument = function (context2) {
        return webidl.errors.exception({
          header: context2.prefix,
          message: `"${context2.value}" is an invalid ${context2.type}.`,
        });
      };
      webidl.brandCheck = function (V, I, opts = void 0) {
        if (opts?.strict !== false && !(V instanceof I)) {
          throw new TypeError("Illegal invocation");
        } else {
          return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
        }
      };
      webidl.argumentLengthCheck = function ({ length }, min, ctx) {
        if (length < min) {
          throw webidl.errors.exception({
            message: `${min} argument${min !== 1 ? "s" : ""} required, but${length ? " only" : ""} ${length} found.`,
            ...ctx,
          });
        }
      };
      webidl.illegalConstructor = function () {
        throw webidl.errors.exception({
          header: "TypeError",
          message: "Illegal constructor",
        });
      };
      webidl.util.Type = function (V) {
        switch (typeof V) {
          case "undefined":
            return "Undefined";
          case "boolean":
            return "Boolean";
          case "string":
            return "String";
          case "symbol":
            return "Symbol";
          case "number":
            return "Number";
          case "bigint":
            return "BigInt";
          case "function":
          case "object": {
            if (V === null) {
              return "Null";
            }
            return "Object";
          }
        }
      };
      webidl.util.ConvertToInt = function (
        V,
        bitLength,
        signedness,
        opts = {},
      ) {
        let upperBound;
        let lowerBound;
        if (bitLength === 64) {
          upperBound = Math.pow(2, 53) - 1;
          if (signedness === "unsigned") {
            lowerBound = 0;
          } else {
            lowerBound = Math.pow(-2, 53) + 1;
          }
        } else if (signedness === "unsigned") {
          lowerBound = 0;
          upperBound = Math.pow(2, bitLength) - 1;
        } else {
          lowerBound = Math.pow(-2, bitLength) - 1;
          upperBound = Math.pow(2, bitLength - 1) - 1;
        }
        let x = Number(V);
        if (x === 0) {
          x = 0;
        }
        if (opts.enforceRange === true) {
          if (
            Number.isNaN(x) ||
            x === Number.POSITIVE_INFINITY ||
            x === Number.NEGATIVE_INFINITY
          ) {
            throw webidl.errors.exception({
              header: "Integer conversion",
              message: `Could not convert ${V} to an integer.`,
            });
          }
          x = webidl.util.IntegerPart(x);
          if (x < lowerBound || x > upperBound) {
            throw webidl.errors.exception({
              header: "Integer conversion",
              message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`,
            });
          }
          return x;
        }
        if (!Number.isNaN(x) && opts.clamp === true) {
          x = Math.min(Math.max(x, lowerBound), upperBound);
          if (Math.floor(x) % 2 === 0) {
            x = Math.floor(x);
          } else {
            x = Math.ceil(x);
          }
          return x;
        }
        if (
          Number.isNaN(x) ||
          (x === 0 && Object.is(0, x)) ||
          x === Number.POSITIVE_INFINITY ||
          x === Number.NEGATIVE_INFINITY
        ) {
          return 0;
        }
        x = webidl.util.IntegerPart(x);
        x = x % Math.pow(2, bitLength);
        if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) {
          return x - Math.pow(2, bitLength);
        }
        return x;
      };
      webidl.util.IntegerPart = function (n) {
        const r = Math.floor(Math.abs(n));
        if (n < 0) {
          return -1 * r;
        }
        return r;
      };
      webidl.sequenceConverter = function (converter) {
        return (V) => {
          if (webidl.util.Type(V) !== "Object") {
            throw webidl.errors.exception({
              header: "Sequence",
              message: `Value of type ${webidl.util.Type(V)} is not an Object.`,
            });
          }
          const method = V?.[Symbol.iterator]?.();
          const seq = [];
          if (method === void 0 || typeof method.next !== "function") {
            throw webidl.errors.exception({
              header: "Sequence",
              message: "Object is not an iterator.",
            });
          }
          while (true) {
            const { done, value } = method.next();
            if (done) {
              break;
            }
            seq.push(converter(value));
          }
          return seq;
        };
      };
      webidl.recordConverter = function (keyConverter, valueConverter) {
        return (O) => {
          if (webidl.util.Type(O) !== "Object") {
            throw webidl.errors.exception({
              header: "Record",
              message: `Value of type ${webidl.util.Type(O)} is not an Object.`,
            });
          }
          const result = {};
          if (!types.isProxy(O)) {
            const keys2 = Object.keys(O);
            for (const key of keys2) {
              const typedKey = keyConverter(key);
              const typedValue = valueConverter(O[key]);
              result[typedKey] = typedValue;
            }
            return result;
          }
          const keys = Reflect.ownKeys(O);
          for (const key of keys) {
            const desc = Reflect.getOwnPropertyDescriptor(O, key);
            if (desc?.enumerable) {
              const typedKey = keyConverter(key);
              const typedValue = valueConverter(O[key]);
              result[typedKey] = typedValue;
            }
          }
          return result;
        };
      };
      webidl.interfaceConverter = function (i) {
        return (V, opts = {}) => {
          if (opts.strict !== false && !(V instanceof i)) {
            throw webidl.errors.exception({
              header: i.name,
              message: `Expected ${V} to be an instance of ${i.name}.`,
            });
          }
          return V;
        };
      };
      webidl.dictionaryConverter = function (converters) {
        return (dictionary) => {
          const type = webidl.util.Type(dictionary);
          const dict = {};
          if (type === "Null" || type === "Undefined") {
            return dict;
          } else if (type !== "Object") {
            throw webidl.errors.exception({
              header: "Dictionary",
              message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`,
            });
          }
          for (const options of converters) {
            const { key, defaultValue, required, converter } = options;
            if (required === true) {
              if (!hasOwn(dictionary, key)) {
                throw webidl.errors.exception({
                  header: "Dictionary",
                  message: `Missing required key "${key}".`,
                });
              }
            }
            let value = dictionary[key];
            const hasDefault = hasOwn(options, "defaultValue");
            if (hasDefault && value !== null) {
              value = value ?? defaultValue;
            }
            if (required || hasDefault || value !== void 0) {
              value = converter(value);
              if (
                options.allowedValues &&
                !options.allowedValues.includes(value)
              ) {
                throw webidl.errors.exception({
                  header: "Dictionary",
                  message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`,
                });
              }
              dict[key] = value;
            }
          }
          return dict;
        };
      };
      webidl.nullableConverter = function (converter) {
        return (V) => {
          if (V === null) {
            return V;
          }
          return converter(V);
        };
      };
      webidl.converters.DOMString = function (V, opts = {}) {
        if (V === null && opts.legacyNullToEmptyString) {
          return "";
        }
        if (typeof V === "symbol") {
          throw new TypeError(
            "Could not convert argument of type symbol to string.",
          );
        }
        return String(V);
      };
      webidl.converters.ByteString = function (V) {
        const x = webidl.converters.DOMString(V);
        for (let index2 = 0; index2 < x.length; index2++) {
          if (x.charCodeAt(index2) > 255) {
            throw new TypeError(
              `Cannot convert argument to a ByteString because the character at index ${index2} has a value of ${x.charCodeAt(index2)} which is greater than 255.`,
            );
          }
        }
        return x;
      };
      webidl.converters.USVString = toUSVString;
      webidl.converters.boolean = function (V) {
        const x = Boolean(V);
        return x;
      };
      webidl.converters.any = function (V) {
        return V;
      };
      webidl.converters["long long"] = function (V) {
        const x = webidl.util.ConvertToInt(V, 64, "signed");
        return x;
      };
      webidl.converters["unsigned long long"] = function (V) {
        const x = webidl.util.ConvertToInt(V, 64, "unsigned");
        return x;
      };
      webidl.converters["unsigned long"] = function (V) {
        const x = webidl.util.ConvertToInt(V, 32, "unsigned");
        return x;
      };
      webidl.converters["unsigned short"] = function (V, opts) {
        const x = webidl.util.ConvertToInt(V, 16, "unsigned", opts);
        return x;
      };
      webidl.converters.ArrayBuffer = function (V, opts = {}) {
        if (webidl.util.Type(V) !== "Object" || !types.isAnyArrayBuffer(V)) {
          throw webidl.errors.conversionFailed({
            prefix: `${V}`,
            argument: `${V}`,
            types: ["ArrayBuffer"],
          });
        }
        if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
          throw webidl.errors.exception({
            header: "ArrayBuffer",
            message: "SharedArrayBuffer is not allowed.",
          });
        }
        return V;
      };
      webidl.converters.TypedArray = function (V, T, opts = {}) {
        if (
          webidl.util.Type(V) !== "Object" ||
          !types.isTypedArray(V) ||
          V.constructor.name !== T.name
        ) {
          throw webidl.errors.conversionFailed({
            prefix: `${T.name}`,
            argument: `${V}`,
            types: [T.name],
          });
        }
        if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
          throw webidl.errors.exception({
            header: "ArrayBuffer",
            message: "SharedArrayBuffer is not allowed.",
          });
        }
        return V;
      };
      webidl.converters.DataView = function (V, opts = {}) {
        if (webidl.util.Type(V) !== "Object" || !types.isDataView(V)) {
          throw webidl.errors.exception({
            header: "DataView",
            message: "Object is not a DataView.",
          });
        }
        if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
          throw webidl.errors.exception({
            header: "ArrayBuffer",
            message: "SharedArrayBuffer is not allowed.",
          });
        }
        return V;
      };
      webidl.converters.BufferSource = function (V, opts = {}) {
        if (types.isAnyArrayBuffer(V)) {
          return webidl.converters.ArrayBuffer(V, opts);
        }
        if (types.isTypedArray(V)) {
          return webidl.converters.TypedArray(V, V.constructor);
        }
        if (types.isDataView(V)) {
          return webidl.converters.DataView(V, opts);
        }
        throw new TypeError(`Could not convert ${V} to a BufferSource.`);
      };
      webidl.converters["sequence<ByteString>"] = webidl.sequenceConverter(
        webidl.converters.ByteString,
      );
      webidl.converters["sequence<sequence<ByteString>>"] =
        webidl.sequenceConverter(webidl.converters["sequence<ByteString>"]);
      webidl.converters["record<ByteString, ByteString>"] =
        webidl.recordConverter(
          webidl.converters.ByteString,
          webidl.converters.ByteString,
        );
      module.exports = {
        webidl,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/dataURL.js
  var require_dataURL = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/dataURL.js"(
      exports,
      module,
    ) {
      var assert = __require("assert");
      var { atob: atob2 } = __require("buffer");
      var { isomorphicDecode } = require_util2();
      var encoder = new TextEncoder();
      var HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
      var HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/;
      var HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
      function dataURLProcessor(dataURL) {
        assert(dataURL.protocol === "data:");
        let input = URLSerializer(dataURL, true);
        input = input.slice(5);
        const position2 = { position: 0 };
        let mimeType = collectASequenceOfCodePointsFast(",", input, position2);
        const mimeTypeLength = mimeType.length;
        mimeType = removeASCIIWhitespace(mimeType, true, true);
        if (position2.position >= input.length) {
          return "failure";
        }
        position2.position++;
        const encodedBody = input.slice(mimeTypeLength + 1);
        let body = stringPercentDecode(encodedBody);
        if (/;(\u0020){0,}base64$/i.test(mimeType)) {
          const stringBody = isomorphicDecode(body);
          body = forgivingBase64(stringBody);
          if (body === "failure") {
            return "failure";
          }
          mimeType = mimeType.slice(0, -6);
          mimeType = mimeType.replace(/(\u0020)+$/, "");
          mimeType = mimeType.slice(0, -1);
        }
        if (mimeType.startsWith(";")) {
          mimeType = "text/plain" + mimeType;
        }
        let mimeTypeRecord = parseMIMEType(mimeType);
        if (mimeTypeRecord === "failure") {
          mimeTypeRecord = parseMIMEType("text/plain;charset=US-ASCII");
        }
        return { mimeType: mimeTypeRecord, body };
      }
      __name(dataURLProcessor, "dataURLProcessor");
      function URLSerializer(url, excludeFragment = false) {
        if (!excludeFragment) {
          return url.href;
        }
        const href = url.href;
        const hashLength = url.hash.length;
        return hashLength === 0
          ? href
          : href.substring(0, href.length - hashLength);
      }
      __name(URLSerializer, "URLSerializer");
      function collectASequenceOfCodePoints(condition, input, position2) {
        let result = "";
        while (
          position2.position < input.length &&
          condition(input[position2.position])
        ) {
          result += input[position2.position];
          position2.position++;
        }
        return result;
      }
      __name(collectASequenceOfCodePoints, "collectASequenceOfCodePoints");
      function collectASequenceOfCodePointsFast(char, input, position2) {
        const idx = input.indexOf(char, position2.position);
        const start = position2.position;
        if (idx === -1) {
          position2.position = input.length;
          return input.slice(start);
        }
        position2.position = idx;
        return input.slice(start, position2.position);
      }
      __name(
        collectASequenceOfCodePointsFast,
        "collectASequenceOfCodePointsFast",
      );
      function stringPercentDecode(input) {
        const bytes = encoder.encode(input);
        return percentDecode(bytes);
      }
      __name(stringPercentDecode, "stringPercentDecode");
      function percentDecode(input) {
        const output = [];
        for (let i = 0; i < input.length; i++) {
          const byte = input[i];
          if (byte !== 37) {
            output.push(byte);
          } else if (
            byte === 37 &&
            !/^[0-9A-Fa-f]{2}$/i.test(
              String.fromCharCode(input[i + 1], input[i + 2]),
            )
          ) {
            output.push(37);
          } else {
            const nextTwoBytes = String.fromCharCode(
              input[i + 1],
              input[i + 2],
            );
            const bytePoint = Number.parseInt(nextTwoBytes, 16);
            output.push(bytePoint);
            i += 2;
          }
        }
        return Uint8Array.from(output);
      }
      __name(percentDecode, "percentDecode");
      function parseMIMEType(input) {
        input = removeHTTPWhitespace(input, true, true);
        const position2 = { position: 0 };
        const type = collectASequenceOfCodePointsFast("/", input, position2);
        if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {
          return "failure";
        }
        if (position2.position > input.length) {
          return "failure";
        }
        position2.position++;
        let subtype = collectASequenceOfCodePointsFast(";", input, position2);
        subtype = removeHTTPWhitespace(subtype, false, true);
        if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {
          return "failure";
        }
        const typeLowercase = type.toLowerCase();
        const subtypeLowercase = subtype.toLowerCase();
        const mimeType = {
          type: typeLowercase,
          subtype: subtypeLowercase,
          /** @type {Map<string, string>} */
          parameters: /* @__PURE__ */ new Map(),
          // https://mimesniff.spec.whatwg.org/#mime-type-essence
          essence: `${typeLowercase}/${subtypeLowercase}`,
        };
        while (position2.position < input.length) {
          position2.position++;
          collectASequenceOfCodePoints(
            // https://fetch.spec.whatwg.org/#http-whitespace
            (char) => HTTP_WHITESPACE_REGEX.test(char),
            input,
            position2,
          );
          let parameterName = collectASequenceOfCodePoints(
            (char) => char !== ";" && char !== "=",
            input,
            position2,
          );
          parameterName = parameterName.toLowerCase();
          if (position2.position < input.length) {
            if (input[position2.position] === ";") {
              continue;
            }
            position2.position++;
          }
          if (position2.position > input.length) {
            break;
          }
          let parameterValue = null;
          if (input[position2.position] === '"') {
            parameterValue = collectAnHTTPQuotedString(input, position2, true);
            collectASequenceOfCodePointsFast(";", input, position2);
          } else {
            parameterValue = collectASequenceOfCodePointsFast(
              ";",
              input,
              position2,
            );
            parameterValue = removeHTTPWhitespace(parameterValue, false, true);
            if (parameterValue.length === 0) {
              continue;
            }
          }
          if (
            parameterName.length !== 0 &&
            HTTP_TOKEN_CODEPOINTS.test(parameterName) &&
            (parameterValue.length === 0 ||
              HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) &&
            !mimeType.parameters.has(parameterName)
          ) {
            mimeType.parameters.set(parameterName, parameterValue);
          }
        }
        return mimeType;
      }
      __name(parseMIMEType, "parseMIMEType");
      function forgivingBase64(data) {
        data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
        if (data.length % 4 === 0) {
          data = data.replace(/=?=$/, "");
        }
        if (data.length % 4 === 1) {
          return "failure";
        }
        if (/[^+/0-9A-Za-z]/.test(data)) {
          return "failure";
        }
        const binary = atob2(data);
        const bytes = new Uint8Array(binary.length);
        for (let byte = 0; byte < binary.length; byte++) {
          bytes[byte] = binary.charCodeAt(byte);
        }
        return bytes;
      }
      __name(forgivingBase64, "forgivingBase64");
      function collectAnHTTPQuotedString(input, position2, extractValue) {
        const positionStart = position2.position;
        let value = "";
        assert(input[position2.position] === '"');
        position2.position++;
        while (true) {
          value += collectASequenceOfCodePoints(
            (char) => char !== '"' && char !== "\\",
            input,
            position2,
          );
          if (position2.position >= input.length) {
            break;
          }
          const quoteOrBackslash = input[position2.position];
          position2.position++;
          if (quoteOrBackslash === "\\") {
            if (position2.position >= input.length) {
              value += "\\";
              break;
            }
            value += input[position2.position];
            position2.position++;
          } else {
            assert(quoteOrBackslash === '"');
            break;
          }
        }
        if (extractValue) {
          return value;
        }
        return input.slice(positionStart, position2.position);
      }
      __name(collectAnHTTPQuotedString, "collectAnHTTPQuotedString");
      function serializeAMimeType(mimeType) {
        assert(mimeType !== "failure");
        const { parameters, essence } = mimeType;
        let serialization = essence;
        for (let [name, value] of parameters.entries()) {
          serialization += ";";
          serialization += name;
          serialization += "=";
          if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
            value = value.replace(/(\\|")/g, "\\$1");
            value = '"' + value;
            value += '"';
          }
          serialization += value;
        }
        return serialization;
      }
      __name(serializeAMimeType, "serializeAMimeType");
      function isHTTPWhiteSpace(char) {
        return char === "\r" || char === "\n" || char === "	" || char === " ";
      }
      __name(isHTTPWhiteSpace, "isHTTPWhiteSpace");
      function removeHTTPWhitespace(str, leading = true, trailing = true) {
        let lead = 0;
        let trail = str.length - 1;
        if (leading) {
          for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);
        }
        if (trailing) {
          for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);
        }
        return str.slice(lead, trail + 1);
      }
      __name(removeHTTPWhitespace, "removeHTTPWhitespace");
      function isASCIIWhitespace(char) {
        return (
          char === "\r" ||
          char === "\n" ||
          char === "	" ||
          char === "\f" ||
          char === " "
        );
      }
      __name(isASCIIWhitespace, "isASCIIWhitespace");
      function removeASCIIWhitespace(str, leading = true, trailing = true) {
        let lead = 0;
        let trail = str.length - 1;
        if (leading) {
          for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);
        }
        if (trailing) {
          for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);
        }
        return str.slice(lead, trail + 1);
      }
      __name(removeASCIIWhitespace, "removeASCIIWhitespace");
      module.exports = {
        dataURLProcessor,
        URLSerializer,
        collectASequenceOfCodePoints,
        collectASequenceOfCodePointsFast,
        stringPercentDecode,
        parseMIMEType,
        collectAnHTTPQuotedString,
        serializeAMimeType,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/file.js
  var require_file = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/file.js"(
      exports,
      module,
    ) {
      "use strict";
      var { Blob: Blob2, File: NativeFile } = __require("buffer");
      var { types } = __require("util");
      var { kState } = require_symbols2();
      var { isBlobLike } = require_util2();
      var { webidl } = require_webidl();
      var { parseMIMEType, serializeAMimeType } = require_dataURL();
      var { kEnumerableProperty } = require_util();
      var encoder = new TextEncoder();
      var File = class _File extends Blob2 {
        static {
          __name(this, "File");
        }
        constructor(fileBits, fileName, options = {}) {
          webidl.argumentLengthCheck(arguments, 2, {
            header: "File constructor",
          });
          fileBits = webidl.converters["sequence<BlobPart>"](fileBits);
          fileName = webidl.converters.USVString(fileName);
          options = webidl.converters.FilePropertyBag(options);
          const n = fileName;
          let t = options.type;
          let d;
          substep: {
            if (t) {
              t = parseMIMEType(t);
              if (t === "failure") {
                t = "";
                break substep;
              }
              t = serializeAMimeType(t).toLowerCase();
            }
            d = options.lastModified;
          }
          super(processBlobParts(fileBits, options), { type: t });
          this[kState] = {
            name: n,
            lastModified: d,
            type: t,
          };
        }
        get name() {
          webidl.brandCheck(this, _File);
          return this[kState].name;
        }
        get lastModified() {
          webidl.brandCheck(this, _File);
          return this[kState].lastModified;
        }
        get type() {
          webidl.brandCheck(this, _File);
          return this[kState].type;
        }
      };
      var FileLike = class _FileLike {
        static {
          __name(this, "FileLike");
        }
        constructor(blobLike, fileName, options = {}) {
          const n = fileName;
          const t = options.type;
          const d = options.lastModified ?? Date.now();
          this[kState] = {
            blobLike,
            name: n,
            type: t,
            lastModified: d,
          };
        }
        stream(...args) {
          webidl.brandCheck(this, _FileLike);
          return this[kState].blobLike.stream(...args);
        }
        arrayBuffer(...args) {
          webidl.brandCheck(this, _FileLike);
          return this[kState].blobLike.arrayBuffer(...args);
        }
        slice(...args) {
          webidl.brandCheck(this, _FileLike);
          return this[kState].blobLike.slice(...args);
        }
        text(...args) {
          webidl.brandCheck(this, _FileLike);
          return this[kState].blobLike.text(...args);
        }
        get size() {
          webidl.brandCheck(this, _FileLike);
          return this[kState].blobLike.size;
        }
        get type() {
          webidl.brandCheck(this, _FileLike);
          return this[kState].blobLike.type;
        }
        get name() {
          webidl.brandCheck(this, _FileLike);
          return this[kState].name;
        }
        get lastModified() {
          webidl.brandCheck(this, _FileLike);
          return this[kState].lastModified;
        }
        get [Symbol.toStringTag]() {
          return "File";
        }
      };
      Object.defineProperties(File.prototype, {
        [Symbol.toStringTag]: {
          value: "File",
          configurable: true,
        },
        name: kEnumerableProperty,
        lastModified: kEnumerableProperty,
      });
      webidl.converters.Blob = webidl.interfaceConverter(Blob2);
      webidl.converters.BlobPart = function (V, opts) {
        if (webidl.util.Type(V) === "Object") {
          if (isBlobLike(V)) {
            return webidl.converters.Blob(V, { strict: false });
          }
          if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
            return webidl.converters.BufferSource(V, opts);
          }
        }
        return webidl.converters.USVString(V, opts);
      };
      webidl.converters["sequence<BlobPart>"] = webidl.sequenceConverter(
        webidl.converters.BlobPart,
      );
      webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
        {
          key: "lastModified",
          converter: webidl.converters["long long"],
          get defaultValue() {
            return Date.now();
          },
        },
        {
          key: "type",
          converter: webidl.converters.DOMString,
          defaultValue: "",
        },
        {
          key: "endings",
          converter: /* @__PURE__ */ __name((value) => {
            value = webidl.converters.DOMString(value);
            value = value.toLowerCase();
            if (value !== "native") {
              value = "transparent";
            }
            return value;
          }, "converter"),
          defaultValue: "transparent",
        },
      ]);
      function processBlobParts(parts, options) {
        const bytes = [];
        for (const element of parts) {
          if (typeof element === "string") {
            let s = element;
            if (options.endings === "native") {
              s = convertLineEndingsNative(s);
            }
            bytes.push(encoder.encode(s));
          } else if (
            types.isAnyArrayBuffer(element) ||
            types.isTypedArray(element)
          ) {
            if (!element.buffer) {
              bytes.push(new Uint8Array(element));
            } else {
              bytes.push(
                new Uint8Array(
                  element.buffer,
                  element.byteOffset,
                  element.byteLength,
                ),
              );
            }
          } else if (isBlobLike(element)) {
            bytes.push(element);
          }
        }
        return bytes;
      }
      __name(processBlobParts, "processBlobParts");
      function convertLineEndingsNative(s) {
        let nativeLineEnding = "\n";
        if (process.platform === "win32") {
          nativeLineEnding = "\r\n";
        }
        return s.replace(/\r?\n/g, nativeLineEnding);
      }
      __name(convertLineEndingsNative, "convertLineEndingsNative");
      function isFileLike(object) {
        return (
          (NativeFile && object instanceof NativeFile) ||
          object instanceof File ||
          (object &&
            (typeof object.stream === "function" ||
              typeof object.arrayBuffer === "function") &&
            object[Symbol.toStringTag] === "File")
        );
      }
      __name(isFileLike, "isFileLike");
      module.exports = { File, FileLike, isFileLike };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/formdata.js
  var require_formdata = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/formdata.js"(
      exports,
      module,
    ) {
      "use strict";
      var { isBlobLike, toUSVString, makeIterator } = require_util2();
      var { kState } = require_symbols2();
      var { File: UndiciFile, FileLike, isFileLike } = require_file();
      var { webidl } = require_webidl();
      var { Blob: Blob2, File: NativeFile } = __require("buffer");
      var File = NativeFile ?? UndiciFile;
      var FormData = class _FormData {
        static {
          __name(this, "FormData");
        }
        constructor(form) {
          if (form !== void 0) {
            throw webidl.errors.conversionFailed({
              prefix: "FormData constructor",
              argument: "Argument 1",
              types: ["undefined"],
            });
          }
          this[kState] = [];
        }
        append(name, value, filename = void 0) {
          webidl.brandCheck(this, _FormData);
          webidl.argumentLengthCheck(arguments, 2, {
            header: "FormData.append",
          });
          if (arguments.length === 3 && !isBlobLike(value)) {
            throw new TypeError(
              "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'",
            );
          }
          name = webidl.converters.USVString(name);
          value = isBlobLike(value)
            ? webidl.converters.Blob(value, { strict: false })
            : webidl.converters.USVString(value);
          filename =
            arguments.length === 3
              ? webidl.converters.USVString(filename)
              : void 0;
          const entry = makeEntry(name, value, filename);
          this[kState].push(entry);
        }
        delete(name) {
          webidl.brandCheck(this, _FormData);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.delete",
          });
          name = webidl.converters.USVString(name);
          this[kState] = this[kState].filter((entry) => entry.name !== name);
        }
        get(name) {
          webidl.brandCheck(this, _FormData);
          webidl.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
          name = webidl.converters.USVString(name);
          const idx = this[kState].findIndex((entry) => entry.name === name);
          if (idx === -1) {
            return null;
          }
          return this[kState][idx].value;
        }
        getAll(name) {
          webidl.brandCheck(this, _FormData);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.getAll",
          });
          name = webidl.converters.USVString(name);
          return this[kState]
            .filter((entry) => entry.name === name)
            .map((entry) => entry.value);
        }
        has(name) {
          webidl.brandCheck(this, _FormData);
          webidl.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
          name = webidl.converters.USVString(name);
          return this[kState].findIndex((entry) => entry.name === name) !== -1;
        }
        set(name, value, filename = void 0) {
          webidl.brandCheck(this, _FormData);
          webidl.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
          if (arguments.length === 3 && !isBlobLike(value)) {
            throw new TypeError(
              "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'",
            );
          }
          name = webidl.converters.USVString(name);
          value = isBlobLike(value)
            ? webidl.converters.Blob(value, { strict: false })
            : webidl.converters.USVString(value);
          filename = arguments.length === 3 ? toUSVString(filename) : void 0;
          const entry = makeEntry(name, value, filename);
          const idx = this[kState].findIndex((entry2) => entry2.name === name);
          if (idx !== -1) {
            this[kState] = [
              ...this[kState].slice(0, idx),
              entry,
              ...this[kState]
                .slice(idx + 1)
                .filter((entry2) => entry2.name !== name),
            ];
          } else {
            this[kState].push(entry);
          }
        }
        entries() {
          webidl.brandCheck(this, _FormData);
          return makeIterator(
            () => this[kState].map((pair) => [pair.name, pair.value]),
            "FormData",
            "key+value",
          );
        }
        keys() {
          webidl.brandCheck(this, _FormData);
          return makeIterator(
            () => this[kState].map((pair) => [pair.name, pair.value]),
            "FormData",
            "key",
          );
        }
        values() {
          webidl.brandCheck(this, _FormData);
          return makeIterator(
            () => this[kState].map((pair) => [pair.name, pair.value]),
            "FormData",
            "value",
          );
        }
        /**
         * @param {(value: string, key: string, self: FormData) => void} callbackFn
         * @param {unknown} thisArg
         */
        forEach(callbackFn, thisArg = globalThis) {
          webidl.brandCheck(this, _FormData);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "FormData.forEach",
          });
          if (typeof callbackFn !== "function") {
            throw new TypeError(
              "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.",
            );
          }
          for (const [key, value] of this) {
            callbackFn.apply(thisArg, [value, key, this]);
          }
        }
      };
      FormData.prototype[Symbol.iterator] = FormData.prototype.entries;
      Object.defineProperties(FormData.prototype, {
        [Symbol.toStringTag]: {
          value: "FormData",
          configurable: true,
        },
      });
      function makeEntry(name, value, filename) {
        name = Buffer.from(name).toString("utf8");
        if (typeof value === "string") {
          value = Buffer.from(value).toString("utf8");
        } else {
          if (!isFileLike(value)) {
            value =
              value instanceof Blob2
                ? new File([value], "blob", { type: value.type })
                : new FileLike(value, "blob", { type: value.type });
          }
          if (filename !== void 0) {
            const options = {
              type: value.type,
              lastModified: value.lastModified,
            };
            value =
              (NativeFile && value instanceof NativeFile) ||
              value instanceof UndiciFile
                ? new File([value], filename, options)
                : new FileLike(value, filename, options);
          }
        }
        return { name, value };
      }
      __name(makeEntry, "makeEntry");
      module.exports = { FormData };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/body.js
  var require_body = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/body.js"(
      exports,
      module,
    ) {
      "use strict";
      var Busboy = require_main();
      var util2 = require_util();
      var {
        ReadableStreamFrom,
        isBlobLike,
        isReadableStreamLike,
        readableStreamClose,
        createDeferredPromise,
        fullyReadBody,
      } = require_util2();
      var { FormData } = require_formdata();
      var { kState } = require_symbols2();
      var { webidl } = require_webidl();
      var { DOMException: DOMException2, structuredClone } =
        require_constants2();
      var { Blob: Blob2, File: NativeFile } = __require("buffer");
      var { kBodyUsed } = require_symbols();
      var assert = __require("assert");
      var { isErrored } = require_util();
      var { isUint8Array: isUint8Array3, isArrayBuffer } =
        __require("util/types");
      var { File: UndiciFile } = require_file();
      var { parseMIMEType, serializeAMimeType } = require_dataURL();
      var ReadableStream = globalThis.ReadableStream;
      var File = NativeFile ?? UndiciFile;
      var textEncoder = new TextEncoder();
      var textDecoder = new TextDecoder();
      function extractBody(object, keepalive = false) {
        if (!ReadableStream) {
          ReadableStream = __require("stream/web").ReadableStream;
        }
        let stream = null;
        if (object instanceof ReadableStream) {
          stream = object;
        } else if (isBlobLike(object)) {
          stream = object.stream();
        } else {
          stream = new ReadableStream({
            async pull(controller) {
              controller.enqueue(
                typeof source === "string"
                  ? textEncoder.encode(source)
                  : source,
              );
              queueMicrotask(() => readableStreamClose(controller));
            },
            start() {},
            type: void 0,
          });
        }
        assert(isReadableStreamLike(stream));
        let action = null;
        let source = null;
        let length = null;
        let type = null;
        if (typeof object === "string") {
          source = object;
          type = "text/plain;charset=UTF-8";
        } else if (object instanceof URLSearchParams) {
          source = object.toString();
          type = "application/x-www-form-urlencoded;charset=UTF-8";
        } else if (isArrayBuffer(object)) {
          source = new Uint8Array(object.slice());
        } else if (ArrayBuffer.isView(object)) {
          source = new Uint8Array(
            object.buffer.slice(
              object.byteOffset,
              object.byteOffset + object.byteLength,
            ),
          );
        } else if (util2.isFormDataLike(object)) {
          const boundary = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, "0")}`;
          const prefix2 = `--${boundary}\r
Content-Disposition: form-data`;
          const escape = /* @__PURE__ */ __name(
            (str) =>
              str
                .replace(/\n/g, "%0A")
                .replace(/\r/g, "%0D")
                .replace(/"/g, "%22"),
            "escape",
          );
          const normalizeLinefeeds = /* @__PURE__ */ __name(
            (value) => value.replace(/\r?\n|\r/g, "\r\n"),
            "normalizeLinefeeds",
          );
          const blobParts = [];
          const rn = new Uint8Array([13, 10]);
          length = 0;
          let hasUnknownSizeValue = false;
          for (const [name, value] of object) {
            if (typeof value === "string") {
              const chunk2 = textEncoder.encode(
                prefix2 +
                  `; name="${escape(normalizeLinefeeds(name))}"\r
\r
${normalizeLinefeeds(value)}\r
`,
              );
              blobParts.push(chunk2);
              length += chunk2.byteLength;
            } else {
              const chunk2 = textEncoder.encode(
                `${prefix2}; name="${escape(normalizeLinefeeds(name))}"` +
                  (value.name ? `; filename="${escape(value.name)}"` : "") +
                  `\r
Content-Type: ${value.type || "application/octet-stream"}\r
\r
`,
              );
              blobParts.push(chunk2, value, rn);
              if (typeof value.size === "number") {
                length += chunk2.byteLength + value.size + rn.byteLength;
              } else {
                hasUnknownSizeValue = true;
              }
            }
          }
          const chunk = textEncoder.encode(`--${boundary}--`);
          blobParts.push(chunk);
          length += chunk.byteLength;
          if (hasUnknownSizeValue) {
            length = null;
          }
          source = object;
          action = /* @__PURE__ */ __name(async function* () {
            for (const part of blobParts) {
              if (part.stream) {
                yield* part.stream();
              } else {
                yield part;
              }
            }
          }, "action");
          type = "multipart/form-data; boundary=" + boundary;
        } else if (isBlobLike(object)) {
          source = object;
          length = object.size;
          if (object.type) {
            type = object.type;
          }
        } else if (typeof object[Symbol.asyncIterator] === "function") {
          if (keepalive) {
            throw new TypeError("keepalive");
          }
          if (util2.isDisturbed(object) || object.locked) {
            throw new TypeError(
              "Response body object should not be disturbed or locked",
            );
          }
          stream =
            object instanceof ReadableStream
              ? object
              : ReadableStreamFrom(object);
        }
        if (typeof source === "string" || util2.isBuffer(source)) {
          length = Buffer.byteLength(source);
        }
        if (action != null) {
          let iterator;
          stream = new ReadableStream({
            async start() {
              iterator = action(object)[Symbol.asyncIterator]();
            },
            async pull(controller) {
              const { value, done } = await iterator.next();
              if (done) {
                queueMicrotask(() => {
                  controller.close();
                });
              } else {
                if (!isErrored(stream)) {
                  controller.enqueue(new Uint8Array(value));
                }
              }
              return controller.desiredSize > 0;
            },
            async cancel(reason) {
              await iterator.return();
            },
            type: void 0,
          });
        }
        const body = { stream, source, length };
        return [body, type];
      }
      __name(extractBody, "extractBody");
      function safelyExtractBody(object, keepalive = false) {
        if (!ReadableStream) {
          ReadableStream = __require("stream/web").ReadableStream;
        }
        if (object instanceof ReadableStream) {
          assert(
            !util2.isDisturbed(object),
            "The body has already been consumed.",
          );
          assert(!object.locked, "The stream is locked.");
        }
        return extractBody(object, keepalive);
      }
      __name(safelyExtractBody, "safelyExtractBody");
      function cloneBody(body) {
        const [out1, out2] = body.stream.tee();
        const out2Clone = structuredClone(out2, { transfer: [out2] });
        const [, finalClone] = out2Clone.tee();
        body.stream = out1;
        return {
          stream: finalClone,
          length: body.length,
          source: body.source,
        };
      }
      __name(cloneBody, "cloneBody");
      async function* consumeBody(body) {
        if (body) {
          if (isUint8Array3(body)) {
            yield body;
          } else {
            const stream = body.stream;
            if (util2.isDisturbed(stream)) {
              throw new TypeError("The body has already been consumed.");
            }
            if (stream.locked) {
              throw new TypeError("The stream is locked.");
            }
            stream[kBodyUsed] = true;
            yield* stream;
          }
        }
      }
      __name(consumeBody, "consumeBody");
      function throwIfAborted(state) {
        if (state.aborted) {
          throw new DOMException2("The operation was aborted.", "AbortError");
        }
      }
      __name(throwIfAborted, "throwIfAborted");
      function bodyMixinMethods(instance) {
        const methods = {
          blob() {
            return specConsumeBody(
              this,
              (bytes) => {
                let mimeType = bodyMimeType(this);
                if (mimeType === "failure") {
                  mimeType = "";
                } else if (mimeType) {
                  mimeType = serializeAMimeType(mimeType);
                }
                return new Blob2([bytes], { type: mimeType });
              },
              instance,
            );
          },
          arrayBuffer() {
            return specConsumeBody(
              this,
              (bytes) => {
                return new Uint8Array(bytes).buffer;
              },
              instance,
            );
          },
          text() {
            return specConsumeBody(this, utf8DecodeBytes, instance);
          },
          json() {
            return specConsumeBody(this, parseJSONFromBytes, instance);
          },
          async formData() {
            webidl.brandCheck(this, instance);
            throwIfAborted(this[kState]);
            const contentType = this.headers.get("Content-Type");
            if (/multipart\/form-data/.test(contentType)) {
              const headers = {};
              for (const [key, value] of this.headers)
                headers[key.toLowerCase()] = value;
              const responseFormData = new FormData();
              let busboy;
              try {
                busboy = new Busboy({
                  headers,
                  preservePath: true,
                });
              } catch (err) {
                throw new DOMException2(`${err}`, "AbortError");
              }
              busboy.on("field", (name, value) => {
                responseFormData.append(name, value);
              });
              busboy.on("file", (name, value, filename, encoding, mimeType) => {
                const chunks = [];
                if (
                  encoding === "base64" ||
                  encoding.toLowerCase() === "base64"
                ) {
                  let base64chunk = "";
                  value.on("data", (chunk) => {
                    base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
                    const end = base64chunk.length - (base64chunk.length % 4);
                    chunks.push(
                      Buffer.from(base64chunk.slice(0, end), "base64"),
                    );
                    base64chunk = base64chunk.slice(end);
                  });
                  value.on("end", () => {
                    chunks.push(Buffer.from(base64chunk, "base64"));
                    responseFormData.append(
                      name,
                      new File(chunks, filename, { type: mimeType }),
                    );
                  });
                } else {
                  value.on("data", (chunk) => {
                    chunks.push(chunk);
                  });
                  value.on("end", () => {
                    responseFormData.append(
                      name,
                      new File(chunks, filename, { type: mimeType }),
                    );
                  });
                }
              });
              const busboyResolve = new Promise((resolve, reject) => {
                busboy.on("finish", resolve);
                busboy.on("error", (err) => reject(new TypeError(err)));
              });
              if (this.body !== null)
                for await (const chunk of consumeBody(this[kState].body))
                  busboy.write(chunk);
              busboy.end();
              await busboyResolve;
              return responseFormData;
            } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
              let entries;
              try {
                let text4 = "";
                const streamingDecoder = new TextDecoder("utf-8", {
                  ignoreBOM: true,
                });
                for await (const chunk of consumeBody(this[kState].body)) {
                  if (!isUint8Array3(chunk)) {
                    throw new TypeError("Expected Uint8Array chunk");
                  }
                  text4 += streamingDecoder.decode(chunk, { stream: true });
                }
                text4 += streamingDecoder.decode();
                entries = new URLSearchParams(text4);
              } catch (err) {
                throw Object.assign(new TypeError(), { cause: err });
              }
              const formData = new FormData();
              for (const [name, value] of entries) {
                formData.append(name, value);
              }
              return formData;
            } else {
              await Promise.resolve();
              throwIfAborted(this[kState]);
              throw webidl.errors.exception({
                header: `${instance.name}.formData`,
                message: "Could not parse content as FormData.",
              });
            }
          },
        };
        return methods;
      }
      __name(bodyMixinMethods, "bodyMixinMethods");
      function mixinBody(prototype) {
        Object.assign(prototype.prototype, bodyMixinMethods(prototype));
      }
      __name(mixinBody, "mixinBody");
      async function specConsumeBody(object, convertBytesToJSValue, instance) {
        webidl.brandCheck(object, instance);
        throwIfAborted(object[kState]);
        if (bodyUnusable(object[kState].body)) {
          throw new TypeError("Body is unusable");
        }
        const promise = createDeferredPromise();
        const errorSteps = /* @__PURE__ */ __name(
          (error) => promise.reject(error),
          "errorSteps",
        );
        const successSteps = /* @__PURE__ */ __name((data) => {
          try {
            promise.resolve(convertBytesToJSValue(data));
          } catch (e) {
            errorSteps(e);
          }
        }, "successSteps");
        if (object[kState].body == null) {
          successSteps(new Uint8Array());
          return promise.promise;
        }
        await fullyReadBody(object[kState].body, successSteps, errorSteps);
        return promise.promise;
      }
      __name(specConsumeBody, "specConsumeBody");
      function bodyUnusable(body) {
        return (
          body != null && (body.stream.locked || util2.isDisturbed(body.stream))
        );
      }
      __name(bodyUnusable, "bodyUnusable");
      function utf8DecodeBytes(buffer) {
        if (buffer.length === 0) {
          return "";
        }
        if (buffer[0] === 239 && buffer[1] === 187 && buffer[2] === 191) {
          buffer = buffer.subarray(3);
        }
        const output = textDecoder.decode(buffer);
        return output;
      }
      __name(utf8DecodeBytes, "utf8DecodeBytes");
      function parseJSONFromBytes(bytes) {
        return JSON.parse(utf8DecodeBytes(bytes));
      }
      __name(parseJSONFromBytes, "parseJSONFromBytes");
      function bodyMimeType(object) {
        const { headersList } = object[kState];
        const contentType = headersList.get("content-type");
        if (contentType === null) {
          return "failure";
        }
        return parseMIMEType(contentType);
      }
      __name(bodyMimeType, "bodyMimeType");
      module.exports = {
        extractBody,
        safelyExtractBody,
        cloneBody,
        mixinBody,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/request.js
  var require_request = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/request.js"(
      exports,
      module,
    ) {
      "use strict";
      var { InvalidArgumentError, NotSupportedError } = require_errors();
      var assert = __require("assert");
      var { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } =
        require_symbols();
      var util2 = require_util();
      var tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
      var headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
      var invalidPathRegex = /[^\u0021-\u00ff]/;
      var kHandler = Symbol("handler");
      var channels = {};
      var extractBody;
      try {
        const diagnosticsChannel = __require("diagnostics_channel");
        channels.create = diagnosticsChannel.channel("undici:request:create");
        channels.bodySent = diagnosticsChannel.channel(
          "undici:request:bodySent",
        );
        channels.headers = diagnosticsChannel.channel("undici:request:headers");
        channels.trailers = diagnosticsChannel.channel(
          "undici:request:trailers",
        );
        channels.error = diagnosticsChannel.channel("undici:request:error");
      } catch {
        channels.create = { hasSubscribers: false };
        channels.bodySent = { hasSubscribers: false };
        channels.headers = { hasSubscribers: false };
        channels.trailers = { hasSubscribers: false };
        channels.error = { hasSubscribers: false };
      }
      var Request = class _Request {
        static {
          __name(this, "Request");
        }
        constructor(
          origin,
          {
            path: path4,
            method,
            body,
            headers,
            query,
            idempotent,
            blocking,
            upgrade,
            headersTimeout,
            bodyTimeout,
            reset: reset2,
            throwOnError,
            expectContinue,
          },
          handler,
        ) {
          if (typeof path4 !== "string") {
            throw new InvalidArgumentError("path must be a string");
          } else if (
            path4[0] !== "/" &&
            !(path4.startsWith("http://") || path4.startsWith("https://")) &&
            method !== "CONNECT"
          ) {
            throw new InvalidArgumentError(
              "path must be an absolute URL or start with a slash",
            );
          } else if (invalidPathRegex.exec(path4) !== null) {
            throw new InvalidArgumentError("invalid request path");
          }
          if (typeof method !== "string") {
            throw new InvalidArgumentError("method must be a string");
          } else if (tokenRegExp.exec(method) === null) {
            throw new InvalidArgumentError("invalid request method");
          }
          if (upgrade && typeof upgrade !== "string") {
            throw new InvalidArgumentError("upgrade must be a string");
          }
          if (
            headersTimeout != null &&
            (!Number.isFinite(headersTimeout) || headersTimeout < 0)
          ) {
            throw new InvalidArgumentError("invalid headersTimeout");
          }
          if (
            bodyTimeout != null &&
            (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)
          ) {
            throw new InvalidArgumentError("invalid bodyTimeout");
          }
          if (reset2 != null && typeof reset2 !== "boolean") {
            throw new InvalidArgumentError("invalid reset");
          }
          if (expectContinue != null && typeof expectContinue !== "boolean") {
            throw new InvalidArgumentError("invalid expectContinue");
          }
          this.headersTimeout = headersTimeout;
          this.bodyTimeout = bodyTimeout;
          this.throwOnError = throwOnError === true;
          this.method = method;
          this.abort = null;
          if (body == null) {
            this.body = null;
          } else if (util2.isStream(body)) {
            this.body = body;
            const rState = this.body._readableState;
            if (!rState || !rState.autoDestroy) {
              this.endHandler = /* @__PURE__ */ __name(function autoDestroy() {
                util2.destroy(this);
              }, "autoDestroy");
              this.body.on("end", this.endHandler);
            }
            this.errorHandler = (err) => {
              if (this.abort) {
                this.abort(err);
              } else {
                this.error = err;
              }
            };
            this.body.on("error", this.errorHandler);
          } else if (util2.isBuffer(body)) {
            this.body = body.byteLength ? body : null;
          } else if (ArrayBuffer.isView(body)) {
            this.body = body.buffer.byteLength
              ? Buffer.from(body.buffer, body.byteOffset, body.byteLength)
              : null;
          } else if (body instanceof ArrayBuffer) {
            this.body = body.byteLength ? Buffer.from(body) : null;
          } else if (typeof body === "string") {
            this.body = body.length ? Buffer.from(body) : null;
          } else if (
            util2.isFormDataLike(body) ||
            util2.isIterable(body) ||
            util2.isBlobLike(body)
          ) {
            this.body = body;
          } else {
            throw new InvalidArgumentError(
              "body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable",
            );
          }
          this.completed = false;
          this.aborted = false;
          this.upgrade = upgrade || null;
          this.path = query ? util2.buildURL(path4, query) : path4;
          this.origin = origin;
          this.idempotent =
            idempotent == null
              ? method === "HEAD" || method === "GET"
              : idempotent;
          this.blocking = blocking == null ? false : blocking;
          this.reset = reset2 == null ? null : reset2;
          this.host = null;
          this.contentLength = null;
          this.contentType = null;
          this.headers = "";
          this.expectContinue = expectContinue != null ? expectContinue : false;
          if (Array.isArray(headers)) {
            if (headers.length % 2 !== 0) {
              throw new InvalidArgumentError("headers array must be even");
            }
            for (let i = 0; i < headers.length; i += 2) {
              processHeader(this, headers[i], headers[i + 1]);
            }
          } else if (headers && typeof headers === "object") {
            const keys = Object.keys(headers);
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];
              processHeader(this, key, headers[key]);
            }
          } else if (headers != null) {
            throw new InvalidArgumentError(
              "headers must be an object or an array",
            );
          }
          if (util2.isFormDataLike(this.body)) {
            if (
              util2.nodeMajor < 16 ||
              (util2.nodeMajor === 16 && util2.nodeMinor < 8)
            ) {
              throw new InvalidArgumentError(
                "Form-Data bodies are only supported in node v16.8 and newer.",
              );
            }
            if (!extractBody) {
              extractBody = require_body().extractBody;
            }
            const [bodyStream, contentType] = extractBody(body);
            if (this.contentType == null) {
              this.contentType = contentType;
              this.headers += `content-type: ${contentType}\r
`;
            }
            this.body = bodyStream.stream;
            this.contentLength = bodyStream.length;
          } else if (
            util2.isBlobLike(body) &&
            this.contentType == null &&
            body.type
          ) {
            this.contentType = body.type;
            this.headers += `content-type: ${body.type}\r
`;
          }
          util2.validateHandler(handler, method, upgrade);
          this.servername = util2.getServerName(this.host);
          this[kHandler] = handler;
          if (channels.create.hasSubscribers) {
            channels.create.publish({ request: this });
          }
        }
        onBodySent(chunk) {
          if (this[kHandler].onBodySent) {
            try {
              return this[kHandler].onBodySent(chunk);
            } catch (err) {
              this.abort(err);
            }
          }
        }
        onRequestSent() {
          if (channels.bodySent.hasSubscribers) {
            channels.bodySent.publish({ request: this });
          }
          if (this[kHandler].onRequestSent) {
            try {
              return this[kHandler].onRequestSent();
            } catch (err) {
              this.abort(err);
            }
          }
        }
        onConnect(abort) {
          assert(!this.aborted);
          assert(!this.completed);
          if (this.error) {
            abort(this.error);
          } else {
            this.abort = abort;
            return this[kHandler].onConnect(abort);
          }
        }
        onHeaders(statusCode, headers, resume, statusText) {
          assert(!this.aborted);
          assert(!this.completed);
          if (channels.headers.hasSubscribers) {
            channels.headers.publish({
              request: this,
              response: { statusCode, headers, statusText },
            });
          }
          try {
            return this[kHandler].onHeaders(
              statusCode,
              headers,
              resume,
              statusText,
            );
          } catch (err) {
            this.abort(err);
          }
        }
        onData(chunk) {
          assert(!this.aborted);
          assert(!this.completed);
          try {
            return this[kHandler].onData(chunk);
          } catch (err) {
            this.abort(err);
            return false;
          }
        }
        onUpgrade(statusCode, headers, socket) {
          assert(!this.aborted);
          assert(!this.completed);
          return this[kHandler].onUpgrade(statusCode, headers, socket);
        }
        onComplete(trailers) {
          this.onFinally();
          assert(!this.aborted);
          this.completed = true;
          if (channels.trailers.hasSubscribers) {
            channels.trailers.publish({ request: this, trailers });
          }
          try {
            return this[kHandler].onComplete(trailers);
          } catch (err) {
            this.onError(err);
          }
        }
        onError(error) {
          this.onFinally();
          if (channels.error.hasSubscribers) {
            channels.error.publish({ request: this, error });
          }
          if (this.aborted) {
            return;
          }
          this.aborted = true;
          return this[kHandler].onError(error);
        }
        onFinally() {
          if (this.errorHandler) {
            this.body.off("error", this.errorHandler);
            this.errorHandler = null;
          }
          if (this.endHandler) {
            this.body.off("end", this.endHandler);
            this.endHandler = null;
          }
        }
        // TODO: adjust to support H2
        addHeader(key, value) {
          processHeader(this, key, value);
          return this;
        }
        static [kHTTP1BuildRequest](origin, opts, handler) {
          return new _Request(origin, opts, handler);
        }
        static [kHTTP2BuildRequest](origin, opts, handler) {
          const headers = opts.headers;
          opts = { ...opts, headers: null };
          const request = new _Request(origin, opts, handler);
          request.headers = {};
          if (Array.isArray(headers)) {
            if (headers.length % 2 !== 0) {
              throw new InvalidArgumentError("headers array must be even");
            }
            for (let i = 0; i < headers.length; i += 2) {
              processHeader(request, headers[i], headers[i + 1], true);
            }
          } else if (headers && typeof headers === "object") {
            const keys = Object.keys(headers);
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i];
              processHeader(request, key, headers[key], true);
            }
          } else if (headers != null) {
            throw new InvalidArgumentError(
              "headers must be an object or an array",
            );
          }
          return request;
        }
        static [kHTTP2CopyHeaders](raw) {
          const rawHeaders = raw.split("\r\n");
          const headers = {};
          for (const header of rawHeaders) {
            const [key, value] = header.split(": ");
            if (value == null || value.length === 0) continue;
            if (headers[key]) headers[key] += `,${value}`;
            else headers[key] = value;
          }
          return headers;
        }
      };
      function processHeaderValue(key, val, skipAppend) {
        if (val && typeof val === "object") {
          throw new InvalidArgumentError(`invalid ${key} header`);
        }
        val = val != null ? `${val}` : "";
        if (headerCharRegex.exec(val) !== null) {
          throw new InvalidArgumentError(`invalid ${key} header`);
        }
        return skipAppend
          ? val
          : `${key}: ${val}\r
`;
      }
      __name(processHeaderValue, "processHeaderValue");
      function processHeader(request, key, val, skipAppend = false) {
        if (val && typeof val === "object" && !Array.isArray(val)) {
          throw new InvalidArgumentError(`invalid ${key} header`);
        } else if (val === void 0) {
          return;
        }
        if (
          request.host === null &&
          key.length === 4 &&
          key.toLowerCase() === "host"
        ) {
          if (headerCharRegex.exec(val) !== null) {
            throw new InvalidArgumentError(`invalid ${key} header`);
          }
          request.host = val;
        } else if (
          request.contentLength === null &&
          key.length === 14 &&
          key.toLowerCase() === "content-length"
        ) {
          request.contentLength = parseInt(val, 10);
          if (!Number.isFinite(request.contentLength)) {
            throw new InvalidArgumentError("invalid content-length header");
          }
        } else if (
          request.contentType === null &&
          key.length === 12 &&
          key.toLowerCase() === "content-type"
        ) {
          request.contentType = val;
          if (skipAppend)
            request.headers[key] = processHeaderValue(key, val, skipAppend);
          else request.headers += processHeaderValue(key, val);
        } else if (
          key.length === 17 &&
          key.toLowerCase() === "transfer-encoding"
        ) {
          throw new InvalidArgumentError("invalid transfer-encoding header");
        } else if (key.length === 10 && key.toLowerCase() === "connection") {
          const value = typeof val === "string" ? val.toLowerCase() : null;
          if (value !== "close" && value !== "keep-alive") {
            throw new InvalidArgumentError("invalid connection header");
          } else if (value === "close") {
            request.reset = true;
          }
        } else if (key.length === 10 && key.toLowerCase() === "keep-alive") {
          throw new InvalidArgumentError("invalid keep-alive header");
        } else if (key.length === 7 && key.toLowerCase() === "upgrade") {
          throw new InvalidArgumentError("invalid upgrade header");
        } else if (key.length === 6 && key.toLowerCase() === "expect") {
          throw new NotSupportedError("expect header not supported");
        } else if (tokenRegExp.exec(key) === null) {
          throw new InvalidArgumentError("invalid header key");
        } else {
          if (Array.isArray(val)) {
            for (let i = 0; i < val.length; i++) {
              if (skipAppend) {
                if (request.headers[key])
                  request.headers[key] +=
                    `,${processHeaderValue(key, val[i], skipAppend)}`;
                else
                  request.headers[key] = processHeaderValue(
                    key,
                    val[i],
                    skipAppend,
                  );
              } else {
                request.headers += processHeaderValue(key, val[i]);
              }
            }
          } else {
            if (skipAppend)
              request.headers[key] = processHeaderValue(key, val, skipAppend);
            else request.headers += processHeaderValue(key, val);
          }
        }
      }
      __name(processHeader, "processHeader");
      module.exports = Request;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/dispatcher.js
  var require_dispatcher = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/dispatcher.js"(
      exports,
      module,
    ) {
      "use strict";
      var EventEmitter = __require("events");
      var Dispatcher = class extends EventEmitter {
        static {
          __name(this, "Dispatcher");
        }
        dispatch() {
          throw new Error("not implemented");
        }
        close() {
          throw new Error("not implemented");
        }
        destroy() {
          throw new Error("not implemented");
        }
      };
      module.exports = Dispatcher;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/dispatcher-base.js
  var require_dispatcher_base = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/dispatcher-base.js"(
      exports,
      module,
    ) {
      "use strict";
      var Dispatcher = require_dispatcher();
      var { ClientDestroyedError, ClientClosedError, InvalidArgumentError } =
        require_errors();
      var { kDestroy, kClose, kDispatch, kInterceptors } = require_symbols();
      var kDestroyed = Symbol("destroyed");
      var kClosed = Symbol("closed");
      var kOnDestroyed = Symbol("onDestroyed");
      var kOnClosed = Symbol("onClosed");
      var kInterceptedDispatch = Symbol("Intercepted Dispatch");
      var DispatcherBase = class extends Dispatcher {
        static {
          __name(this, "DispatcherBase");
        }
        constructor() {
          super();
          this[kDestroyed] = false;
          this[kOnDestroyed] = null;
          this[kClosed] = false;
          this[kOnClosed] = [];
        }
        get destroyed() {
          return this[kDestroyed];
        }
        get closed() {
          return this[kClosed];
        }
        get interceptors() {
          return this[kInterceptors];
        }
        set interceptors(newInterceptors) {
          if (newInterceptors) {
            for (let i = newInterceptors.length - 1; i >= 0; i--) {
              const interceptor = this[kInterceptors][i];
              if (typeof interceptor !== "function") {
                throw new InvalidArgumentError(
                  "interceptor must be an function",
                );
              }
            }
          }
          this[kInterceptors] = newInterceptors;
        }
        close(callback) {
          if (callback === void 0) {
            return new Promise((resolve, reject) => {
              this.close((err, data) => {
                return err ? reject(err) : resolve(data);
              });
            });
          }
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (this[kDestroyed]) {
            queueMicrotask(() => callback(new ClientDestroyedError(), null));
            return;
          }
          if (this[kClosed]) {
            if (this[kOnClosed]) {
              this[kOnClosed].push(callback);
            } else {
              queueMicrotask(() => callback(null, null));
            }
            return;
          }
          this[kClosed] = true;
          this[kOnClosed].push(callback);
          const onClosed = /* @__PURE__ */ __name(() => {
            const callbacks = this[kOnClosed];
            this[kOnClosed] = null;
            for (let i = 0; i < callbacks.length; i++) {
              callbacks[i](null, null);
            }
          }, "onClosed");
          this[kClose]()
            .then(() => this.destroy())
            .then(() => {
              queueMicrotask(onClosed);
            });
        }
        destroy(err, callback) {
          if (typeof err === "function") {
            callback = err;
            err = null;
          }
          if (callback === void 0) {
            return new Promise((resolve, reject) => {
              this.destroy(err, (err2, data) => {
                return err2
                  ? /* istanbul ignore next: should never error */
                    reject(err2)
                  : resolve(data);
              });
            });
          }
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          if (this[kDestroyed]) {
            if (this[kOnDestroyed]) {
              this[kOnDestroyed].push(callback);
            } else {
              queueMicrotask(() => callback(null, null));
            }
            return;
          }
          if (!err) {
            err = new ClientDestroyedError();
          }
          this[kDestroyed] = true;
          this[kOnDestroyed] = this[kOnDestroyed] || [];
          this[kOnDestroyed].push(callback);
          const onDestroyed = /* @__PURE__ */ __name(() => {
            const callbacks = this[kOnDestroyed];
            this[kOnDestroyed] = null;
            for (let i = 0; i < callbacks.length; i++) {
              callbacks[i](null, null);
            }
          }, "onDestroyed");
          this[kDestroy](err).then(() => {
            queueMicrotask(onDestroyed);
          });
        }
        [kInterceptedDispatch](opts, handler) {
          if (!this[kInterceptors] || this[kInterceptors].length === 0) {
            this[kInterceptedDispatch] = this[kDispatch];
            return this[kDispatch](opts, handler);
          }
          let dispatch = this[kDispatch].bind(this);
          for (let i = this[kInterceptors].length - 1; i >= 0; i--) {
            dispatch = this[kInterceptors][i](dispatch);
          }
          this[kInterceptedDispatch] = dispatch;
          return dispatch(opts, handler);
        }
        dispatch(opts, handler) {
          if (!handler || typeof handler !== "object") {
            throw new InvalidArgumentError("handler must be an object");
          }
          try {
            if (!opts || typeof opts !== "object") {
              throw new InvalidArgumentError("opts must be an object.");
            }
            if (this[kDestroyed] || this[kOnDestroyed]) {
              throw new ClientDestroyedError();
            }
            if (this[kClosed]) {
              throw new ClientClosedError();
            }
            return this[kInterceptedDispatch](opts, handler);
          } catch (err) {
            if (typeof handler.onError !== "function") {
              throw new InvalidArgumentError("invalid onError method");
            }
            handler.onError(err);
            return false;
          }
        }
      };
      module.exports = DispatcherBase;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/connect.js
  var require_connect = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/core/connect.js"(
      exports,
      module,
    ) {
      "use strict";
      var net = __require("net");
      var assert = __require("assert");
      var util2 = require_util();
      var { InvalidArgumentError, ConnectTimeoutError } = require_errors();
      var tls;
      var SessionCache;
      if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
        SessionCache = class WeakSessionCache {
          static {
            __name(this, "WeakSessionCache");
          }
          constructor(maxCachedSessions) {
            this._maxCachedSessions = maxCachedSessions;
            this._sessionCache = /* @__PURE__ */ new Map();
            this._sessionRegistry = new global.FinalizationRegistry((key) => {
              if (this._sessionCache.size < this._maxCachedSessions) {
                return;
              }
              const ref = this._sessionCache.get(key);
              if (ref !== void 0 && ref.deref() === void 0) {
                this._sessionCache.delete(key);
              }
            });
          }
          get(sessionKey) {
            const ref = this._sessionCache.get(sessionKey);
            return ref ? ref.deref() : null;
          }
          set(sessionKey, session) {
            if (this._maxCachedSessions === 0) {
              return;
            }
            this._sessionCache.set(sessionKey, new WeakRef(session));
            this._sessionRegistry.register(session, sessionKey);
          }
        };
      } else {
        SessionCache = class SimpleSessionCache {
          static {
            __name(this, "SimpleSessionCache");
          }
          constructor(maxCachedSessions) {
            this._maxCachedSessions = maxCachedSessions;
            this._sessionCache = /* @__PURE__ */ new Map();
          }
          get(sessionKey) {
            return this._sessionCache.get(sessionKey);
          }
          set(sessionKey, session) {
            if (this._maxCachedSessions === 0) {
              return;
            }
            if (this._sessionCache.size >= this._maxCachedSessions) {
              const { value: oldestKey } = this._sessionCache.keys().next();
              this._sessionCache.delete(oldestKey);
            }
            this._sessionCache.set(sessionKey, session);
          }
        };
      }
      function buildConnector({
        allowH2,
        maxCachedSessions,
        socketPath,
        timeout,
        ...opts
      }) {
        if (
          maxCachedSessions != null &&
          (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)
        ) {
          throw new InvalidArgumentError(
            "maxCachedSessions must be a positive integer or zero",
          );
        }
        const options = { path: socketPath, ...opts };
        const sessionCache = new SessionCache(
          maxCachedSessions == null ? 100 : maxCachedSessions,
        );
        timeout = timeout == null ? 1e4 : timeout;
        allowH2 = allowH2 != null ? allowH2 : false;
        return /* @__PURE__ */ __name(function connect(
          {
            hostname,
            host,
            protocol,
            port,
            servername,
            localAddress,
            httpSocket,
          },
          callback,
        ) {
          let socket;
          if (protocol === "https:") {
            if (!tls) {
              tls = __require("tls");
            }
            servername =
              servername ||
              options.servername ||
              util2.getServerName(host) ||
              null;
            const sessionKey = servername || hostname;
            const session = sessionCache.get(sessionKey) || null;
            assert(sessionKey);
            socket = tls.connect({
              highWaterMark: 16384,
              // TLS in node can't have bigger HWM anyway...
              ...options,
              servername,
              session,
              localAddress,
              // TODO(HTTP/2): Add support for h2c
              ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
              socket: httpSocket,
              // upgrade socket connection
              port: port || 443,
              host: hostname,
            });
            socket.on("session", function (session2) {
              sessionCache.set(sessionKey, session2);
            });
          } else {
            assert(!httpSocket, "httpSocket can only be sent on TLS update");
            socket = net.connect({
              highWaterMark: 64 * 1024,
              // Same as nodejs fs streams.
              ...options,
              localAddress,
              port: port || 80,
              host: hostname,
            });
          }
          if (options.keepAlive == null || options.keepAlive) {
            const keepAliveInitialDelay =
              options.keepAliveInitialDelay === void 0
                ? 6e4
                : options.keepAliveInitialDelay;
            socket.setKeepAlive(true, keepAliveInitialDelay);
          }
          const cancelTimeout = setupTimeout(
            () => onConnectTimeout(socket),
            timeout,
          );
          socket
            .setNoDelay(true)
            .once(
              protocol === "https:" ? "secureConnect" : "connect",
              function () {
                cancelTimeout();
                if (callback) {
                  const cb = callback;
                  callback = null;
                  cb(null, this);
                }
              },
            )
            .on("error", function (err) {
              cancelTimeout();
              if (callback) {
                const cb = callback;
                callback = null;
                cb(err);
              }
            });
          return socket;
        }, "connect");
      }
      __name(buildConnector, "buildConnector");
      function setupTimeout(onConnectTimeout2, timeout) {
        if (!timeout) {
          return () => {};
        }
        let s1 = null;
        let s2 = null;
        const timeoutId = setTimeout(() => {
          s1 = setImmediate(() => {
            if (process.platform === "win32") {
              s2 = setImmediate(() => onConnectTimeout2());
            } else {
              onConnectTimeout2();
            }
          });
        }, timeout);
        return () => {
          clearTimeout(timeoutId);
          clearImmediate(s1);
          clearImmediate(s2);
        };
      }
      __name(setupTimeout, "setupTimeout");
      function onConnectTimeout(socket) {
        util2.destroy(socket, new ConnectTimeoutError());
      }
      __name(onConnectTimeout, "onConnectTimeout");
      module.exports = buildConnector;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/utils.js
  var require_utils2 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/utils.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.enumToMap = void 0;
      function enumToMap(obj) {
        const res = {};
        Object.keys(obj).forEach((key) => {
          const value = obj[key];
          if (typeof value === "number") {
            res[key] = value;
          }
        });
        return res;
      }
      __name(enumToMap, "enumToMap");
      exports.enumToMap = enumToMap;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/constants.js
  var require_constants3 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/constants.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SPECIAL_HEADERS =
        exports.HEADER_STATE =
        exports.MINOR =
        exports.MAJOR =
        exports.CONNECTION_TOKEN_CHARS =
        exports.HEADER_CHARS =
        exports.TOKEN =
        exports.STRICT_TOKEN =
        exports.HEX =
        exports.URL_CHAR =
        exports.STRICT_URL_CHAR =
        exports.USERINFO_CHARS =
        exports.MARK =
        exports.ALPHANUM =
        exports.NUM =
        exports.HEX_MAP =
        exports.NUM_MAP =
        exports.ALPHA =
        exports.FINISH =
        exports.H_METHOD_MAP =
        exports.METHOD_MAP =
        exports.METHODS_RTSP =
        exports.METHODS_ICE =
        exports.METHODS_HTTP =
        exports.METHODS =
        exports.LENIENT_FLAGS =
        exports.FLAGS =
        exports.TYPE =
        exports.ERROR =
          void 0;
      var utils_1 = require_utils2();
      var ERROR;
      (function (ERROR2) {
        ERROR2[(ERROR2["OK"] = 0)] = "OK";
        ERROR2[(ERROR2["INTERNAL"] = 1)] = "INTERNAL";
        ERROR2[(ERROR2["STRICT"] = 2)] = "STRICT";
        ERROR2[(ERROR2["LF_EXPECTED"] = 3)] = "LF_EXPECTED";
        ERROR2[(ERROR2["UNEXPECTED_CONTENT_LENGTH"] = 4)] =
          "UNEXPECTED_CONTENT_LENGTH";
        ERROR2[(ERROR2["CLOSED_CONNECTION"] = 5)] = "CLOSED_CONNECTION";
        ERROR2[(ERROR2["INVALID_METHOD"] = 6)] = "INVALID_METHOD";
        ERROR2[(ERROR2["INVALID_URL"] = 7)] = "INVALID_URL";
        ERROR2[(ERROR2["INVALID_CONSTANT"] = 8)] = "INVALID_CONSTANT";
        ERROR2[(ERROR2["INVALID_VERSION"] = 9)] = "INVALID_VERSION";
        ERROR2[(ERROR2["INVALID_HEADER_TOKEN"] = 10)] = "INVALID_HEADER_TOKEN";
        ERROR2[(ERROR2["INVALID_CONTENT_LENGTH"] = 11)] =
          "INVALID_CONTENT_LENGTH";
        ERROR2[(ERROR2["INVALID_CHUNK_SIZE"] = 12)] = "INVALID_CHUNK_SIZE";
        ERROR2[(ERROR2["INVALID_STATUS"] = 13)] = "INVALID_STATUS";
        ERROR2[(ERROR2["INVALID_EOF_STATE"] = 14)] = "INVALID_EOF_STATE";
        ERROR2[(ERROR2["INVALID_TRANSFER_ENCODING"] = 15)] =
          "INVALID_TRANSFER_ENCODING";
        ERROR2[(ERROR2["CB_MESSAGE_BEGIN"] = 16)] = "CB_MESSAGE_BEGIN";
        ERROR2[(ERROR2["CB_HEADERS_COMPLETE"] = 17)] = "CB_HEADERS_COMPLETE";
        ERROR2[(ERROR2["CB_MESSAGE_COMPLETE"] = 18)] = "CB_MESSAGE_COMPLETE";
        ERROR2[(ERROR2["CB_CHUNK_HEADER"] = 19)] = "CB_CHUNK_HEADER";
        ERROR2[(ERROR2["CB_CHUNK_COMPLETE"] = 20)] = "CB_CHUNK_COMPLETE";
        ERROR2[(ERROR2["PAUSED"] = 21)] = "PAUSED";
        ERROR2[(ERROR2["PAUSED_UPGRADE"] = 22)] = "PAUSED_UPGRADE";
        ERROR2[(ERROR2["PAUSED_H2_UPGRADE"] = 23)] = "PAUSED_H2_UPGRADE";
        ERROR2[(ERROR2["USER"] = 24)] = "USER";
      })((ERROR = exports.ERROR || (exports.ERROR = {})));
      var TYPE;
      (function (TYPE2) {
        TYPE2[(TYPE2["BOTH"] = 0)] = "BOTH";
        TYPE2[(TYPE2["REQUEST"] = 1)] = "REQUEST";
        TYPE2[(TYPE2["RESPONSE"] = 2)] = "RESPONSE";
      })((TYPE = exports.TYPE || (exports.TYPE = {})));
      var FLAGS;
      (function (FLAGS2) {
        FLAGS2[(FLAGS2["CONNECTION_KEEP_ALIVE"] = 1)] = "CONNECTION_KEEP_ALIVE";
        FLAGS2[(FLAGS2["CONNECTION_CLOSE"] = 2)] = "CONNECTION_CLOSE";
        FLAGS2[(FLAGS2["CONNECTION_UPGRADE"] = 4)] = "CONNECTION_UPGRADE";
        FLAGS2[(FLAGS2["CHUNKED"] = 8)] = "CHUNKED";
        FLAGS2[(FLAGS2["UPGRADE"] = 16)] = "UPGRADE";
        FLAGS2[(FLAGS2["CONTENT_LENGTH"] = 32)] = "CONTENT_LENGTH";
        FLAGS2[(FLAGS2["SKIPBODY"] = 64)] = "SKIPBODY";
        FLAGS2[(FLAGS2["TRAILING"] = 128)] = "TRAILING";
        FLAGS2[(FLAGS2["TRANSFER_ENCODING"] = 512)] = "TRANSFER_ENCODING";
      })((FLAGS = exports.FLAGS || (exports.FLAGS = {})));
      var LENIENT_FLAGS;
      (function (LENIENT_FLAGS2) {
        LENIENT_FLAGS2[(LENIENT_FLAGS2["HEADERS"] = 1)] = "HEADERS";
        LENIENT_FLAGS2[(LENIENT_FLAGS2["CHUNKED_LENGTH"] = 2)] =
          "CHUNKED_LENGTH";
        LENIENT_FLAGS2[(LENIENT_FLAGS2["KEEP_ALIVE"] = 4)] = "KEEP_ALIVE";
      })(
        (LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {})),
      );
      var METHODS;
      (function (METHODS2) {
        METHODS2[(METHODS2["DELETE"] = 0)] = "DELETE";
        METHODS2[(METHODS2["GET"] = 1)] = "GET";
        METHODS2[(METHODS2["HEAD"] = 2)] = "HEAD";
        METHODS2[(METHODS2["POST"] = 3)] = "POST";
        METHODS2[(METHODS2["PUT"] = 4)] = "PUT";
        METHODS2[(METHODS2["CONNECT"] = 5)] = "CONNECT";
        METHODS2[(METHODS2["OPTIONS"] = 6)] = "OPTIONS";
        METHODS2[(METHODS2["TRACE"] = 7)] = "TRACE";
        METHODS2[(METHODS2["COPY"] = 8)] = "COPY";
        METHODS2[(METHODS2["LOCK"] = 9)] = "LOCK";
        METHODS2[(METHODS2["MKCOL"] = 10)] = "MKCOL";
        METHODS2[(METHODS2["MOVE"] = 11)] = "MOVE";
        METHODS2[(METHODS2["PROPFIND"] = 12)] = "PROPFIND";
        METHODS2[(METHODS2["PROPPATCH"] = 13)] = "PROPPATCH";
        METHODS2[(METHODS2["SEARCH"] = 14)] = "SEARCH";
        METHODS2[(METHODS2["UNLOCK"] = 15)] = "UNLOCK";
        METHODS2[(METHODS2["BIND"] = 16)] = "BIND";
        METHODS2[(METHODS2["REBIND"] = 17)] = "REBIND";
        METHODS2[(METHODS2["UNBIND"] = 18)] = "UNBIND";
        METHODS2[(METHODS2["ACL"] = 19)] = "ACL";
        METHODS2[(METHODS2["REPORT"] = 20)] = "REPORT";
        METHODS2[(METHODS2["MKACTIVITY"] = 21)] = "MKACTIVITY";
        METHODS2[(METHODS2["CHECKOUT"] = 22)] = "CHECKOUT";
        METHODS2[(METHODS2["MERGE"] = 23)] = "MERGE";
        METHODS2[(METHODS2["M-SEARCH"] = 24)] = "M-SEARCH";
        METHODS2[(METHODS2["NOTIFY"] = 25)] = "NOTIFY";
        METHODS2[(METHODS2["SUBSCRIBE"] = 26)] = "SUBSCRIBE";
        METHODS2[(METHODS2["UNSUBSCRIBE"] = 27)] = "UNSUBSCRIBE";
        METHODS2[(METHODS2["PATCH"] = 28)] = "PATCH";
        METHODS2[(METHODS2["PURGE"] = 29)] = "PURGE";
        METHODS2[(METHODS2["MKCALENDAR"] = 30)] = "MKCALENDAR";
        METHODS2[(METHODS2["LINK"] = 31)] = "LINK";
        METHODS2[(METHODS2["UNLINK"] = 32)] = "UNLINK";
        METHODS2[(METHODS2["SOURCE"] = 33)] = "SOURCE";
        METHODS2[(METHODS2["PRI"] = 34)] = "PRI";
        METHODS2[(METHODS2["DESCRIBE"] = 35)] = "DESCRIBE";
        METHODS2[(METHODS2["ANNOUNCE"] = 36)] = "ANNOUNCE";
        METHODS2[(METHODS2["SETUP"] = 37)] = "SETUP";
        METHODS2[(METHODS2["PLAY"] = 38)] = "PLAY";
        METHODS2[(METHODS2["PAUSE"] = 39)] = "PAUSE";
        METHODS2[(METHODS2["TEARDOWN"] = 40)] = "TEARDOWN";
        METHODS2[(METHODS2["GET_PARAMETER"] = 41)] = "GET_PARAMETER";
        METHODS2[(METHODS2["SET_PARAMETER"] = 42)] = "SET_PARAMETER";
        METHODS2[(METHODS2["REDIRECT"] = 43)] = "REDIRECT";
        METHODS2[(METHODS2["RECORD"] = 44)] = "RECORD";
        METHODS2[(METHODS2["FLUSH"] = 45)] = "FLUSH";
      })((METHODS = exports.METHODS || (exports.METHODS = {})));
      exports.METHODS_HTTP = [
        METHODS.DELETE,
        METHODS.GET,
        METHODS.HEAD,
        METHODS.POST,
        METHODS.PUT,
        METHODS.CONNECT,
        METHODS.OPTIONS,
        METHODS.TRACE,
        METHODS.COPY,
        METHODS.LOCK,
        METHODS.MKCOL,
        METHODS.MOVE,
        METHODS.PROPFIND,
        METHODS.PROPPATCH,
        METHODS.SEARCH,
        METHODS.UNLOCK,
        METHODS.BIND,
        METHODS.REBIND,
        METHODS.UNBIND,
        METHODS.ACL,
        METHODS.REPORT,
        METHODS.MKACTIVITY,
        METHODS.CHECKOUT,
        METHODS.MERGE,
        METHODS["M-SEARCH"],
        METHODS.NOTIFY,
        METHODS.SUBSCRIBE,
        METHODS.UNSUBSCRIBE,
        METHODS.PATCH,
        METHODS.PURGE,
        METHODS.MKCALENDAR,
        METHODS.LINK,
        METHODS.UNLINK,
        METHODS.PRI,
        // TODO(indutny): should we allow it with HTTP?
        METHODS.SOURCE,
      ];
      exports.METHODS_ICE = [METHODS.SOURCE];
      exports.METHODS_RTSP = [
        METHODS.OPTIONS,
        METHODS.DESCRIBE,
        METHODS.ANNOUNCE,
        METHODS.SETUP,
        METHODS.PLAY,
        METHODS.PAUSE,
        METHODS.TEARDOWN,
        METHODS.GET_PARAMETER,
        METHODS.SET_PARAMETER,
        METHODS.REDIRECT,
        METHODS.RECORD,
        METHODS.FLUSH,
        // For AirPlay
        METHODS.GET,
        METHODS.POST,
      ];
      exports.METHOD_MAP = utils_1.enumToMap(METHODS);
      exports.H_METHOD_MAP = {};
      Object.keys(exports.METHOD_MAP).forEach((key) => {
        if (/^H/.test(key)) {
          exports.H_METHOD_MAP[key] = exports.METHOD_MAP[key];
        }
      });
      var FINISH;
      (function (FINISH2) {
        FINISH2[(FINISH2["SAFE"] = 0)] = "SAFE";
        FINISH2[(FINISH2["SAFE_WITH_CB"] = 1)] = "SAFE_WITH_CB";
        FINISH2[(FINISH2["UNSAFE"] = 2)] = "UNSAFE";
      })((FINISH = exports.FINISH || (exports.FINISH = {})));
      exports.ALPHA = [];
      for (let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++) {
        exports.ALPHA.push(String.fromCharCode(i));
        exports.ALPHA.push(String.fromCharCode(i + 32));
      }
      exports.NUM_MAP = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
      };
      exports.HEX_MAP = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        A: 10,
        B: 11,
        C: 12,
        D: 13,
        E: 14,
        F: 15,
        a: 10,
        b: 11,
        c: 12,
        d: 13,
        e: 14,
        f: 15,
      };
      exports.NUM = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
      exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
      exports.MARK = ["-", "_", ".", "!", "~", "*", "'", "(", ")"];
      exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat([
        "%",
        ";",
        ":",
        "&",
        "=",
        "+",
        "$",
        ",",
      ]);
      exports.STRICT_URL_CHAR = [
        "!",
        '"',
        "$",
        "%",
        "&",
        "'",
        "(",
        ")",
        "*",
        "+",
        ",",
        "-",
        ".",
        "/",
        ":",
        ";",
        "<",
        "=",
        ">",
        "@",
        "[",
        "\\",
        "]",
        "^",
        "_",
        "`",
        "{",
        "|",
        "}",
        "~",
      ].concat(exports.ALPHANUM);
      exports.URL_CHAR = exports.STRICT_URL_CHAR.concat(["	", "\f"]);
      for (let i = 128; i <= 255; i++) {
        exports.URL_CHAR.push(i);
      }
      exports.HEX = exports.NUM.concat([
        "a",
        "b",
        "c",
        "d",
        "e",
        "f",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
      ]);
      exports.STRICT_TOKEN = [
        "!",
        "#",
        "$",
        "%",
        "&",
        "'",
        "*",
        "+",
        "-",
        ".",
        "^",
        "_",
        "`",
        "|",
        "~",
      ].concat(exports.ALPHANUM);
      exports.TOKEN = exports.STRICT_TOKEN.concat([" "]);
      exports.HEADER_CHARS = ["	"];
      for (let i = 32; i <= 255; i++) {
        if (i !== 127) {
          exports.HEADER_CHARS.push(i);
        }
      }
      exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter(
        (c) => c !== 44,
      );
      exports.MAJOR = exports.NUM_MAP;
      exports.MINOR = exports.MAJOR;
      var HEADER_STATE;
      (function (HEADER_STATE2) {
        HEADER_STATE2[(HEADER_STATE2["GENERAL"] = 0)] = "GENERAL";
        HEADER_STATE2[(HEADER_STATE2["CONNECTION"] = 1)] = "CONNECTION";
        HEADER_STATE2[(HEADER_STATE2["CONTENT_LENGTH"] = 2)] = "CONTENT_LENGTH";
        HEADER_STATE2[(HEADER_STATE2["TRANSFER_ENCODING"] = 3)] =
          "TRANSFER_ENCODING";
        HEADER_STATE2[(HEADER_STATE2["UPGRADE"] = 4)] = "UPGRADE";
        HEADER_STATE2[(HEADER_STATE2["CONNECTION_KEEP_ALIVE"] = 5)] =
          "CONNECTION_KEEP_ALIVE";
        HEADER_STATE2[(HEADER_STATE2["CONNECTION_CLOSE"] = 6)] =
          "CONNECTION_CLOSE";
        HEADER_STATE2[(HEADER_STATE2["CONNECTION_UPGRADE"] = 7)] =
          "CONNECTION_UPGRADE";
        HEADER_STATE2[(HEADER_STATE2["TRANSFER_ENCODING_CHUNKED"] = 8)] =
          "TRANSFER_ENCODING_CHUNKED";
      })((HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {})));
      exports.SPECIAL_HEADERS = {
        connection: HEADER_STATE.CONNECTION,
        "content-length": HEADER_STATE.CONTENT_LENGTH,
        "proxy-connection": HEADER_STATE.CONNECTION,
        "transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
        upgrade: HEADER_STATE.UPGRADE,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/RedirectHandler.js
  var require_RedirectHandler = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/RedirectHandler.js"(
      exports,
      module,
    ) {
      "use strict";
      var util2 = require_util();
      var { kBodyUsed } = require_symbols();
      var assert = __require("assert");
      var { InvalidArgumentError } = require_errors();
      var EE = __require("events");
      var redirectableStatusCodes = [300, 301, 302, 303, 307, 308];
      var kBody = Symbol("body");
      var BodyAsyncIterable = class {
        static {
          __name(this, "BodyAsyncIterable");
        }
        constructor(body) {
          this[kBody] = body;
          this[kBodyUsed] = false;
        }
        async *[Symbol.asyncIterator]() {
          assert(!this[kBodyUsed], "disturbed");
          this[kBodyUsed] = true;
          yield* this[kBody];
        }
      };
      var RedirectHandler = class {
        static {
          __name(this, "RedirectHandler");
        }
        constructor(dispatch, maxRedirections, opts, handler) {
          if (
            maxRedirections != null &&
            (!Number.isInteger(maxRedirections) || maxRedirections < 0)
          ) {
            throw new InvalidArgumentError(
              "maxRedirections must be a positive number",
            );
          }
          util2.validateHandler(handler, opts.method, opts.upgrade);
          this.dispatch = dispatch;
          this.location = null;
          this.abort = null;
          this.opts = { ...opts, maxRedirections: 0 };
          this.maxRedirections = maxRedirections;
          this.handler = handler;
          this.history = [];
          if (util2.isStream(this.opts.body)) {
            if (util2.bodyLength(this.opts.body) === 0) {
              this.opts.body.on("data", function () {
                assert(false);
              });
            }
            if (typeof this.opts.body.readableDidRead !== "boolean") {
              this.opts.body[kBodyUsed] = false;
              EE.prototype.on.call(this.opts.body, "data", function () {
                this[kBodyUsed] = true;
              });
            }
          } else if (
            this.opts.body &&
            typeof this.opts.body.pipeTo === "function"
          ) {
            this.opts.body = new BodyAsyncIterable(this.opts.body);
          } else if (
            this.opts.body &&
            typeof this.opts.body !== "string" &&
            !ArrayBuffer.isView(this.opts.body) &&
            util2.isIterable(this.opts.body)
          ) {
            this.opts.body = new BodyAsyncIterable(this.opts.body);
          }
        }
        onConnect(abort) {
          this.abort = abort;
          this.handler.onConnect(abort, { history: this.history });
        }
        onUpgrade(statusCode, headers, socket) {
          this.handler.onUpgrade(statusCode, headers, socket);
        }
        onError(error) {
          this.handler.onError(error);
        }
        onHeaders(statusCode, headers, resume, statusText) {
          this.location =
            this.history.length >= this.maxRedirections ||
            util2.isDisturbed(this.opts.body)
              ? null
              : parseLocation(statusCode, headers);
          if (this.opts.origin) {
            this.history.push(new URL(this.opts.path, this.opts.origin));
          }
          if (!this.location) {
            return this.handler.onHeaders(
              statusCode,
              headers,
              resume,
              statusText,
            );
          }
          const {
            origin,
            pathname,
            search: search2,
          } = util2.parseURL(
            new URL(
              this.location,
              this.opts.origin && new URL(this.opts.path, this.opts.origin),
            ),
          );
          const path4 = search2 ? `${pathname}${search2}` : pathname;
          this.opts.headers = cleanRequestHeaders(
            this.opts.headers,
            statusCode === 303,
            this.opts.origin !== origin,
          );
          this.opts.path = path4;
          this.opts.origin = origin;
          this.opts.maxRedirections = 0;
          this.opts.query = null;
          if (statusCode === 303 && this.opts.method !== "HEAD") {
            this.opts.method = "GET";
            this.opts.body = null;
          }
        }
        onData(chunk) {
          if (this.location) {
          } else {
            return this.handler.onData(chunk);
          }
        }
        onComplete(trailers) {
          if (this.location) {
            this.location = null;
            this.abort = null;
            this.dispatch(this.opts, this);
          } else {
            this.handler.onComplete(trailers);
          }
        }
        onBodySent(chunk) {
          if (this.handler.onBodySent) {
            this.handler.onBodySent(chunk);
          }
        }
      };
      function parseLocation(statusCode, headers) {
        if (redirectableStatusCodes.indexOf(statusCode) === -1) {
          return null;
        }
        for (let i = 0; i < headers.length; i += 2) {
          if (headers[i].toString().toLowerCase() === "location") {
            return headers[i + 1];
          }
        }
      }
      __name(parseLocation, "parseLocation");
      function shouldRemoveHeader(header, removeContent, unknownOrigin) {
        if (header.length === 4) {
          return util2.headerNameToString(header) === "host";
        }
        if (
          removeContent &&
          util2.headerNameToString(header).startsWith("content-")
        ) {
          return true;
        }
        if (
          unknownOrigin &&
          (header.length === 13 || header.length === 6 || header.length === 19)
        ) {
          const name = util2.headerNameToString(header);
          return (
            name === "authorization" ||
            name === "cookie" ||
            name === "proxy-authorization"
          );
        }
        return false;
      }
      __name(shouldRemoveHeader, "shouldRemoveHeader");
      function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
        const ret = [];
        if (Array.isArray(headers)) {
          for (let i = 0; i < headers.length; i += 2) {
            if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
              ret.push(headers[i], headers[i + 1]);
            }
          }
        } else if (headers && typeof headers === "object") {
          for (const key of Object.keys(headers)) {
            if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
              ret.push(key, headers[key]);
            }
          }
        } else {
          assert(headers == null, "headers must be an object or an array");
        }
        return ret;
      }
      __name(cleanRequestHeaders, "cleanRequestHeaders");
      module.exports = RedirectHandler;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/interceptor/redirectInterceptor.js
  var require_redirectInterceptor = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/interceptor/redirectInterceptor.js"(
      exports,
      module,
    ) {
      "use strict";
      var RedirectHandler = require_RedirectHandler();
      function createRedirectInterceptor({
        maxRedirections: defaultMaxRedirections,
      }) {
        return (dispatch) => {
          return /* @__PURE__ */ __name(function Intercept(opts, handler) {
            const { maxRedirections = defaultMaxRedirections } = opts;
            if (!maxRedirections) {
              return dispatch(opts, handler);
            }
            const redirectHandler = new RedirectHandler(
              dispatch,
              maxRedirections,
              opts,
              handler,
            );
            opts = { ...opts, maxRedirections: 0 };
            return dispatch(opts, redirectHandler);
          }, "Intercept");
        };
      }
      __name(createRedirectInterceptor, "createRedirectInterceptor");
      module.exports = createRedirectInterceptor;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/llhttp-wasm.js
  var require_llhttp_wasm = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/llhttp-wasm.js"(
      exports,
      module,
    ) {
      module.exports =
        "";
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
  var require_llhttp_simd_wasm = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js"(
      exports,
      module,
    ) {
      module.exports =
        "";
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/client.js
  var require_client = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/client.js"(
      exports,
      module,
    ) {
      "use strict";
      var assert = __require("assert");
      var net = __require("net");
      var http = __require("http");
      var { pipeline } = __require("stream");
      var util2 = require_util();
      var timers = require_timers();
      var Request = require_request();
      var DispatcherBase = require_dispatcher_base();
      var {
        RequestContentLengthMismatchError,
        ResponseContentLengthMismatchError,
        InvalidArgumentError,
        RequestAbortedError,
        HeadersTimeoutError,
        HeadersOverflowError,
        SocketError,
        InformationalError,
        BodyTimeoutError,
        HTTPParserError,
        ResponseExceededMaxSizeError,
        ClientDestroyedError,
      } = require_errors();
      var buildConnector = require_connect();
      var {
        kUrl,
        kReset,
        kServerName,
        kClient,
        kBusy,
        kParser,
        kConnect,
        kBlocking,
        kResuming,
        kRunning,
        kPending,
        kSize,
        kWriting,
        kQueue,
        kConnected,
        kConnecting,
        kNeedDrain,
        kNoRef,
        kKeepAliveDefaultTimeout,
        kHostHeader,
        kPendingIdx,
        kRunningIdx,
        kError,
        kPipelining,
        kSocket,
        kKeepAliveTimeoutValue,
        kMaxHeadersSize,
        kKeepAliveMaxTimeout,
        kKeepAliveTimeoutThreshold,
        kHeadersTimeout,
        kBodyTimeout,
        kStrictContentLength,
        kConnector,
        kMaxRedirections,
        kMaxRequests,
        kCounter,
        kClose,
        kDestroy,
        kDispatch,
        kInterceptors,
        kLocalAddress,
        kMaxResponseSize,
        kHTTPConnVersion,
        // HTTP2
        kHost,
        kHTTP2Session,
        kHTTP2SessionState,
        kHTTP2BuildRequest,
        kHTTP2CopyHeaders,
        kHTTP1BuildRequest,
      } = require_symbols();
      var http2;
      try {
        http2 = __require("http2");
      } catch {
        http2 = { constants: {} };
      }
      var {
        constants: {
          HTTP2_HEADER_AUTHORITY,
          HTTP2_HEADER_METHOD,
          HTTP2_HEADER_PATH,
          HTTP2_HEADER_SCHEME,
          HTTP2_HEADER_CONTENT_LENGTH,
          HTTP2_HEADER_EXPECT,
          HTTP2_HEADER_STATUS,
        },
      } = http2;
      var h2ExperimentalWarned = false;
      var FastBuffer = Buffer[Symbol.species];
      var kClosedResolve = Symbol("kClosedResolve");
      var channels = {};
      try {
        const diagnosticsChannel = __require("diagnostics_channel");
        channels.sendHeaders = diagnosticsChannel.channel(
          "undici:client:sendHeaders",
        );
        channels.beforeConnect = diagnosticsChannel.channel(
          "undici:client:beforeConnect",
        );
        channels.connectError = diagnosticsChannel.channel(
          "undici:client:connectError",
        );
        channels.connected = diagnosticsChannel.channel(
          "undici:client:connected",
        );
      } catch {
        channels.sendHeaders = { hasSubscribers: false };
        channels.beforeConnect = { hasSubscribers: false };
        channels.connectError = { hasSubscribers: false };
        channels.connected = { hasSubscribers: false };
      }
      var Client = class extends DispatcherBase {
        static {
          __name(this, "Client");
        }
        /**
         *
         * @param {string|URL} url
         * @param {import('../types/client').Client.Options} options
         */
        constructor(
          url,
          {
            interceptors,
            maxHeaderSize,
            headersTimeout,
            socketTimeout,
            requestTimeout,
            connectTimeout,
            bodyTimeout,
            idleTimeout,
            keepAlive,
            keepAliveTimeout,
            maxKeepAliveTimeout,
            keepAliveMaxTimeout,
            keepAliveTimeoutThreshold,
            socketPath,
            pipelining,
            tls,
            strictContentLength,
            maxCachedSessions,
            maxRedirections,
            connect: connect2,
            maxRequestsPerClient,
            localAddress,
            maxResponseSize,
            autoSelectFamily,
            autoSelectFamilyAttemptTimeout,
            // h2
            allowH2,
            maxConcurrentStreams,
          } = {},
        ) {
          super();
          if (keepAlive !== void 0) {
            throw new InvalidArgumentError(
              "unsupported keepAlive, use pipelining=0 instead",
            );
          }
          if (socketTimeout !== void 0) {
            throw new InvalidArgumentError(
              "unsupported socketTimeout, use headersTimeout & bodyTimeout instead",
            );
          }
          if (requestTimeout !== void 0) {
            throw new InvalidArgumentError(
              "unsupported requestTimeout, use headersTimeout & bodyTimeout instead",
            );
          }
          if (idleTimeout !== void 0) {
            throw new InvalidArgumentError(
              "unsupported idleTimeout, use keepAliveTimeout instead",
            );
          }
          if (maxKeepAliveTimeout !== void 0) {
            throw new InvalidArgumentError(
              "unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead",
            );
          }
          if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
            throw new InvalidArgumentError("invalid maxHeaderSize");
          }
          if (socketPath != null && typeof socketPath !== "string") {
            throw new InvalidArgumentError("invalid socketPath");
          }
          if (
            connectTimeout != null &&
            (!Number.isFinite(connectTimeout) || connectTimeout < 0)
          ) {
            throw new InvalidArgumentError("invalid connectTimeout");
          }
          if (
            keepAliveTimeout != null &&
            (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)
          ) {
            throw new InvalidArgumentError("invalid keepAliveTimeout");
          }
          if (
            keepAliveMaxTimeout != null &&
            (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)
          ) {
            throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
          }
          if (
            keepAliveTimeoutThreshold != null &&
            !Number.isFinite(keepAliveTimeoutThreshold)
          ) {
            throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
          }
          if (
            headersTimeout != null &&
            (!Number.isInteger(headersTimeout) || headersTimeout < 0)
          ) {
            throw new InvalidArgumentError(
              "headersTimeout must be a positive integer or zero",
            );
          }
          if (
            bodyTimeout != null &&
            (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)
          ) {
            throw new InvalidArgumentError(
              "bodyTimeout must be a positive integer or zero",
            );
          }
          if (
            connect2 != null &&
            typeof connect2 !== "function" &&
            typeof connect2 !== "object"
          ) {
            throw new InvalidArgumentError(
              "connect must be a function or an object",
            );
          }
          if (
            maxRedirections != null &&
            (!Number.isInteger(maxRedirections) || maxRedirections < 0)
          ) {
            throw new InvalidArgumentError(
              "maxRedirections must be a positive number",
            );
          }
          if (
            maxRequestsPerClient != null &&
            (!Number.isInteger(maxRequestsPerClient) ||
              maxRequestsPerClient < 0)
          ) {
            throw new InvalidArgumentError(
              "maxRequestsPerClient must be a positive number",
            );
          }
          if (
            localAddress != null &&
            (typeof localAddress !== "string" || net.isIP(localAddress) === 0)
          ) {
            throw new InvalidArgumentError(
              "localAddress must be valid string IP address",
            );
          }
          if (
            maxResponseSize != null &&
            (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)
          ) {
            throw new InvalidArgumentError(
              "maxResponseSize must be a positive number",
            );
          }
          if (
            autoSelectFamilyAttemptTimeout != null &&
            (!Number.isInteger(autoSelectFamilyAttemptTimeout) ||
              autoSelectFamilyAttemptTimeout < -1)
          ) {
            throw new InvalidArgumentError(
              "autoSelectFamilyAttemptTimeout must be a positive number",
            );
          }
          if (allowH2 != null && typeof allowH2 !== "boolean") {
            throw new InvalidArgumentError(
              "allowH2 must be a valid boolean value",
            );
          }
          if (
            maxConcurrentStreams != null &&
            (typeof maxConcurrentStreams !== "number" ||
              maxConcurrentStreams < 1)
          ) {
            throw new InvalidArgumentError(
              "maxConcurrentStreams must be a possitive integer, greater than 0",
            );
          }
          if (typeof connect2 !== "function") {
            connect2 = buildConnector({
              ...tls,
              maxCachedSessions,
              allowH2,
              socketPath,
              timeout: connectTimeout,
              ...(util2.nodeHasAutoSelectFamily && autoSelectFamily
                ? { autoSelectFamily, autoSelectFamilyAttemptTimeout }
                : void 0),
              ...connect2,
            });
          }
          this[kInterceptors] =
            interceptors &&
            interceptors.Client &&
            Array.isArray(interceptors.Client)
              ? interceptors.Client
              : [createRedirectInterceptor({ maxRedirections })];
          this[kUrl] = util2.parseOrigin(url);
          this[kConnector] = connect2;
          this[kSocket] = null;
          this[kPipelining] = pipelining != null ? pipelining : 1;
          this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize;
          this[kKeepAliveDefaultTimeout] =
            keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
          this[kKeepAliveMaxTimeout] =
            keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
          this[kKeepAliveTimeoutThreshold] =
            keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
          this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
          this[kServerName] = null;
          this[kLocalAddress] = localAddress != null ? localAddress : null;
          this[kResuming] = 0;
          this[kNeedDrain] = 0;
          this[kHostHeader] =
            `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r
`;
          this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e5;
          this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e5;
          this[kStrictContentLength] =
            strictContentLength == null ? true : strictContentLength;
          this[kMaxRedirections] = maxRedirections;
          this[kMaxRequests] = maxRequestsPerClient;
          this[kClosedResolve] = null;
          this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
          this[kHTTPConnVersion] = "h1";
          this[kHTTP2Session] = null;
          this[kHTTP2SessionState] = !allowH2
            ? null
            : {
                // streams: null, // Fixed queue of streams - For future support of `push`
                openStreams: 0,
                // Keep track of them to decide wether or not unref the session
                maxConcurrentStreams:
                  maxConcurrentStreams != null ? maxConcurrentStreams : 100,
                // Max peerConcurrentStreams for a Node h2 server
              };
          this[kHost] =
            `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}`;
          this[kQueue] = [];
          this[kRunningIdx] = 0;
          this[kPendingIdx] = 0;
        }
        get pipelining() {
          return this[kPipelining];
        }
        set pipelining(value) {
          this[kPipelining] = value;
          resume(this, true);
        }
        get [kPending]() {
          return this[kQueue].length - this[kPendingIdx];
        }
        get [kRunning]() {
          return this[kPendingIdx] - this[kRunningIdx];
        }
        get [kSize]() {
          return this[kQueue].length - this[kRunningIdx];
        }
        get [kConnected]() {
          return (
            !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed
          );
        }
        get [kBusy]() {
          const socket = this[kSocket];
          return (
            (socket &&
              (socket[kReset] || socket[kWriting] || socket[kBlocking])) ||
            this[kSize] >= (this[kPipelining] || 1) ||
            this[kPending] > 0
          );
        }
        /* istanbul ignore: only used for test */
        [kConnect](cb) {
          connect(this);
          this.once("connect", cb);
        }
        [kDispatch](opts, handler) {
          const origin = opts.origin || this[kUrl].origin;
          const request =
            this[kHTTPConnVersion] === "h2"
              ? Request[kHTTP2BuildRequest](origin, opts, handler)
              : Request[kHTTP1BuildRequest](origin, opts, handler);
          this[kQueue].push(request);
          if (this[kResuming]) {
          } else if (
            util2.bodyLength(request.body) == null &&
            util2.isIterable(request.body)
          ) {
            this[kResuming] = 1;
            process.nextTick(resume, this);
          } else {
            resume(this, true);
          }
          if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
            this[kNeedDrain] = 2;
          }
          return this[kNeedDrain] < 2;
        }
        async [kClose]() {
          return new Promise((resolve) => {
            if (!this[kSize]) {
              resolve(null);
            } else {
              this[kClosedResolve] = resolve;
            }
          });
        }
        async [kDestroy](err) {
          return new Promise((resolve) => {
            const requests = this[kQueue].splice(this[kPendingIdx]);
            for (let i = 0; i < requests.length; i++) {
              const request = requests[i];
              errorRequest(this, request, err);
            }
            const callback = /* @__PURE__ */ __name(() => {
              if (this[kClosedResolve]) {
                this[kClosedResolve]();
                this[kClosedResolve] = null;
              }
              resolve();
            }, "callback");
            if (this[kHTTP2Session] != null) {
              util2.destroy(this[kHTTP2Session], err);
              this[kHTTP2Session] = null;
              this[kHTTP2SessionState] = null;
            }
            if (!this[kSocket]) {
              queueMicrotask(callback);
            } else {
              util2.destroy(this[kSocket].on("close", callback), err);
            }
            resume(this);
          });
        }
      };
      function onHttp2SessionError(err) {
        assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
        this[kSocket][kError] = err;
        onError(this[kClient], err);
      }
      __name(onHttp2SessionError, "onHttp2SessionError");
      function onHttp2FrameError(type, code2, id) {
        const err = new InformationalError(
          `HTTP/2: "frameError" received - type ${type}, code ${code2}`,
        );
        if (id === 0) {
          this[kSocket][kError] = err;
          onError(this[kClient], err);
        }
      }
      __name(onHttp2FrameError, "onHttp2FrameError");
      function onHttp2SessionEnd() {
        util2.destroy(this, new SocketError("other side closed"));
        util2.destroy(this[kSocket], new SocketError("other side closed"));
      }
      __name(onHttp2SessionEnd, "onHttp2SessionEnd");
      function onHTTP2GoAway(code2) {
        const client = this[kClient];
        const err = new InformationalError(
          `HTTP/2: "GOAWAY" frame received with code ${code2}`,
        );
        client[kSocket] = null;
        client[kHTTP2Session] = null;
        if (client.destroyed) {
          assert(this[kPending] === 0);
          const requests = client[kQueue].splice(client[kRunningIdx]);
          for (let i = 0; i < requests.length; i++) {
            const request = requests[i];
            errorRequest(this, request, err);
          }
        } else if (client[kRunning] > 0) {
          const request = client[kQueue][client[kRunningIdx]];
          client[kQueue][client[kRunningIdx]++] = null;
          errorRequest(client, request, err);
        }
        client[kPendingIdx] = client[kRunningIdx];
        assert(client[kRunning] === 0);
        client.emit("disconnect", client[kUrl], [client], err);
        resume(client);
      }
      __name(onHTTP2GoAway, "onHTTP2GoAway");
      var constants = require_constants3();
      var createRedirectInterceptor = require_redirectInterceptor();
      var EMPTY_BUF = Buffer.alloc(0);
      async function lazyllhttp() {
        const llhttpWasmData = process.env.JEST_WORKER_ID
          ? require_llhttp_wasm()
          : void 0;
        let mod;
        try {
          mod = await WebAssembly.compile(
            Buffer.from(require_llhttp_simd_wasm(), "base64"),
          );
        } catch (e) {
          mod = await WebAssembly.compile(
            Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"),
          );
        }
        return await WebAssembly.instantiate(mod, {
          env: {
            /* eslint-disable camelcase */
            wasm_on_url: /* @__PURE__ */ __name((p, at, len) => {
              return 0;
            }, "wasm_on_url"),
            wasm_on_status: /* @__PURE__ */ __name((p, at, len) => {
              assert.strictEqual(currentParser.ptr, p);
              const start = at - currentBufferPtr + currentBufferRef.byteOffset;
              return (
                currentParser.onStatus(
                  new FastBuffer(currentBufferRef.buffer, start, len),
                ) || 0
              );
            }, "wasm_on_status"),
            wasm_on_message_begin: /* @__PURE__ */ __name((p) => {
              assert.strictEqual(currentParser.ptr, p);
              return currentParser.onMessageBegin() || 0;
            }, "wasm_on_message_begin"),
            wasm_on_header_field: /* @__PURE__ */ __name((p, at, len) => {
              assert.strictEqual(currentParser.ptr, p);
              const start = at - currentBufferPtr + currentBufferRef.byteOffset;
              return (
                currentParser.onHeaderField(
                  new FastBuffer(currentBufferRef.buffer, start, len),
                ) || 0
              );
            }, "wasm_on_header_field"),
            wasm_on_header_value: /* @__PURE__ */ __name((p, at, len) => {
              assert.strictEqual(currentParser.ptr, p);
              const start = at - currentBufferPtr + currentBufferRef.byteOffset;
              return (
                currentParser.onHeaderValue(
                  new FastBuffer(currentBufferRef.buffer, start, len),
                ) || 0
              );
            }, "wasm_on_header_value"),
            wasm_on_headers_complete: /* @__PURE__ */ __name(
              (p, statusCode, upgrade, shouldKeepAlive) => {
                assert.strictEqual(currentParser.ptr, p);
                return (
                  currentParser.onHeadersComplete(
                    statusCode,
                    Boolean(upgrade),
                    Boolean(shouldKeepAlive),
                  ) || 0
                );
              },
              "wasm_on_headers_complete",
            ),
            wasm_on_body: /* @__PURE__ */ __name((p, at, len) => {
              assert.strictEqual(currentParser.ptr, p);
              const start = at - currentBufferPtr + currentBufferRef.byteOffset;
              return (
                currentParser.onBody(
                  new FastBuffer(currentBufferRef.buffer, start, len),
                ) || 0
              );
            }, "wasm_on_body"),
            wasm_on_message_complete: /* @__PURE__ */ __name((p) => {
              assert.strictEqual(currentParser.ptr, p);
              return currentParser.onMessageComplete() || 0;
            }, "wasm_on_message_complete"),
            /* eslint-enable camelcase */
          },
        });
      }
      __name(lazyllhttp, "lazyllhttp");
      var llhttpInstance = null;
      var llhttpPromise = lazyllhttp();
      llhttpPromise.catch();
      var currentParser = null;
      var currentBufferRef = null;
      var currentBufferSize = 0;
      var currentBufferPtr = null;
      var TIMEOUT_HEADERS = 1;
      var TIMEOUT_BODY = 2;
      var TIMEOUT_IDLE = 3;
      var Parser = class {
        static {
          __name(this, "Parser");
        }
        constructor(client, socket, { exports: exports2 }) {
          assert(
            Number.isFinite(client[kMaxHeadersSize]) &&
              client[kMaxHeadersSize] > 0,
          );
          this.llhttp = exports2;
          this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
          this.client = client;
          this.socket = socket;
          this.timeout = null;
          this.timeoutValue = null;
          this.timeoutType = null;
          this.statusCode = null;
          this.statusText = "";
          this.upgrade = false;
          this.headers = [];
          this.headersSize = 0;
          this.headersMaxSize = client[kMaxHeadersSize];
          this.shouldKeepAlive = false;
          this.paused = false;
          this.resume = this.resume.bind(this);
          this.bytesRead = 0;
          this.keepAlive = "";
          this.contentLength = "";
          this.connection = "";
          this.maxResponseSize = client[kMaxResponseSize];
        }
        setTimeout(value, type) {
          this.timeoutType = type;
          if (value !== this.timeoutValue) {
            timers.clearTimeout(this.timeout);
            if (value) {
              this.timeout = timers.setTimeout(onParserTimeout, value, this);
              if (this.timeout.unref) {
                this.timeout.unref();
              }
            } else {
              this.timeout = null;
            }
            this.timeoutValue = value;
          } else if (this.timeout) {
            if (this.timeout.refresh) {
              this.timeout.refresh();
            }
          }
        }
        resume() {
          if (this.socket.destroyed || !this.paused) {
            return;
          }
          assert(this.ptr != null);
          assert(currentParser == null);
          this.llhttp.llhttp_resume(this.ptr);
          assert(this.timeoutType === TIMEOUT_BODY);
          if (this.timeout) {
            if (this.timeout.refresh) {
              this.timeout.refresh();
            }
          }
          this.paused = false;
          this.execute(this.socket.read() || EMPTY_BUF);
          this.readMore();
        }
        readMore() {
          while (!this.paused && this.ptr) {
            const chunk = this.socket.read();
            if (chunk === null) {
              break;
            }
            this.execute(chunk);
          }
        }
        execute(data) {
          assert(this.ptr != null);
          assert(currentParser == null);
          assert(!this.paused);
          const { socket, llhttp } = this;
          if (data.length > currentBufferSize) {
            if (currentBufferPtr) {
              llhttp.free(currentBufferPtr);
            }
            currentBufferSize = Math.ceil(data.length / 4096) * 4096;
            currentBufferPtr = llhttp.malloc(currentBufferSize);
          }
          new Uint8Array(
            llhttp.memory.buffer,
            currentBufferPtr,
            currentBufferSize,
          ).set(data);
          try {
            let ret;
            try {
              currentBufferRef = data;
              currentParser = this;
              ret = llhttp.llhttp_execute(
                this.ptr,
                currentBufferPtr,
                data.length,
              );
            } catch (err) {
              throw err;
            } finally {
              currentParser = null;
              currentBufferRef = null;
            }
            const offset =
              llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
            if (ret === constants.ERROR.PAUSED_UPGRADE) {
              this.onUpgrade(data.slice(offset));
            } else if (ret === constants.ERROR.PAUSED) {
              this.paused = true;
              socket.unshift(data.slice(offset));
            } else if (ret !== constants.ERROR.OK) {
              const ptr = llhttp.llhttp_get_error_reason(this.ptr);
              let message = "";
              if (ptr) {
                const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(
                  0,
                );
                message =
                  "Response does not match the HTTP/1.1 protocol (" +
                  Buffer.from(llhttp.memory.buffer, ptr, len).toString() +
                  ")";
              }
              throw new HTTPParserError(
                message,
                constants.ERROR[ret],
                data.slice(offset),
              );
            }
          } catch (err) {
            util2.destroy(socket, err);
          }
        }
        destroy() {
          assert(this.ptr != null);
          assert(currentParser == null);
          this.llhttp.llhttp_free(this.ptr);
          this.ptr = null;
          timers.clearTimeout(this.timeout);
          this.timeout = null;
          this.timeoutValue = null;
          this.timeoutType = null;
          this.paused = false;
        }
        onStatus(buf) {
          this.statusText = buf.toString();
        }
        onMessageBegin() {
          const { socket, client } = this;
          if (socket.destroyed) {
            return -1;
          }
          const request = client[kQueue][client[kRunningIdx]];
          if (!request) {
            return -1;
          }
        }
        onHeaderField(buf) {
          const len = this.headers.length;
          if ((len & 1) === 0) {
            this.headers.push(buf);
          } else {
            this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
          }
          this.trackHeader(buf.length);
        }
        onHeaderValue(buf) {
          let len = this.headers.length;
          if ((len & 1) === 1) {
            this.headers.push(buf);
            len += 1;
          } else {
            this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
          }
          const key = this.headers[len - 2];
          if (
            key.length === 10 &&
            key.toString().toLowerCase() === "keep-alive"
          ) {
            this.keepAlive += buf.toString();
          } else if (
            key.length === 10 &&
            key.toString().toLowerCase() === "connection"
          ) {
            this.connection += buf.toString();
          } else if (
            key.length === 14 &&
            key.toString().toLowerCase() === "content-length"
          ) {
            this.contentLength += buf.toString();
          }
          this.trackHeader(buf.length);
        }
        trackHeader(len) {
          this.headersSize += len;
          if (this.headersSize >= this.headersMaxSize) {
            util2.destroy(this.socket, new HeadersOverflowError());
          }
        }
        onUpgrade(head) {
          const { upgrade, client, socket, headers, statusCode } = this;
          assert(upgrade);
          const request = client[kQueue][client[kRunningIdx]];
          assert(request);
          assert(!socket.destroyed);
          assert(socket === client[kSocket]);
          assert(!this.paused);
          assert(request.upgrade || request.method === "CONNECT");
          this.statusCode = null;
          this.statusText = "";
          this.shouldKeepAlive = null;
          assert(this.headers.length % 2 === 0);
          this.headers = [];
          this.headersSize = 0;
          socket.unshift(head);
          socket[kParser].destroy();
          socket[kParser] = null;
          socket[kClient] = null;
          socket[kError] = null;
          socket
            .removeListener("error", onSocketError)
            .removeListener("readable", onSocketReadable)
            .removeListener("end", onSocketEnd)
            .removeListener("close", onSocketClose);
          client[kSocket] = null;
          client[kQueue][client[kRunningIdx]++] = null;
          client.emit(
            "disconnect",
            client[kUrl],
            [client],
            new InformationalError("upgrade"),
          );
          try {
            request.onUpgrade(statusCode, headers, socket);
          } catch (err) {
            util2.destroy(socket, err);
          }
          resume(client);
        }
        onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
          const { client, socket, headers, statusText } = this;
          if (socket.destroyed) {
            return -1;
          }
          const request = client[kQueue][client[kRunningIdx]];
          if (!request) {
            return -1;
          }
          assert(!this.upgrade);
          assert(this.statusCode < 200);
          if (statusCode === 100) {
            util2.destroy(
              socket,
              new SocketError("bad response", util2.getSocketInfo(socket)),
            );
            return -1;
          }
          if (upgrade && !request.upgrade) {
            util2.destroy(
              socket,
              new SocketError("bad upgrade", util2.getSocketInfo(socket)),
            );
            return -1;
          }
          assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
          this.statusCode = statusCode;
          this.shouldKeepAlive =
            shouldKeepAlive || // Override llhttp value which does not allow keepAlive for HEAD.
            (request.method === "HEAD" &&
              !socket[kReset] &&
              this.connection.toLowerCase() === "keep-alive");
          if (this.statusCode >= 200) {
            const bodyTimeout =
              request.bodyTimeout != null
                ? request.bodyTimeout
                : client[kBodyTimeout];
            this.setTimeout(bodyTimeout, TIMEOUT_BODY);
          } else if (this.timeout) {
            if (this.timeout.refresh) {
              this.timeout.refresh();
            }
          }
          if (request.method === "CONNECT") {
            assert(client[kRunning] === 1);
            this.upgrade = true;
            return 2;
          }
          if (upgrade) {
            assert(client[kRunning] === 1);
            this.upgrade = true;
            return 2;
          }
          assert(this.headers.length % 2 === 0);
          this.headers = [];
          this.headersSize = 0;
          if (this.shouldKeepAlive && client[kPipelining]) {
            const keepAliveTimeout = this.keepAlive
              ? util2.parseKeepAliveTimeout(this.keepAlive)
              : null;
            if (keepAliveTimeout != null) {
              const timeout = Math.min(
                keepAliveTimeout - client[kKeepAliveTimeoutThreshold],
                client[kKeepAliveMaxTimeout],
              );
              if (timeout <= 0) {
                socket[kReset] = true;
              } else {
                client[kKeepAliveTimeoutValue] = timeout;
              }
            } else {
              client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
            }
          } else {
            socket[kReset] = true;
          }
          const pause =
            request.onHeaders(statusCode, headers, this.resume, statusText) ===
            false;
          if (request.aborted) {
            return -1;
          }
          if (request.method === "HEAD") {
            return 1;
          }
          if (statusCode < 200) {
            return 1;
          }
          if (socket[kBlocking]) {
            socket[kBlocking] = false;
            resume(client);
          }
          return pause ? constants.ERROR.PAUSED : 0;
        }
        onBody(buf) {
          const { client, socket, statusCode, maxResponseSize } = this;
          if (socket.destroyed) {
            return -1;
          }
          const request = client[kQueue][client[kRunningIdx]];
          assert(request);
          assert.strictEqual(this.timeoutType, TIMEOUT_BODY);
          if (this.timeout) {
            if (this.timeout.refresh) {
              this.timeout.refresh();
            }
          }
          assert(statusCode >= 200);
          if (
            maxResponseSize > -1 &&
            this.bytesRead + buf.length > maxResponseSize
          ) {
            util2.destroy(socket, new ResponseExceededMaxSizeError());
            return -1;
          }
          this.bytesRead += buf.length;
          if (request.onData(buf) === false) {
            return constants.ERROR.PAUSED;
          }
        }
        onMessageComplete() {
          const {
            client,
            socket,
            statusCode,
            upgrade,
            headers,
            contentLength,
            bytesRead,
            shouldKeepAlive,
          } = this;
          if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
            return -1;
          }
          if (upgrade) {
            return;
          }
          const request = client[kQueue][client[kRunningIdx]];
          assert(request);
          assert(statusCode >= 100);
          this.statusCode = null;
          this.statusText = "";
          this.bytesRead = 0;
          this.contentLength = "";
          this.keepAlive = "";
          this.connection = "";
          assert(this.headers.length % 2 === 0);
          this.headers = [];
          this.headersSize = 0;
          if (statusCode < 200) {
            return;
          }
          if (
            request.method !== "HEAD" &&
            contentLength &&
            bytesRead !== parseInt(contentLength, 10)
          ) {
            util2.destroy(socket, new ResponseContentLengthMismatchError());
            return -1;
          }
          request.onComplete(headers);
          client[kQueue][client[kRunningIdx]++] = null;
          if (socket[kWriting]) {
            assert.strictEqual(client[kRunning], 0);
            util2.destroy(socket, new InformationalError("reset"));
            return constants.ERROR.PAUSED;
          } else if (!shouldKeepAlive) {
            util2.destroy(socket, new InformationalError("reset"));
            return constants.ERROR.PAUSED;
          } else if (socket[kReset] && client[kRunning] === 0) {
            util2.destroy(socket, new InformationalError("reset"));
            return constants.ERROR.PAUSED;
          } else if (client[kPipelining] === 1) {
            setImmediate(resume, client);
          } else {
            resume(client);
          }
        }
      };
      function onParserTimeout(parser) {
        const { socket, timeoutType, client } = parser;
        if (timeoutType === TIMEOUT_HEADERS) {
          if (
            !socket[kWriting] ||
            socket.writableNeedDrain ||
            client[kRunning] > 1
          ) {
            assert(
              !parser.paused,
              "cannot be paused while waiting for headers",
            );
            util2.destroy(socket, new HeadersTimeoutError());
          }
        } else if (timeoutType === TIMEOUT_BODY) {
          if (!parser.paused) {
            util2.destroy(socket, new BodyTimeoutError());
          }
        } else if (timeoutType === TIMEOUT_IDLE) {
          assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);
          util2.destroy(socket, new InformationalError("socket idle timeout"));
        }
      }
      __name(onParserTimeout, "onParserTimeout");
      function onSocketReadable() {
        const { [kParser]: parser } = this;
        if (parser) {
          parser.readMore();
        }
      }
      __name(onSocketReadable, "onSocketReadable");
      function onSocketError(err) {
        const { [kClient]: client, [kParser]: parser } = this;
        assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
        if (client[kHTTPConnVersion] !== "h2") {
          if (
            err.code === "ECONNRESET" &&
            parser.statusCode &&
            !parser.shouldKeepAlive
          ) {
            parser.onMessageComplete();
            return;
          }
        }
        this[kError] = err;
        onError(this[kClient], err);
      }
      __name(onSocketError, "onSocketError");
      function onError(client, err) {
        if (
          client[kRunning] === 0 &&
          err.code !== "UND_ERR_INFO" &&
          err.code !== "UND_ERR_SOCKET"
        ) {
          assert(client[kPendingIdx] === client[kRunningIdx]);
          const requests = client[kQueue].splice(client[kRunningIdx]);
          for (let i = 0; i < requests.length; i++) {
            const request = requests[i];
            errorRequest(client, request, err);
          }
          assert(client[kSize] === 0);
        }
      }
      __name(onError, "onError");
      function onSocketEnd() {
        const { [kParser]: parser, [kClient]: client } = this;
        if (client[kHTTPConnVersion] !== "h2") {
          if (parser.statusCode && !parser.shouldKeepAlive) {
            parser.onMessageComplete();
            return;
          }
        }
        util2.destroy(
          this,
          new SocketError("other side closed", util2.getSocketInfo(this)),
        );
      }
      __name(onSocketEnd, "onSocketEnd");
      function onSocketClose() {
        const { [kClient]: client, [kParser]: parser } = this;
        if (client[kHTTPConnVersion] === "h1" && parser) {
          if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {
            parser.onMessageComplete();
          }
          this[kParser].destroy();
          this[kParser] = null;
        }
        const err =
          this[kError] || new SocketError("closed", util2.getSocketInfo(this));
        client[kSocket] = null;
        if (client.destroyed) {
          assert(client[kPending] === 0);
          const requests = client[kQueue].splice(client[kRunningIdx]);
          for (let i = 0; i < requests.length; i++) {
            const request = requests[i];
            errorRequest(client, request, err);
          }
        } else if (client[kRunning] > 0 && err.code !== "UND_ERR_INFO") {
          const request = client[kQueue][client[kRunningIdx]];
          client[kQueue][client[kRunningIdx]++] = null;
          errorRequest(client, request, err);
        }
        client[kPendingIdx] = client[kRunningIdx];
        assert(client[kRunning] === 0);
        client.emit("disconnect", client[kUrl], [client], err);
        resume(client);
      }
      __name(onSocketClose, "onSocketClose");
      async function connect(client) {
        assert(!client[kConnecting]);
        assert(!client[kSocket]);
        let { host, hostname, protocol, port } = client[kUrl];
        if (hostname[0] === "[") {
          const idx = hostname.indexOf("]");
          assert(idx !== -1);
          const ip = hostname.substring(1, idx);
          assert(net.isIP(ip));
          hostname = ip;
        }
        client[kConnecting] = true;
        if (channels.beforeConnect.hasSubscribers) {
          channels.beforeConnect.publish({
            connectParams: {
              host,
              hostname,
              protocol,
              port,
              servername: client[kServerName],
              localAddress: client[kLocalAddress],
            },
            connector: client[kConnector],
          });
        }
        try {
          const socket = await new Promise((resolve, reject) => {
            client[kConnector](
              {
                host,
                hostname,
                protocol,
                port,
                servername: client[kServerName],
                localAddress: client[kLocalAddress],
              },
              (err, socket2) => {
                if (err) {
                  reject(err);
                } else {
                  resolve(socket2);
                }
              },
            );
          });
          if (client.destroyed) {
            util2.destroy(
              socket.on("error", () => {}),
              new ClientDestroyedError(),
            );
            return;
          }
          client[kConnecting] = false;
          assert(socket);
          const isH2 = socket.alpnProtocol === "h2";
          if (isH2) {
            if (!h2ExperimentalWarned) {
              h2ExperimentalWarned = true;
              process.emitWarning(
                "H2 support is experimental, expect them to change at any time.",
                {
                  code: "UNDICI-H2",
                },
              );
            }
            const session = http2.connect(client[kUrl], {
              createConnection: /* @__PURE__ */ __name(
                () => socket,
                "createConnection",
              ),
              peerMaxConcurrentStreams:
                client[kHTTP2SessionState].maxConcurrentStreams,
            });
            client[kHTTPConnVersion] = "h2";
            session[kClient] = client;
            session[kSocket] = socket;
            session.on("error", onHttp2SessionError);
            session.on("frameError", onHttp2FrameError);
            session.on("end", onHttp2SessionEnd);
            session.on("goaway", onHTTP2GoAway);
            session.on("close", onSocketClose);
            session.unref();
            client[kHTTP2Session] = session;
            socket[kHTTP2Session] = session;
          } else {
            if (!llhttpInstance) {
              llhttpInstance = await llhttpPromise;
              llhttpPromise = null;
            }
            socket[kNoRef] = false;
            socket[kWriting] = false;
            socket[kReset] = false;
            socket[kBlocking] = false;
            socket[kParser] = new Parser(client, socket, llhttpInstance);
          }
          socket[kCounter] = 0;
          socket[kMaxRequests] = client[kMaxRequests];
          socket[kClient] = client;
          socket[kError] = null;
          socket
            .on("error", onSocketError)
            .on("readable", onSocketReadable)
            .on("end", onSocketEnd)
            .on("close", onSocketClose);
          client[kSocket] = socket;
          if (channels.connected.hasSubscribers) {
            channels.connected.publish({
              connectParams: {
                host,
                hostname,
                protocol,
                port,
                servername: client[kServerName],
                localAddress: client[kLocalAddress],
              },
              connector: client[kConnector],
              socket,
            });
          }
          client.emit("connect", client[kUrl], [client]);
        } catch (err) {
          if (client.destroyed) {
            return;
          }
          client[kConnecting] = false;
          if (channels.connectError.hasSubscribers) {
            channels.connectError.publish({
              connectParams: {
                host,
                hostname,
                protocol,
                port,
                servername: client[kServerName],
                localAddress: client[kLocalAddress],
              },
              connector: client[kConnector],
              error: err,
            });
          }
          if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
            assert(client[kRunning] === 0);
            while (
              client[kPending] > 0 &&
              client[kQueue][client[kPendingIdx]].servername ===
                client[kServerName]
            ) {
              const request = client[kQueue][client[kPendingIdx]++];
              errorRequest(client, request, err);
            }
          } else {
            onError(client, err);
          }
          client.emit("connectionError", client[kUrl], [client], err);
        }
        resume(client);
      }
      __name(connect, "connect");
      function emitDrain(client) {
        client[kNeedDrain] = 0;
        client.emit("drain", client[kUrl], [client]);
      }
      __name(emitDrain, "emitDrain");
      function resume(client, sync) {
        if (client[kResuming] === 2) {
          return;
        }
        client[kResuming] = 2;
        _resume(client, sync);
        client[kResuming] = 0;
        if (client[kRunningIdx] > 256) {
          client[kQueue].splice(0, client[kRunningIdx]);
          client[kPendingIdx] -= client[kRunningIdx];
          client[kRunningIdx] = 0;
        }
      }
      __name(resume, "resume");
      function _resume(client, sync) {
        while (true) {
          if (client.destroyed) {
            assert(client[kPending] === 0);
            return;
          }
          if (client[kClosedResolve] && !client[kSize]) {
            client[kClosedResolve]();
            client[kClosedResolve] = null;
            return;
          }
          const socket = client[kSocket];
          if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
            if (client[kSize] === 0) {
              if (!socket[kNoRef] && socket.unref) {
                socket.unref();
                socket[kNoRef] = true;
              }
            } else if (socket[kNoRef] && socket.ref) {
              socket.ref();
              socket[kNoRef] = false;
            }
            if (client[kSize] === 0) {
              if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
                socket[kParser].setTimeout(
                  client[kKeepAliveTimeoutValue],
                  TIMEOUT_IDLE,
                );
              }
            } else if (
              client[kRunning] > 0 &&
              socket[kParser].statusCode < 200
            ) {
              if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
                const request2 = client[kQueue][client[kRunningIdx]];
                const headersTimeout =
                  request2.headersTimeout != null
                    ? request2.headersTimeout
                    : client[kHeadersTimeout];
                socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
              }
            }
          }
          if (client[kBusy]) {
            client[kNeedDrain] = 2;
          } else if (client[kNeedDrain] === 2) {
            if (sync) {
              client[kNeedDrain] = 1;
              process.nextTick(emitDrain, client);
            } else {
              emitDrain(client);
            }
            continue;
          }
          if (client[kPending] === 0) {
            return;
          }
          if (client[kRunning] >= (client[kPipelining] || 1)) {
            return;
          }
          const request = client[kQueue][client[kPendingIdx]];
          if (
            client[kUrl].protocol === "https:" &&
            client[kServerName] !== request.servername
          ) {
            if (client[kRunning] > 0) {
              return;
            }
            client[kServerName] = request.servername;
            if (socket && socket.servername !== request.servername) {
              util2.destroy(
                socket,
                new InformationalError("servername changed"),
              );
              return;
            }
          }
          if (client[kConnecting]) {
            return;
          }
          if (!socket && !client[kHTTP2Session]) {
            connect(client);
            return;
          }
          if (
            socket.destroyed ||
            socket[kWriting] ||
            socket[kReset] ||
            socket[kBlocking]
          ) {
            return;
          }
          if (client[kRunning] > 0 && !request.idempotent) {
            return;
          }
          if (
            client[kRunning] > 0 &&
            (request.upgrade || request.method === "CONNECT")
          ) {
            return;
          }
          if (
            client[kRunning] > 0 &&
            util2.bodyLength(request.body) !== 0 &&
            (util2.isStream(request.body) ||
              util2.isAsyncIterable(request.body))
          ) {
            return;
          }
          if (!request.aborted && write(client, request)) {
            client[kPendingIdx]++;
          } else {
            client[kQueue].splice(client[kPendingIdx], 1);
          }
        }
      }
      __name(_resume, "_resume");
      function shouldSendContentLength(method) {
        return (
          method !== "GET" &&
          method !== "HEAD" &&
          method !== "OPTIONS" &&
          method !== "TRACE" &&
          method !== "CONNECT"
        );
      }
      __name(shouldSendContentLength, "shouldSendContentLength");
      function write(client, request) {
        if (client[kHTTPConnVersion] === "h2") {
          writeH2(client, client[kHTTP2Session], request);
          return;
        }
        const {
          body,
          method,
          path: path4,
          host,
          upgrade,
          headers,
          blocking,
          reset: reset2,
        } = request;
        const expectsPayload =
          method === "PUT" || method === "POST" || method === "PATCH";
        if (body && typeof body.read === "function") {
          body.read(0);
        }
        const bodyLength = util2.bodyLength(body);
        let contentLength = bodyLength;
        if (contentLength === null) {
          contentLength = request.contentLength;
        }
        if (contentLength === 0 && !expectsPayload) {
          contentLength = null;
        }
        if (
          shouldSendContentLength(method) &&
          contentLength > 0 &&
          request.contentLength !== null &&
          request.contentLength !== contentLength
        ) {
          if (client[kStrictContentLength]) {
            errorRequest(
              client,
              request,
              new RequestContentLengthMismatchError(),
            );
            return false;
          }
          process.emitWarning(new RequestContentLengthMismatchError());
        }
        const socket = client[kSocket];
        try {
          request.onConnect((err) => {
            if (request.aborted || request.completed) {
              return;
            }
            errorRequest(client, request, err || new RequestAbortedError());
            util2.destroy(socket, new InformationalError("aborted"));
          });
        } catch (err) {
          errorRequest(client, request, err);
        }
        if (request.aborted) {
          return false;
        }
        if (method === "HEAD") {
          socket[kReset] = true;
        }
        if (upgrade || method === "CONNECT") {
          socket[kReset] = true;
        }
        if (reset2 != null) {
          socket[kReset] = reset2;
        }
        if (
          client[kMaxRequests] &&
          socket[kCounter]++ >= client[kMaxRequests]
        ) {
          socket[kReset] = true;
        }
        if (blocking) {
          socket[kBlocking] = true;
        }
        let header = `${method} ${path4} HTTP/1.1\r
`;
        if (typeof host === "string") {
          header += `host: ${host}\r
`;
        } else {
          header += client[kHostHeader];
        }
        if (upgrade) {
          header += `connection: upgrade\r
upgrade: ${upgrade}\r
`;
        } else if (client[kPipelining] && !socket[kReset]) {
          header += "connection: keep-alive\r\n";
        } else {
          header += "connection: close\r\n";
        }
        if (headers) {
          header += headers;
        }
        if (channels.sendHeaders.hasSubscribers) {
          channels.sendHeaders.publish({ request, headers: header, socket });
        }
        if (!body || bodyLength === 0) {
          if (contentLength === 0) {
            socket.write(
              `${header}content-length: 0\r
\r
`,
              "latin1",
            );
          } else {
            assert(
              contentLength === null,
              "no body must not have content length",
            );
            socket.write(
              `${header}\r
`,
              "latin1",
            );
          }
          request.onRequestSent();
        } else if (util2.isBuffer(body)) {
          assert(
            contentLength === body.byteLength,
            "buffer body must have content length",
          );
          socket.cork();
          socket.write(
            `${header}content-length: ${contentLength}\r
\r
`,
            "latin1",
          );
          socket.write(body);
          socket.uncork();
          request.onBodySent(body);
          request.onRequestSent();
          if (!expectsPayload) {
            socket[kReset] = true;
          }
        } else if (util2.isBlobLike(body)) {
          if (typeof body.stream === "function") {
            writeIterable({
              body: body.stream(),
              client,
              request,
              socket,
              contentLength,
              header,
              expectsPayload,
            });
          } else {
            writeBlob({
              body,
              client,
              request,
              socket,
              contentLength,
              header,
              expectsPayload,
            });
          }
        } else if (util2.isStream(body)) {
          writeStream({
            body,
            client,
            request,
            socket,
            contentLength,
            header,
            expectsPayload,
          });
        } else if (util2.isIterable(body)) {
          writeIterable({
            body,
            client,
            request,
            socket,
            contentLength,
            header,
            expectsPayload,
          });
        } else {
          assert(false);
        }
        return true;
      }
      __name(write, "write");
      function writeH2(client, session, request) {
        const {
          body,
          method,
          path: path4,
          host,
          upgrade,
          expectContinue,
          signal,
          headers: reqHeaders,
        } = request;
        let headers;
        if (typeof reqHeaders === "string")
          headers = Request[kHTTP2CopyHeaders](reqHeaders.trim());
        else headers = reqHeaders;
        if (upgrade) {
          errorRequest(
            client,
            request,
            new Error("Upgrade not supported for H2"),
          );
          return false;
        }
        try {
          request.onConnect((err) => {
            if (request.aborted || request.completed) {
              return;
            }
            errorRequest(client, request, err || new RequestAbortedError());
          });
        } catch (err) {
          errorRequest(client, request, err);
        }
        if (request.aborted) {
          return false;
        }
        let stream;
        const h2State = client[kHTTP2SessionState];
        headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];
        headers[HTTP2_HEADER_METHOD] = method;
        if (method === "CONNECT") {
          session.ref();
          stream = session.request(headers, { endStream: false, signal });
          if (stream.id && !stream.pending) {
            request.onUpgrade(null, null, stream);
            ++h2State.openStreams;
          } else {
            stream.once("ready", () => {
              request.onUpgrade(null, null, stream);
              ++h2State.openStreams;
            });
          }
          stream.once("close", () => {
            h2State.openStreams -= 1;
            if (h2State.openStreams === 0) session.unref();
          });
          return true;
        }
        headers[HTTP2_HEADER_PATH] = path4;
        headers[HTTP2_HEADER_SCHEME] = "https";
        const expectsPayload =
          method === "PUT" || method === "POST" || method === "PATCH";
        if (body && typeof body.read === "function") {
          body.read(0);
        }
        let contentLength = util2.bodyLength(body);
        if (contentLength == null) {
          contentLength = request.contentLength;
        }
        if (contentLength === 0 || !expectsPayload) {
          contentLength = null;
        }
        if (
          shouldSendContentLength(method) &&
          contentLength > 0 &&
          request.contentLength != null &&
          request.contentLength !== contentLength
        ) {
          if (client[kStrictContentLength]) {
            errorRequest(
              client,
              request,
              new RequestContentLengthMismatchError(),
            );
            return false;
          }
          process.emitWarning(new RequestContentLengthMismatchError());
        }
        if (contentLength != null) {
          assert(body, "no body must not have content length");
          headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
        }
        session.ref();
        const shouldEndStream = method === "GET" || method === "HEAD";
        if (expectContinue) {
          headers[HTTP2_HEADER_EXPECT] = "100-continue";
          stream = session.request(headers, {
            endStream: shouldEndStream,
            signal,
          });
          stream.once("continue", writeBodyH2);
        } else {
          stream = session.request(headers, {
            endStream: shouldEndStream,
            signal,
          });
          writeBodyH2();
        }
        ++h2State.openStreams;
        stream.once("response", (headers2) => {
          const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } =
            headers2;
          if (
            request.onHeaders(
              Number(statusCode),
              realHeaders,
              stream.resume.bind(stream),
              "",
            ) === false
          ) {
            stream.pause();
          }
        });
        stream.once("end", () => {
          request.onComplete([]);
        });
        stream.on("data", (chunk) => {
          if (request.onData(chunk) === false) {
            stream.pause();
          }
        });
        stream.once("close", () => {
          h2State.openStreams -= 1;
          if (h2State.openStreams === 0) {
            session.unref();
          }
        });
        stream.once("error", function (err) {
          if (
            client[kHTTP2Session] &&
            !client[kHTTP2Session].destroyed &&
            !this.closed &&
            !this.destroyed
          ) {
            h2State.streams -= 1;
            util2.destroy(stream, err);
          }
        });
        stream.once("frameError", (type, code2) => {
          const err = new InformationalError(
            `HTTP/2: "frameError" received - type ${type}, code ${code2}`,
          );
          errorRequest(client, request, err);
          if (
            client[kHTTP2Session] &&
            !client[kHTTP2Session].destroyed &&
            !this.closed &&
            !this.destroyed
          ) {
            h2State.streams -= 1;
            util2.destroy(stream, err);
          }
        });
        return true;
        function writeBodyH2() {
          if (!body) {
            request.onRequestSent();
          } else if (util2.isBuffer(body)) {
            assert(
              contentLength === body.byteLength,
              "buffer body must have content length",
            );
            stream.cork();
            stream.write(body);
            stream.uncork();
            stream.end();
            request.onBodySent(body);
            request.onRequestSent();
          } else if (util2.isBlobLike(body)) {
            if (typeof body.stream === "function") {
              writeIterable({
                client,
                request,
                contentLength,
                h2stream: stream,
                expectsPayload,
                body: body.stream(),
                socket: client[kSocket],
                header: "",
              });
            } else {
              writeBlob({
                body,
                client,
                request,
                contentLength,
                expectsPayload,
                h2stream: stream,
                header: "",
                socket: client[kSocket],
              });
            }
          } else if (util2.isStream(body)) {
            writeStream({
              body,
              client,
              request,
              contentLength,
              expectsPayload,
              socket: client[kSocket],
              h2stream: stream,
              header: "",
            });
          } else if (util2.isIterable(body)) {
            writeIterable({
              body,
              client,
              request,
              contentLength,
              expectsPayload,
              header: "",
              h2stream: stream,
              socket: client[kSocket],
            });
          } else {
            assert(false);
          }
        }
        __name(writeBodyH2, "writeBodyH2");
      }
      __name(writeH2, "writeH2");
      function writeStream({
        h2stream,
        body,
        client,
        request,
        socket,
        contentLength,
        header,
        expectsPayload,
      }) {
        assert(
          contentLength !== 0 || client[kRunning] === 0,
          "stream body cannot be pipelined",
        );
        if (client[kHTTPConnVersion] === "h2") {
          let onPipeData = function (chunk) {
            request.onBodySent(chunk);
          };
          __name(onPipeData, "onPipeData");
          const pipe = pipeline(body, h2stream, (err) => {
            if (err) {
              util2.destroy(body, err);
              util2.destroy(h2stream, err);
            } else {
              request.onRequestSent();
            }
          });
          pipe.on("data", onPipeData);
          pipe.once("end", () => {
            pipe.removeListener("data", onPipeData);
            util2.destroy(pipe);
          });
          return;
        }
        let finished = false;
        const writer = new AsyncWriter({
          socket,
          request,
          contentLength,
          client,
          expectsPayload,
          header,
        });
        const onData = /* @__PURE__ */ __name(function (chunk) {
          if (finished) {
            return;
          }
          try {
            if (!writer.write(chunk) && this.pause) {
              this.pause();
            }
          } catch (err) {
            util2.destroy(this, err);
          }
        }, "onData");
        const onDrain = /* @__PURE__ */ __name(function () {
          if (finished) {
            return;
          }
          if (body.resume) {
            body.resume();
          }
        }, "onDrain");
        const onAbort = /* @__PURE__ */ __name(function () {
          if (finished) {
            return;
          }
          const err = new RequestAbortedError();
          queueMicrotask(() => onFinished(err));
        }, "onAbort");
        const onFinished = /* @__PURE__ */ __name(function (err) {
          if (finished) {
            return;
          }
          finished = true;
          assert(
            socket.destroyed || (socket[kWriting] && client[kRunning] <= 1),
          );
          socket.off("drain", onDrain).off("error", onFinished);
          body
            .removeListener("data", onData)
            .removeListener("end", onFinished)
            .removeListener("error", onFinished)
            .removeListener("close", onAbort);
          if (!err) {
            try {
              writer.end();
            } catch (er) {
              err = er;
            }
          }
          writer.destroy(err);
          if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) {
            util2.destroy(body, err);
          } else {
            util2.destroy(body);
          }
        }, "onFinished");
        body
          .on("data", onData)
          .on("end", onFinished)
          .on("error", onFinished)
          .on("close", onAbort);
        if (body.resume) {
          body.resume();
        }
        socket.on("drain", onDrain).on("error", onFinished);
      }
      __name(writeStream, "writeStream");
      async function writeBlob({
        h2stream,
        body,
        client,
        request,
        socket,
        contentLength,
        header,
        expectsPayload,
      }) {
        assert(
          contentLength === body.size,
          "blob body must have content length",
        );
        const isH2 = client[kHTTPConnVersion] === "h2";
        try {
          if (contentLength != null && contentLength !== body.size) {
            throw new RequestContentLengthMismatchError();
          }
          const buffer = Buffer.from(await body.arrayBuffer());
          if (isH2) {
            h2stream.cork();
            h2stream.write(buffer);
            h2stream.uncork();
          } else {
            socket.cork();
            socket.write(
              `${header}content-length: ${contentLength}\r
\r
`,
              "latin1",
            );
            socket.write(buffer);
            socket.uncork();
          }
          request.onBodySent(buffer);
          request.onRequestSent();
          if (!expectsPayload) {
            socket[kReset] = true;
          }
          resume(client);
        } catch (err) {
          util2.destroy(isH2 ? h2stream : socket, err);
        }
      }
      __name(writeBlob, "writeBlob");
      async function writeIterable({
        h2stream,
        body,
        client,
        request,
        socket,
        contentLength,
        header,
        expectsPayload,
      }) {
        assert(
          contentLength !== 0 || client[kRunning] === 0,
          "iterator body cannot be pipelined",
        );
        let callback = null;
        function onDrain() {
          if (callback) {
            const cb = callback;
            callback = null;
            cb();
          }
        }
        __name(onDrain, "onDrain");
        const waitForDrain = /* @__PURE__ */ __name(
          () =>
            new Promise((resolve, reject) => {
              assert(callback === null);
              if (socket[kError]) {
                reject(socket[kError]);
              } else {
                callback = resolve;
              }
            }),
          "waitForDrain",
        );
        if (client[kHTTPConnVersion] === "h2") {
          h2stream.on("close", onDrain).on("drain", onDrain);
          try {
            for await (const chunk of body) {
              if (socket[kError]) {
                throw socket[kError];
              }
              const res = h2stream.write(chunk);
              request.onBodySent(chunk);
              if (!res) {
                await waitForDrain();
              }
            }
          } catch (err) {
            h2stream.destroy(err);
          } finally {
            request.onRequestSent();
            h2stream.end();
            h2stream.off("close", onDrain).off("drain", onDrain);
          }
          return;
        }
        socket.on("close", onDrain).on("drain", onDrain);
        const writer = new AsyncWriter({
          socket,
          request,
          contentLength,
          client,
          expectsPayload,
          header,
        });
        try {
          for await (const chunk of body) {
            if (socket[kError]) {
              throw socket[kError];
            }
            if (!writer.write(chunk)) {
              await waitForDrain();
            }
          }
          writer.end();
        } catch (err) {
          writer.destroy(err);
        } finally {
          socket.off("close", onDrain).off("drain", onDrain);
        }
      }
      __name(writeIterable, "writeIterable");
      var AsyncWriter = class {
        static {
          __name(this, "AsyncWriter");
        }
        constructor({
          socket,
          request,
          contentLength,
          client,
          expectsPayload,
          header,
        }) {
          this.socket = socket;
          this.request = request;
          this.contentLength = contentLength;
          this.client = client;
          this.bytesWritten = 0;
          this.expectsPayload = expectsPayload;
          this.header = header;
          socket[kWriting] = true;
        }
        write(chunk) {
          const {
            socket,
            request,
            contentLength,
            client,
            bytesWritten,
            expectsPayload,
            header,
          } = this;
          if (socket[kError]) {
            throw socket[kError];
          }
          if (socket.destroyed) {
            return false;
          }
          const len = Buffer.byteLength(chunk);
          if (!len) {
            return true;
          }
          if (contentLength !== null && bytesWritten + len > contentLength) {
            if (client[kStrictContentLength]) {
              throw new RequestContentLengthMismatchError();
            }
            process.emitWarning(new RequestContentLengthMismatchError());
          }
          socket.cork();
          if (bytesWritten === 0) {
            if (!expectsPayload) {
              socket[kReset] = true;
            }
            if (contentLength === null) {
              socket.write(
                `${header}transfer-encoding: chunked\r
`,
                "latin1",
              );
            } else {
              socket.write(
                `${header}content-length: ${contentLength}\r
\r
`,
                "latin1",
              );
            }
          }
          if (contentLength === null) {
            socket.write(
              `\r
${len.toString(16)}\r
`,
              "latin1",
            );
          }
          this.bytesWritten += len;
          const ret = socket.write(chunk);
          socket.uncork();
          request.onBodySent(chunk);
          if (!ret) {
            if (
              socket[kParser].timeout &&
              socket[kParser].timeoutType === TIMEOUT_HEADERS
            ) {
              if (socket[kParser].timeout.refresh) {
                socket[kParser].timeout.refresh();
              }
            }
          }
          return ret;
        }
        end() {
          const {
            socket,
            contentLength,
            client,
            bytesWritten,
            expectsPayload,
            header,
            request,
          } = this;
          request.onRequestSent();
          socket[kWriting] = false;
          if (socket[kError]) {
            throw socket[kError];
          }
          if (socket.destroyed) {
            return;
          }
          if (bytesWritten === 0) {
            if (expectsPayload) {
              socket.write(
                `${header}content-length: 0\r
\r
`,
                "latin1",
              );
            } else {
              socket.write(
                `${header}\r
`,
                "latin1",
              );
            }
          } else if (contentLength === null) {
            socket.write("\r\n0\r\n\r\n", "latin1");
          }
          if (contentLength !== null && bytesWritten !== contentLength) {
            if (client[kStrictContentLength]) {
              throw new RequestContentLengthMismatchError();
            } else {
              process.emitWarning(new RequestContentLengthMismatchError());
            }
          }
          if (
            socket[kParser].timeout &&
            socket[kParser].timeoutType === TIMEOUT_HEADERS
          ) {
            if (socket[kParser].timeout.refresh) {
              socket[kParser].timeout.refresh();
            }
          }
          resume(client);
        }
        destroy(err) {
          const { socket, client } = this;
          socket[kWriting] = false;
          if (err) {
            assert(
              client[kRunning] <= 1,
              "pipeline should only contain this request",
            );
            util2.destroy(socket, err);
          }
        }
      };
      function errorRequest(client, request, err) {
        try {
          request.onError(err);
          assert(request.aborted);
        } catch (err2) {
          client.emit("error", err2);
        }
      }
      __name(errorRequest, "errorRequest");
      module.exports = Client;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/node/fixed-queue.js
  var require_fixed_queue = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/node/fixed-queue.js"(
      exports,
      module,
    ) {
      "use strict";
      var kSize = 2048;
      var kMask = kSize - 1;
      var FixedCircularBuffer = class {
        static {
          __name(this, "FixedCircularBuffer");
        }
        constructor() {
          this.bottom = 0;
          this.top = 0;
          this.list = new Array(kSize);
          this.next = null;
        }
        isEmpty() {
          return this.top === this.bottom;
        }
        isFull() {
          return ((this.top + 1) & kMask) === this.bottom;
        }
        push(data) {
          this.list[this.top] = data;
          this.top = (this.top + 1) & kMask;
        }
        shift() {
          const nextItem = this.list[this.bottom];
          if (nextItem === void 0) return null;
          this.list[this.bottom] = void 0;
          this.bottom = (this.bottom + 1) & kMask;
          return nextItem;
        }
      };
      module.exports = class FixedQueue {
        static {
          __name(this, "FixedQueue");
        }
        constructor() {
          this.head = this.tail = new FixedCircularBuffer();
        }
        isEmpty() {
          return this.head.isEmpty();
        }
        push(data) {
          if (this.head.isFull()) {
            this.head = this.head.next = new FixedCircularBuffer();
          }
          this.head.push(data);
        }
        shift() {
          const tail = this.tail;
          const next = tail.shift();
          if (tail.isEmpty() && tail.next !== null) {
            this.tail = tail.next;
          }
          return next;
        }
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool-stats.js
  var require_pool_stats = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool-stats.js"(
      exports,
      module,
    ) {
      var { kFree, kConnected, kPending, kQueued, kRunning, kSize } =
        require_symbols();
      var kPool = Symbol("pool");
      var PoolStats = class {
        static {
          __name(this, "PoolStats");
        }
        constructor(pool) {
          this[kPool] = pool;
        }
        get connected() {
          return this[kPool][kConnected];
        }
        get free() {
          return this[kPool][kFree];
        }
        get pending() {
          return this[kPool][kPending];
        }
        get queued() {
          return this[kPool][kQueued];
        }
        get running() {
          return this[kPool][kRunning];
        }
        get size() {
          return this[kPool][kSize];
        }
      };
      module.exports = PoolStats;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool-base.js
  var require_pool_base = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool-base.js"(
      exports,
      module,
    ) {
      "use strict";
      var DispatcherBase = require_dispatcher_base();
      var FixedQueue = require_fixed_queue();
      var {
        kConnected,
        kSize,
        kRunning,
        kPending,
        kQueued,
        kBusy,
        kFree,
        kUrl,
        kClose,
        kDestroy,
        kDispatch,
      } = require_symbols();
      var PoolStats = require_pool_stats();
      var kClients = Symbol("clients");
      var kNeedDrain = Symbol("needDrain");
      var kQueue = Symbol("queue");
      var kClosedResolve = Symbol("closed resolve");
      var kOnDrain = Symbol("onDrain");
      var kOnConnect = Symbol("onConnect");
      var kOnDisconnect = Symbol("onDisconnect");
      var kOnConnectionError = Symbol("onConnectionError");
      var kGetDispatcher = Symbol("get dispatcher");
      var kAddClient = Symbol("add client");
      var kRemoveClient = Symbol("remove client");
      var kStats = Symbol("stats");
      var PoolBase = class extends DispatcherBase {
        static {
          __name(this, "PoolBase");
        }
        constructor() {
          super();
          this[kQueue] = new FixedQueue();
          this[kClients] = [];
          this[kQueued] = 0;
          const pool = this;
          this[kOnDrain] = /* @__PURE__ */ __name(function onDrain(
            origin,
            targets,
          ) {
            const queue = pool[kQueue];
            let needDrain = false;
            while (!needDrain) {
              const item = queue.shift();
              if (!item) {
                break;
              }
              pool[kQueued]--;
              needDrain = !this.dispatch(item.opts, item.handler);
            }
            this[kNeedDrain] = needDrain;
            if (!this[kNeedDrain] && pool[kNeedDrain]) {
              pool[kNeedDrain] = false;
              pool.emit("drain", origin, [pool, ...targets]);
            }
            if (pool[kClosedResolve] && queue.isEmpty()) {
              Promise.all(pool[kClients].map((c) => c.close())).then(
                pool[kClosedResolve],
              );
            }
          }, "onDrain");
          this[kOnConnect] = (origin, targets) => {
            pool.emit("connect", origin, [pool, ...targets]);
          };
          this[kOnDisconnect] = (origin, targets, err) => {
            pool.emit("disconnect", origin, [pool, ...targets], err);
          };
          this[kOnConnectionError] = (origin, targets, err) => {
            pool.emit("connectionError", origin, [pool, ...targets], err);
          };
          this[kStats] = new PoolStats(this);
        }
        get [kBusy]() {
          return this[kNeedDrain];
        }
        get [kConnected]() {
          return this[kClients].filter((client) => client[kConnected]).length;
        }
        get [kFree]() {
          return this[kClients].filter(
            (client) => client[kConnected] && !client[kNeedDrain],
          ).length;
        }
        get [kPending]() {
          let ret = this[kQueued];
          for (const { [kPending]: pending } of this[kClients]) {
            ret += pending;
          }
          return ret;
        }
        get [kRunning]() {
          let ret = 0;
          for (const { [kRunning]: running } of this[kClients]) {
            ret += running;
          }
          return ret;
        }
        get [kSize]() {
          let ret = this[kQueued];
          for (const { [kSize]: size } of this[kClients]) {
            ret += size;
          }
          return ret;
        }
        get stats() {
          return this[kStats];
        }
        async [kClose]() {
          if (this[kQueue].isEmpty()) {
            return Promise.all(this[kClients].map((c) => c.close()));
          } else {
            return new Promise((resolve) => {
              this[kClosedResolve] = resolve;
            });
          }
        }
        async [kDestroy](err) {
          while (true) {
            const item = this[kQueue].shift();
            if (!item) {
              break;
            }
            item.handler.onError(err);
          }
          return Promise.all(this[kClients].map((c) => c.destroy(err)));
        }
        [kDispatch](opts, handler) {
          const dispatcher = this[kGetDispatcher]();
          if (!dispatcher) {
            this[kNeedDrain] = true;
            this[kQueue].push({ opts, handler });
            this[kQueued]++;
          } else if (!dispatcher.dispatch(opts, handler)) {
            dispatcher[kNeedDrain] = true;
            this[kNeedDrain] = !this[kGetDispatcher]();
          }
          return !this[kNeedDrain];
        }
        [kAddClient](client) {
          client
            .on("drain", this[kOnDrain])
            .on("connect", this[kOnConnect])
            .on("disconnect", this[kOnDisconnect])
            .on("connectionError", this[kOnConnectionError]);
          this[kClients].push(client);
          if (this[kNeedDrain]) {
            process.nextTick(() => {
              if (this[kNeedDrain]) {
                this[kOnDrain](client[kUrl], [this, client]);
              }
            });
          }
          return this;
        }
        [kRemoveClient](client) {
          client.close(() => {
            const idx = this[kClients].indexOf(client);
            if (idx !== -1) {
              this[kClients].splice(idx, 1);
            }
          });
          this[kNeedDrain] = this[kClients].some(
            (dispatcher) =>
              !dispatcher[kNeedDrain] &&
              dispatcher.closed !== true &&
              dispatcher.destroyed !== true,
          );
        }
      };
      module.exports = {
        PoolBase,
        kClients,
        kNeedDrain,
        kAddClient,
        kRemoveClient,
        kGetDispatcher,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool.js
  var require_pool = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/pool.js"(
      exports,
      module,
    ) {
      "use strict";
      var { PoolBase, kClients, kNeedDrain, kAddClient, kGetDispatcher } =
        require_pool_base();
      var Client = require_client();
      var { InvalidArgumentError } = require_errors();
      var util2 = require_util();
      var { kUrl, kInterceptors } = require_symbols();
      var buildConnector = require_connect();
      var kOptions = Symbol("options");
      var kConnections = Symbol("connections");
      var kFactory = Symbol("factory");
      function defaultFactory(origin, opts) {
        return new Client(origin, opts);
      }
      __name(defaultFactory, "defaultFactory");
      var Pool = class extends PoolBase {
        static {
          __name(this, "Pool");
        }
        constructor(
          origin,
          {
            connections,
            factory = defaultFactory,
            connect,
            connectTimeout,
            tls,
            maxCachedSessions,
            socketPath,
            autoSelectFamily,
            autoSelectFamilyAttemptTimeout,
            allowH2,
            ...options
          } = {},
        ) {
          super();
          if (
            connections != null &&
            (!Number.isFinite(connections) || connections < 0)
          ) {
            throw new InvalidArgumentError("invalid connections");
          }
          if (typeof factory !== "function") {
            throw new InvalidArgumentError("factory must be a function.");
          }
          if (
            connect != null &&
            typeof connect !== "function" &&
            typeof connect !== "object"
          ) {
            throw new InvalidArgumentError(
              "connect must be a function or an object",
            );
          }
          if (typeof connect !== "function") {
            connect = buildConnector({
              ...tls,
              maxCachedSessions,
              allowH2,
              socketPath,
              timeout: connectTimeout,
              ...(util2.nodeHasAutoSelectFamily && autoSelectFamily
                ? { autoSelectFamily, autoSelectFamilyAttemptTimeout }
                : void 0),
              ...connect,
            });
          }
          this[kInterceptors] =
            options.interceptors &&
            options.interceptors.Pool &&
            Array.isArray(options.interceptors.Pool)
              ? options.interceptors.Pool
              : [];
          this[kConnections] = connections || null;
          this[kUrl] = util2.parseOrigin(origin);
          this[kOptions] = { ...util2.deepClone(options), connect, allowH2 };
          this[kOptions].interceptors = options.interceptors
            ? { ...options.interceptors }
            : void 0;
          this[kFactory] = factory;
        }
        [kGetDispatcher]() {
          let dispatcher = this[kClients].find(
            (dispatcher2) => !dispatcher2[kNeedDrain],
          );
          if (dispatcher) {
            return dispatcher;
          }
          if (
            !this[kConnections] ||
            this[kClients].length < this[kConnections]
          ) {
            dispatcher = this[kFactory](this[kUrl], this[kOptions]);
            this[kAddClient](dispatcher);
          }
          return dispatcher;
        }
      };
      module.exports = Pool;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/balanced-pool.js
  var require_balanced_pool = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/balanced-pool.js"(
      exports,
      module,
    ) {
      "use strict";
      var { BalancedPoolMissingUpstreamError, InvalidArgumentError } =
        require_errors();
      var {
        PoolBase,
        kClients,
        kNeedDrain,
        kAddClient,
        kRemoveClient,
        kGetDispatcher,
      } = require_pool_base();
      var Pool = require_pool();
      var { kUrl, kInterceptors } = require_symbols();
      var { parseOrigin } = require_util();
      var kFactory = Symbol("factory");
      var kOptions = Symbol("options");
      var kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
      var kCurrentWeight = Symbol("kCurrentWeight");
      var kIndex = Symbol("kIndex");
      var kWeight = Symbol("kWeight");
      var kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
      var kErrorPenalty = Symbol("kErrorPenalty");
      function getGreatestCommonDivisor(a, b) {
        if (b === 0) return a;
        return getGreatestCommonDivisor(b, a % b);
      }
      __name(getGreatestCommonDivisor, "getGreatestCommonDivisor");
      function defaultFactory(origin, opts) {
        return new Pool(origin, opts);
      }
      __name(defaultFactory, "defaultFactory");
      var BalancedPool = class extends PoolBase {
        static {
          __name(this, "BalancedPool");
        }
        constructor(
          upstreams = [],
          { factory = defaultFactory, ...opts } = {},
        ) {
          super();
          this[kOptions] = opts;
          this[kIndex] = -1;
          this[kCurrentWeight] = 0;
          this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100;
          this[kErrorPenalty] = this[kOptions].errorPenalty || 15;
          if (!Array.isArray(upstreams)) {
            upstreams = [upstreams];
          }
          if (typeof factory !== "function") {
            throw new InvalidArgumentError("factory must be a function.");
          }
          this[kInterceptors] =
            opts.interceptors &&
            opts.interceptors.BalancedPool &&
            Array.isArray(opts.interceptors.BalancedPool)
              ? opts.interceptors.BalancedPool
              : [];
          this[kFactory] = factory;
          for (const upstream of upstreams) {
            this.addUpstream(upstream);
          }
          this._updateBalancedPoolStats();
        }
        addUpstream(upstream) {
          const upstreamOrigin = parseOrigin(upstream).origin;
          if (
            this[kClients].find(
              (pool2) =>
                pool2[kUrl].origin === upstreamOrigin &&
                pool2.closed !== true &&
                pool2.destroyed !== true,
            )
          ) {
            return this;
          }
          const pool = this[kFactory](
            upstreamOrigin,
            Object.assign({}, this[kOptions]),
          );
          this[kAddClient](pool);
          pool.on("connect", () => {
            pool[kWeight] = Math.min(
              this[kMaxWeightPerServer],
              pool[kWeight] + this[kErrorPenalty],
            );
          });
          pool.on("connectionError", () => {
            pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
            this._updateBalancedPoolStats();
          });
          pool.on("disconnect", (...args) => {
            const err = args[2];
            if (err && err.code === "UND_ERR_SOCKET") {
              pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
              this._updateBalancedPoolStats();
            }
          });
          for (const client of this[kClients]) {
            client[kWeight] = this[kMaxWeightPerServer];
          }
          this._updateBalancedPoolStats();
          return this;
        }
        _updateBalancedPoolStats() {
          this[kGreatestCommonDivisor] = this[kClients]
            .map((p) => p[kWeight])
            .reduce(getGreatestCommonDivisor, 0);
        }
        removeUpstream(upstream) {
          const upstreamOrigin = parseOrigin(upstream).origin;
          const pool = this[kClients].find(
            (pool2) =>
              pool2[kUrl].origin === upstreamOrigin &&
              pool2.closed !== true &&
              pool2.destroyed !== true,
          );
          if (pool) {
            this[kRemoveClient](pool);
          }
          return this;
        }
        get upstreams() {
          return this[kClients]
            .filter(
              (dispatcher) =>
                dispatcher.closed !== true && dispatcher.destroyed !== true,
            )
            .map((p) => p[kUrl].origin);
        }
        [kGetDispatcher]() {
          if (this[kClients].length === 0) {
            throw new BalancedPoolMissingUpstreamError();
          }
          const dispatcher = this[kClients].find(
            (dispatcher2) =>
              !dispatcher2[kNeedDrain] &&
              dispatcher2.closed !== true &&
              dispatcher2.destroyed !== true,
          );
          if (!dispatcher) {
            return;
          }
          const allClientsBusy = this[kClients]
            .map((pool) => pool[kNeedDrain])
            .reduce((a, b) => a && b, true);
          if (allClientsBusy) {
            return;
          }
          let counter = 0;
          let maxWeightIndex = this[kClients].findIndex(
            (pool) => !pool[kNeedDrain],
          );
          while (counter++ < this[kClients].length) {
            this[kIndex] = (this[kIndex] + 1) % this[kClients].length;
            const pool = this[kClients][this[kIndex]];
            if (
              pool[kWeight] > this[kClients][maxWeightIndex][kWeight] &&
              !pool[kNeedDrain]
            ) {
              maxWeightIndex = this[kIndex];
            }
            if (this[kIndex] === 0) {
              this[kCurrentWeight] =
                this[kCurrentWeight] - this[kGreatestCommonDivisor];
              if (this[kCurrentWeight] <= 0) {
                this[kCurrentWeight] = this[kMaxWeightPerServer];
              }
            }
            if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) {
              return pool;
            }
          }
          this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight];
          this[kIndex] = maxWeightIndex;
          return this[kClients][maxWeightIndex];
        }
      };
      module.exports = BalancedPool;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/compat/dispatcher-weakref.js
  var require_dispatcher_weakref = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/compat/dispatcher-weakref.js"(
      exports,
      module,
    ) {
      "use strict";
      var { kConnected, kSize } = require_symbols();
      var CompatWeakRef = class {
        static {
          __name(this, "CompatWeakRef");
        }
        constructor(value) {
          this.value = value;
        }
        deref() {
          return this.value[kConnected] === 0 && this.value[kSize] === 0
            ? void 0
            : this.value;
        }
      };
      var CompatFinalizer = class {
        static {
          __name(this, "CompatFinalizer");
        }
        constructor(finalizer) {
          this.finalizer = finalizer;
        }
        register(dispatcher, key) {
          if (dispatcher.on) {
            dispatcher.on("disconnect", () => {
              if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
                this.finalizer(key);
              }
            });
          }
        }
      };
      module.exports = function () {
        if (process.env.NODE_V8_COVERAGE) {
          return {
            WeakRef: CompatWeakRef,
            FinalizationRegistry: CompatFinalizer,
          };
        }
        return {
          WeakRef: global.WeakRef || CompatWeakRef,
          FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer,
        };
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/agent.js
  var require_agent = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/agent.js"(
      exports,
      module,
    ) {
      "use strict";
      var { InvalidArgumentError } = require_errors();
      var { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } =
        require_symbols();
      var DispatcherBase = require_dispatcher_base();
      var Pool = require_pool();
      var Client = require_client();
      var util2 = require_util();
      var createRedirectInterceptor = require_redirectInterceptor();
      var { WeakRef: WeakRef2, FinalizationRegistry } =
        require_dispatcher_weakref()();
      var kOnConnect = Symbol("onConnect");
      var kOnDisconnect = Symbol("onDisconnect");
      var kOnConnectionError = Symbol("onConnectionError");
      var kMaxRedirections = Symbol("maxRedirections");
      var kOnDrain = Symbol("onDrain");
      var kFactory = Symbol("factory");
      var kFinalizer = Symbol("finalizer");
      var kOptions = Symbol("options");
      function defaultFactory(origin, opts) {
        return opts && opts.connections === 1
          ? new Client(origin, opts)
          : new Pool(origin, opts);
      }
      __name(defaultFactory, "defaultFactory");
      var Agent = class extends DispatcherBase {
        static {
          __name(this, "Agent");
        }
        constructor({
          factory = defaultFactory,
          maxRedirections = 0,
          connect,
          ...options
        } = {}) {
          super();
          if (typeof factory !== "function") {
            throw new InvalidArgumentError("factory must be a function.");
          }
          if (
            connect != null &&
            typeof connect !== "function" &&
            typeof connect !== "object"
          ) {
            throw new InvalidArgumentError(
              "connect must be a function or an object",
            );
          }
          if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
            throw new InvalidArgumentError(
              "maxRedirections must be a positive number",
            );
          }
          if (connect && typeof connect !== "function") {
            connect = { ...connect };
          }
          this[kInterceptors] =
            options.interceptors &&
            options.interceptors.Agent &&
            Array.isArray(options.interceptors.Agent)
              ? options.interceptors.Agent
              : [createRedirectInterceptor({ maxRedirections })];
          this[kOptions] = { ...util2.deepClone(options), connect };
          this[kOptions].interceptors = options.interceptors
            ? { ...options.interceptors }
            : void 0;
          this[kMaxRedirections] = maxRedirections;
          this[kFactory] = factory;
          this[kClients] = /* @__PURE__ */ new Map();
          this[kFinalizer] = new FinalizationRegistry(
            /* istanbul ignore next: gc is undeterministic */
            (key) => {
              const ref = this[kClients].get(key);
              if (ref !== void 0 && ref.deref() === void 0) {
                this[kClients].delete(key);
              }
            },
          );
          const agent = this;
          this[kOnDrain] = (origin, targets) => {
            agent.emit("drain", origin, [agent, ...targets]);
          };
          this[kOnConnect] = (origin, targets) => {
            agent.emit("connect", origin, [agent, ...targets]);
          };
          this[kOnDisconnect] = (origin, targets, err) => {
            agent.emit("disconnect", origin, [agent, ...targets], err);
          };
          this[kOnConnectionError] = (origin, targets, err) => {
            agent.emit("connectionError", origin, [agent, ...targets], err);
          };
        }
        get [kRunning]() {
          let ret = 0;
          for (const ref of this[kClients].values()) {
            const client = ref.deref();
            if (client) {
              ret += client[kRunning];
            }
          }
          return ret;
        }
        [kDispatch](opts, handler) {
          let key;
          if (
            opts.origin &&
            (typeof opts.origin === "string" || opts.origin instanceof URL)
          ) {
            key = String(opts.origin);
          } else {
            throw new InvalidArgumentError(
              "opts.origin must be a non-empty string or URL.",
            );
          }
          const ref = this[kClients].get(key);
          let dispatcher = ref ? ref.deref() : null;
          if (!dispatcher) {
            dispatcher = this[kFactory](opts.origin, this[kOptions])
              .on("drain", this[kOnDrain])
              .on("connect", this[kOnConnect])
              .on("disconnect", this[kOnDisconnect])
              .on("connectionError", this[kOnConnectionError]);
            this[kClients].set(key, new WeakRef2(dispatcher));
            this[kFinalizer].register(dispatcher, key);
          }
          return dispatcher.dispatch(opts, handler);
        }
        async [kClose]() {
          const closePromises = [];
          for (const ref of this[kClients].values()) {
            const client = ref.deref();
            if (client) {
              closePromises.push(client.close());
            }
          }
          await Promise.all(closePromises);
        }
        async [kDestroy](err) {
          const destroyPromises = [];
          for (const ref of this[kClients].values()) {
            const client = ref.deref();
            if (client) {
              destroyPromises.push(client.destroy(err));
            }
          }
          await Promise.all(destroyPromises);
        }
      };
      module.exports = Agent;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/readable.js
  var require_readable = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/readable.js"(
      exports,
      module,
    ) {
      "use strict";
      var assert = __require("assert");
      var { Readable } = __require("stream");
      var { RequestAbortedError, NotSupportedError, InvalidArgumentError } =
        require_errors();
      var util2 = require_util();
      var { ReadableStreamFrom, toUSVString } = require_util();
      var Blob2;
      var kConsume = Symbol("kConsume");
      var kReading = Symbol("kReading");
      var kBody = Symbol("kBody");
      var kAbort = Symbol("abort");
      var kContentType = Symbol("kContentType");
      var noop2 = /* @__PURE__ */ __name(() => {}, "noop");
      module.exports = class BodyReadable extends Readable {
        static {
          __name(this, "BodyReadable");
        }
        constructor({
          resume,
          abort,
          contentType = "",
          highWaterMark = 64 * 1024,
          // Same as nodejs fs streams.
        }) {
          super({
            autoDestroy: true,
            read: resume,
            highWaterMark,
          });
          this._readableState.dataEmitted = false;
          this[kAbort] = abort;
          this[kConsume] = null;
          this[kBody] = null;
          this[kContentType] = contentType;
          this[kReading] = false;
        }
        destroy(err) {
          if (this.destroyed) {
            return this;
          }
          if (!err && !this._readableState.endEmitted) {
            err = new RequestAbortedError();
          }
          if (err) {
            this[kAbort]();
          }
          return super.destroy(err);
        }
        emit(ev, ...args) {
          if (ev === "data") {
            this._readableState.dataEmitted = true;
          } else if (ev === "error") {
            this._readableState.errorEmitted = true;
          }
          return super.emit(ev, ...args);
        }
        on(ev, ...args) {
          if (ev === "data" || ev === "readable") {
            this[kReading] = true;
          }
          return super.on(ev, ...args);
        }
        addListener(ev, ...args) {
          return this.on(ev, ...args);
        }
        off(ev, ...args) {
          const ret = super.off(ev, ...args);
          if (ev === "data" || ev === "readable") {
            this[kReading] =
              this.listenerCount("data") > 0 ||
              this.listenerCount("readable") > 0;
          }
          return ret;
        }
        removeListener(ev, ...args) {
          return this.off(ev, ...args);
        }
        push(chunk) {
          if (this[kConsume] && chunk !== null && this.readableLength === 0) {
            consumePush(this[kConsume], chunk);
            return this[kReading] ? super.push(chunk) : true;
          }
          return super.push(chunk);
        }
        // https://fetch.spec.whatwg.org/#dom-body-text
        async text() {
          return consume(this, "text");
        }
        // https://fetch.spec.whatwg.org/#dom-body-json
        async json() {
          return consume(this, "json");
        }
        // https://fetch.spec.whatwg.org/#dom-body-blob
        async blob() {
          return consume(this, "blob");
        }
        // https://fetch.spec.whatwg.org/#dom-body-arraybuffer
        async arrayBuffer() {
          return consume(this, "arrayBuffer");
        }
        // https://fetch.spec.whatwg.org/#dom-body-formdata
        async formData() {
          throw new NotSupportedError();
        }
        // https://fetch.spec.whatwg.org/#dom-body-bodyused
        get bodyUsed() {
          return util2.isDisturbed(this);
        }
        // https://fetch.spec.whatwg.org/#dom-body-body
        get body() {
          if (!this[kBody]) {
            this[kBody] = ReadableStreamFrom(this);
            if (this[kConsume]) {
              this[kBody].getReader();
              assert(this[kBody].locked);
            }
          }
          return this[kBody];
        }
        dump(opts) {
          let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
          const signal = opts && opts.signal;
          if (signal) {
            try {
              if (typeof signal !== "object" || !("aborted" in signal)) {
                throw new InvalidArgumentError("signal must be an AbortSignal");
              }
              util2.throwIfAborted(signal);
            } catch (err) {
              return Promise.reject(err);
            }
          }
          if (this.closed) {
            return Promise.resolve(null);
          }
          return new Promise((resolve, reject) => {
            const signalListenerCleanup = signal
              ? util2.addAbortListener(signal, () => {
                  this.destroy();
                })
              : noop2;
            this.on("close", function () {
              signalListenerCleanup();
              if (signal && signal.aborted) {
                reject(
                  signal.reason ||
                    Object.assign(new Error("The operation was aborted"), {
                      name: "AbortError",
                    }),
                );
              } else {
                resolve(null);
              }
            })
              .on("error", noop2)
              .on("data", function (chunk) {
                limit -= chunk.length;
                if (limit <= 0) {
                  this.destroy();
                }
              })
              .resume();
          });
        }
      };
      function isLocked(self2) {
        return (
          (self2[kBody] && self2[kBody].locked === true) || self2[kConsume]
        );
      }
      __name(isLocked, "isLocked");
      function isUnusable(self2) {
        return util2.isDisturbed(self2) || isLocked(self2);
      }
      __name(isUnusable, "isUnusable");
      async function consume(stream, type) {
        if (isUnusable(stream)) {
          throw new TypeError("unusable");
        }
        assert(!stream[kConsume]);
        return new Promise((resolve, reject) => {
          stream[kConsume] = {
            type,
            stream,
            resolve,
            reject,
            length: 0,
            body: [],
          };
          stream
            .on("error", function (err) {
              consumeFinish(this[kConsume], err);
            })
            .on("close", function () {
              if (this[kConsume].body !== null) {
                consumeFinish(this[kConsume], new RequestAbortedError());
              }
            });
          process.nextTick(consumeStart, stream[kConsume]);
        });
      }
      __name(consume, "consume");
      function consumeStart(consume2) {
        if (consume2.body === null) {
          return;
        }
        const { _readableState: state } = consume2.stream;
        for (const chunk of state.buffer) {
          consumePush(consume2, chunk);
        }
        if (state.endEmitted) {
          consumeEnd(this[kConsume]);
        } else {
          consume2.stream.on("end", function () {
            consumeEnd(this[kConsume]);
          });
        }
        consume2.stream.resume();
        while (consume2.stream.read() != null) {}
      }
      __name(consumeStart, "consumeStart");
      function consumeEnd(consume2) {
        const { type, body, resolve, stream, length } = consume2;
        try {
          if (type === "text") {
            resolve(toUSVString(Buffer.concat(body)));
          } else if (type === "json") {
            resolve(JSON.parse(Buffer.concat(body)));
          } else if (type === "arrayBuffer") {
            const dst = new Uint8Array(length);
            let pos = 0;
            for (const buf of body) {
              dst.set(buf, pos);
              pos += buf.byteLength;
            }
            resolve(dst.buffer);
          } else if (type === "blob") {
            if (!Blob2) {
              Blob2 = __require("buffer").Blob;
            }
            resolve(new Blob2(body, { type: stream[kContentType] }));
          }
          consumeFinish(consume2);
        } catch (err) {
          stream.destroy(err);
        }
      }
      __name(consumeEnd, "consumeEnd");
      function consumePush(consume2, chunk) {
        consume2.length += chunk.length;
        consume2.body.push(chunk);
      }
      __name(consumePush, "consumePush");
      function consumeFinish(consume2, err) {
        if (consume2.body === null) {
          return;
        }
        if (err) {
          consume2.reject(err);
        } else {
          consume2.resolve();
        }
        consume2.type = null;
        consume2.stream = null;
        consume2.resolve = null;
        consume2.reject = null;
        consume2.length = 0;
        consume2.body = null;
      }
      __name(consumeFinish, "consumeFinish");
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/util.js
  var require_util3 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/util.js"(
      exports,
      module,
    ) {
      var assert = __require("assert");
      var { ResponseStatusCodeError } = require_errors();
      var { toUSVString } = require_util();
      async function getResolveErrorBodyCallback({
        callback,
        body,
        contentType,
        statusCode,
        statusMessage,
        headers,
      }) {
        assert(body);
        let chunks = [];
        let limit = 0;
        for await (const chunk of body) {
          chunks.push(chunk);
          limit += chunk.length;
          if (limit > 128 * 1024) {
            chunks = null;
            break;
          }
        }
        if (statusCode === 204 || !contentType || !chunks) {
          process.nextTick(
            callback,
            new ResponseStatusCodeError(
              `Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`,
              statusCode,
              headers,
            ),
          );
          return;
        }
        try {
          if (contentType.startsWith("application/json")) {
            const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
            process.nextTick(
              callback,
              new ResponseStatusCodeError(
                `Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`,
                statusCode,
                headers,
                payload,
              ),
            );
            return;
          }
          if (contentType.startsWith("text/")) {
            const payload = toUSVString(Buffer.concat(chunks));
            process.nextTick(
              callback,
              new ResponseStatusCodeError(
                `Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`,
                statusCode,
                headers,
                payload,
              ),
            );
            return;
          }
        } catch (err) {}
        process.nextTick(
          callback,
          new ResponseStatusCodeError(
            `Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`,
            statusCode,
            headers,
          ),
        );
      }
      __name(getResolveErrorBodyCallback, "getResolveErrorBodyCallback");
      module.exports = { getResolveErrorBodyCallback };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/abort-signal.js
  var require_abort_signal = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/abort-signal.js"(
      exports,
      module,
    ) {
      var { addAbortListener } = require_util();
      var { RequestAbortedError } = require_errors();
      var kListener = Symbol("kListener");
      var kSignal = Symbol("kSignal");
      function abort(self2) {
        if (self2.abort) {
          self2.abort();
        } else {
          self2.onError(new RequestAbortedError());
        }
      }
      __name(abort, "abort");
      function addSignal(self2, signal) {
        self2[kSignal] = null;
        self2[kListener] = null;
        if (!signal) {
          return;
        }
        if (signal.aborted) {
          abort(self2);
          return;
        }
        self2[kSignal] = signal;
        self2[kListener] = () => {
          abort(self2);
        };
        addAbortListener(self2[kSignal], self2[kListener]);
      }
      __name(addSignal, "addSignal");
      function removeSignal(self2) {
        if (!self2[kSignal]) {
          return;
        }
        if ("removeEventListener" in self2[kSignal]) {
          self2[kSignal].removeEventListener("abort", self2[kListener]);
        } else {
          self2[kSignal].removeListener("abort", self2[kListener]);
        }
        self2[kSignal] = null;
        self2[kListener] = null;
      }
      __name(removeSignal, "removeSignal");
      module.exports = {
        addSignal,
        removeSignal,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-request.js
  var require_api_request = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-request.js"(
      exports,
      module,
    ) {
      "use strict";
      var Readable = require_readable();
      var { InvalidArgumentError, RequestAbortedError } = require_errors();
      var util2 = require_util();
      var { getResolveErrorBodyCallback } = require_util3();
      var { AsyncResource } = __require("async_hooks");
      var { addSignal, removeSignal } = require_abort_signal();
      var RequestHandler = class extends AsyncResource {
        static {
          __name(this, "RequestHandler");
        }
        constructor(opts, callback) {
          if (!opts || typeof opts !== "object") {
            throw new InvalidArgumentError("invalid opts");
          }
          const {
            signal,
            method,
            opaque,
            body,
            onInfo,
            responseHeaders,
            throwOnError,
            highWaterMark,
          } = opts;
          try {
            if (typeof callback !== "function") {
              throw new InvalidArgumentError("invalid callback");
            }
            if (
              highWaterMark &&
              (typeof highWaterMark !== "number" || highWaterMark < 0)
            ) {
              throw new InvalidArgumentError("invalid highWaterMark");
            }
            if (
              signal &&
              typeof signal.on !== "function" &&
              typeof signal.addEventListener !== "function"
            ) {
              throw new InvalidArgumentError(
                "signal must be an EventEmitter or EventTarget",
              );
            }
            if (method === "CONNECT") {
              throw new InvalidArgumentError("invalid method");
            }
            if (onInfo && typeof onInfo !== "function") {
              throw new InvalidArgumentError("invalid onInfo callback");
            }
            super("UNDICI_REQUEST");
          } catch (err) {
            if (util2.isStream(body)) {
              util2.destroy(body.on("error", util2.nop), err);
            }
            throw err;
          }
          this.responseHeaders = responseHeaders || null;
          this.opaque = opaque || null;
          this.callback = callback;
          this.res = null;
          this.abort = null;
          this.body = body;
          this.trailers = {};
          this.context = null;
          this.onInfo = onInfo || null;
          this.throwOnError = throwOnError;
          this.highWaterMark = highWaterMark;
          if (util2.isStream(body)) {
            body.on("error", (err) => {
              this.onError(err);
            });
          }
          addSignal(this, signal);
        }
        onConnect(abort, context2) {
          if (!this.callback) {
            throw new RequestAbortedError();
          }
          this.abort = abort;
          this.context = context2;
        }
        onHeaders(statusCode, rawHeaders, resume, statusMessage) {
          const {
            callback,
            opaque,
            abort,
            context: context2,
            responseHeaders,
            highWaterMark,
          } = this;
          const headers =
            responseHeaders === "raw"
              ? util2.parseRawHeaders(rawHeaders)
              : util2.parseHeaders(rawHeaders);
          if (statusCode < 200) {
            if (this.onInfo) {
              this.onInfo({ statusCode, headers });
            }
            return;
          }
          const parsedHeaders =
            responseHeaders === "raw"
              ? util2.parseHeaders(rawHeaders)
              : headers;
          const contentType = parsedHeaders["content-type"];
          const body = new Readable({
            resume,
            abort,
            contentType,
            highWaterMark,
          });
          this.callback = null;
          this.res = body;
          if (callback !== null) {
            if (this.throwOnError && statusCode >= 400) {
              this.runInAsyncScope(getResolveErrorBodyCallback, null, {
                callback,
                body,
                contentType,
                statusCode,
                statusMessage,
                headers,
              });
            } else {
              this.runInAsyncScope(callback, null, null, {
                statusCode,
                headers,
                trailers: this.trailers,
                opaque,
                body,
                context: context2,
              });
            }
          }
        }
        onData(chunk) {
          const { res } = this;
          return res.push(chunk);
        }
        onComplete(trailers) {
          const { res } = this;
          removeSignal(this);
          util2.parseHeaders(trailers, this.trailers);
          res.push(null);
        }
        onError(err) {
          const { res, callback, body, opaque } = this;
          removeSignal(this);
          if (callback) {
            this.callback = null;
            queueMicrotask(() => {
              this.runInAsyncScope(callback, null, err, { opaque });
            });
          }
          if (res) {
            this.res = null;
            queueMicrotask(() => {
              util2.destroy(res, err);
            });
          }
          if (body) {
            this.body = null;
            util2.destroy(body, err);
          }
        }
      };
      function request(opts, callback) {
        if (callback === void 0) {
          return new Promise((resolve, reject) => {
            request.call(this, opts, (err, data) => {
              return err ? reject(err) : resolve(data);
            });
          });
        }
        try {
          this.dispatch(opts, new RequestHandler(opts, callback));
        } catch (err) {
          if (typeof callback !== "function") {
            throw err;
          }
          const opaque = opts && opts.opaque;
          queueMicrotask(() => callback(err, { opaque }));
        }
      }
      __name(request, "request");
      module.exports = request;
      module.exports.RequestHandler = RequestHandler;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-stream.js
  var require_api_stream = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-stream.js"(
      exports,
      module,
    ) {
      "use strict";
      var { finished, PassThrough } = __require("stream");
      var {
        InvalidArgumentError,
        InvalidReturnValueError,
        RequestAbortedError,
      } = require_errors();
      var util2 = require_util();
      var { getResolveErrorBodyCallback } = require_util3();
      var { AsyncResource } = __require("async_hooks");
      var { addSignal, removeSignal } = require_abort_signal();
      var StreamHandler = class extends AsyncResource {
        static {
          __name(this, "StreamHandler");
        }
        constructor(opts, factory, callback) {
          if (!opts || typeof opts !== "object") {
            throw new InvalidArgumentError("invalid opts");
          }
          const {
            signal,
            method,
            opaque,
            body,
            onInfo,
            responseHeaders,
            throwOnError,
          } = opts;
          try {
            if (typeof callback !== "function") {
              throw new InvalidArgumentError("invalid callback");
            }
            if (typeof factory !== "function") {
              throw new InvalidArgumentError("invalid factory");
            }
            if (
              signal &&
              typeof signal.on !== "function" &&
              typeof signal.addEventListener !== "function"
            ) {
              throw new InvalidArgumentError(
                "signal must be an EventEmitter or EventTarget",
              );
            }
            if (method === "CONNECT") {
              throw new InvalidArgumentError("invalid method");
            }
            if (onInfo && typeof onInfo !== "function") {
              throw new InvalidArgumentError("invalid onInfo callback");
            }
            super("UNDICI_STREAM");
          } catch (err) {
            if (util2.isStream(body)) {
              util2.destroy(body.on("error", util2.nop), err);
            }
            throw err;
          }
          this.responseHeaders = responseHeaders || null;
          this.opaque = opaque || null;
          this.factory = factory;
          this.callback = callback;
          this.res = null;
          this.abort = null;
          this.context = null;
          this.trailers = null;
          this.body = body;
          this.onInfo = onInfo || null;
          this.throwOnError = throwOnError || false;
          if (util2.isStream(body)) {
            body.on("error", (err) => {
              this.onError(err);
            });
          }
          addSignal(this, signal);
        }
        onConnect(abort, context2) {
          if (!this.callback) {
            throw new RequestAbortedError();
          }
          this.abort = abort;
          this.context = context2;
        }
        onHeaders(statusCode, rawHeaders, resume, statusMessage) {
          const {
            factory,
            opaque,
            context: context2,
            callback,
            responseHeaders,
          } = this;
          const headers =
            responseHeaders === "raw"
              ? util2.parseRawHeaders(rawHeaders)
              : util2.parseHeaders(rawHeaders);
          if (statusCode < 200) {
            if (this.onInfo) {
              this.onInfo({ statusCode, headers });
            }
            return;
          }
          this.factory = null;
          let res;
          if (this.throwOnError && statusCode >= 400) {
            const parsedHeaders =
              responseHeaders === "raw"
                ? util2.parseHeaders(rawHeaders)
                : headers;
            const contentType = parsedHeaders["content-type"];
            res = new PassThrough();
            this.callback = null;
            this.runInAsyncScope(getResolveErrorBodyCallback, null, {
              callback,
              body: res,
              contentType,
              statusCode,
              statusMessage,
              headers,
            });
          } else {
            if (factory === null) {
              return;
            }
            res = this.runInAsyncScope(factory, null, {
              statusCode,
              headers,
              opaque,
              context: context2,
            });
            if (
              !res ||
              typeof res.write !== "function" ||
              typeof res.end !== "function" ||
              typeof res.on !== "function"
            ) {
              throw new InvalidReturnValueError("expected Writable");
            }
            finished(res, { readable: false }, (err) => {
              const {
                callback: callback2,
                res: res2,
                opaque: opaque2,
                trailers,
                abort,
              } = this;
              this.res = null;
              if (err || !res2.readable) {
                util2.destroy(res2, err);
              }
              this.callback = null;
              this.runInAsyncScope(callback2, null, err || null, {
                opaque: opaque2,
                trailers,
              });
              if (err) {
                abort();
              }
            });
          }
          res.on("drain", resume);
          this.res = res;
          const needDrain =
            res.writableNeedDrain !== void 0
              ? res.writableNeedDrain
              : res._writableState && res._writableState.needDrain;
          return needDrain !== true;
        }
        onData(chunk) {
          const { res } = this;
          return res ? res.write(chunk) : true;
        }
        onComplete(trailers) {
          const { res } = this;
          removeSignal(this);
          if (!res) {
            return;
          }
          this.trailers = util2.parseHeaders(trailers);
          res.end();
        }
        onError(err) {
          const { res, callback, opaque, body } = this;
          removeSignal(this);
          this.factory = null;
          if (res) {
            this.res = null;
            util2.destroy(res, err);
          } else if (callback) {
            this.callback = null;
            queueMicrotask(() => {
              this.runInAsyncScope(callback, null, err, { opaque });
            });
          }
          if (body) {
            this.body = null;
            util2.destroy(body, err);
          }
        }
      };
      function stream(opts, factory, callback) {
        if (callback === void 0) {
          return new Promise((resolve, reject) => {
            stream.call(this, opts, factory, (err, data) => {
              return err ? reject(err) : resolve(data);
            });
          });
        }
        try {
          this.dispatch(opts, new StreamHandler(opts, factory, callback));
        } catch (err) {
          if (typeof callback !== "function") {
            throw err;
          }
          const opaque = opts && opts.opaque;
          queueMicrotask(() => callback(err, { opaque }));
        }
      }
      __name(stream, "stream");
      module.exports = stream;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-pipeline.js
  var require_api_pipeline = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-pipeline.js"(
      exports,
      module,
    ) {
      "use strict";
      var { Readable, Duplex, PassThrough } = __require("stream");
      var {
        InvalidArgumentError,
        InvalidReturnValueError,
        RequestAbortedError,
      } = require_errors();
      var util2 = require_util();
      var { AsyncResource } = __require("async_hooks");
      var { addSignal, removeSignal } = require_abort_signal();
      var assert = __require("assert");
      var kResume = Symbol("resume");
      var PipelineRequest = class extends Readable {
        static {
          __name(this, "PipelineRequest");
        }
        constructor() {
          super({ autoDestroy: true });
          this[kResume] = null;
        }
        _read() {
          const { [kResume]: resume } = this;
          if (resume) {
            this[kResume] = null;
            resume();
          }
        }
        _destroy(err, callback) {
          this._read();
          callback(err);
        }
      };
      var PipelineResponse = class extends Readable {
        static {
          __name(this, "PipelineResponse");
        }
        constructor(resume) {
          super({ autoDestroy: true });
          this[kResume] = resume;
        }
        _read() {
          this[kResume]();
        }
        _destroy(err, callback) {
          if (!err && !this._readableState.endEmitted) {
            err = new RequestAbortedError();
          }
          callback(err);
        }
      };
      var PipelineHandler = class extends AsyncResource {
        static {
          __name(this, "PipelineHandler");
        }
        constructor(opts, handler) {
          if (!opts || typeof opts !== "object") {
            throw new InvalidArgumentError("invalid opts");
          }
          if (typeof handler !== "function") {
            throw new InvalidArgumentError("invalid handler");
          }
          const { signal, method, opaque, onInfo, responseHeaders } = opts;
          if (
            signal &&
            typeof signal.on !== "function" &&
            typeof signal.addEventListener !== "function"
          ) {
            throw new InvalidArgumentError(
              "signal must be an EventEmitter or EventTarget",
            );
          }
          if (method === "CONNECT") {
            throw new InvalidArgumentError("invalid method");
          }
          if (onInfo && typeof onInfo !== "function") {
            throw new InvalidArgumentError("invalid onInfo callback");
          }
          super("UNDICI_PIPELINE");
          this.opaque = opaque || null;
          this.responseHeaders = responseHeaders || null;
          this.handler = handler;
          this.abort = null;
          this.context = null;
          this.onInfo = onInfo || null;
          this.req = new PipelineRequest().on("error", util2.nop);
          this.ret = new Duplex({
            readableObjectMode: opts.objectMode,
            autoDestroy: true,
            read: /* @__PURE__ */ __name(() => {
              const { body } = this;
              if (body && body.resume) {
                body.resume();
              }
            }, "read"),
            write: /* @__PURE__ */ __name((chunk, encoding, callback) => {
              const { req } = this;
              if (req.push(chunk, encoding) || req._readableState.destroyed) {
                callback();
              } else {
                req[kResume] = callback;
              }
            }, "write"),
            destroy: /* @__PURE__ */ __name((err, callback) => {
              const { body, req, res, ret, abort } = this;
              if (!err && !ret._readableState.endEmitted) {
                err = new RequestAbortedError();
              }
              if (abort && err) {
                abort();
              }
              util2.destroy(body, err);
              util2.destroy(req, err);
              util2.destroy(res, err);
              removeSignal(this);
              callback(err);
            }, "destroy"),
          }).on("prefinish", () => {
            const { req } = this;
            req.push(null);
          });
          this.res = null;
          addSignal(this, signal);
        }
        onConnect(abort, context2) {
          const { ret, res } = this;
          assert(!res, "pipeline cannot be retried");
          if (ret.destroyed) {
            throw new RequestAbortedError();
          }
          this.abort = abort;
          this.context = context2;
        }
        onHeaders(statusCode, rawHeaders, resume) {
          const { opaque, handler, context: context2 } = this;
          if (statusCode < 200) {
            if (this.onInfo) {
              const headers =
                this.responseHeaders === "raw"
                  ? util2.parseRawHeaders(rawHeaders)
                  : util2.parseHeaders(rawHeaders);
              this.onInfo({ statusCode, headers });
            }
            return;
          }
          this.res = new PipelineResponse(resume);
          let body;
          try {
            this.handler = null;
            const headers =
              this.responseHeaders === "raw"
                ? util2.parseRawHeaders(rawHeaders)
                : util2.parseHeaders(rawHeaders);
            body = this.runInAsyncScope(handler, null, {
              statusCode,
              headers,
              opaque,
              body: this.res,
              context: context2,
            });
          } catch (err) {
            this.res.on("error", util2.nop);
            throw err;
          }
          if (!body || typeof body.on !== "function") {
            throw new InvalidReturnValueError("expected Readable");
          }
          body
            .on("data", (chunk) => {
              const { ret, body: body2 } = this;
              if (!ret.push(chunk) && body2.pause) {
                body2.pause();
              }
            })
            .on("error", (err) => {
              const { ret } = this;
              util2.destroy(ret, err);
            })
            .on("end", () => {
              const { ret } = this;
              ret.push(null);
            })
            .on("close", () => {
              const { ret } = this;
              if (!ret._readableState.ended) {
                util2.destroy(ret, new RequestAbortedError());
              }
            });
          this.body = body;
        }
        onData(chunk) {
          const { res } = this;
          return res.push(chunk);
        }
        onComplete(trailers) {
          const { res } = this;
          res.push(null);
        }
        onError(err) {
          const { ret } = this;
          this.handler = null;
          util2.destroy(ret, err);
        }
      };
      function pipeline(opts, handler) {
        try {
          const pipelineHandler = new PipelineHandler(opts, handler);
          this.dispatch(
            { ...opts, body: pipelineHandler.req },
            pipelineHandler,
          );
          return pipelineHandler.ret;
        } catch (err) {
          return new PassThrough().destroy(err);
        }
      }
      __name(pipeline, "pipeline");
      module.exports = pipeline;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-upgrade.js
  var require_api_upgrade = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-upgrade.js"(
      exports,
      module,
    ) {
      "use strict";
      var { InvalidArgumentError, RequestAbortedError, SocketError } =
        require_errors();
      var { AsyncResource } = __require("async_hooks");
      var util2 = require_util();
      var { addSignal, removeSignal } = require_abort_signal();
      var assert = __require("assert");
      var UpgradeHandler = class extends AsyncResource {
        static {
          __name(this, "UpgradeHandler");
        }
        constructor(opts, callback) {
          if (!opts || typeof opts !== "object") {
            throw new InvalidArgumentError("invalid opts");
          }
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          const { signal, opaque, responseHeaders } = opts;
          if (
            signal &&
            typeof signal.on !== "function" &&
            typeof signal.addEventListener !== "function"
          ) {
            throw new InvalidArgumentError(
              "signal must be an EventEmitter or EventTarget",
            );
          }
          super("UNDICI_UPGRADE");
          this.responseHeaders = responseHeaders || null;
          this.opaque = opaque || null;
          this.callback = callback;
          this.abort = null;
          this.context = null;
          addSignal(this, signal);
        }
        onConnect(abort, context2) {
          if (!this.callback) {
            throw new RequestAbortedError();
          }
          this.abort = abort;
          this.context = null;
        }
        onHeaders() {
          throw new SocketError("bad upgrade", null);
        }
        onUpgrade(statusCode, rawHeaders, socket) {
          const { callback, opaque, context: context2 } = this;
          assert.strictEqual(statusCode, 101);
          removeSignal(this);
          this.callback = null;
          const headers =
            this.responseHeaders === "raw"
              ? util2.parseRawHeaders(rawHeaders)
              : util2.parseHeaders(rawHeaders);
          this.runInAsyncScope(callback, null, null, {
            headers,
            socket,
            opaque,
            context: context2,
          });
        }
        onError(err) {
          const { callback, opaque } = this;
          removeSignal(this);
          if (callback) {
            this.callback = null;
            queueMicrotask(() => {
              this.runInAsyncScope(callback, null, err, { opaque });
            });
          }
        }
      };
      function upgrade(opts, callback) {
        if (callback === void 0) {
          return new Promise((resolve, reject) => {
            upgrade.call(this, opts, (err, data) => {
              return err ? reject(err) : resolve(data);
            });
          });
        }
        try {
          const upgradeHandler = new UpgradeHandler(opts, callback);
          this.dispatch(
            {
              ...opts,
              method: opts.method || "GET",
              upgrade: opts.protocol || "Websocket",
            },
            upgradeHandler,
          );
        } catch (err) {
          if (typeof callback !== "function") {
            throw err;
          }
          const opaque = opts && opts.opaque;
          queueMicrotask(() => callback(err, { opaque }));
        }
      }
      __name(upgrade, "upgrade");
      module.exports = upgrade;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-connect.js
  var require_api_connect = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/api-connect.js"(
      exports,
      module,
    ) {
      "use strict";
      var { AsyncResource } = __require("async_hooks");
      var { InvalidArgumentError, RequestAbortedError, SocketError } =
        require_errors();
      var util2 = require_util();
      var { addSignal, removeSignal } = require_abort_signal();
      var ConnectHandler = class extends AsyncResource {
        static {
          __name(this, "ConnectHandler");
        }
        constructor(opts, callback) {
          if (!opts || typeof opts !== "object") {
            throw new InvalidArgumentError("invalid opts");
          }
          if (typeof callback !== "function") {
            throw new InvalidArgumentError("invalid callback");
          }
          const { signal, opaque, responseHeaders } = opts;
          if (
            signal &&
            typeof signal.on !== "function" &&
            typeof signal.addEventListener !== "function"
          ) {
            throw new InvalidArgumentError(
              "signal must be an EventEmitter or EventTarget",
            );
          }
          super("UNDICI_CONNECT");
          this.opaque = opaque || null;
          this.responseHeaders = responseHeaders || null;
          this.callback = callback;
          this.abort = null;
          addSignal(this, signal);
        }
        onConnect(abort, context2) {
          if (!this.callback) {
            throw new RequestAbortedError();
          }
          this.abort = abort;
          this.context = context2;
        }
        onHeaders() {
          throw new SocketError("bad connect", null);
        }
        onUpgrade(statusCode, rawHeaders, socket) {
          const { callback, opaque, context: context2 } = this;
          removeSignal(this);
          this.callback = null;
          let headers = rawHeaders;
          if (headers != null) {
            headers =
              this.responseHeaders === "raw"
                ? util2.parseRawHeaders(rawHeaders)
                : util2.parseHeaders(rawHeaders);
          }
          this.runInAsyncScope(callback, null, null, {
            statusCode,
            headers,
            socket,
            opaque,
            context: context2,
          });
        }
        onError(err) {
          const { callback, opaque } = this;
          removeSignal(this);
          if (callback) {
            this.callback = null;
            queueMicrotask(() => {
              this.runInAsyncScope(callback, null, err, { opaque });
            });
          }
        }
      };
      function connect(opts, callback) {
        if (callback === void 0) {
          return new Promise((resolve, reject) => {
            connect.call(this, opts, (err, data) => {
              return err ? reject(err) : resolve(data);
            });
          });
        }
        try {
          const connectHandler = new ConnectHandler(opts, callback);
          this.dispatch({ ...opts, method: "CONNECT" }, connectHandler);
        } catch (err) {
          if (typeof callback !== "function") {
            throw err;
          }
          const opaque = opts && opts.opaque;
          queueMicrotask(() => callback(err, { opaque }));
        }
      }
      __name(connect, "connect");
      module.exports = connect;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/index.js
  var require_api = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/api/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports.request = require_api_request();
      module.exports.stream = require_api_stream();
      module.exports.pipeline = require_api_pipeline();
      module.exports.upgrade = require_api_upgrade();
      module.exports.connect = require_api_connect();
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-errors.js
  var require_mock_errors = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-errors.js"(
      exports,
      module,
    ) {
      "use strict";
      var { UndiciError } = require_errors();
      var MockNotMatchedError = class _MockNotMatchedError extends UndiciError {
        static {
          __name(this, "MockNotMatchedError");
        }
        constructor(message) {
          super(message);
          Error.captureStackTrace(this, _MockNotMatchedError);
          this.name = "MockNotMatchedError";
          this.message =
            message ||
            "The request does not match any registered mock dispatches";
          this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
        }
      };
      module.exports = {
        MockNotMatchedError,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-symbols.js
  var require_mock_symbols = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-symbols.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = {
        kAgent: Symbol("agent"),
        kOptions: Symbol("options"),
        kFactory: Symbol("factory"),
        kDispatches: Symbol("dispatches"),
        kDispatchKey: Symbol("dispatch key"),
        kDefaultHeaders: Symbol("default headers"),
        kDefaultTrailers: Symbol("default trailers"),
        kContentLength: Symbol("content length"),
        kMockAgent: Symbol("mock agent"),
        kMockAgentSet: Symbol("mock agent set"),
        kMockAgentGet: Symbol("mock agent get"),
        kMockDispatch: Symbol("mock dispatch"),
        kClose: Symbol("close"),
        kOriginalClose: Symbol("original agent close"),
        kOrigin: Symbol("origin"),
        kIsMockActive: Symbol("is mock active"),
        kNetConnect: Symbol("net connect"),
        kGetNetConnect: Symbol("get net connect"),
        kConnected: Symbol("connected"),
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-utils.js
  var require_mock_utils = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-utils.js"(
      exports,
      module,
    ) {
      "use strict";
      var { MockNotMatchedError } = require_mock_errors();
      var {
        kDispatches,
        kMockAgent,
        kOriginalDispatch,
        kOrigin,
        kGetNetConnect,
      } = require_mock_symbols();
      var { buildURL, nop } = require_util();
      var { STATUS_CODES } = __require("http");
      var {
        types: { isPromise },
      } = __require("util");
      function matchValue(match, value) {
        if (typeof match === "string") {
          return match === value;
        }
        if (match instanceof RegExp) {
          return match.test(value);
        }
        if (typeof match === "function") {
          return match(value) === true;
        }
        return false;
      }
      __name(matchValue, "matchValue");
      function lowerCaseEntries(headers) {
        return Object.fromEntries(
          Object.entries(headers).map(([headerName, headerValue]) => {
            return [headerName.toLocaleLowerCase(), headerValue];
          }),
        );
      }
      __name(lowerCaseEntries, "lowerCaseEntries");
      function getHeaderByName(headers, key) {
        if (Array.isArray(headers)) {
          for (let i = 0; i < headers.length; i += 2) {
            if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {
              return headers[i + 1];
            }
          }
          return void 0;
        } else if (typeof headers.get === "function") {
          return headers.get(key);
        } else {
          return lowerCaseEntries(headers)[key.toLocaleLowerCase()];
        }
      }
      __name(getHeaderByName, "getHeaderByName");
      function buildHeadersFromArray(headers) {
        const clone = headers.slice();
        const entries = [];
        for (let index2 = 0; index2 < clone.length; index2 += 2) {
          entries.push([clone[index2], clone[index2 + 1]]);
        }
        return Object.fromEntries(entries);
      }
      __name(buildHeadersFromArray, "buildHeadersFromArray");
      function matchHeaders(mockDispatch2, headers) {
        if (typeof mockDispatch2.headers === "function") {
          if (Array.isArray(headers)) {
            headers = buildHeadersFromArray(headers);
          }
          return mockDispatch2.headers(
            headers ? lowerCaseEntries(headers) : {},
          );
        }
        if (typeof mockDispatch2.headers === "undefined") {
          return true;
        }
        if (
          typeof headers !== "object" ||
          typeof mockDispatch2.headers !== "object"
        ) {
          return false;
        }
        for (const [matchHeaderName, matchHeaderValue] of Object.entries(
          mockDispatch2.headers,
        )) {
          const headerValue = getHeaderByName(headers, matchHeaderName);
          if (!matchValue(matchHeaderValue, headerValue)) {
            return false;
          }
        }
        return true;
      }
      __name(matchHeaders, "matchHeaders");
      function safeUrl(path4) {
        if (typeof path4 !== "string") {
          return path4;
        }
        const pathSegments = path4.split("?");
        if (pathSegments.length !== 2) {
          return path4;
        }
        const qp = new URLSearchParams(pathSegments.pop());
        qp.sort();
        return [...pathSegments, qp.toString()].join("?");
      }
      __name(safeUrl, "safeUrl");
      function matchKey(mockDispatch2, { path: path4, method, body, headers }) {
        const pathMatch = matchValue(mockDispatch2.path, path4);
        const methodMatch = matchValue(mockDispatch2.method, method);
        const bodyMatch =
          typeof mockDispatch2.body !== "undefined"
            ? matchValue(mockDispatch2.body, body)
            : true;
        const headersMatch = matchHeaders(mockDispatch2, headers);
        return pathMatch && methodMatch && bodyMatch && headersMatch;
      }
      __name(matchKey, "matchKey");
      function getResponseData(data) {
        if (Buffer.isBuffer(data)) {
          return data;
        } else if (typeof data === "object") {
          return JSON.stringify(data);
        } else {
          return data.toString();
        }
      }
      __name(getResponseData, "getResponseData");
      function getMockDispatch(mockDispatches, key) {
        const basePath = key.query ? buildURL(key.path, key.query) : key.path;
        const resolvedPath =
          typeof basePath === "string" ? safeUrl(basePath) : basePath;
        let matchedMockDispatches = mockDispatches
          .filter(({ consumed }) => !consumed)
          .filter(({ path: path4 }) =>
            matchValue(safeUrl(path4), resolvedPath),
          );
        if (matchedMockDispatches.length === 0) {
          throw new MockNotMatchedError(
            `Mock dispatch not matched for path '${resolvedPath}'`,
          );
        }
        matchedMockDispatches = matchedMockDispatches.filter(({ method }) =>
          matchValue(method, key.method),
        );
        if (matchedMockDispatches.length === 0) {
          throw new MockNotMatchedError(
            `Mock dispatch not matched for method '${key.method}'`,
          );
        }
        matchedMockDispatches = matchedMockDispatches.filter(({ body }) =>
          typeof body !== "undefined" ? matchValue(body, key.body) : true,
        );
        if (matchedMockDispatches.length === 0) {
          throw new MockNotMatchedError(
            `Mock dispatch not matched for body '${key.body}'`,
          );
        }
        matchedMockDispatches = matchedMockDispatches.filter((mockDispatch2) =>
          matchHeaders(mockDispatch2, key.headers),
        );
        if (matchedMockDispatches.length === 0) {
          throw new MockNotMatchedError(
            `Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`,
          );
        }
        return matchedMockDispatches[0];
      }
      __name(getMockDispatch, "getMockDispatch");
      function addMockDispatch(mockDispatches, key, data) {
        const baseData = {
          timesInvoked: 0,
          times: 1,
          persist: false,
          consumed: false,
        };
        const replyData =
          typeof data === "function" ? { callback: data } : { ...data };
        const newMockDispatch = {
          ...baseData,
          ...key,
          pending: true,
          data: { error: null, ...replyData },
        };
        mockDispatches.push(newMockDispatch);
        return newMockDispatch;
      }
      __name(addMockDispatch, "addMockDispatch");
      function deleteMockDispatch(mockDispatches, key) {
        const index2 = mockDispatches.findIndex((dispatch) => {
          if (!dispatch.consumed) {
            return false;
          }
          return matchKey(dispatch, key);
        });
        if (index2 !== -1) {
          mockDispatches.splice(index2, 1);
        }
      }
      __name(deleteMockDispatch, "deleteMockDispatch");
      function buildKey(opts) {
        const { path: path4, method, body, headers, query } = opts;
        return {
          path: path4,
          method,
          body,
          headers,
          query,
        };
      }
      __name(buildKey, "buildKey");
      function generateKeyValues(data) {
        return Object.entries(data).reduce(
          (keyValuePairs, [key, value]) => [
            ...keyValuePairs,
            Buffer.from(`${key}`),
            Array.isArray(value)
              ? value.map((x) => Buffer.from(`${x}`))
              : Buffer.from(`${value}`),
          ],
          [],
        );
      }
      __name(generateKeyValues, "generateKeyValues");
      function getStatusText(statusCode) {
        return STATUS_CODES[statusCode] || "unknown";
      }
      __name(getStatusText, "getStatusText");
      async function getResponse(body) {
        const buffers = [];
        for await (const data of body) {
          buffers.push(data);
        }
        return Buffer.concat(buffers).toString("utf8");
      }
      __name(getResponse, "getResponse");
      function mockDispatch(opts, handler) {
        const key = buildKey(opts);
        const mockDispatch2 = getMockDispatch(this[kDispatches], key);
        mockDispatch2.timesInvoked++;
        if (mockDispatch2.data.callback) {
          mockDispatch2.data = {
            ...mockDispatch2.data,
            ...mockDispatch2.data.callback(opts),
          };
        }
        const {
          data: { statusCode, data, headers, trailers, error },
          delay,
          persist,
        } = mockDispatch2;
        const { timesInvoked, times } = mockDispatch2;
        mockDispatch2.consumed = !persist && timesInvoked >= times;
        mockDispatch2.pending = timesInvoked < times;
        if (error !== null) {
          deleteMockDispatch(this[kDispatches], key);
          handler.onError(error);
          return true;
        }
        if (typeof delay === "number" && delay > 0) {
          setTimeout(() => {
            handleReply(this[kDispatches]);
          }, delay);
        } else {
          handleReply(this[kDispatches]);
        }
        function handleReply(mockDispatches, _data = data) {
          const optsHeaders = Array.isArray(opts.headers)
            ? buildHeadersFromArray(opts.headers)
            : opts.headers;
          const body =
            typeof _data === "function"
              ? _data({ ...opts, headers: optsHeaders })
              : _data;
          if (isPromise(body)) {
            body.then((newData) => handleReply(mockDispatches, newData));
            return;
          }
          const responseData = getResponseData(body);
          const responseHeaders = generateKeyValues(headers);
          const responseTrailers = generateKeyValues(trailers);
          handler.abort = nop;
          handler.onHeaders(
            statusCode,
            responseHeaders,
            resume,
            getStatusText(statusCode),
          );
          handler.onData(Buffer.from(responseData));
          handler.onComplete(responseTrailers);
          deleteMockDispatch(mockDispatches, key);
        }
        __name(handleReply, "handleReply");
        function resume() {}
        __name(resume, "resume");
        return true;
      }
      __name(mockDispatch, "mockDispatch");
      function buildMockDispatch() {
        const agent = this[kMockAgent];
        const origin = this[kOrigin];
        const originalDispatch = this[kOriginalDispatch];
        return /* @__PURE__ */ __name(function dispatch(opts, handler) {
          if (agent.isMockActive) {
            try {
              mockDispatch.call(this, opts, handler);
            } catch (error) {
              if (error instanceof MockNotMatchedError) {
                const netConnect = agent[kGetNetConnect]();
                if (netConnect === false) {
                  throw new MockNotMatchedError(
                    `${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`,
                  );
                }
                if (checkNetConnect(netConnect, origin)) {
                  originalDispatch.call(this, opts, handler);
                } else {
                  throw new MockNotMatchedError(
                    `${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`,
                  );
                }
              } else {
                throw error;
              }
            }
          } else {
            originalDispatch.call(this, opts, handler);
          }
        }, "dispatch");
      }
      __name(buildMockDispatch, "buildMockDispatch");
      function checkNetConnect(netConnect, origin) {
        const url = new URL(origin);
        if (netConnect === true) {
          return true;
        } else if (
          Array.isArray(netConnect) &&
          netConnect.some((matcher) => matchValue(matcher, url.host))
        ) {
          return true;
        }
        return false;
      }
      __name(checkNetConnect, "checkNetConnect");
      function buildMockOptions(opts) {
        if (opts) {
          const { agent, ...mockOptions } = opts;
          return mockOptions;
        }
      }
      __name(buildMockOptions, "buildMockOptions");
      module.exports = {
        getResponseData,
        getMockDispatch,
        addMockDispatch,
        deleteMockDispatch,
        buildKey,
        generateKeyValues,
        matchValue,
        getResponse,
        getStatusText,
        mockDispatch,
        buildMockDispatch,
        checkNetConnect,
        buildMockOptions,
        getHeaderByName,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-interceptor.js
  var require_mock_interceptor = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-interceptor.js"(
      exports,
      module,
    ) {
      "use strict";
      var { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
      var {
        kDispatches,
        kDispatchKey,
        kDefaultHeaders,
        kDefaultTrailers,
        kContentLength,
        kMockDispatch,
      } = require_mock_symbols();
      var { InvalidArgumentError } = require_errors();
      var { buildURL } = require_util();
      var MockScope = class {
        static {
          __name(this, "MockScope");
        }
        constructor(mockDispatch) {
          this[kMockDispatch] = mockDispatch;
        }
        /**
         * Delay a reply by a set amount in ms.
         */
        delay(waitInMs) {
          if (
            typeof waitInMs !== "number" ||
            !Number.isInteger(waitInMs) ||
            waitInMs <= 0
          ) {
            throw new InvalidArgumentError(
              "waitInMs must be a valid integer > 0",
            );
          }
          this[kMockDispatch].delay = waitInMs;
          return this;
        }
        /**
         * For a defined reply, never mark as consumed.
         */
        persist() {
          this[kMockDispatch].persist = true;
          return this;
        }
        /**
         * Allow one to define a reply for a set amount of matching requests.
         */
        times(repeatTimes) {
          if (
            typeof repeatTimes !== "number" ||
            !Number.isInteger(repeatTimes) ||
            repeatTimes <= 0
          ) {
            throw new InvalidArgumentError(
              "repeatTimes must be a valid integer > 0",
            );
          }
          this[kMockDispatch].times = repeatTimes;
          return this;
        }
      };
      var MockInterceptor = class {
        static {
          __name(this, "MockInterceptor");
        }
        constructor(opts, mockDispatches) {
          if (typeof opts !== "object") {
            throw new InvalidArgumentError("opts must be an object");
          }
          if (typeof opts.path === "undefined") {
            throw new InvalidArgumentError("opts.path must be defined");
          }
          if (typeof opts.method === "undefined") {
            opts.method = "GET";
          }
          if (typeof opts.path === "string") {
            if (opts.query) {
              opts.path = buildURL(opts.path, opts.query);
            } else {
              const parsedURL = new URL(opts.path, "data://");
              opts.path = parsedURL.pathname + parsedURL.search;
            }
          }
          if (typeof opts.method === "string") {
            opts.method = opts.method.toUpperCase();
          }
          this[kDispatchKey] = buildKey(opts);
          this[kDispatches] = mockDispatches;
          this[kDefaultHeaders] = {};
          this[kDefaultTrailers] = {};
          this[kContentLength] = false;
        }
        createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
          const responseData = getResponseData(data);
          const contentLength = this[kContentLength]
            ? { "content-length": responseData.length }
            : {};
          const headers = {
            ...this[kDefaultHeaders],
            ...contentLength,
            ...responseOptions.headers,
          };
          const trailers = {
            ...this[kDefaultTrailers],
            ...responseOptions.trailers,
          };
          return { statusCode, data, headers, trailers };
        }
        validateReplyParameters(statusCode, data, responseOptions) {
          if (typeof statusCode === "undefined") {
            throw new InvalidArgumentError("statusCode must be defined");
          }
          if (typeof data === "undefined") {
            throw new InvalidArgumentError("data must be defined");
          }
          if (typeof responseOptions !== "object") {
            throw new InvalidArgumentError("responseOptions must be an object");
          }
        }
        /**
         * Mock an undici request with a defined reply.
         */
        reply(replyData) {
          if (typeof replyData === "function") {
            const wrappedDefaultsCallback = /* @__PURE__ */ __name((opts) => {
              const resolvedData = replyData(opts);
              if (typeof resolvedData !== "object") {
                throw new InvalidArgumentError(
                  "reply options callback must return an object",
                );
              }
              const {
                statusCode: statusCode2,
                data: data2 = "",
                responseOptions: responseOptions2 = {},
              } = resolvedData;
              this.validateReplyParameters(
                statusCode2,
                data2,
                responseOptions2,
              );
              return {
                ...this.createMockScopeDispatchData(
                  statusCode2,
                  data2,
                  responseOptions2,
                ),
              };
            }, "wrappedDefaultsCallback");
            const newMockDispatch2 = addMockDispatch(
              this[kDispatches],
              this[kDispatchKey],
              wrappedDefaultsCallback,
            );
            return new MockScope(newMockDispatch2);
          }
          const [statusCode, data = "", responseOptions = {}] = [...arguments];
          this.validateReplyParameters(statusCode, data, responseOptions);
          const dispatchData = this.createMockScopeDispatchData(
            statusCode,
            data,
            responseOptions,
          );
          const newMockDispatch = addMockDispatch(
            this[kDispatches],
            this[kDispatchKey],
            dispatchData,
          );
          return new MockScope(newMockDispatch);
        }
        /**
         * Mock an undici request with a defined error.
         */
        replyWithError(error) {
          if (typeof error === "undefined") {
            throw new InvalidArgumentError("error must be defined");
          }
          const newMockDispatch = addMockDispatch(
            this[kDispatches],
            this[kDispatchKey],
            { error },
          );
          return new MockScope(newMockDispatch);
        }
        /**
         * Set default reply headers on the interceptor for subsequent replies
         */
        defaultReplyHeaders(headers) {
          if (typeof headers === "undefined") {
            throw new InvalidArgumentError("headers must be defined");
          }
          this[kDefaultHeaders] = headers;
          return this;
        }
        /**
         * Set default reply trailers on the interceptor for subsequent replies
         */
        defaultReplyTrailers(trailers) {
          if (typeof trailers === "undefined") {
            throw new InvalidArgumentError("trailers must be defined");
          }
          this[kDefaultTrailers] = trailers;
          return this;
        }
        /**
         * Set reply content length header for replies on the interceptor
         */
        replyContentLength() {
          this[kContentLength] = true;
          return this;
        }
      };
      module.exports.MockInterceptor = MockInterceptor;
      module.exports.MockScope = MockScope;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-client.js
  var require_mock_client = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-client.js"(
      exports,
      module,
    ) {
      "use strict";
      var { promisify } = __require("util");
      var Client = require_client();
      var { buildMockDispatch } = require_mock_utils();
      var {
        kDispatches,
        kMockAgent,
        kClose,
        kOriginalClose,
        kOrigin,
        kOriginalDispatch,
        kConnected,
      } = require_mock_symbols();
      var { MockInterceptor } = require_mock_interceptor();
      var Symbols = require_symbols();
      var { InvalidArgumentError } = require_errors();
      var MockClient = class extends Client {
        static {
          __name(this, "MockClient");
        }
        constructor(origin, opts) {
          super(origin, opts);
          if (
            !opts ||
            !opts.agent ||
            typeof opts.agent.dispatch !== "function"
          ) {
            throw new InvalidArgumentError(
              "Argument opts.agent must implement Agent",
            );
          }
          this[kMockAgent] = opts.agent;
          this[kOrigin] = origin;
          this[kDispatches] = [];
          this[kConnected] = 1;
          this[kOriginalDispatch] = this.dispatch;
          this[kOriginalClose] = this.close.bind(this);
          this.dispatch = buildMockDispatch.call(this);
          this.close = this[kClose];
        }
        get [Symbols.kConnected]() {
          return this[kConnected];
        }
        /**
         * Sets up the base interceptor for mocking replies from undici.
         */
        intercept(opts) {
          return new MockInterceptor(opts, this[kDispatches]);
        }
        async [kClose]() {
          await promisify(this[kOriginalClose])();
          this[kConnected] = 0;
          this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
        }
      };
      module.exports = MockClient;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-pool.js
  var require_mock_pool = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-pool.js"(
      exports,
      module,
    ) {
      "use strict";
      var { promisify } = __require("util");
      var Pool = require_pool();
      var { buildMockDispatch } = require_mock_utils();
      var {
        kDispatches,
        kMockAgent,
        kClose,
        kOriginalClose,
        kOrigin,
        kOriginalDispatch,
        kConnected,
      } = require_mock_symbols();
      var { MockInterceptor } = require_mock_interceptor();
      var Symbols = require_symbols();
      var { InvalidArgumentError } = require_errors();
      var MockPool = class extends Pool {
        static {
          __name(this, "MockPool");
        }
        constructor(origin, opts) {
          super(origin, opts);
          if (
            !opts ||
            !opts.agent ||
            typeof opts.agent.dispatch !== "function"
          ) {
            throw new InvalidArgumentError(
              "Argument opts.agent must implement Agent",
            );
          }
          this[kMockAgent] = opts.agent;
          this[kOrigin] = origin;
          this[kDispatches] = [];
          this[kConnected] = 1;
          this[kOriginalDispatch] = this.dispatch;
          this[kOriginalClose] = this.close.bind(this);
          this.dispatch = buildMockDispatch.call(this);
          this.close = this[kClose];
        }
        get [Symbols.kConnected]() {
          return this[kConnected];
        }
        /**
         * Sets up the base interceptor for mocking replies from undici.
         */
        intercept(opts) {
          return new MockInterceptor(opts, this[kDispatches]);
        }
        async [kClose]() {
          await promisify(this[kOriginalClose])();
          this[kConnected] = 0;
          this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
        }
      };
      module.exports = MockPool;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/pluralizer.js
  var require_pluralizer = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/pluralizer.js"(
      exports,
      module,
    ) {
      "use strict";
      var singulars = {
        pronoun: "it",
        is: "is",
        was: "was",
        this: "this",
      };
      var plurals = {
        pronoun: "they",
        is: "are",
        was: "were",
        this: "these",
      };
      module.exports = class Pluralizer {
        static {
          __name(this, "Pluralizer");
        }
        constructor(singular, plural) {
          this.singular = singular;
          this.plural = plural;
        }
        pluralize(count) {
          const one2 = count === 1;
          const keys = one2 ? singulars : plurals;
          const noun = one2 ? this.singular : this.plural;
          return { ...keys, count, noun };
        }
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/pending-interceptors-formatter.js
  var require_pending_interceptors_formatter = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/pending-interceptors-formatter.js"(
      exports,
      module,
    ) {
      "use strict";
      var { Transform } = __require("stream");
      var { Console } = __require("console");
      module.exports = class PendingInterceptorsFormatter {
        static {
          __name(this, "PendingInterceptorsFormatter");
        }
        constructor({ disableColors } = {}) {
          this.transform = new Transform({
            transform(chunk, _enc, cb) {
              cb(null, chunk);
            },
          });
          this.logger = new Console({
            stdout: this.transform,
            inspectOptions: {
              colors: !disableColors && !process.env.CI,
            },
          });
        }
        format(pendingInterceptors) {
          const withPrettyHeaders = pendingInterceptors.map(
            ({
              method,
              path: path4,
              data: { statusCode },
              persist,
              times,
              timesInvoked,
              origin,
            }) => ({
              Method: method,
              Origin: origin,
              Path: path4,
              "Status code": statusCode,
              Persistent: persist ? "\u2705" : "\u274C",
              Invocations: timesInvoked,
              Remaining: persist ? Infinity : times - timesInvoked,
            }),
          );
          this.logger.table(withPrettyHeaders);
          return this.transform.read().toString();
        }
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-agent.js
  var require_mock_agent = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/mock/mock-agent.js"(
      exports,
      module,
    ) {
      "use strict";
      var { kClients } = require_symbols();
      var Agent = require_agent();
      var {
        kAgent,
        kMockAgentSet,
        kMockAgentGet,
        kDispatches,
        kIsMockActive,
        kNetConnect,
        kGetNetConnect,
        kOptions,
        kFactory,
      } = require_mock_symbols();
      var MockClient = require_mock_client();
      var MockPool = require_mock_pool();
      var { matchValue, buildMockOptions } = require_mock_utils();
      var { InvalidArgumentError, UndiciError } = require_errors();
      var Dispatcher = require_dispatcher();
      var Pluralizer = require_pluralizer();
      var PendingInterceptorsFormatter =
        require_pending_interceptors_formatter();
      var FakeWeakRef = class {
        static {
          __name(this, "FakeWeakRef");
        }
        constructor(value) {
          this.value = value;
        }
        deref() {
          return this.value;
        }
      };
      var MockAgent = class extends Dispatcher {
        static {
          __name(this, "MockAgent");
        }
        constructor(opts) {
          super(opts);
          this[kNetConnect] = true;
          this[kIsMockActive] = true;
          if (opts && opts.agent && typeof opts.agent.dispatch !== "function") {
            throw new InvalidArgumentError(
              "Argument opts.agent must implement Agent",
            );
          }
          const agent = opts && opts.agent ? opts.agent : new Agent(opts);
          this[kAgent] = agent;
          this[kClients] = agent[kClients];
          this[kOptions] = buildMockOptions(opts);
        }
        get(origin) {
          let dispatcher = this[kMockAgentGet](origin);
          if (!dispatcher) {
            dispatcher = this[kFactory](origin);
            this[kMockAgentSet](origin, dispatcher);
          }
          return dispatcher;
        }
        dispatch(opts, handler) {
          this.get(opts.origin);
          return this[kAgent].dispatch(opts, handler);
        }
        async close() {
          await this[kAgent].close();
          this[kClients].clear();
        }
        deactivate() {
          this[kIsMockActive] = false;
        }
        activate() {
          this[kIsMockActive] = true;
        }
        enableNetConnect(matcher) {
          if (
            typeof matcher === "string" ||
            typeof matcher === "function" ||
            matcher instanceof RegExp
          ) {
            if (Array.isArray(this[kNetConnect])) {
              this[kNetConnect].push(matcher);
            } else {
              this[kNetConnect] = [matcher];
            }
          } else if (typeof matcher === "undefined") {
            this[kNetConnect] = true;
          } else {
            throw new InvalidArgumentError(
              "Unsupported matcher. Must be one of String|Function|RegExp.",
            );
          }
        }
        disableNetConnect() {
          this[kNetConnect] = false;
        }
        // This is required to bypass issues caused by using global symbols - see:
        // https://github.com/nodejs/undici/issues/1447
        get isMockActive() {
          return this[kIsMockActive];
        }
        [kMockAgentSet](origin, dispatcher) {
          this[kClients].set(origin, new FakeWeakRef(dispatcher));
        }
        [kFactory](origin) {
          const mockOptions = Object.assign({ agent: this }, this[kOptions]);
          return this[kOptions] && this[kOptions].connections === 1
            ? new MockClient(origin, mockOptions)
            : new MockPool(origin, mockOptions);
        }
        [kMockAgentGet](origin) {
          const ref = this[kClients].get(origin);
          if (ref) {
            return ref.deref();
          }
          if (typeof origin !== "string") {
            const dispatcher = this[kFactory]("http://localhost:9999");
            this[kMockAgentSet](origin, dispatcher);
            return dispatcher;
          }
          for (const [keyMatcher, nonExplicitRef] of Array.from(
            this[kClients],
          )) {
            const nonExplicitDispatcher = nonExplicitRef.deref();
            if (
              nonExplicitDispatcher &&
              typeof keyMatcher !== "string" &&
              matchValue(keyMatcher, origin)
            ) {
              const dispatcher = this[kFactory](origin);
              this[kMockAgentSet](origin, dispatcher);
              dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
              return dispatcher;
            }
          }
        }
        [kGetNetConnect]() {
          return this[kNetConnect];
        }
        pendingInterceptors() {
          const mockAgentClients = this[kClients];
          return Array.from(mockAgentClients.entries())
            .flatMap(([origin, scope]) =>
              scope
                .deref()
                [kDispatches].map((dispatch) => ({ ...dispatch, origin })),
            )
            .filter(({ pending }) => pending);
        }
        assertNoPendingInterceptors({
          pendingInterceptorsFormatter = new PendingInterceptorsFormatter(),
        } = {}) {
          const pending = this.pendingInterceptors();
          if (pending.length === 0) {
            return;
          }
          const pluralizer = new Pluralizer(
            "interceptor",
            "interceptors",
          ).pluralize(pending.length);
          throw new UndiciError(
            `
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim(),
          );
        }
      };
      module.exports = MockAgent;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/proxy-agent.js
  var require_proxy_agent = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/proxy-agent.js"(
      exports,
      module,
    ) {
      "use strict";
      var { kProxy, kClose, kDestroy, kInterceptors } = require_symbols();
      var { URL: URL3 } = __require("url");
      var Agent = require_agent();
      var Pool = require_pool();
      var DispatcherBase = require_dispatcher_base();
      var { InvalidArgumentError, RequestAbortedError } = require_errors();
      var buildConnector = require_connect();
      var kAgent = Symbol("proxy agent");
      var kClient = Symbol("proxy client");
      var kProxyHeaders = Symbol("proxy headers");
      var kRequestTls = Symbol("request tls settings");
      var kProxyTls = Symbol("proxy tls settings");
      var kConnectEndpoint = Symbol("connect endpoint function");
      function defaultProtocolPort(protocol) {
        return protocol === "https:" ? 443 : 80;
      }
      __name(defaultProtocolPort, "defaultProtocolPort");
      function buildProxyOptions(opts) {
        if (typeof opts === "string") {
          opts = { uri: opts };
        }
        if (!opts || !opts.uri) {
          throw new InvalidArgumentError("Proxy opts.uri is mandatory");
        }
        return {
          uri: opts.uri,
          protocol: opts.protocol || "https",
        };
      }
      __name(buildProxyOptions, "buildProxyOptions");
      function defaultFactory(origin, opts) {
        return new Pool(origin, opts);
      }
      __name(defaultFactory, "defaultFactory");
      var ProxyAgent = class extends DispatcherBase {
        static {
          __name(this, "ProxyAgent");
        }
        constructor(opts) {
          super(opts);
          this[kProxy] = buildProxyOptions(opts);
          this[kAgent] = new Agent(opts);
          this[kInterceptors] =
            opts.interceptors &&
            opts.interceptors.ProxyAgent &&
            Array.isArray(opts.interceptors.ProxyAgent)
              ? opts.interceptors.ProxyAgent
              : [];
          if (typeof opts === "string") {
            opts = { uri: opts };
          }
          if (!opts || !opts.uri) {
            throw new InvalidArgumentError("Proxy opts.uri is mandatory");
          }
          const { clientFactory = defaultFactory } = opts;
          if (typeof clientFactory !== "function") {
            throw new InvalidArgumentError(
              "Proxy opts.clientFactory must be a function.",
            );
          }
          this[kRequestTls] = opts.requestTls;
          this[kProxyTls] = opts.proxyTls;
          this[kProxyHeaders] = opts.headers || {};
          const resolvedUrl = new URL3(opts.uri);
          const { origin, port, host, username, password } = resolvedUrl;
          if (opts.auth && opts.token) {
            throw new InvalidArgumentError(
              "opts.auth cannot be used in combination with opts.token",
            );
          } else if (opts.auth) {
            this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
          } else if (opts.token) {
            this[kProxyHeaders]["proxy-authorization"] = opts.token;
          } else if (username && password) {
            this[kProxyHeaders]["proxy-authorization"] =
              `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
          }
          const connect = buildConnector({ ...opts.proxyTls });
          this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });
          this[kClient] = clientFactory(resolvedUrl, { connect });
          this[kAgent] = new Agent({
            ...opts,
            connect: /* @__PURE__ */ __name(async (opts2, callback) => {
              let requestedHost = opts2.host;
              if (!opts2.port) {
                requestedHost += `:${defaultProtocolPort(opts2.protocol)}`;
              }
              try {
                const { socket, statusCode } = await this[kClient].connect({
                  origin,
                  port,
                  path: requestedHost,
                  signal: opts2.signal,
                  headers: {
                    ...this[kProxyHeaders],
                    host,
                  },
                });
                if (statusCode !== 200) {
                  socket.on("error", () => {}).destroy();
                  callback(
                    new RequestAbortedError(
                      `Proxy response (${statusCode}) !== 200 when HTTP Tunneling`,
                    ),
                  );
                }
                if (opts2.protocol !== "https:") {
                  callback(null, socket);
                  return;
                }
                let servername;
                if (this[kRequestTls]) {
                  servername = this[kRequestTls].servername;
                } else {
                  servername = opts2.servername;
                }
                this[kConnectEndpoint](
                  { ...opts2, servername, httpSocket: socket },
                  callback,
                );
              } catch (err) {
                callback(err);
              }
            }, "connect"),
          });
        }
        dispatch(opts, handler) {
          const { host } = new URL3(opts.origin);
          const headers = buildHeaders(opts.headers);
          throwIfProxyAuthIsSent(headers);
          return this[kAgent].dispatch(
            {
              ...opts,
              headers: {
                ...headers,
                host,
              },
            },
            handler,
          );
        }
        async [kClose]() {
          await this[kAgent].close();
          await this[kClient].close();
        }
        async [kDestroy]() {
          await this[kAgent].destroy();
          await this[kClient].destroy();
        }
      };
      function buildHeaders(headers) {
        if (Array.isArray(headers)) {
          const headersPair = {};
          for (let i = 0; i < headers.length; i += 2) {
            headersPair[headers[i]] = headers[i + 1];
          }
          return headersPair;
        }
        return headers;
      }
      __name(buildHeaders, "buildHeaders");
      function throwIfProxyAuthIsSent(headers) {
        const existProxyAuth =
          headers &&
          Object.keys(headers).find(
            (key) => key.toLowerCase() === "proxy-authorization",
          );
        if (existProxyAuth) {
          throw new InvalidArgumentError(
            "Proxy-Authorization should be sent in ProxyAgent constructor",
          );
        }
      }
      __name(throwIfProxyAuthIsSent, "throwIfProxyAuthIsSent");
      module.exports = ProxyAgent;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/RetryHandler.js
  var require_RetryHandler = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/RetryHandler.js"(
      exports,
      module,
    ) {
      var assert = __require("assert");
      var { kRetryHandlerDefaultRetry } = require_symbols();
      var { RequestRetryError } = require_errors();
      var { isDisturbed, parseHeaders, parseRangeHeader } = require_util();
      function calculateRetryAfterHeader(retryAfter) {
        const current = Date.now();
        const diff = new Date(retryAfter).getTime() - current;
        return diff;
      }
      __name(calculateRetryAfterHeader, "calculateRetryAfterHeader");
      var RetryHandler = class _RetryHandler {
        static {
          __name(this, "RetryHandler");
        }
        constructor(opts, handlers) {
          const { retryOptions, ...dispatchOpts } = opts;
          const {
            // Retry scoped
            retry: retryFn,
            maxRetries,
            maxTimeout,
            minTimeout,
            timeoutFactor,
            // Response scoped
            methods,
            errorCodes,
            retryAfter,
            statusCodes,
          } = retryOptions ?? {};
          this.dispatch = handlers.dispatch;
          this.handler = handlers.handler;
          this.opts = dispatchOpts;
          this.abort = null;
          this.aborted = false;
          this.retryOpts = {
            retry: retryFn ?? _RetryHandler[kRetryHandlerDefaultRetry],
            retryAfter: retryAfter ?? true,
            maxTimeout: maxTimeout ?? 30 * 1e3,
            // 30s,
            timeout: minTimeout ?? 500,
            // .5s
            timeoutFactor: timeoutFactor ?? 2,
            maxRetries: maxRetries ?? 5,
            // What errors we should retry
            methods: methods ?? [
              "GET",
              "HEAD",
              "OPTIONS",
              "PUT",
              "DELETE",
              "TRACE",
            ],
            // Indicates which errors to retry
            statusCodes: statusCodes ?? [500, 502, 503, 504, 429],
            // List of errors to retry
            errorCodes: errorCodes ?? [
              "ECONNRESET",
              "ECONNREFUSED",
              "ENOTFOUND",
              "ENETDOWN",
              "ENETUNREACH",
              "EHOSTDOWN",
              "EHOSTUNREACH",
              "EPIPE",
            ],
          };
          this.retryCount = 0;
          this.start = 0;
          this.end = null;
          this.etag = null;
          this.resume = null;
          this.handler.onConnect((reason) => {
            this.aborted = true;
            if (this.abort) {
              this.abort(reason);
            } else {
              this.reason = reason;
            }
          });
        }
        onRequestSent() {
          if (this.handler.onRequestSent) {
            this.handler.onRequestSent();
          }
        }
        onUpgrade(statusCode, headers, socket) {
          if (this.handler.onUpgrade) {
            this.handler.onUpgrade(statusCode, headers, socket);
          }
        }
        onConnect(abort) {
          if (this.aborted) {
            abort(this.reason);
          } else {
            this.abort = abort;
          }
        }
        onBodySent(chunk) {
          if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
        }
        static [kRetryHandlerDefaultRetry](err, { state, opts }, cb) {
          const { statusCode, code: code2, headers } = err;
          const { method, retryOptions } = opts;
          const {
            maxRetries,
            timeout,
            maxTimeout,
            timeoutFactor,
            statusCodes,
            errorCodes,
            methods,
          } = retryOptions;
          let { counter, currentTimeout } = state;
          currentTimeout =
            currentTimeout != null && currentTimeout > 0
              ? currentTimeout
              : timeout;
          if (
            code2 &&
            code2 !== "UND_ERR_REQ_RETRY" &&
            code2 !== "UND_ERR_SOCKET" &&
            !errorCodes.includes(code2)
          ) {
            cb(err);
            return;
          }
          if (Array.isArray(methods) && !methods.includes(method)) {
            cb(err);
            return;
          }
          if (
            statusCode != null &&
            Array.isArray(statusCodes) &&
            !statusCodes.includes(statusCode)
          ) {
            cb(err);
            return;
          }
          if (counter > maxRetries) {
            cb(err);
            return;
          }
          let retryAfterHeader = headers != null && headers["retry-after"];
          if (retryAfterHeader) {
            retryAfterHeader = Number(retryAfterHeader);
            retryAfterHeader = isNaN(retryAfterHeader)
              ? calculateRetryAfterHeader(retryAfterHeader)
              : retryAfterHeader * 1e3;
          }
          const retryTimeout =
            retryAfterHeader > 0
              ? Math.min(retryAfterHeader, maxTimeout)
              : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
          state.currentTimeout = retryTimeout;
          setTimeout(() => cb(null), retryTimeout);
        }
        onHeaders(statusCode, rawHeaders, resume, statusMessage) {
          const headers = parseHeaders(rawHeaders);
          this.retryCount += 1;
          if (statusCode >= 300) {
            this.abort(
              new RequestRetryError("Request failed", statusCode, {
                headers,
                count: this.retryCount,
              }),
            );
            return false;
          }
          if (this.resume != null) {
            this.resume = null;
            if (statusCode !== 206) {
              return true;
            }
            const contentRange = parseRangeHeader(headers["content-range"]);
            if (!contentRange) {
              this.abort(
                new RequestRetryError("Content-Range mismatch", statusCode, {
                  headers,
                  count: this.retryCount,
                }),
              );
              return false;
            }
            if (this.etag != null && this.etag !== headers.etag) {
              this.abort(
                new RequestRetryError("ETag mismatch", statusCode, {
                  headers,
                  count: this.retryCount,
                }),
              );
              return false;
            }
            const { start, size, end = size } = contentRange;
            assert(this.start === start, "content-range mismatch");
            assert(
              this.end == null || this.end === end,
              "content-range mismatch",
            );
            this.resume = resume;
            return true;
          }
          if (this.end == null) {
            if (statusCode === 206) {
              const range = parseRangeHeader(headers["content-range"]);
              if (range == null) {
                return this.handler.onHeaders(
                  statusCode,
                  rawHeaders,
                  resume,
                  statusMessage,
                );
              }
              const { start, size, end = size } = range;
              assert(
                start != null && Number.isFinite(start) && this.start !== start,
                "content-range mismatch",
              );
              assert(Number.isFinite(start));
              assert(
                end != null && Number.isFinite(end) && this.end !== end,
                "invalid content-length",
              );
              this.start = start;
              this.end = end;
            }
            if (this.end == null) {
              const contentLength = headers["content-length"];
              this.end = contentLength != null ? Number(contentLength) : null;
            }
            assert(Number.isFinite(this.start));
            assert(
              this.end == null || Number.isFinite(this.end),
              "invalid content-length",
            );
            this.resume = resume;
            this.etag = headers.etag != null ? headers.etag : null;
            return this.handler.onHeaders(
              statusCode,
              rawHeaders,
              resume,
              statusMessage,
            );
          }
          const err = new RequestRetryError("Request failed", statusCode, {
            headers,
            count: this.retryCount,
          });
          this.abort(err);
          return false;
        }
        onData(chunk) {
          this.start += chunk.length;
          return this.handler.onData(chunk);
        }
        onComplete(rawTrailers) {
          this.retryCount = 0;
          return this.handler.onComplete(rawTrailers);
        }
        onError(err) {
          if (this.aborted || isDisturbed(this.opts.body)) {
            return this.handler.onError(err);
          }
          this.retryOpts.retry(
            err,
            {
              state: {
                counter: this.retryCount++,
                currentTimeout: this.retryAfter,
              },
              opts: { retryOptions: this.retryOpts, ...this.opts },
            },
            onRetry.bind(this),
          );
          function onRetry(err2) {
            if (err2 != null || this.aborted || isDisturbed(this.opts.body)) {
              return this.handler.onError(err2);
            }
            if (this.start !== 0) {
              this.opts = {
                ...this.opts,
                headers: {
                  ...this.opts.headers,
                  range: `bytes=${this.start}-${this.end ?? ""}`,
                },
              };
            }
            try {
              this.dispatch(this.opts, this);
            } catch (err3) {
              this.handler.onError(err3);
            }
          }
          __name(onRetry, "onRetry");
        }
      };
      module.exports = RetryHandler;
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/global.js
  var require_global2 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/global.js"(
      exports,
      module,
    ) {
      "use strict";
      var globalDispatcher = Symbol.for("undici.globalDispatcher.1");
      var { InvalidArgumentError } = require_errors();
      var Agent = require_agent();
      if (getGlobalDispatcher() === void 0) {
        setGlobalDispatcher(new Agent());
      }
      function setGlobalDispatcher(agent) {
        if (!agent || typeof agent.dispatch !== "function") {
          throw new InvalidArgumentError("Argument agent must implement Agent");
        }
        Object.defineProperty(globalThis, globalDispatcher, {
          value: agent,
          writable: true,
          enumerable: false,
          configurable: false,
        });
      }
      __name(setGlobalDispatcher, "setGlobalDispatcher");
      function getGlobalDispatcher() {
        return globalThis[globalDispatcher];
      }
      __name(getGlobalDispatcher, "getGlobalDispatcher");
      module.exports = {
        setGlobalDispatcher,
        getGlobalDispatcher,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/DecoratorHandler.js
  var require_DecoratorHandler = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/handler/DecoratorHandler.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = class DecoratorHandler {
        static {
          __name(this, "DecoratorHandler");
        }
        constructor(handler) {
          this.handler = handler;
        }
        onConnect(...args) {
          return this.handler.onConnect(...args);
        }
        onError(...args) {
          return this.handler.onError(...args);
        }
        onUpgrade(...args) {
          return this.handler.onUpgrade(...args);
        }
        onHeaders(...args) {
          return this.handler.onHeaders(...args);
        }
        onData(...args) {
          return this.handler.onData(...args);
        }
        onComplete(...args) {
          return this.handler.onComplete(...args);
        }
        onBodySent(...args) {
          return this.handler.onBodySent(...args);
        }
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/headers.js
  var require_headers = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/headers.js"(
      exports,
      module,
    ) {
      "use strict";
      var { kHeadersList, kConstruct } = require_symbols();
      var { kGuard } = require_symbols2();
      var { kEnumerableProperty } = require_util();
      var { makeIterator, isValidHeaderName, isValidHeaderValue } =
        require_util2();
      var { webidl } = require_webidl();
      var assert = __require("assert");
      var kHeadersMap = Symbol("headers map");
      var kHeadersSortedMap = Symbol("headers map sorted");
      function isHTTPWhiteSpaceCharCode(code2) {
        return code2 === 10 || code2 === 13 || code2 === 9 || code2 === 32;
      }
      __name(isHTTPWhiteSpaceCharCode, "isHTTPWhiteSpaceCharCode");
      function headerValueNormalize(potentialValue) {
        let i = 0;
        let j = potentialValue.length;
        while (
          j > i &&
          isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))
        )
          --j;
        while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i)))
          ++i;
        return i === 0 && j === potentialValue.length
          ? potentialValue
          : potentialValue.substring(i, j);
      }
      __name(headerValueNormalize, "headerValueNormalize");
      function fill(headers, object) {
        if (Array.isArray(object)) {
          for (let i = 0; i < object.length; ++i) {
            const header = object[i];
            if (header.length !== 2) {
              throw webidl.errors.exception({
                header: "Headers constructor",
                message: `expected name/value pair to be length 2, found ${header.length}.`,
              });
            }
            appendHeader(headers, header[0], header[1]);
          }
        } else if (typeof object === "object" && object !== null) {
          const keys = Object.keys(object);
          for (let i = 0; i < keys.length; ++i) {
            appendHeader(headers, keys[i], object[keys[i]]);
          }
        } else {
          throw webidl.errors.conversionFailed({
            prefix: "Headers constructor",
            argument: "Argument 1",
            types: [
              "sequence<sequence<ByteString>>",
              "record<ByteString, ByteString>",
            ],
          });
        }
      }
      __name(fill, "fill");
      function appendHeader(headers, name, value) {
        value = headerValueNormalize(value);
        if (!isValidHeaderName(name)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.append",
            value: name,
            type: "header name",
          });
        } else if (!isValidHeaderValue(value)) {
          throw webidl.errors.invalidArgument({
            prefix: "Headers.append",
            value,
            type: "header value",
          });
        }
        if (headers[kGuard] === "immutable") {
          throw new TypeError("immutable");
        } else if (headers[kGuard] === "request-no-cors") {
        }
        return headers[kHeadersList].append(name, value);
      }
      __name(appendHeader, "appendHeader");
      var HeadersList = class _HeadersList {
        static {
          __name(this, "HeadersList");
        }
        /** @type {[string, string][]|null} */
        cookies = null;
        constructor(init) {
          if (init instanceof _HeadersList) {
            this[kHeadersMap] = new Map(init[kHeadersMap]);
            this[kHeadersSortedMap] = init[kHeadersSortedMap];
            this.cookies = init.cookies === null ? null : [...init.cookies];
          } else {
            this[kHeadersMap] = new Map(init);
            this[kHeadersSortedMap] = null;
          }
        }
        // https://fetch.spec.whatwg.org/#header-list-contains
        contains(name) {
          name = name.toLowerCase();
          return this[kHeadersMap].has(name);
        }
        clear() {
          this[kHeadersMap].clear();
          this[kHeadersSortedMap] = null;
          this.cookies = null;
        }
        // https://fetch.spec.whatwg.org/#concept-header-list-append
        append(name, value) {
          this[kHeadersSortedMap] = null;
          const lowercaseName = name.toLowerCase();
          const exists = this[kHeadersMap].get(lowercaseName);
          if (exists) {
            const delimiter = lowercaseName === "cookie" ? "; " : ", ";
            this[kHeadersMap].set(lowercaseName, {
              name: exists.name,
              value: `${exists.value}${delimiter}${value}`,
            });
          } else {
            this[kHeadersMap].set(lowercaseName, { name, value });
          }
          if (lowercaseName === "set-cookie") {
            this.cookies ??= [];
            this.cookies.push(value);
          }
        }
        // https://fetch.spec.whatwg.org/#concept-header-list-set
        set(name, value) {
          this[kHeadersSortedMap] = null;
          const lowercaseName = name.toLowerCase();
          if (lowercaseName === "set-cookie") {
            this.cookies = [value];
          }
          this[kHeadersMap].set(lowercaseName, { name, value });
        }
        // https://fetch.spec.whatwg.org/#concept-header-list-delete
        delete(name) {
          this[kHeadersSortedMap] = null;
          name = name.toLowerCase();
          if (name === "set-cookie") {
            this.cookies = null;
          }
          this[kHeadersMap].delete(name);
        }
        // https://fetch.spec.whatwg.org/#concept-header-list-get
        get(name) {
          const value = this[kHeadersMap].get(name.toLowerCase());
          return value === void 0 ? null : value.value;
        }
        *[Symbol.iterator]() {
          for (const [name, { value }] of this[kHeadersMap]) {
            yield [name, value];
          }
        }
        get entries() {
          const headers = {};
          if (this[kHeadersMap].size) {
            for (const { name, value } of this[kHeadersMap].values()) {
              headers[name] = value;
            }
          }
          return headers;
        }
      };
      var Headers = class _Headers {
        static {
          __name(this, "Headers");
        }
        constructor(init = void 0) {
          if (init === kConstruct) {
            return;
          }
          this[kHeadersList] = new HeadersList();
          this[kGuard] = "none";
          if (init !== void 0) {
            init = webidl.converters.HeadersInit(init);
            fill(this, init);
          }
        }
        // https://fetch.spec.whatwg.org/#dom-headers-append
        append(name, value) {
          webidl.brandCheck(this, _Headers);
          webidl.argumentLengthCheck(arguments, 2, {
            header: "Headers.append",
          });
          name = webidl.converters.ByteString(name);
          value = webidl.converters.ByteString(value);
          return appendHeader(this, name, value);
        }
        // https://fetch.spec.whatwg.org/#dom-headers-delete
        delete(name) {
          webidl.brandCheck(this, _Headers);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "Headers.delete",
          });
          name = webidl.converters.ByteString(name);
          if (!isValidHeaderName(name)) {
            throw webidl.errors.invalidArgument({
              prefix: "Headers.delete",
              value: name,
              type: "header name",
            });
          }
          if (this[kGuard] === "immutable") {
            throw new TypeError("immutable");
          } else if (this[kGuard] === "request-no-cors") {
          }
          if (!this[kHeadersList].contains(name)) {
            return;
          }
          this[kHeadersList].delete(name);
        }
        // https://fetch.spec.whatwg.org/#dom-headers-get
        get(name) {
          webidl.brandCheck(this, _Headers);
          webidl.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
          name = webidl.converters.ByteString(name);
          if (!isValidHeaderName(name)) {
            throw webidl.errors.invalidArgument({
              prefix: "Headers.get",
              value: name,
              type: "header name",
            });
          }
          return this[kHeadersList].get(name);
        }
        // https://fetch.spec.whatwg.org/#dom-headers-has
        has(name) {
          webidl.brandCheck(this, _Headers);
          webidl.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
          name = webidl.converters.ByteString(name);
          if (!isValidHeaderName(name)) {
            throw webidl.errors.invalidArgument({
              prefix: "Headers.has",
              value: name,
              type: "header name",
            });
          }
          return this[kHeadersList].contains(name);
        }
        // https://fetch.spec.whatwg.org/#dom-headers-set
        set(name, value) {
          webidl.brandCheck(this, _Headers);
          webidl.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
          name = webidl.converters.ByteString(name);
          value = webidl.converters.ByteString(value);
          value = headerValueNormalize(value);
          if (!isValidHeaderName(name)) {
            throw webidl.errors.invalidArgument({
              prefix: "Headers.set",
              value: name,
              type: "header name",
            });
          } else if (!isValidHeaderValue(value)) {
            throw webidl.errors.invalidArgument({
              prefix: "Headers.set",
              value,
              type: "header value",
            });
          }
          if (this[kGuard] === "immutable") {
            throw new TypeError("immutable");
          } else if (this[kGuard] === "request-no-cors") {
          }
          this[kHeadersList].set(name, value);
        }
        // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie
        getSetCookie() {
          webidl.brandCheck(this, _Headers);
          const list4 = this[kHeadersList].cookies;
          if (list4) {
            return [...list4];
          }
          return [];
        }
        // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine
        get [kHeadersSortedMap]() {
          if (this[kHeadersList][kHeadersSortedMap]) {
            return this[kHeadersList][kHeadersSortedMap];
          }
          const headers = [];
          const names = [...this[kHeadersList]].sort((a, b) =>
            a[0] < b[0] ? -1 : 1,
          );
          const cookies = this[kHeadersList].cookies;
          for (let i = 0; i < names.length; ++i) {
            const [name, value] = names[i];
            if (name === "set-cookie") {
              for (let j = 0; j < cookies.length; ++j) {
                headers.push([name, cookies[j]]);
              }
            } else {
              assert(value !== null);
              headers.push([name, value]);
            }
          }
          this[kHeadersList][kHeadersSortedMap] = headers;
          return headers;
        }
        keys() {
          webidl.brandCheck(this, _Headers);
          if (this[kGuard] === "immutable") {
            const value = this[kHeadersSortedMap];
            return makeIterator(() => value, "Headers", "key");
          }
          return makeIterator(
            () => [...this[kHeadersSortedMap].values()],
            "Headers",
            "key",
          );
        }
        values() {
          webidl.brandCheck(this, _Headers);
          if (this[kGuard] === "immutable") {
            const value = this[kHeadersSortedMap];
            return makeIterator(() => value, "Headers", "value");
          }
          return makeIterator(
            () => [...this[kHeadersSortedMap].values()],
            "Headers",
            "value",
          );
        }
        entries() {
          webidl.brandCheck(this, _Headers);
          if (this[kGuard] === "immutable") {
            const value = this[kHeadersSortedMap];
            return makeIterator(() => value, "Headers", "key+value");
          }
          return makeIterator(
            () => [...this[kHeadersSortedMap].values()],
            "Headers",
            "key+value",
          );
        }
        /**
         * @param {(value: string, key: string, self: Headers) => void} callbackFn
         * @param {unknown} thisArg
         */
        forEach(callbackFn, thisArg = globalThis) {
          webidl.brandCheck(this, _Headers);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "Headers.forEach",
          });
          if (typeof callbackFn !== "function") {
            throw new TypeError(
              "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.",
            );
          }
          for (const [key, value] of this) {
            callbackFn.apply(thisArg, [value, key, this]);
          }
        }
        [Symbol.for("nodejs.util.inspect.custom")]() {
          webidl.brandCheck(this, _Headers);
          return this[kHeadersList];
        }
      };
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      Object.defineProperties(Headers.prototype, {
        append: kEnumerableProperty,
        delete: kEnumerableProperty,
        get: kEnumerableProperty,
        has: kEnumerableProperty,
        set: kEnumerableProperty,
        getSetCookie: kEnumerableProperty,
        keys: kEnumerableProperty,
        values: kEnumerableProperty,
        entries: kEnumerableProperty,
        forEach: kEnumerableProperty,
        [Symbol.iterator]: { enumerable: false },
        [Symbol.toStringTag]: {
          value: "Headers",
          configurable: true,
        },
      });
      webidl.converters.HeadersInit = function (V) {
        if (webidl.util.Type(V) === "Object") {
          if (V[Symbol.iterator]) {
            return webidl.converters["sequence<sequence<ByteString>>"](V);
          }
          return webidl.converters["record<ByteString, ByteString>"](V);
        }
        throw webidl.errors.conversionFailed({
          prefix: "Headers constructor",
          argument: "Argument 1",
          types: [
            "sequence<sequence<ByteString>>",
            "record<ByteString, ByteString>",
          ],
        });
      };
      module.exports = {
        fill,
        Headers,
        HeadersList,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/response.js
  var require_response = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/response.js"(
      exports,
      module,
    ) {
      "use strict";
      var { Headers, HeadersList, fill } = require_headers();
      var { extractBody, cloneBody, mixinBody } = require_body();
      var util2 = require_util();
      var { kEnumerableProperty } = util2;
      var {
        isValidReasonPhrase,
        isCancelled,
        isAborted,
        isBlobLike,
        serializeJavascriptValueToJSONString,
        isErrorLike,
        isomorphicEncode,
      } = require_util2();
      var {
        redirectStatusSet,
        nullBodyStatus,
        DOMException: DOMException2,
      } = require_constants2();
      var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
      var { webidl } = require_webidl();
      var { FormData } = require_formdata();
      var { getGlobalOrigin } = require_global();
      var { URLSerializer } = require_dataURL();
      var { kHeadersList, kConstruct } = require_symbols();
      var assert = __require("assert");
      var { types } = __require("util");
      var ReadableStream =
        globalThis.ReadableStream || __require("stream/web").ReadableStream;
      var textEncoder = new TextEncoder("utf-8");
      var Response = class _Response {
        static {
          __name(this, "Response");
        }
        // Creates network error Response.
        static error() {
          const relevantRealm = { settingsObject: {} };
          const responseObject = new _Response();
          responseObject[kState] = makeNetworkError();
          responseObject[kRealm] = relevantRealm;
          responseObject[kHeaders][kHeadersList] =
            responseObject[kState].headersList;
          responseObject[kHeaders][kGuard] = "immutable";
          responseObject[kHeaders][kRealm] = relevantRealm;
          return responseObject;
        }
        // https://fetch.spec.whatwg.org/#dom-response-json
        static json(data, init = {}) {
          webidl.argumentLengthCheck(arguments, 1, { header: "Response.json" });
          if (init !== null) {
            init = webidl.converters.ResponseInit(init);
          }
          const bytes = textEncoder.encode(
            serializeJavascriptValueToJSONString(data),
          );
          const body = extractBody(bytes);
          const relevantRealm = { settingsObject: {} };
          const responseObject = new _Response();
          responseObject[kRealm] = relevantRealm;
          responseObject[kHeaders][kGuard] = "response";
          responseObject[kHeaders][kRealm] = relevantRealm;
          initializeResponse(responseObject, init, {
            body: body[0],
            type: "application/json",
          });
          return responseObject;
        }
        // Creates a redirect Response that redirects to url with status status.
        static redirect(url, status = 302) {
          const relevantRealm = { settingsObject: {} };
          webidl.argumentLengthCheck(arguments, 1, {
            header: "Response.redirect",
          });
          url = webidl.converters.USVString(url);
          status = webidl.converters["unsigned short"](status);
          let parsedURL;
          try {
            parsedURL = new URL(url, getGlobalOrigin());
          } catch (err) {
            throw Object.assign(
              new TypeError("Failed to parse URL from " + url),
              {
                cause: err,
              },
            );
          }
          if (!redirectStatusSet.has(status)) {
            throw new RangeError("Invalid status code " + status);
          }
          const responseObject = new _Response();
          responseObject[kRealm] = relevantRealm;
          responseObject[kHeaders][kGuard] = "immutable";
          responseObject[kHeaders][kRealm] = relevantRealm;
          responseObject[kState].status = status;
          const value = isomorphicEncode(URLSerializer(parsedURL));
          responseObject[kState].headersList.append("location", value);
          return responseObject;
        }
        // https://fetch.spec.whatwg.org/#dom-response
        constructor(body = null, init = {}) {
          if (body !== null) {
            body = webidl.converters.BodyInit(body);
          }
          init = webidl.converters.ResponseInit(init);
          this[kRealm] = { settingsObject: {} };
          this[kState] = makeResponse({});
          this[kHeaders] = new Headers(kConstruct);
          this[kHeaders][kGuard] = "response";
          this[kHeaders][kHeadersList] = this[kState].headersList;
          this[kHeaders][kRealm] = this[kRealm];
          let bodyWithType = null;
          if (body != null) {
            const [extractedBody, type] = extractBody(body);
            bodyWithType = { body: extractedBody, type };
          }
          initializeResponse(this, init, bodyWithType);
        }
        // Returns response’s type, e.g., "cors".
        get type() {
          webidl.brandCheck(this, _Response);
          return this[kState].type;
        }
        // Returns response’s URL, if it has one; otherwise the empty string.
        get url() {
          webidl.brandCheck(this, _Response);
          const urlList = this[kState].urlList;
          const url = urlList[urlList.length - 1] ?? null;
          if (url === null) {
            return "";
          }
          return URLSerializer(url, true);
        }
        // Returns whether response was obtained through a redirect.
        get redirected() {
          webidl.brandCheck(this, _Response);
          return this[kState].urlList.length > 1;
        }
        // Returns response’s status.
        get status() {
          webidl.brandCheck(this, _Response);
          return this[kState].status;
        }
        // Returns whether response’s status is an ok status.
        get ok() {
          webidl.brandCheck(this, _Response);
          return this[kState].status >= 200 && this[kState].status <= 299;
        }
        // Returns response’s status message.
        get statusText() {
          webidl.brandCheck(this, _Response);
          return this[kState].statusText;
        }
        // Returns response’s headers as Headers.
        get headers() {
          webidl.brandCheck(this, _Response);
          return this[kHeaders];
        }
        get body() {
          webidl.brandCheck(this, _Response);
          return this[kState].body ? this[kState].body.stream : null;
        }
        get bodyUsed() {
          webidl.brandCheck(this, _Response);
          return (
            !!this[kState].body && util2.isDisturbed(this[kState].body.stream)
          );
        }
        // Returns a clone of response.
        clone() {
          webidl.brandCheck(this, _Response);
          if (this.bodyUsed || (this.body && this.body.locked)) {
            throw webidl.errors.exception({
              header: "Response.clone",
              message: "Body has already been consumed.",
            });
          }
          const clonedResponse = cloneResponse(this[kState]);
          const clonedResponseObject = new _Response();
          clonedResponseObject[kState] = clonedResponse;
          clonedResponseObject[kRealm] = this[kRealm];
          clonedResponseObject[kHeaders][kHeadersList] =
            clonedResponse.headersList;
          clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard];
          clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm];
          return clonedResponseObject;
        }
      };
      mixinBody(Response);
      Object.defineProperties(Response.prototype, {
        type: kEnumerableProperty,
        url: kEnumerableProperty,
        status: kEnumerableProperty,
        ok: kEnumerableProperty,
        redirected: kEnumerableProperty,
        statusText: kEnumerableProperty,
        headers: kEnumerableProperty,
        clone: kEnumerableProperty,
        body: kEnumerableProperty,
        bodyUsed: kEnumerableProperty,
        [Symbol.toStringTag]: {
          value: "Response",
          configurable: true,
        },
      });
      Object.defineProperties(Response, {
        json: kEnumerableProperty,
        redirect: kEnumerableProperty,
        error: kEnumerableProperty,
      });
      function cloneResponse(response) {
        if (response.internalResponse) {
          return filterResponse(
            cloneResponse(response.internalResponse),
            response.type,
          );
        }
        const newResponse = makeResponse({ ...response, body: null });
        if (response.body != null) {
          newResponse.body = cloneBody(response.body);
        }
        return newResponse;
      }
      __name(cloneResponse, "cloneResponse");
      function makeResponse(init) {
        return {
          aborted: false,
          rangeRequested: false,
          timingAllowPassed: false,
          requestIncludesCredentials: false,
          type: "default",
          status: 200,
          timingInfo: null,
          cacheState: "",
          statusText: "",
          ...init,
          headersList: init.headersList
            ? new HeadersList(init.headersList)
            : new HeadersList(),
          urlList: init.urlList ? [...init.urlList] : [],
        };
      }
      __name(makeResponse, "makeResponse");
      function makeNetworkError(reason) {
        const isError = isErrorLike(reason);
        return makeResponse({
          type: "error",
          status: 0,
          error: isError ? reason : new Error(reason ? String(reason) : reason),
          aborted: reason && reason.name === "AbortError",
        });
      }
      __name(makeNetworkError, "makeNetworkError");
      function makeFilteredResponse(response, state) {
        state = {
          internalResponse: response,
          ...state,
        };
        return new Proxy(response, {
          get(target, p) {
            return p in state ? state[p] : target[p];
          },
          set(target, p, value) {
            assert(!(p in state));
            target[p] = value;
            return true;
          },
        });
      }
      __name(makeFilteredResponse, "makeFilteredResponse");
      function filterResponse(response, type) {
        if (type === "basic") {
          return makeFilteredResponse(response, {
            type: "basic",
            headersList: response.headersList,
          });
        } else if (type === "cors") {
          return makeFilteredResponse(response, {
            type: "cors",
            headersList: response.headersList,
          });
        } else if (type === "opaque") {
          return makeFilteredResponse(response, {
            type: "opaque",
            urlList: Object.freeze([]),
            status: 0,
            statusText: "",
            body: null,
          });
        } else if (type === "opaqueredirect") {
          return makeFilteredResponse(response, {
            type: "opaqueredirect",
            status: 0,
            statusText: "",
            headersList: [],
            body: null,
          });
        } else {
          assert(false);
        }
      }
      __name(filterResponse, "filterResponse");
      function makeAppropriateNetworkError(fetchParams, err = null) {
        assert(isCancelled(fetchParams));
        return isAborted(fetchParams)
          ? makeNetworkError(
              Object.assign(
                new DOMException2("The operation was aborted.", "AbortError"),
                { cause: err },
              ),
            )
          : makeNetworkError(
              Object.assign(new DOMException2("Request was cancelled."), {
                cause: err,
              }),
            );
      }
      __name(makeAppropriateNetworkError, "makeAppropriateNetworkError");
      function initializeResponse(response, init, body) {
        if (init.status !== null && (init.status < 200 || init.status > 599)) {
          throw new RangeError(
            'init["status"] must be in the range of 200 to 599, inclusive.',
          );
        }
        if ("statusText" in init && init.statusText != null) {
          if (!isValidReasonPhrase(String(init.statusText))) {
            throw new TypeError("Invalid statusText");
          }
        }
        if ("status" in init && init.status != null) {
          response[kState].status = init.status;
        }
        if ("statusText" in init && init.statusText != null) {
          response[kState].statusText = init.statusText;
        }
        if ("headers" in init && init.headers != null) {
          fill(response[kHeaders], init.headers);
        }
        if (body) {
          if (nullBodyStatus.includes(response.status)) {
            throw webidl.errors.exception({
              header: "Response constructor",
              message: "Invalid response status code " + response.status,
            });
          }
          response[kState].body = body.body;
          if (
            body.type != null &&
            !response[kState].headersList.contains("Content-Type")
          ) {
            response[kState].headersList.append("content-type", body.type);
          }
        }
      }
      __name(initializeResponse, "initializeResponse");
      webidl.converters.ReadableStream =
        webidl.interfaceConverter(ReadableStream);
      webidl.converters.FormData = webidl.interfaceConverter(FormData);
      webidl.converters.URLSearchParams =
        webidl.interfaceConverter(URLSearchParams);
      webidl.converters.XMLHttpRequestBodyInit = function (V) {
        if (typeof V === "string") {
          return webidl.converters.USVString(V);
        }
        if (isBlobLike(V)) {
          return webidl.converters.Blob(V, { strict: false });
        }
        if (
          types.isArrayBuffer(V) ||
          types.isTypedArray(V) ||
          types.isDataView(V)
        ) {
          return webidl.converters.BufferSource(V);
        }
        if (util2.isFormDataLike(V)) {
          return webidl.converters.FormData(V, { strict: false });
        }
        if (V instanceof URLSearchParams) {
          return webidl.converters.URLSearchParams(V);
        }
        return webidl.converters.DOMString(V);
      };
      webidl.converters.BodyInit = function (V) {
        if (V instanceof ReadableStream) {
          return webidl.converters.ReadableStream(V);
        }
        if (V?.[Symbol.asyncIterator]) {
          return V;
        }
        return webidl.converters.XMLHttpRequestBodyInit(V);
      };
      webidl.converters.ResponseInit = webidl.dictionaryConverter([
        {
          key: "status",
          converter: webidl.converters["unsigned short"],
          defaultValue: 200,
        },
        {
          key: "statusText",
          converter: webidl.converters.ByteString,
          defaultValue: "",
        },
        {
          key: "headers",
          converter: webidl.converters.HeadersInit,
        },
      ]);
      module.exports = {
        makeNetworkError,
        makeResponse,
        makeAppropriateNetworkError,
        filterResponse,
        Response,
        cloneResponse,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/request.js
  var require_request2 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/request.js"(
      exports,
      module,
    ) {
      "use strict";
      var { extractBody, mixinBody, cloneBody } = require_body();
      var { Headers, fill: fillHeaders, HeadersList } = require_headers();
      var { FinalizationRegistry } = require_dispatcher_weakref()();
      var util2 = require_util();
      var {
        isValidHTTPToken,
        sameOrigin,
        normalizeMethod,
        makePolicyContainer,
        normalizeMethodRecord,
      } = require_util2();
      var {
        forbiddenMethodsSet,
        corsSafeListedMethodsSet,
        referrerPolicy,
        requestRedirect,
        requestMode,
        requestCredentials,
        requestCache,
        requestDuplex,
      } = require_constants2();
      var { kEnumerableProperty } = util2;
      var { kHeaders, kSignal, kState, kGuard, kRealm } = require_symbols2();
      var { webidl } = require_webidl();
      var { getGlobalOrigin } = require_global();
      var { URLSerializer } = require_dataURL();
      var { kHeadersList, kConstruct } = require_symbols();
      var assert = __require("assert");
      var {
        getMaxListeners,
        setMaxListeners,
        getEventListeners,
        defaultMaxListeners,
      } = __require("events");
      var TransformStream = globalThis.TransformStream;
      var kAbortController = Symbol("abortController");
      var requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
        signal.removeEventListener("abort", abort);
      });
      var Request = class _Request {
        static {
          __name(this, "Request");
        }
        // https://fetch.spec.whatwg.org/#dom-request
        constructor(input, init = {}) {
          if (input === kConstruct) {
            return;
          }
          webidl.argumentLengthCheck(arguments, 1, {
            header: "Request constructor",
          });
          input = webidl.converters.RequestInfo(input);
          init = webidl.converters.RequestInit(init);
          this[kRealm] = {
            settingsObject: {
              baseUrl: getGlobalOrigin(),
              get origin() {
                return this.baseUrl?.origin;
              },
              policyContainer: makePolicyContainer(),
            },
          };
          let request = null;
          let fallbackMode = null;
          const baseUrl = this[kRealm].settingsObject.baseUrl;
          let signal = null;
          if (typeof input === "string") {
            let parsedURL;
            try {
              parsedURL = new URL(input, baseUrl);
            } catch (err) {
              throw new TypeError("Failed to parse URL from " + input, {
                cause: err,
              });
            }
            if (parsedURL.username || parsedURL.password) {
              throw new TypeError(
                "Request cannot be constructed from a URL that includes credentials: " +
                  input,
              );
            }
            request = makeRequest({ urlList: [parsedURL] });
            fallbackMode = "cors";
          } else {
            assert(input instanceof _Request);
            request = input[kState];
            signal = input[kSignal];
          }
          const origin = this[kRealm].settingsObject.origin;
          let window2 = "client";
          if (
            request.window?.constructor?.name === "EnvironmentSettingsObject" &&
            sameOrigin(request.window, origin)
          ) {
            window2 = request.window;
          }
          if (init.window != null) {
            throw new TypeError(`'window' option '${window2}' must be null`);
          }
          if ("window" in init) {
            window2 = "no-window";
          }
          request = makeRequest({
            // URL request’s URL.
            // undici implementation note: this is set as the first item in request's urlList in makeRequest
            // method request’s method.
            method: request.method,
            // header list A copy of request’s header list.
            // undici implementation note: headersList is cloned in makeRequest
            headersList: request.headersList,
            // unsafe-request flag Set.
            unsafeRequest: request.unsafeRequest,
            // client This’s relevant settings object.
            client: this[kRealm].settingsObject,
            // window window.
            window: window2,
            // priority request’s priority.
            priority: request.priority,
            // origin request’s origin. The propagation of the origin is only significant for navigation requests
            // being handled by a service worker. In this scenario a request can have an origin that is different
            // from the current client.
            origin: request.origin,
            // referrer request’s referrer.
            referrer: request.referrer,
            // referrer policy request’s referrer policy.
            referrerPolicy: request.referrerPolicy,
            // mode request’s mode.
            mode: request.mode,
            // credentials mode request’s credentials mode.
            credentials: request.credentials,
            // cache mode request’s cache mode.
            cache: request.cache,
            // redirect mode request’s redirect mode.
            redirect: request.redirect,
            // integrity metadata request’s integrity metadata.
            integrity: request.integrity,
            // keepalive request’s keepalive.
            keepalive: request.keepalive,
            // reload-navigation flag request’s reload-navigation flag.
            reloadNavigation: request.reloadNavigation,
            // history-navigation flag request’s history-navigation flag.
            historyNavigation: request.historyNavigation,
            // URL list A clone of request’s URL list.
            urlList: [...request.urlList],
          });
          const initHasKey = Object.keys(init).length !== 0;
          if (initHasKey) {
            if (request.mode === "navigate") {
              request.mode = "same-origin";
            }
            request.reloadNavigation = false;
            request.historyNavigation = false;
            request.origin = "client";
            request.referrer = "client";
            request.referrerPolicy = "";
            request.url = request.urlList[request.urlList.length - 1];
            request.urlList = [request.url];
          }
          if (init.referrer !== void 0) {
            const referrer = init.referrer;
            if (referrer === "") {
              request.referrer = "no-referrer";
            } else {
              let parsedReferrer;
              try {
                parsedReferrer = new URL(referrer, baseUrl);
              } catch (err) {
                throw new TypeError(
                  `Referrer "${referrer}" is not a valid URL.`,
                  { cause: err },
                );
              }
              if (
                (parsedReferrer.protocol === "about:" &&
                  parsedReferrer.hostname === "client") ||
                (origin &&
                  !sameOrigin(
                    parsedReferrer,
                    this[kRealm].settingsObject.baseUrl,
                  ))
              ) {
                request.referrer = "client";
              } else {
                request.referrer = parsedReferrer;
              }
            }
          }
          if (init.referrerPolicy !== void 0) {
            request.referrerPolicy = init.referrerPolicy;
          }
          let mode;
          if (init.mode !== void 0) {
            mode = init.mode;
          } else {
            mode = fallbackMode;
          }
          if (mode === "navigate") {
            throw webidl.errors.exception({
              header: "Request constructor",
              message: "invalid request mode navigate.",
            });
          }
          if (mode != null) {
            request.mode = mode;
          }
          if (init.credentials !== void 0) {
            request.credentials = init.credentials;
          }
          if (init.cache !== void 0) {
            request.cache = init.cache;
          }
          if (
            request.cache === "only-if-cached" &&
            request.mode !== "same-origin"
          ) {
            throw new TypeError(
              "'only-if-cached' can be set only with 'same-origin' mode",
            );
          }
          if (init.redirect !== void 0) {
            request.redirect = init.redirect;
          }
          if (init.integrity != null) {
            request.integrity = String(init.integrity);
          }
          if (init.keepalive !== void 0) {
            request.keepalive = Boolean(init.keepalive);
          }
          if (init.method !== void 0) {
            let method = init.method;
            if (!isValidHTTPToken(method)) {
              throw new TypeError(`'${method}' is not a valid HTTP method.`);
            }
            if (forbiddenMethodsSet.has(method.toUpperCase())) {
              throw new TypeError(`'${method}' HTTP method is unsupported.`);
            }
            method = normalizeMethodRecord[method] ?? normalizeMethod(method);
            request.method = method;
          }
          if (init.signal !== void 0) {
            signal = init.signal;
          }
          this[kState] = request;
          const ac = new AbortController();
          this[kSignal] = ac.signal;
          this[kSignal][kRealm] = this[kRealm];
          if (signal != null) {
            if (
              !signal ||
              typeof signal.aborted !== "boolean" ||
              typeof signal.addEventListener !== "function"
            ) {
              throw new TypeError(
                "Failed to construct 'Request': member signal is not of type AbortSignal.",
              );
            }
            if (signal.aborted) {
              ac.abort(signal.reason);
            } else {
              this[kAbortController] = ac;
              const acRef = new WeakRef(ac);
              const abort = /* @__PURE__ */ __name(function () {
                const ac2 = acRef.deref();
                if (ac2 !== void 0) {
                  ac2.abort(this.reason);
                }
              }, "abort");
              try {
                if (
                  typeof getMaxListeners === "function" &&
                  getMaxListeners(signal) === defaultMaxListeners
                ) {
                  setMaxListeners(100, signal);
                } else if (
                  getEventListeners(signal, "abort").length >=
                  defaultMaxListeners
                ) {
                  setMaxListeners(100, signal);
                }
              } catch {}
              util2.addAbortListener(signal, abort);
              requestFinalizer.register(ac, { signal, abort });
            }
          }
          this[kHeaders] = new Headers(kConstruct);
          this[kHeaders][kHeadersList] = request.headersList;
          this[kHeaders][kGuard] = "request";
          this[kHeaders][kRealm] = this[kRealm];
          if (mode === "no-cors") {
            if (!corsSafeListedMethodsSet.has(request.method)) {
              throw new TypeError(
                `'${request.method} is unsupported in no-cors mode.`,
              );
            }
            this[kHeaders][kGuard] = "request-no-cors";
          }
          if (initHasKey) {
            const headersList = this[kHeaders][kHeadersList];
            const headers =
              init.headers !== void 0
                ? init.headers
                : new HeadersList(headersList);
            headersList.clear();
            if (headers instanceof HeadersList) {
              for (const [key, val] of headers) {
                headersList.append(key, val);
              }
              headersList.cookies = headers.cookies;
            } else {
              fillHeaders(this[kHeaders], headers);
            }
          }
          const inputBody =
            input instanceof _Request ? input[kState].body : null;
          if (
            (init.body != null || inputBody != null) &&
            (request.method === "GET" || request.method === "HEAD")
          ) {
            throw new TypeError(
              "Request with GET/HEAD method cannot have body.",
            );
          }
          let initBody = null;
          if (init.body != null) {
            const [extractedBody, contentType] = extractBody(
              init.body,
              request.keepalive,
            );
            initBody = extractedBody;
            if (
              contentType &&
              !this[kHeaders][kHeadersList].contains("content-type")
            ) {
              this[kHeaders].append("content-type", contentType);
            }
          }
          const inputOrInitBody = initBody ?? inputBody;
          if (inputOrInitBody != null && inputOrInitBody.source == null) {
            if (initBody != null && init.duplex == null) {
              throw new TypeError(
                "RequestInit: duplex option is required when sending a body.",
              );
            }
            if (request.mode !== "same-origin" && request.mode !== "cors") {
              throw new TypeError(
                'If request is made from ReadableStream, mode should be "same-origin" or "cors"',
              );
            }
            request.useCORSPreflightFlag = true;
          }
          let finalBody = inputOrInitBody;
          if (initBody == null && inputBody != null) {
            if (
              util2.isDisturbed(inputBody.stream) ||
              inputBody.stream.locked
            ) {
              throw new TypeError(
                "Cannot construct a Request with a Request object that has already been used.",
              );
            }
            if (!TransformStream) {
              TransformStream = __require("stream/web").TransformStream;
            }
            const identityTransform = new TransformStream();
            inputBody.stream.pipeThrough(identityTransform);
            finalBody = {
              source: inputBody.source,
              length: inputBody.length,
              stream: identityTransform.readable,
            };
          }
          this[kState].body = finalBody;
        }
        // Returns request’s HTTP method, which is "GET" by default.
        get method() {
          webidl.brandCheck(this, _Request);
          return this[kState].method;
        }
        // Returns the URL of request as a string.
        get url() {
          webidl.brandCheck(this, _Request);
          return URLSerializer(this[kState].url);
        }
        // Returns a Headers object consisting of the headers associated with request.
        // Note that headers added in the network layer by the user agent will not
        // be accounted for in this object, e.g., the "Host" header.
        get headers() {
          webidl.brandCheck(this, _Request);
          return this[kHeaders];
        }
        // Returns the kind of resource requested by request, e.g., "document"
        // or "script".
        get destination() {
          webidl.brandCheck(this, _Request);
          return this[kState].destination;
        }
        // Returns the referrer of request. Its value can be a same-origin URL if
        // explicitly set in init, the empty string to indicate no referrer, and
        // "about:client" when defaulting to the global’s default. This is used
        // during fetching to determine the value of the `Referer` header of the
        // request being made.
        get referrer() {
          webidl.brandCheck(this, _Request);
          if (this[kState].referrer === "no-referrer") {
            return "";
          }
          if (this[kState].referrer === "client") {
            return "about:client";
          }
          return this[kState].referrer.toString();
        }
        // Returns the referrer policy associated with request.
        // This is used during fetching to compute the value of the request’s
        // referrer.
        get referrerPolicy() {
          webidl.brandCheck(this, _Request);
          return this[kState].referrerPolicy;
        }
        // Returns the mode associated with request, which is a string indicating
        // whether the request will use CORS, or will be restricted to same-origin
        // URLs.
        get mode() {
          webidl.brandCheck(this, _Request);
          return this[kState].mode;
        }
        // Returns the credentials mode associated with request,
        // which is a string indicating whether credentials will be sent with the
        // request always, never, or only when sent to a same-origin URL.
        get credentials() {
          return this[kState].credentials;
        }
        // Returns the cache mode associated with request,
        // which is a string indicating how the request will
        // interact with the browser’s cache when fetching.
        get cache() {
          webidl.brandCheck(this, _Request);
          return this[kState].cache;
        }
        // Returns the redirect mode associated with request,
        // which is a string indicating how redirects for the
        // request will be handled during fetching. A request
        // will follow redirects by default.
        get redirect() {
          webidl.brandCheck(this, _Request);
          return this[kState].redirect;
        }
        // Returns request’s subresource integrity metadata, which is a
        // cryptographic hash of the resource being fetched. Its value
        // consists of multiple hashes separated by whitespace. [SRI]
        get integrity() {
          webidl.brandCheck(this, _Request);
          return this[kState].integrity;
        }
        // Returns a boolean indicating whether or not request can outlive the
        // global in which it was created.
        get keepalive() {
          webidl.brandCheck(this, _Request);
          return this[kState].keepalive;
        }
        // Returns a boolean indicating whether or not request is for a reload
        // navigation.
        get isReloadNavigation() {
          webidl.brandCheck(this, _Request);
          return this[kState].reloadNavigation;
        }
        // Returns a boolean indicating whether or not request is for a history
        // navigation (a.k.a. back-foward navigation).
        get isHistoryNavigation() {
          webidl.brandCheck(this, _Request);
          return this[kState].historyNavigation;
        }
        // Returns the signal associated with request, which is an AbortSignal
        // object indicating whether or not request has been aborted, and its
        // abort event handler.
        get signal() {
          webidl.brandCheck(this, _Request);
          return this[kSignal];
        }
        get body() {
          webidl.brandCheck(this, _Request);
          return this[kState].body ? this[kState].body.stream : null;
        }
        get bodyUsed() {
          webidl.brandCheck(this, _Request);
          return (
            !!this[kState].body && util2.isDisturbed(this[kState].body.stream)
          );
        }
        get duplex() {
          webidl.brandCheck(this, _Request);
          return "half";
        }
        // Returns a clone of request.
        clone() {
          webidl.brandCheck(this, _Request);
          if (this.bodyUsed || this.body?.locked) {
            throw new TypeError("unusable");
          }
          const clonedRequest = cloneRequest(this[kState]);
          const clonedRequestObject = new _Request(kConstruct);
          clonedRequestObject[kState] = clonedRequest;
          clonedRequestObject[kRealm] = this[kRealm];
          clonedRequestObject[kHeaders] = new Headers(kConstruct);
          clonedRequestObject[kHeaders][kHeadersList] =
            clonedRequest.headersList;
          clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
          clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
          const ac = new AbortController();
          if (this.signal.aborted) {
            ac.abort(this.signal.reason);
          } else {
            util2.addAbortListener(this.signal, () => {
              ac.abort(this.signal.reason);
            });
          }
          clonedRequestObject[kSignal] = ac.signal;
          return clonedRequestObject;
        }
      };
      mixinBody(Request);
      function makeRequest(init) {
        const request = {
          method: "GET",
          localURLsOnly: false,
          unsafeRequest: false,
          body: null,
          client: null,
          reservedClient: null,
          replacesClientId: "",
          window: "client",
          keepalive: false,
          serviceWorkers: "all",
          initiator: "",
          destination: "",
          priority: null,
          origin: "client",
          policyContainer: "client",
          referrer: "client",
          referrerPolicy: "",
          mode: "no-cors",
          useCORSPreflightFlag: false,
          credentials: "same-origin",
          useCredentials: false,
          cache: "default",
          redirect: "follow",
          integrity: "",
          cryptoGraphicsNonceMetadata: "",
          parserMetadata: "",
          reloadNavigation: false,
          historyNavigation: false,
          userActivation: false,
          taintedOrigin: false,
          redirectCount: 0,
          responseTainting: "basic",
          preventNoCacheCacheControlHeaderModification: false,
          done: false,
          timingAllowFailed: false,
          ...init,
          headersList: init.headersList
            ? new HeadersList(init.headersList)
            : new HeadersList(),
        };
        request.url = request.urlList[0];
        return request;
      }
      __name(makeRequest, "makeRequest");
      function cloneRequest(request) {
        const newRequest = makeRequest({ ...request, body: null });
        if (request.body != null) {
          newRequest.body = cloneBody(request.body);
        }
        return newRequest;
      }
      __name(cloneRequest, "cloneRequest");
      Object.defineProperties(Request.prototype, {
        method: kEnumerableProperty,
        url: kEnumerableProperty,
        headers: kEnumerableProperty,
        redirect: kEnumerableProperty,
        clone: kEnumerableProperty,
        signal: kEnumerableProperty,
        duplex: kEnumerableProperty,
        destination: kEnumerableProperty,
        body: kEnumerableProperty,
        bodyUsed: kEnumerableProperty,
        isHistoryNavigation: kEnumerableProperty,
        isReloadNavigation: kEnumerableProperty,
        keepalive: kEnumerableProperty,
        integrity: kEnumerableProperty,
        cache: kEnumerableProperty,
        credentials: kEnumerableProperty,
        attribute: kEnumerableProperty,
        referrerPolicy: kEnumerableProperty,
        referrer: kEnumerableProperty,
        mode: kEnumerableProperty,
        [Symbol.toStringTag]: {
          value: "Request",
          configurable: true,
        },
      });
      webidl.converters.Request = webidl.interfaceConverter(Request);
      webidl.converters.RequestInfo = function (V) {
        if (typeof V === "string") {
          return webidl.converters.USVString(V);
        }
        if (V instanceof Request) {
          return webidl.converters.Request(V);
        }
        return webidl.converters.USVString(V);
      };
      webidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);
      webidl.converters.RequestInit = webidl.dictionaryConverter([
        {
          key: "method",
          converter: webidl.converters.ByteString,
        },
        {
          key: "headers",
          converter: webidl.converters.HeadersInit,
        },
        {
          key: "body",
          converter: webidl.nullableConverter(webidl.converters.BodyInit),
        },
        {
          key: "referrer",
          converter: webidl.converters.USVString,
        },
        {
          key: "referrerPolicy",
          converter: webidl.converters.DOMString,
          // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy
          allowedValues: referrerPolicy,
        },
        {
          key: "mode",
          converter: webidl.converters.DOMString,
          // https://fetch.spec.whatwg.org/#concept-request-mode
          allowedValues: requestMode,
        },
        {
          key: "credentials",
          converter: webidl.converters.DOMString,
          // https://fetch.spec.whatwg.org/#requestcredentials
          allowedValues: requestCredentials,
        },
        {
          key: "cache",
          converter: webidl.converters.DOMString,
          // https://fetch.spec.whatwg.org/#requestcache
          allowedValues: requestCache,
        },
        {
          key: "redirect",
          converter: webidl.converters.DOMString,
          // https://fetch.spec.whatwg.org/#requestredirect
          allowedValues: requestRedirect,
        },
        {
          key: "integrity",
          converter: webidl.converters.DOMString,
        },
        {
          key: "keepalive",
          converter: webidl.converters.boolean,
        },
        {
          key: "signal",
          converter: webidl.nullableConverter((signal) =>
            webidl.converters.AbortSignal(signal, { strict: false }),
          ),
        },
        {
          key: "window",
          converter: webidl.converters.any,
        },
        {
          key: "duplex",
          converter: webidl.converters.DOMString,
          allowedValues: requestDuplex,
        },
      ]);
      module.exports = { Request, makeRequest };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/index.js
  var require_fetch = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fetch/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var {
        Response,
        makeNetworkError,
        makeAppropriateNetworkError,
        filterResponse,
        makeResponse,
      } = require_response();
      var { Headers } = require_headers();
      var { Request, makeRequest } = require_request2();
      var zlib = __require("zlib");
      var {
        bytesMatch,
        makePolicyContainer,
        clonePolicyContainer,
        requestBadPort,
        TAOCheck,
        appendRequestOriginHeader,
        responseLocationURL,
        requestCurrentURL,
        setRequestReferrerPolicyOnRedirect,
        tryUpgradeRequestToAPotentiallyTrustworthyURL,
        createOpaqueTimingInfo,
        appendFetchMetadata,
        corsCheck,
        crossOriginResourcePolicyCheck,
        determineRequestsReferrer,
        coarsenedSharedCurrentTime,
        createDeferredPromise,
        isBlobLike,
        sameOrigin,
        isCancelled,
        isAborted,
        isErrorLike,
        fullyReadBody,
        readableStreamClose,
        isomorphicEncode,
        urlIsLocal,
        urlIsHttpHttpsScheme,
        urlHasHttpsScheme,
      } = require_util2();
      var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
      var assert = __require("assert");
      var { safelyExtractBody } = require_body();
      var {
        redirectStatusSet,
        nullBodyStatus,
        safeMethodsSet,
        requestBodyHeader,
        subresourceSet,
        DOMException: DOMException2,
      } = require_constants2();
      var { kHeadersList } = require_symbols();
      var EE = __require("events");
      var { Readable, pipeline } = __require("stream");
      var { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } =
        require_util();
      var { dataURLProcessor, serializeAMimeType } = require_dataURL();
      var { TransformStream } = __require("stream/web");
      var { getGlobalDispatcher } = require_global2();
      var { webidl } = require_webidl();
      var { STATUS_CODES } = __require("http");
      var GET_OR_HEAD = ["GET", "HEAD"];
      var resolveObjectURL;
      var ReadableStream = globalThis.ReadableStream;
      var Fetch = class extends EE {
        static {
          __name(this, "Fetch");
        }
        constructor(dispatcher) {
          super();
          this.dispatcher = dispatcher;
          this.connection = null;
          this.dump = false;
          this.state = "ongoing";
          this.setMaxListeners(21);
        }
        terminate(reason) {
          if (this.state !== "ongoing") {
            return;
          }
          this.state = "terminated";
          this.connection?.destroy(reason);
          this.emit("terminated", reason);
        }
        // https://fetch.spec.whatwg.org/#fetch-controller-abort
        abort(error) {
          if (this.state !== "ongoing") {
            return;
          }
          this.state = "aborted";
          if (!error) {
            error = new DOMException2(
              "The operation was aborted.",
              "AbortError",
            );
          }
          this.serializedAbortReason = error;
          this.connection?.destroy(error);
          this.emit("terminated", error);
        }
      };
      function fetch(input, init = {}) {
        webidl.argumentLengthCheck(arguments, 1, {
          header: "globalThis.fetch",
        });
        const p = createDeferredPromise();
        let requestObject;
        try {
          requestObject = new Request(input, init);
        } catch (e) {
          p.reject(e);
          return p.promise;
        }
        const request = requestObject[kState];
        if (requestObject.signal.aborted) {
          abortFetch(p, request, null, requestObject.signal.reason);
          return p.promise;
        }
        const globalObject = request.client.globalObject;
        if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") {
          request.serviceWorkers = "none";
        }
        let responseObject = null;
        const relevantRealm = null;
        let locallyAborted = false;
        let controller = null;
        addAbortListener(requestObject.signal, () => {
          locallyAborted = true;
          assert(controller != null);
          controller.abort(requestObject.signal.reason);
          abortFetch(p, request, responseObject, requestObject.signal.reason);
        });
        const handleFetchDone = /* @__PURE__ */ __name(
          (response) => finalizeAndReportTiming(response, "fetch"),
          "handleFetchDone",
        );
        const processResponse = /* @__PURE__ */ __name((response) => {
          if (locallyAborted) {
            return Promise.resolve();
          }
          if (response.aborted) {
            abortFetch(
              p,
              request,
              responseObject,
              controller.serializedAbortReason,
            );
            return Promise.resolve();
          }
          if (response.type === "error") {
            p.reject(
              Object.assign(new TypeError("fetch failed"), {
                cause: response.error,
              }),
            );
            return Promise.resolve();
          }
          responseObject = new Response();
          responseObject[kState] = response;
          responseObject[kRealm] = relevantRealm;
          responseObject[kHeaders][kHeadersList] = response.headersList;
          responseObject[kHeaders][kGuard] = "immutable";
          responseObject[kHeaders][kRealm] = relevantRealm;
          p.resolve(responseObject);
        }, "processResponse");
        controller = fetching({
          request,
          processResponseEndOfBody: handleFetchDone,
          processResponse,
          dispatcher: init.dispatcher ?? getGlobalDispatcher(),
          // undici
        });
        return p.promise;
      }
      __name(fetch, "fetch");
      function finalizeAndReportTiming(response, initiatorType = "other") {
        if (response.type === "error" && response.aborted) {
          return;
        }
        if (!response.urlList?.length) {
          return;
        }
        const originalURL = response.urlList[0];
        let timingInfo = response.timingInfo;
        let cacheState = response.cacheState;
        if (!urlIsHttpHttpsScheme(originalURL)) {
          return;
        }
        if (timingInfo === null) {
          return;
        }
        if (!response.timingAllowPassed) {
          timingInfo = createOpaqueTimingInfo({
            startTime: timingInfo.startTime,
          });
          cacheState = "";
        }
        timingInfo.endTime = coarsenedSharedCurrentTime();
        response.timingInfo = timingInfo;
        markResourceTiming(
          timingInfo,
          originalURL,
          initiatorType,
          globalThis,
          cacheState,
        );
      }
      __name(finalizeAndReportTiming, "finalizeAndReportTiming");
      function markResourceTiming(
        timingInfo,
        originalURL,
        initiatorType,
        globalThis2,
        cacheState,
      ) {
        if (nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 2)) {
          performance.markResourceTiming(
            timingInfo,
            originalURL.href,
            initiatorType,
            globalThis2,
            cacheState,
          );
        }
      }
      __name(markResourceTiming, "markResourceTiming");
      function abortFetch(p, request, responseObject, error) {
        if (!error) {
          error = new DOMException2("The operation was aborted.", "AbortError");
        }
        p.reject(error);
        if (request.body != null && isReadable(request.body?.stream)) {
          request.body.stream.cancel(error).catch((err) => {
            if (err.code === "ERR_INVALID_STATE") {
              return;
            }
            throw err;
          });
        }
        if (responseObject == null) {
          return;
        }
        const response = responseObject[kState];
        if (response.body != null && isReadable(response.body?.stream)) {
          response.body.stream.cancel(error).catch((err) => {
            if (err.code === "ERR_INVALID_STATE") {
              return;
            }
            throw err;
          });
        }
      }
      __name(abortFetch, "abortFetch");
      function fetching({
        request,
        processRequestBodyChunkLength,
        processRequestEndOfBody,
        processResponse,
        processResponseEndOfBody,
        processResponseConsumeBody,
        useParallelQueue = false,
        dispatcher,
        // undici
      }) {
        let taskDestination = null;
        let crossOriginIsolatedCapability = false;
        if (request.client != null) {
          taskDestination = request.client.globalObject;
          crossOriginIsolatedCapability =
            request.client.crossOriginIsolatedCapability;
        }
        const currenTime = coarsenedSharedCurrentTime(
          crossOriginIsolatedCapability,
        );
        const timingInfo = createOpaqueTimingInfo({
          startTime: currenTime,
        });
        const fetchParams = {
          controller: new Fetch(dispatcher),
          request,
          timingInfo,
          processRequestBodyChunkLength,
          processRequestEndOfBody,
          processResponse,
          processResponseConsumeBody,
          processResponseEndOfBody,
          taskDestination,
          crossOriginIsolatedCapability,
        };
        assert(!request.body || request.body.stream);
        if (request.window === "client") {
          request.window =
            request.client?.globalObject?.constructor?.name === "Window"
              ? request.client
              : "no-window";
        }
        if (request.origin === "client") {
          request.origin = request.client?.origin;
        }
        if (request.policyContainer === "client") {
          if (request.client != null) {
            request.policyContainer = clonePolicyContainer(
              request.client.policyContainer,
            );
          } else {
            request.policyContainer = makePolicyContainer();
          }
        }
        if (!request.headersList.contains("accept")) {
          const value = "*/*";
          request.headersList.append("accept", value);
        }
        if (!request.headersList.contains("accept-language")) {
          request.headersList.append("accept-language", "*");
        }
        if (request.priority === null) {
        }
        if (subresourceSet.has(request.destination)) {
        }
        mainFetch(fetchParams).catch((err) => {
          fetchParams.controller.terminate(err);
        });
        return fetchParams.controller;
      }
      __name(fetching, "fetching");
      async function mainFetch(fetchParams, recursive = false) {
        const request = fetchParams.request;
        let response = null;
        if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {
          response = makeNetworkError("local URLs only");
        }
        tryUpgradeRequestToAPotentiallyTrustworthyURL(request);
        if (requestBadPort(request) === "blocked") {
          response = makeNetworkError("bad port");
        }
        if (request.referrerPolicy === "") {
          request.referrerPolicy = request.policyContainer.referrerPolicy;
        }
        if (request.referrer !== "no-referrer") {
          request.referrer = determineRequestsReferrer(request);
        }
        if (response === null) {
          response = await (async () => {
            const currentURL = requestCurrentURL(request);
            if (
              // - request’s current URL’s origin is same origin with request’s origin,
              //   and request’s response tainting is "basic"
              (sameOrigin(currentURL, request.url) &&
                request.responseTainting === "basic") || // request’s current URL’s scheme is "data"
              currentURL.protocol === "data:" || // - request’s mode is "navigate" or "websocket"
              request.mode === "navigate" ||
              request.mode === "websocket"
            ) {
              request.responseTainting = "basic";
              return await schemeFetch(fetchParams);
            }
            if (request.mode === "same-origin") {
              return makeNetworkError('request mode cannot be "same-origin"');
            }
            if (request.mode === "no-cors") {
              if (request.redirect !== "follow") {
                return makeNetworkError(
                  'redirect mode cannot be "follow" for "no-cors" request',
                );
              }
              request.responseTainting = "opaque";
              return await schemeFetch(fetchParams);
            }
            if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {
              return makeNetworkError("URL scheme must be a HTTP(S) scheme");
            }
            request.responseTainting = "cors";
            return await httpFetch(fetchParams);
          })();
        }
        if (recursive) {
          return response;
        }
        if (response.status !== 0 && !response.internalResponse) {
          if (request.responseTainting === "cors") {
          }
          if (request.responseTainting === "basic") {
            response = filterResponse(response, "basic");
          } else if (request.responseTainting === "cors") {
            response = filterResponse(response, "cors");
          } else if (request.responseTainting === "opaque") {
            response = filterResponse(response, "opaque");
          } else {
            assert(false);
          }
        }
        let internalResponse =
          response.status === 0 ? response : response.internalResponse;
        if (internalResponse.urlList.length === 0) {
          internalResponse.urlList.push(...request.urlList);
        }
        if (!request.timingAllowFailed) {
          response.timingAllowPassed = true;
        }
        if (
          response.type === "opaque" &&
          internalResponse.status === 206 &&
          internalResponse.rangeRequested &&
          !request.headers.contains("range")
        ) {
          response = internalResponse = makeNetworkError();
        }
        if (
          response.status !== 0 &&
          (request.method === "HEAD" ||
            request.method === "CONNECT" ||
            nullBodyStatus.includes(internalResponse.status))
        ) {
          internalResponse.body = null;
          fetchParams.controller.dump = true;
        }
        if (request.integrity) {
          const processBodyError = /* @__PURE__ */ __name(
            (reason) => fetchFinale(fetchParams, makeNetworkError(reason)),
            "processBodyError",
          );
          if (request.responseTainting === "opaque" || response.body == null) {
            processBodyError(response.error);
            return;
          }
          const processBody = /* @__PURE__ */ __name((bytes) => {
            if (!bytesMatch(bytes, request.integrity)) {
              processBodyError("integrity mismatch");
              return;
            }
            response.body = safelyExtractBody(bytes)[0];
            fetchFinale(fetchParams, response);
          }, "processBody");
          await fullyReadBody(response.body, processBody, processBodyError);
        } else {
          fetchFinale(fetchParams, response);
        }
      }
      __name(mainFetch, "mainFetch");
      function schemeFetch(fetchParams) {
        if (
          isCancelled(fetchParams) &&
          fetchParams.request.redirectCount === 0
        ) {
          return Promise.resolve(makeAppropriateNetworkError(fetchParams));
        }
        const { request } = fetchParams;
        const { protocol: scheme } = requestCurrentURL(request);
        switch (scheme) {
          case "about:": {
            return Promise.resolve(
              makeNetworkError("about scheme is not supported"),
            );
          }
          case "blob:": {
            if (!resolveObjectURL) {
              resolveObjectURL = __require("buffer").resolveObjectURL;
            }
            const blobURLEntry = requestCurrentURL(request);
            if (blobURLEntry.search.length !== 0) {
              return Promise.resolve(
                makeNetworkError(
                  "NetworkError when attempting to fetch resource.",
                ),
              );
            }
            const blobURLEntryObject = resolveObjectURL(
              blobURLEntry.toString(),
            );
            if (request.method !== "GET" || !isBlobLike(blobURLEntryObject)) {
              return Promise.resolve(makeNetworkError("invalid method"));
            }
            const bodyWithType = safelyExtractBody(blobURLEntryObject);
            const body = bodyWithType[0];
            const length = isomorphicEncode(`${body.length}`);
            const type = bodyWithType[1] ?? "";
            const response = makeResponse({
              statusText: "OK",
              headersList: [
                ["content-length", { name: "Content-Length", value: length }],
                ["content-type", { name: "Content-Type", value: type }],
              ],
            });
            response.body = body;
            return Promise.resolve(response);
          }
          case "data:": {
            const currentURL = requestCurrentURL(request);
            const dataURLStruct = dataURLProcessor(currentURL);
            if (dataURLStruct === "failure") {
              return Promise.resolve(
                makeNetworkError("failed to fetch the data URL"),
              );
            }
            const mimeType = serializeAMimeType(dataURLStruct.mimeType);
            return Promise.resolve(
              makeResponse({
                statusText: "OK",
                headersList: [
                  ["content-type", { name: "Content-Type", value: mimeType }],
                ],
                body: safelyExtractBody(dataURLStruct.body)[0],
              }),
            );
          }
          case "file:": {
            return Promise.resolve(
              makeNetworkError("not implemented... yet..."),
            );
          }
          case "http:":
          case "https:": {
            return httpFetch(fetchParams).catch((err) => makeNetworkError(err));
          }
          default: {
            return Promise.resolve(makeNetworkError("unknown scheme"));
          }
        }
      }
      __name(schemeFetch, "schemeFetch");
      function finalizeResponse(fetchParams, response) {
        fetchParams.request.done = true;
        if (fetchParams.processResponseDone != null) {
          queueMicrotask(() => fetchParams.processResponseDone(response));
        }
      }
      __name(finalizeResponse, "finalizeResponse");
      function fetchFinale(fetchParams, response) {
        if (response.type === "error") {
          response.urlList = [fetchParams.request.urlList[0]];
          response.timingInfo = createOpaqueTimingInfo({
            startTime: fetchParams.timingInfo.startTime,
          });
        }
        const processResponseEndOfBody = /* @__PURE__ */ __name(() => {
          fetchParams.request.done = true;
          if (fetchParams.processResponseEndOfBody != null) {
            queueMicrotask(() =>
              fetchParams.processResponseEndOfBody(response),
            );
          }
        }, "processResponseEndOfBody");
        if (fetchParams.processResponse != null) {
          queueMicrotask(() => fetchParams.processResponse(response));
        }
        if (response.body == null) {
          processResponseEndOfBody();
        } else {
          const identityTransformAlgorithm = /* @__PURE__ */ __name(
            (chunk, controller) => {
              controller.enqueue(chunk);
            },
            "identityTransformAlgorithm",
          );
          const transformStream = new TransformStream(
            {
              start() {},
              transform: identityTransformAlgorithm,
              flush: processResponseEndOfBody,
            },
            {
              size() {
                return 1;
              },
            },
            {
              size() {
                return 1;
              },
            },
          );
          response.body = {
            stream: response.body.stream.pipeThrough(transformStream),
          };
        }
        if (fetchParams.processResponseConsumeBody != null) {
          const processBody = /* @__PURE__ */ __name(
            (nullOrBytes) =>
              fetchParams.processResponseConsumeBody(response, nullOrBytes),
            "processBody",
          );
          const processBodyError = /* @__PURE__ */ __name(
            (failure) =>
              fetchParams.processResponseConsumeBody(response, failure),
            "processBodyError",
          );
          if (response.body == null) {
            queueMicrotask(() => processBody(null));
          } else {
            return fullyReadBody(response.body, processBody, processBodyError);
          }
          return Promise.resolve();
        }
      }
      __name(fetchFinale, "fetchFinale");
      async function httpFetch(fetchParams) {
        const request = fetchParams.request;
        let response = null;
        let actualResponse = null;
        const timingInfo = fetchParams.timingInfo;
        if (request.serviceWorkers === "all") {
        }
        if (response === null) {
          if (request.redirect === "follow") {
            request.serviceWorkers = "none";
          }
          actualResponse = response =
            await httpNetworkOrCacheFetch(fetchParams);
          if (
            request.responseTainting === "cors" &&
            corsCheck(request, response) === "failure"
          ) {
            return makeNetworkError("cors failure");
          }
          if (TAOCheck(request, response) === "failure") {
            request.timingAllowFailed = true;
          }
        }
        if (
          (request.responseTainting === "opaque" ||
            response.type === "opaque") &&
          crossOriginResourcePolicyCheck(
            request.origin,
            request.client,
            request.destination,
            actualResponse,
          ) === "blocked"
        ) {
          return makeNetworkError("blocked");
        }
        if (redirectStatusSet.has(actualResponse.status)) {
          if (request.redirect !== "manual") {
            fetchParams.controller.connection.destroy();
          }
          if (request.redirect === "error") {
            response = makeNetworkError("unexpected redirect");
          } else if (request.redirect === "manual") {
            response = actualResponse;
          } else if (request.redirect === "follow") {
            response = await httpRedirectFetch(fetchParams, response);
          } else {
            assert(false);
          }
        }
        response.timingInfo = timingInfo;
        return response;
      }
      __name(httpFetch, "httpFetch");
      function httpRedirectFetch(fetchParams, response) {
        const request = fetchParams.request;
        const actualResponse = response.internalResponse
          ? response.internalResponse
          : response;
        let locationURL;
        try {
          locationURL = responseLocationURL(
            actualResponse,
            requestCurrentURL(request).hash,
          );
          if (locationURL == null) {
            return response;
          }
        } catch (err) {
          return Promise.resolve(makeNetworkError(err));
        }
        if (!urlIsHttpHttpsScheme(locationURL)) {
          return Promise.resolve(
            makeNetworkError("URL scheme must be a HTTP(S) scheme"),
          );
        }
        if (request.redirectCount === 20) {
          return Promise.resolve(makeNetworkError("redirect count exceeded"));
        }
        request.redirectCount += 1;
        if (
          request.mode === "cors" &&
          (locationURL.username || locationURL.password) &&
          !sameOrigin(request, locationURL)
        ) {
          return Promise.resolve(
            makeNetworkError(
              'cross origin not allowed for request mode "cors"',
            ),
          );
        }
        if (
          request.responseTainting === "cors" &&
          (locationURL.username || locationURL.password)
        ) {
          return Promise.resolve(
            makeNetworkError(
              'URL cannot contain credentials for request mode "cors"',
            ),
          );
        }
        if (
          actualResponse.status !== 303 &&
          request.body != null &&
          request.body.source == null
        ) {
          return Promise.resolve(makeNetworkError());
        }
        if (
          ([301, 302].includes(actualResponse.status) &&
            request.method === "POST") ||
          (actualResponse.status === 303 &&
            !GET_OR_HEAD.includes(request.method))
        ) {
          request.method = "GET";
          request.body = null;
          for (const headerName of requestBodyHeader) {
            request.headersList.delete(headerName);
          }
        }
        if (!sameOrigin(requestCurrentURL(request), locationURL)) {
          request.headersList.delete("authorization");
          request.headersList.delete("proxy-authorization", true);
          request.headersList.delete("cookie");
          request.headersList.delete("host");
        }
        if (request.body != null) {
          assert(request.body.source != null);
          request.body = safelyExtractBody(request.body.source)[0];
        }
        const timingInfo = fetchParams.timingInfo;
        timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =
          coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
        if (timingInfo.redirectStartTime === 0) {
          timingInfo.redirectStartTime = timingInfo.startTime;
        }
        request.urlList.push(locationURL);
        setRequestReferrerPolicyOnRedirect(request, actualResponse);
        return mainFetch(fetchParams, true);
      }
      __name(httpRedirectFetch, "httpRedirectFetch");
      async function httpNetworkOrCacheFetch(
        fetchParams,
        isAuthenticationFetch = false,
        isNewConnectionFetch = false,
      ) {
        const request = fetchParams.request;
        let httpFetchParams = null;
        let httpRequest = null;
        let response = null;
        const httpCache = null;
        const revalidatingFlag = false;
        if (request.window === "no-window" && request.redirect === "error") {
          httpFetchParams = fetchParams;
          httpRequest = request;
        } else {
          httpRequest = makeRequest(request);
          httpFetchParams = { ...fetchParams };
          httpFetchParams.request = httpRequest;
        }
        const includeCredentials =
          request.credentials === "include" ||
          (request.credentials === "same-origin" &&
            request.responseTainting === "basic");
        const contentLength = httpRequest.body ? httpRequest.body.length : null;
        let contentLengthHeaderValue = null;
        if (
          httpRequest.body == null &&
          ["POST", "PUT"].includes(httpRequest.method)
        ) {
          contentLengthHeaderValue = "0";
        }
        if (contentLength != null) {
          contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
        }
        if (contentLengthHeaderValue != null) {
          httpRequest.headersList.append(
            "content-length",
            contentLengthHeaderValue,
          );
        }
        if (contentLength != null && httpRequest.keepalive) {
        }
        if (httpRequest.referrer instanceof URL) {
          httpRequest.headersList.append(
            "referer",
            isomorphicEncode(httpRequest.referrer.href),
          );
        }
        appendRequestOriginHeader(httpRequest);
        appendFetchMetadata(httpRequest);
        if (!httpRequest.headersList.contains("user-agent")) {
          httpRequest.headersList.append(
            "user-agent",
            typeof esbuildDetection === "undefined" ? "undici" : "node",
          );
        }
        if (
          httpRequest.cache === "default" &&
          (httpRequest.headersList.contains("if-modified-since") ||
            httpRequest.headersList.contains("if-none-match") ||
            httpRequest.headersList.contains("if-unmodified-since") ||
            httpRequest.headersList.contains("if-match") ||
            httpRequest.headersList.contains("if-range"))
        ) {
          httpRequest.cache = "no-store";
        }
        if (
          httpRequest.cache === "no-cache" &&
          !httpRequest.preventNoCacheCacheControlHeaderModification &&
          !httpRequest.headersList.contains("cache-control")
        ) {
          httpRequest.headersList.append("cache-control", "max-age=0");
        }
        if (
          httpRequest.cache === "no-store" ||
          httpRequest.cache === "reload"
        ) {
          if (!httpRequest.headersList.contains("pragma")) {
            httpRequest.headersList.append("pragma", "no-cache");
          }
          if (!httpRequest.headersList.contains("cache-control")) {
            httpRequest.headersList.append("cache-control", "no-cache");
          }
        }
        if (httpRequest.headersList.contains("range")) {
          httpRequest.headersList.append("accept-encoding", "identity");
        }
        if (!httpRequest.headersList.contains("accept-encoding")) {
          if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {
            httpRequest.headersList.append(
              "accept-encoding",
              "br, gzip, deflate",
            );
          } else {
            httpRequest.headersList.append("accept-encoding", "gzip, deflate");
          }
        }
        httpRequest.headersList.delete("host");
        if (includeCredentials) {
        }
        if (httpCache == null) {
          httpRequest.cache = "no-store";
        }
        if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {
        }
        if (response == null) {
          if (httpRequest.mode === "only-if-cached") {
            return makeNetworkError("only if cached");
          }
          const forwardResponse = await httpNetworkFetch(
            httpFetchParams,
            includeCredentials,
            isNewConnectionFetch,
          );
          if (
            !safeMethodsSet.has(httpRequest.method) &&
            forwardResponse.status >= 200 &&
            forwardResponse.status <= 399
          ) {
          }
          if (revalidatingFlag && forwardResponse.status === 304) {
          }
          if (response == null) {
            response = forwardResponse;
          }
        }
        response.urlList = [...httpRequest.urlList];
        if (httpRequest.headersList.contains("range")) {
          response.rangeRequested = true;
        }
        response.requestIncludesCredentials = includeCredentials;
        if (response.status === 407) {
          if (request.window === "no-window") {
            return makeNetworkError();
          }
          if (isCancelled(fetchParams)) {
            return makeAppropriateNetworkError(fetchParams);
          }
          return makeNetworkError("proxy authentication required");
        }
        if (
          // response’s status is 421
          response.status === 421 && // isNewConnectionFetch is false
          !isNewConnectionFetch && // request’s body is null, or request’s body is non-null and request’s body’s source is non-null
          (request.body == null || request.body.source != null)
        ) {
          if (isCancelled(fetchParams)) {
            return makeAppropriateNetworkError(fetchParams);
          }
          fetchParams.controller.connection.destroy();
          response = await httpNetworkOrCacheFetch(
            fetchParams,
            isAuthenticationFetch,
            true,
          );
        }
        if (isAuthenticationFetch) {
        }
        return response;
      }
      __name(httpNetworkOrCacheFetch, "httpNetworkOrCacheFetch");
      async function httpNetworkFetch(
        fetchParams,
        includeCredentials = false,
        forceNewConnection = false,
      ) {
        assert(
          !fetchParams.controller.connection ||
            fetchParams.controller.connection.destroyed,
        );
        fetchParams.controller.connection = {
          abort: null,
          destroyed: false,
          destroy(err) {
            if (!this.destroyed) {
              this.destroyed = true;
              this.abort?.(
                err ??
                  new DOMException2("The operation was aborted.", "AbortError"),
              );
            }
          },
        };
        const request = fetchParams.request;
        let response = null;
        const timingInfo = fetchParams.timingInfo;
        const httpCache = null;
        if (httpCache == null) {
          request.cache = "no-store";
        }
        const newConnection = forceNewConnection ? "yes" : "no";
        if (request.mode === "websocket") {
        } else {
        }
        let requestBody = null;
        if (request.body == null && fetchParams.processRequestEndOfBody) {
          queueMicrotask(() => fetchParams.processRequestEndOfBody());
        } else if (request.body != null) {
          const processBodyChunk = /* @__PURE__ */ __name(async function* (
            bytes,
          ) {
            if (isCancelled(fetchParams)) {
              return;
            }
            yield bytes;
            fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
          }, "processBodyChunk");
          const processEndOfBody = /* @__PURE__ */ __name(() => {
            if (isCancelled(fetchParams)) {
              return;
            }
            if (fetchParams.processRequestEndOfBody) {
              fetchParams.processRequestEndOfBody();
            }
          }, "processEndOfBody");
          const processBodyError = /* @__PURE__ */ __name((e) => {
            if (isCancelled(fetchParams)) {
              return;
            }
            if (e.name === "AbortError") {
              fetchParams.controller.abort();
            } else {
              fetchParams.controller.terminate(e);
            }
          }, "processBodyError");
          requestBody = (async function* () {
            try {
              for await (const bytes of request.body.stream) {
                yield* processBodyChunk(bytes);
              }
              processEndOfBody();
            } catch (err) {
              processBodyError(err);
            }
          })();
        }
        try {
          const { body, status, statusText, headersList, socket } =
            await dispatch({ body: requestBody });
          if (socket) {
            response = makeResponse({
              status,
              statusText,
              headersList,
              socket,
            });
          } else {
            const iterator = body[Symbol.asyncIterator]();
            fetchParams.controller.next = () => iterator.next();
            response = makeResponse({ status, statusText, headersList });
          }
        } catch (err) {
          if (err.name === "AbortError") {
            fetchParams.controller.connection.destroy();
            return makeAppropriateNetworkError(fetchParams, err);
          }
          return makeNetworkError(err);
        }
        const pullAlgorithm = /* @__PURE__ */ __name(() => {
          fetchParams.controller.resume();
        }, "pullAlgorithm");
        const cancelAlgorithm = /* @__PURE__ */ __name((reason) => {
          fetchParams.controller.abort(reason);
        }, "cancelAlgorithm");
        if (!ReadableStream) {
          ReadableStream = __require("stream/web").ReadableStream;
        }
        const stream = new ReadableStream(
          {
            async start(controller) {
              fetchParams.controller.controller = controller;
            },
            async pull(controller) {
              await pullAlgorithm(controller);
            },
            async cancel(reason) {
              await cancelAlgorithm(reason);
            },
          },
          {
            highWaterMark: 0,
            size() {
              return 1;
            },
          },
        );
        response.body = { stream };
        fetchParams.controller.on("terminated", onAborted);
        fetchParams.controller.resume = async () => {
          while (true) {
            let bytes;
            let isFailure;
            try {
              const { done, value } = await fetchParams.controller.next();
              if (isAborted(fetchParams)) {
                break;
              }
              bytes = done ? void 0 : value;
            } catch (err) {
              if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
                bytes = void 0;
              } else {
                bytes = err;
                isFailure = true;
              }
            }
            if (bytes === void 0) {
              readableStreamClose(fetchParams.controller.controller);
              finalizeResponse(fetchParams, response);
              return;
            }
            timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
            if (isFailure) {
              fetchParams.controller.terminate(bytes);
              return;
            }
            fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
            if (isErrored(stream)) {
              fetchParams.controller.terminate();
              return;
            }
            if (!fetchParams.controller.controller.desiredSize) {
              return;
            }
          }
        };
        function onAborted(reason) {
          if (isAborted(fetchParams)) {
            response.aborted = true;
            if (isReadable(stream)) {
              fetchParams.controller.controller.error(
                fetchParams.controller.serializedAbortReason,
              );
            }
          } else {
            if (isReadable(stream)) {
              fetchParams.controller.controller.error(
                new TypeError("terminated", {
                  cause: isErrorLike(reason) ? reason : void 0,
                }),
              );
            }
          }
          fetchParams.controller.connection.destroy();
        }
        __name(onAborted, "onAborted");
        return response;
        async function dispatch({ body }) {
          const url = requestCurrentURL(request);
          const agent = fetchParams.controller.dispatcher;
          return new Promise((resolve, reject) =>
            agent.dispatch(
              {
                path: url.pathname + url.search,
                origin: url.origin,
                method: request.method,
                body: fetchParams.controller.dispatcher.isMockActive
                  ? request.body && (request.body.source || request.body.stream)
                  : body,
                headers: request.headersList.entries,
                maxRedirections: 0,
                upgrade: request.mode === "websocket" ? "websocket" : void 0,
              },
              {
                body: null,
                abort: null,
                onConnect(abort) {
                  const { connection } = fetchParams.controller;
                  if (connection.destroyed) {
                    abort(
                      new DOMException2(
                        "The operation was aborted.",
                        "AbortError",
                      ),
                    );
                  } else {
                    fetchParams.controller.on("terminated", abort);
                    this.abort = connection.abort = abort;
                  }
                },
                onHeaders(status, headersList, resume, statusText) {
                  if (status < 200) {
                    return;
                  }
                  let codings = [];
                  let location = "";
                  const headers = new Headers();
                  if (Array.isArray(headersList)) {
                    for (let n = 0; n < headersList.length; n += 2) {
                      const key = headersList[n + 0].toString("latin1");
                      const val = headersList[n + 1].toString("latin1");
                      if (key.toLowerCase() === "content-encoding") {
                        codings = val
                          .toLowerCase()
                          .split(",")
                          .map((x) => x.trim());
                      } else if (key.toLowerCase() === "location") {
                        location = val;
                      }
                      headers[kHeadersList].append(key, val);
                    }
                  } else {
                    const keys = Object.keys(headersList);
                    for (const key of keys) {
                      const val = headersList[key];
                      if (key.toLowerCase() === "content-encoding") {
                        codings = val
                          .toLowerCase()
                          .split(",")
                          .map((x) => x.trim())
                          .reverse();
                      } else if (key.toLowerCase() === "location") {
                        location = val;
                      }
                      headers[kHeadersList].append(key, val);
                    }
                  }
                  this.body = new Readable({ read: resume });
                  const decoders = [];
                  const willFollow =
                    request.redirect === "follow" &&
                    location &&
                    redirectStatusSet.has(status);
                  if (
                    request.method !== "HEAD" &&
                    request.method !== "CONNECT" &&
                    !nullBodyStatus.includes(status) &&
                    !willFollow
                  ) {
                    for (const coding of codings) {
                      if (coding === "x-gzip" || coding === "gzip") {
                        decoders.push(
                          zlib.createGunzip({
                            // Be less strict when decoding compressed responses, since sometimes
                            // servers send slightly invalid responses that are still accepted
                            // by common browsers.
                            // Always using Z_SYNC_FLUSH is what cURL does.
                            flush: zlib.constants.Z_SYNC_FLUSH,
                            finishFlush: zlib.constants.Z_SYNC_FLUSH,
                          }),
                        );
                      } else if (coding === "deflate") {
                        decoders.push(zlib.createInflate());
                      } else if (coding === "br") {
                        decoders.push(zlib.createBrotliDecompress());
                      } else {
                        decoders.length = 0;
                        break;
                      }
                    }
                  }
                  resolve({
                    status,
                    statusText,
                    headersList: headers[kHeadersList],
                    body: decoders.length
                      ? pipeline(this.body, ...decoders, () => {})
                      : this.body.on("error", () => {}),
                  });
                  return true;
                },
                onData(chunk) {
                  if (fetchParams.controller.dump) {
                    return;
                  }
                  const bytes = chunk;
                  timingInfo.encodedBodySize += bytes.byteLength;
                  return this.body.push(bytes);
                },
                onComplete() {
                  if (this.abort) {
                    fetchParams.controller.off("terminated", this.abort);
                  }
                  fetchParams.controller.ended = true;
                  this.body.push(null);
                },
                onError(error) {
                  if (this.abort) {
                    fetchParams.controller.off("terminated", this.abort);
                  }
                  this.body?.destroy(error);
                  fetchParams.controller.terminate(error);
                  reject(error);
                },
                onUpgrade(status, headersList, socket) {
                  if (status !== 101) {
                    return;
                  }
                  const headers = new Headers();
                  for (let n = 0; n < headersList.length; n += 2) {
                    const key = headersList[n + 0].toString("latin1");
                    const val = headersList[n + 1].toString("latin1");
                    headers[kHeadersList].append(key, val);
                  }
                  resolve({
                    status,
                    statusText: STATUS_CODES[status],
                    headersList: headers[kHeadersList],
                    socket,
                  });
                  return true;
                },
              },
            ),
          );
        }
        __name(dispatch, "dispatch");
      }
      __name(httpNetworkFetch, "httpNetworkFetch");
      module.exports = {
        fetch,
        Fetch,
        fetching,
        finalizeAndReportTiming,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/symbols.js
  var require_symbols3 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/symbols.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = {
        kState: Symbol("FileReader state"),
        kResult: Symbol("FileReader result"),
        kError: Symbol("FileReader error"),
        kLastProgressEventFired: Symbol(
          "FileReader last progress event fired timestamp",
        ),
        kEvents: Symbol("FileReader events"),
        kAborted: Symbol("FileReader aborted"),
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/progressevent.js
  var require_progressevent = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/progressevent.js"(
      exports,
      module,
    ) {
      "use strict";
      var { webidl } = require_webidl();
      var kState = Symbol("ProgressEvent state");
      var ProgressEvent = class _ProgressEvent extends Event {
        static {
          __name(this, "ProgressEvent");
        }
        constructor(type, eventInitDict = {}) {
          type = webidl.converters.DOMString(type);
          eventInitDict = webidl.converters.ProgressEventInit(
            eventInitDict ?? {},
          );
          super(type, eventInitDict);
          this[kState] = {
            lengthComputable: eventInitDict.lengthComputable,
            loaded: eventInitDict.loaded,
            total: eventInitDict.total,
          };
        }
        get lengthComputable() {
          webidl.brandCheck(this, _ProgressEvent);
          return this[kState].lengthComputable;
        }
        get loaded() {
          webidl.brandCheck(this, _ProgressEvent);
          return this[kState].loaded;
        }
        get total() {
          webidl.brandCheck(this, _ProgressEvent);
          return this[kState].total;
        }
      };
      webidl.converters.ProgressEventInit = webidl.dictionaryConverter([
        {
          key: "lengthComputable",
          converter: webidl.converters.boolean,
          defaultValue: false,
        },
        {
          key: "loaded",
          converter: webidl.converters["unsigned long long"],
          defaultValue: 0,
        },
        {
          key: "total",
          converter: webidl.converters["unsigned long long"],
          defaultValue: 0,
        },
        {
          key: "bubbles",
          converter: webidl.converters.boolean,
          defaultValue: false,
        },
        {
          key: "cancelable",
          converter: webidl.converters.boolean,
          defaultValue: false,
        },
        {
          key: "composed",
          converter: webidl.converters.boolean,
          defaultValue: false,
        },
      ]);
      module.exports = {
        ProgressEvent,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/encoding.js
  var require_encoding = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/encoding.js"(
      exports,
      module,
    ) {
      "use strict";
      function getEncoding(label) {
        if (!label) {
          return "failure";
        }
        switch (label.trim().toLowerCase()) {
          case "unicode-1-1-utf-8":
          case "unicode11utf8":
          case "unicode20utf8":
          case "utf-8":
          case "utf8":
          case "x-unicode20utf8":
            return "UTF-8";
          case "866":
          case "cp866":
          case "csibm866":
          case "ibm866":
            return "IBM866";
          case "csisolatin2":
          case "iso-8859-2":
          case "iso-ir-101":
          case "iso8859-2":
          case "iso88592":
          case "iso_8859-2":
          case "iso_8859-2:1987":
          case "l2":
          case "latin2":
            return "ISO-8859-2";
          case "csisolatin3":
          case "iso-8859-3":
          case "iso-ir-109":
          case "iso8859-3":
          case "iso88593":
          case "iso_8859-3":
          case "iso_8859-3:1988":
          case "l3":
          case "latin3":
            return "ISO-8859-3";
          case "csisolatin4":
          case "iso-8859-4":
          case "iso-ir-110":
          case "iso8859-4":
          case "iso88594":
          case "iso_8859-4":
          case "iso_8859-4:1988":
          case "l4":
          case "latin4":
            return "ISO-8859-4";
          case "csisolatincyrillic":
          case "cyrillic":
          case "iso-8859-5":
          case "iso-ir-144":
          case "iso8859-5":
          case "iso88595":
          case "iso_8859-5":
          case "iso_8859-5:1988":
            return "ISO-8859-5";
          case "arabic":
          case "asmo-708":
          case "csiso88596e":
          case "csiso88596i":
          case "csisolatinarabic":
          case "ecma-114":
          case "iso-8859-6":
          case "iso-8859-6-e":
          case "iso-8859-6-i":
          case "iso-ir-127":
          case "iso8859-6":
          case "iso88596":
          case "iso_8859-6":
          case "iso_8859-6:1987":
            return "ISO-8859-6";
          case "csisolatingreek":
          case "ecma-118":
          case "elot_928":
          case "greek":
          case "greek8":
          case "iso-8859-7":
          case "iso-ir-126":
          case "iso8859-7":
          case "iso88597":
          case "iso_8859-7":
          case "iso_8859-7:1987":
          case "sun_eu_greek":
            return "ISO-8859-7";
          case "csiso88598e":
          case "csisolatinhebrew":
          case "hebrew":
          case "iso-8859-8":
          case "iso-8859-8-e":
          case "iso-ir-138":
          case "iso8859-8":
          case "iso88598":
          case "iso_8859-8":
          case "iso_8859-8:1988":
          case "visual":
            return "ISO-8859-8";
          case "csiso88598i":
          case "iso-8859-8-i":
          case "logical":
            return "ISO-8859-8-I";
          case "csisolatin6":
          case "iso-8859-10":
          case "iso-ir-157":
          case "iso8859-10":
          case "iso885910":
          case "l6":
          case "latin6":
            return "ISO-8859-10";
          case "iso-8859-13":
          case "iso8859-13":
          case "iso885913":
            return "ISO-8859-13";
          case "iso-8859-14":
          case "iso8859-14":
          case "iso885914":
            return "ISO-8859-14";
          case "csisolatin9":
          case "iso-8859-15":
          case "iso8859-15":
          case "iso885915":
          case "iso_8859-15":
          case "l9":
            return "ISO-8859-15";
          case "iso-8859-16":
            return "ISO-8859-16";
          case "cskoi8r":
          case "koi":
          case "koi8":
          case "koi8-r":
          case "koi8_r":
            return "KOI8-R";
          case "koi8-ru":
          case "koi8-u":
            return "KOI8-U";
          case "csmacintosh":
          case "mac":
          case "macintosh":
          case "x-mac-roman":
            return "macintosh";
          case "iso-8859-11":
          case "iso8859-11":
          case "iso885911":
          case "tis-620":
          case "windows-874":
            return "windows-874";
          case "cp1250":
          case "windows-1250":
          case "x-cp1250":
            return "windows-1250";
          case "cp1251":
          case "windows-1251":
          case "x-cp1251":
            return "windows-1251";
          case "ansi_x3.4-1968":
          case "ascii":
          case "cp1252":
          case "cp819":
          case "csisolatin1":
          case "ibm819":
          case "iso-8859-1":
          case "iso-ir-100":
          case "iso8859-1":
          case "iso88591":
          case "iso_8859-1":
          case "iso_8859-1:1987":
          case "l1":
          case "latin1":
          case "us-ascii":
          case "windows-1252":
          case "x-cp1252":
            return "windows-1252";
          case "cp1253":
          case "windows-1253":
          case "x-cp1253":
            return "windows-1253";
          case "cp1254":
          case "csisolatin5":
          case "iso-8859-9":
          case "iso-ir-148":
          case "iso8859-9":
          case "iso88599":
          case "iso_8859-9":
          case "iso_8859-9:1989":
          case "l5":
          case "latin5":
          case "windows-1254":
          case "x-cp1254":
            return "windows-1254";
          case "cp1255":
          case "windows-1255":
          case "x-cp1255":
            return "windows-1255";
          case "cp1256":
          case "windows-1256":
          case "x-cp1256":
            return "windows-1256";
          case "cp1257":
          case "windows-1257":
          case "x-cp1257":
            return "windows-1257";
          case "cp1258":
          case "windows-1258":
          case "x-cp1258":
            return "windows-1258";
          case "x-mac-cyrillic":
          case "x-mac-ukrainian":
            return "x-mac-cyrillic";
          case "chinese":
          case "csgb2312":
          case "csiso58gb231280":
          case "gb2312":
          case "gb_2312":
          case "gb_2312-80":
          case "gbk":
          case "iso-ir-58":
          case "x-gbk":
            return "GBK";
          case "gb18030":
            return "gb18030";
          case "big5":
          case "big5-hkscs":
          case "cn-big5":
          case "csbig5":
          case "x-x-big5":
            return "Big5";
          case "cseucpkdfmtjapanese":
          case "euc-jp":
          case "x-euc-jp":
            return "EUC-JP";
          case "csiso2022jp":
          case "iso-2022-jp":
            return "ISO-2022-JP";
          case "csshiftjis":
          case "ms932":
          case "ms_kanji":
          case "shift-jis":
          case "shift_jis":
          case "sjis":
          case "windows-31j":
          case "x-sjis":
            return "Shift_JIS";
          case "cseuckr":
          case "csksc56011987":
          case "euc-kr":
          case "iso-ir-149":
          case "korean":
          case "ks_c_5601-1987":
          case "ks_c_5601-1989":
          case "ksc5601":
          case "ksc_5601":
          case "windows-949":
            return "EUC-KR";
          case "csiso2022kr":
          case "hz-gb-2312":
          case "iso-2022-cn":
          case "iso-2022-cn-ext":
          case "iso-2022-kr":
          case "replacement":
            return "replacement";
          case "unicodefffe":
          case "utf-16be":
            return "UTF-16BE";
          case "csunicode":
          case "iso-10646-ucs-2":
          case "ucs-2":
          case "unicode":
          case "unicodefeff":
          case "utf-16":
          case "utf-16le":
            return "UTF-16LE";
          case "x-user-defined":
            return "x-user-defined";
          default:
            return "failure";
        }
      }
      __name(getEncoding, "getEncoding");
      module.exports = {
        getEncoding,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/util.js
  var require_util4 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/util.js"(
      exports,
      module,
    ) {
      "use strict";
      var { kState, kError, kResult, kAborted, kLastProgressEventFired } =
        require_symbols3();
      var { ProgressEvent } = require_progressevent();
      var { getEncoding } = require_encoding();
      var { DOMException: DOMException2 } = require_constants2();
      var { serializeAMimeType, parseMIMEType } = require_dataURL();
      var { types } = __require("util");
      var { StringDecoder } = __require("string_decoder");
      var { btoa } = __require("buffer");
      var staticPropertyDescriptors = {
        enumerable: true,
        writable: false,
        configurable: false,
      };
      function readOperation(fr, blob, type, encodingName) {
        if (fr[kState] === "loading") {
          throw new DOMException2("Invalid state", "InvalidStateError");
        }
        fr[kState] = "loading";
        fr[kResult] = null;
        fr[kError] = null;
        const stream = blob.stream();
        const reader = stream.getReader();
        const bytes = [];
        let chunkPromise = reader.read();
        let isFirstChunk = true;
        (async () => {
          while (!fr[kAborted]) {
            try {
              const { done, value } = await chunkPromise;
              if (isFirstChunk && !fr[kAborted]) {
                queueMicrotask(() => {
                  fireAProgressEvent("loadstart", fr);
                });
              }
              isFirstChunk = false;
              if (!done && types.isUint8Array(value)) {
                bytes.push(value);
                if (
                  (fr[kLastProgressEventFired] === void 0 ||
                    Date.now() - fr[kLastProgressEventFired] >= 50) &&
                  !fr[kAborted]
                ) {
                  fr[kLastProgressEventFired] = Date.now();
                  queueMicrotask(() => {
                    fireAProgressEvent("progress", fr);
                  });
                }
                chunkPromise = reader.read();
              } else if (done) {
                queueMicrotask(() => {
                  fr[kState] = "done";
                  try {
                    const result = packageData(
                      bytes,
                      type,
                      blob.type,
                      encodingName,
                    );
                    if (fr[kAborted]) {
                      return;
                    }
                    fr[kResult] = result;
                    fireAProgressEvent("load", fr);
                  } catch (error) {
                    fr[kError] = error;
                    fireAProgressEvent("error", fr);
                  }
                  if (fr[kState] !== "loading") {
                    fireAProgressEvent("loadend", fr);
                  }
                });
                break;
              }
            } catch (error) {
              if (fr[kAborted]) {
                return;
              }
              queueMicrotask(() => {
                fr[kState] = "done";
                fr[kError] = error;
                fireAProgressEvent("error", fr);
                if (fr[kState] !== "loading") {
                  fireAProgressEvent("loadend", fr);
                }
              });
              break;
            }
          }
        })();
      }
      __name(readOperation, "readOperation");
      function fireAProgressEvent(e, reader) {
        const event = new ProgressEvent(e, {
          bubbles: false,
          cancelable: false,
        });
        reader.dispatchEvent(event);
      }
      __name(fireAProgressEvent, "fireAProgressEvent");
      function packageData(bytes, type, mimeType, encodingName) {
        switch (type) {
          case "DataURL": {
            let dataURL = "data:";
            const parsed = parseMIMEType(
              mimeType || "application/octet-stream",
            );
            if (parsed !== "failure") {
              dataURL += serializeAMimeType(parsed);
            }
            dataURL += ";base64,";
            const decoder = new StringDecoder("latin1");
            for (const chunk of bytes) {
              dataURL += btoa(decoder.write(chunk));
            }
            dataURL += btoa(decoder.end());
            return dataURL;
          }
          case "Text": {
            let encoding = "failure";
            if (encodingName) {
              encoding = getEncoding(encodingName);
            }
            if (encoding === "failure" && mimeType) {
              const type2 = parseMIMEType(mimeType);
              if (type2 !== "failure") {
                encoding = getEncoding(type2.parameters.get("charset"));
              }
            }
            if (encoding === "failure") {
              encoding = "UTF-8";
            }
            return decode2(bytes, encoding);
          }
          case "ArrayBuffer": {
            const sequence = combineByteSequences(bytes);
            return sequence.buffer;
          }
          case "BinaryString": {
            let binaryString = "";
            const decoder = new StringDecoder("latin1");
            for (const chunk of bytes) {
              binaryString += decoder.write(chunk);
            }
            binaryString += decoder.end();
            return binaryString;
          }
        }
      }
      __name(packageData, "packageData");
      function decode2(ioQueue, encoding) {
        const bytes = combineByteSequences(ioQueue);
        const BOMEncoding = BOMSniffing(bytes);
        let slice = 0;
        if (BOMEncoding !== null) {
          encoding = BOMEncoding;
          slice = BOMEncoding === "UTF-8" ? 3 : 2;
        }
        const sliced = bytes.slice(slice);
        return new TextDecoder(encoding).decode(sliced);
      }
      __name(decode2, "decode");
      function BOMSniffing(ioQueue) {
        const [a, b, c] = ioQueue;
        if (a === 239 && b === 187 && c === 191) {
          return "UTF-8";
        } else if (a === 254 && b === 255) {
          return "UTF-16BE";
        } else if (a === 255 && b === 254) {
          return "UTF-16LE";
        }
        return null;
      }
      __name(BOMSniffing, "BOMSniffing");
      function combineByteSequences(sequences) {
        const size = sequences.reduce((a, b) => {
          return a + b.byteLength;
        }, 0);
        let offset = 0;
        return sequences.reduce((a, b) => {
          a.set(b, offset);
          offset += b.byteLength;
          return a;
        }, new Uint8Array(size));
      }
      __name(combineByteSequences, "combineByteSequences");
      module.exports = {
        staticPropertyDescriptors,
        readOperation,
        fireAProgressEvent,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/filereader.js
  var require_filereader = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/fileapi/filereader.js"(
      exports,
      module,
    ) {
      "use strict";
      var { staticPropertyDescriptors, readOperation, fireAProgressEvent } =
        require_util4();
      var { kState, kError, kResult, kEvents, kAborted } = require_symbols3();
      var { webidl } = require_webidl();
      var { kEnumerableProperty } = require_util();
      var FileReader = class _FileReader extends EventTarget {
        static {
          __name(this, "FileReader");
        }
        constructor() {
          super();
          this[kState] = "empty";
          this[kResult] = null;
          this[kError] = null;
          this[kEvents] = {
            loadend: null,
            error: null,
            abort: null,
            load: null,
            progress: null,
            loadstart: null,
          };
        }
        /**
         * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
         * @param {import('buffer').Blob} blob
         */
        readAsArrayBuffer(blob) {
          webidl.brandCheck(this, _FileReader);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsArrayBuffer",
          });
          blob = webidl.converters.Blob(blob, { strict: false });
          readOperation(this, blob, "ArrayBuffer");
        }
        /**
         * @see https://w3c.github.io/FileAPI/#readAsBinaryString
         * @param {import('buffer').Blob} blob
         */
        readAsBinaryString(blob) {
          webidl.brandCheck(this, _FileReader);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsBinaryString",
          });
          blob = webidl.converters.Blob(blob, { strict: false });
          readOperation(this, blob, "BinaryString");
        }
        /**
         * @see https://w3c.github.io/FileAPI/#readAsDataText
         * @param {import('buffer').Blob} blob
         * @param {string?} encoding
         */
        readAsText(blob, encoding = void 0) {
          webidl.brandCheck(this, _FileReader);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsText",
          });
          blob = webidl.converters.Blob(blob, { strict: false });
          if (encoding !== void 0) {
            encoding = webidl.converters.DOMString(encoding);
          }
          readOperation(this, blob, "Text", encoding);
        }
        /**
         * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
         * @param {import('buffer').Blob} blob
         */
        readAsDataURL(blob) {
          webidl.brandCheck(this, _FileReader);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "FileReader.readAsDataURL",
          });
          blob = webidl.converters.Blob(blob, { strict: false });
          readOperation(this, blob, "DataURL");
        }
        /**
         * @see https://w3c.github.io/FileAPI/#dfn-abort
         */
        abort() {
          if (this[kState] === "empty" || this[kState] === "done") {
            this[kResult] = null;
            return;
          }
          if (this[kState] === "loading") {
            this[kState] = "done";
            this[kResult] = null;
          }
          this[kAborted] = true;
          fireAProgressEvent("abort", this);
          if (this[kState] !== "loading") {
            fireAProgressEvent("loadend", this);
          }
        }
        /**
         * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
         */
        get readyState() {
          webidl.brandCheck(this, _FileReader);
          switch (this[kState]) {
            case "empty":
              return this.EMPTY;
            case "loading":
              return this.LOADING;
            case "done":
              return this.DONE;
          }
        }
        /**
         * @see https://w3c.github.io/FileAPI/#dom-filereader-result
         */
        get result() {
          webidl.brandCheck(this, _FileReader);
          return this[kResult];
        }
        /**
         * @see https://w3c.github.io/FileAPI/#dom-filereader-error
         */
        get error() {
          webidl.brandCheck(this, _FileReader);
          return this[kError];
        }
        get onloadend() {
          webidl.brandCheck(this, _FileReader);
          return this[kEvents].loadend;
        }
        set onloadend(fn) {
          webidl.brandCheck(this, _FileReader);
          if (this[kEvents].loadend) {
            this.removeEventListener("loadend", this[kEvents].loadend);
          }
          if (typeof fn === "function") {
            this[kEvents].loadend = fn;
            this.addEventListener("loadend", fn);
          } else {
            this[kEvents].loadend = null;
          }
        }
        get onerror() {
          webidl.brandCheck(this, _FileReader);
          return this[kEvents].error;
        }
        set onerror(fn) {
          webidl.brandCheck(this, _FileReader);
          if (this[kEvents].error) {
            this.removeEventListener("error", this[kEvents].error);
          }
          if (typeof fn === "function") {
            this[kEvents].error = fn;
            this.addEventListener("error", fn);
          } else {
            this[kEvents].error = null;
          }
        }
        get onloadstart() {
          webidl.brandCheck(this, _FileReader);
          return this[kEvents].loadstart;
        }
        set onloadstart(fn) {
          webidl.brandCheck(this, _FileReader);
          if (this[kEvents].loadstart) {
            this.removeEventListener("loadstart", this[kEvents].loadstart);
          }
          if (typeof fn === "function") {
            this[kEvents].loadstart = fn;
            this.addEventListener("loadstart", fn);
          } else {
            this[kEvents].loadstart = null;
          }
        }
        get onprogress() {
          webidl.brandCheck(this, _FileReader);
          return this[kEvents].progress;
        }
        set onprogress(fn) {
          webidl.brandCheck(this, _FileReader);
          if (this[kEvents].progress) {
            this.removeEventListener("progress", this[kEvents].progress);
          }
          if (typeof fn === "function") {
            this[kEvents].progress = fn;
            this.addEventListener("progress", fn);
          } else {
            this[kEvents].progress = null;
          }
        }
        get onload() {
          webidl.brandCheck(this, _FileReader);
          return this[kEvents].load;
        }
        set onload(fn) {
          webidl.brandCheck(this, _FileReader);
          if (this[kEvents].load) {
            this.removeEventListener("load", this[kEvents].load);
          }
          if (typeof fn === "function") {
            this[kEvents].load = fn;
            this.addEventListener("load", fn);
          } else {
            this[kEvents].load = null;
          }
        }
        get onabort() {
          webidl.brandCheck(this, _FileReader);
          return this[kEvents].abort;
        }
        set onabort(fn) {
          webidl.brandCheck(this, _FileReader);
          if (this[kEvents].abort) {
            this.removeEventListener("abort", this[kEvents].abort);
          }
          if (typeof fn === "function") {
            this[kEvents].abort = fn;
            this.addEventListener("abort", fn);
          } else {
            this[kEvents].abort = null;
          }
        }
      };
      FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
      FileReader.LOADING = FileReader.prototype.LOADING = 1;
      FileReader.DONE = FileReader.prototype.DONE = 2;
      Object.defineProperties(FileReader.prototype, {
        EMPTY: staticPropertyDescriptors,
        LOADING: staticPropertyDescriptors,
        DONE: staticPropertyDescriptors,
        readAsArrayBuffer: kEnumerableProperty,
        readAsBinaryString: kEnumerableProperty,
        readAsText: kEnumerableProperty,
        readAsDataURL: kEnumerableProperty,
        abort: kEnumerableProperty,
        readyState: kEnumerableProperty,
        result: kEnumerableProperty,
        error: kEnumerableProperty,
        onloadstart: kEnumerableProperty,
        onprogress: kEnumerableProperty,
        onload: kEnumerableProperty,
        onabort: kEnumerableProperty,
        onerror: kEnumerableProperty,
        onloadend: kEnumerableProperty,
        [Symbol.toStringTag]: {
          value: "FileReader",
          writable: false,
          enumerable: false,
          configurable: true,
        },
      });
      Object.defineProperties(FileReader, {
        EMPTY: staticPropertyDescriptors,
        LOADING: staticPropertyDescriptors,
        DONE: staticPropertyDescriptors,
      });
      module.exports = {
        FileReader,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/symbols.js
  var require_symbols4 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/symbols.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = {
        kConstruct: require_symbols().kConstruct,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/util.js
  var require_util5 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/util.js"(
      exports,
      module,
    ) {
      "use strict";
      var assert = __require("assert");
      var { URLSerializer } = require_dataURL();
      var { isValidHeaderName } = require_util2();
      function urlEquals(A, B, excludeFragment = false) {
        const serializedA = URLSerializer(A, excludeFragment);
        const serializedB = URLSerializer(B, excludeFragment);
        return serializedA === serializedB;
      }
      __name(urlEquals, "urlEquals");
      function fieldValues(header) {
        assert(header !== null);
        const values = [];
        for (let value of header.split(",")) {
          value = value.trim();
          if (!value.length) {
            continue;
          } else if (!isValidHeaderName(value)) {
            continue;
          }
          values.push(value);
        }
        return values;
      }
      __name(fieldValues, "fieldValues");
      module.exports = {
        urlEquals,
        fieldValues,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/cache.js
  var require_cache = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/cache.js"(
      exports,
      module,
    ) {
      "use strict";
      var { kConstruct } = require_symbols4();
      var { urlEquals, fieldValues: getFieldValues } = require_util5();
      var { kEnumerableProperty, isDisturbed } = require_util();
      var { kHeadersList } = require_symbols();
      var { webidl } = require_webidl();
      var { Response, cloneResponse } = require_response();
      var { Request } = require_request2();
      var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
      var { fetching } = require_fetch();
      var { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } =
        require_util2();
      var assert = __require("assert");
      var { getGlobalDispatcher } = require_global2();
      var Cache = class _Cache {
        static {
          __name(this, "Cache");
        }
        /**
         * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
         * @type {requestResponseList}
         */
        #relevantRequestResponseList;
        constructor() {
          if (arguments[0] !== kConstruct) {
            webidl.illegalConstructor();
          }
          this.#relevantRequestResponseList = arguments[1];
        }
        async match(request, options = {}) {
          webidl.brandCheck(this, _Cache);
          webidl.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
          request = webidl.converters.RequestInfo(request);
          options = webidl.converters.CacheQueryOptions(options);
          const p = await this.matchAll(request, options);
          if (p.length === 0) {
            return;
          }
          return p[0];
        }
        async matchAll(request = void 0, options = {}) {
          webidl.brandCheck(this, _Cache);
          if (request !== void 0)
            request = webidl.converters.RequestInfo(request);
          options = webidl.converters.CacheQueryOptions(options);
          let r = null;
          if (request !== void 0) {
            if (request instanceof Request) {
              r = request[kState];
              if (r.method !== "GET" && !options.ignoreMethod) {
                return [];
              }
            } else if (typeof request === "string") {
              r = new Request(request)[kState];
            }
          }
          const responses = [];
          if (request === void 0) {
            for (const requestResponse of this.#relevantRequestResponseList) {
              responses.push(requestResponse[1]);
            }
          } else {
            const requestResponses = this.#queryCache(r, options);
            for (const requestResponse of requestResponses) {
              responses.push(requestResponse[1]);
            }
          }
          const responseList = [];
          for (const response of responses) {
            const responseObject = new Response(response.body?.source ?? null);
            const body = responseObject[kState].body;
            responseObject[kState] = response;
            responseObject[kState].body = body;
            responseObject[kHeaders][kHeadersList] = response.headersList;
            responseObject[kHeaders][kGuard] = "immutable";
            responseList.push(responseObject);
          }
          return Object.freeze(responseList);
        }
        async add(request) {
          webidl.brandCheck(this, _Cache);
          webidl.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
          request = webidl.converters.RequestInfo(request);
          const requests = [request];
          const responseArrayPromise = this.addAll(requests);
          return await responseArrayPromise;
        }
        async addAll(requests) {
          webidl.brandCheck(this, _Cache);
          webidl.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
          requests = webidl.converters["sequence<RequestInfo>"](requests);
          const responsePromises = [];
          const requestList = [];
          for (const request of requests) {
            if (typeof request === "string") {
              continue;
            }
            const r = request[kState];
            if (!urlIsHttpHttpsScheme(r.url) || r.method !== "GET") {
              throw webidl.errors.exception({
                header: "Cache.addAll",
                message: "Expected http/s scheme when method is not GET.",
              });
            }
          }
          const fetchControllers = [];
          for (const request of requests) {
            const r = new Request(request)[kState];
            if (!urlIsHttpHttpsScheme(r.url)) {
              throw webidl.errors.exception({
                header: "Cache.addAll",
                message: "Expected http/s scheme.",
              });
            }
            r.initiator = "fetch";
            r.destination = "subresource";
            requestList.push(r);
            const responsePromise = createDeferredPromise();
            fetchControllers.push(
              fetching({
                request: r,
                dispatcher: getGlobalDispatcher(),
                processResponse(response) {
                  if (
                    response.type === "error" ||
                    response.status === 206 ||
                    response.status < 200 ||
                    response.status > 299
                  ) {
                    responsePromise.reject(
                      webidl.errors.exception({
                        header: "Cache.addAll",
                        message:
                          "Received an invalid status code or the request failed.",
                      }),
                    );
                  } else if (response.headersList.contains("vary")) {
                    const fieldValues = getFieldValues(
                      response.headersList.get("vary"),
                    );
                    for (const fieldValue of fieldValues) {
                      if (fieldValue === "*") {
                        responsePromise.reject(
                          webidl.errors.exception({
                            header: "Cache.addAll",
                            message: "invalid vary field value",
                          }),
                        );
                        for (const controller of fetchControllers) {
                          controller.abort();
                        }
                        return;
                      }
                    }
                  }
                },
                processResponseEndOfBody(response) {
                  if (response.aborted) {
                    responsePromise.reject(
                      new DOMException("aborted", "AbortError"),
                    );
                    return;
                  }
                  responsePromise.resolve(response);
                },
              }),
            );
            responsePromises.push(responsePromise.promise);
          }
          const p = Promise.all(responsePromises);
          const responses = await p;
          const operations = [];
          let index2 = 0;
          for (const response of responses) {
            const operation = {
              type: "put",
              // 7.3.2
              request: requestList[index2],
              // 7.3.3
              response,
              // 7.3.4
            };
            operations.push(operation);
            index2++;
          }
          const cacheJobPromise = createDeferredPromise();
          let errorData = null;
          try {
            this.#batchCacheOperations(operations);
          } catch (e) {
            errorData = e;
          }
          queueMicrotask(() => {
            if (errorData === null) {
              cacheJobPromise.resolve(void 0);
            } else {
              cacheJobPromise.reject(errorData);
            }
          });
          return cacheJobPromise.promise;
        }
        async put(request, response) {
          webidl.brandCheck(this, _Cache);
          webidl.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
          request = webidl.converters.RequestInfo(request);
          response = webidl.converters.Response(response);
          let innerRequest = null;
          if (request instanceof Request) {
            innerRequest = request[kState];
          } else {
            innerRequest = new Request(request)[kState];
          }
          if (
            !urlIsHttpHttpsScheme(innerRequest.url) ||
            innerRequest.method !== "GET"
          ) {
            throw webidl.errors.exception({
              header: "Cache.put",
              message: "Expected an http/s scheme when method is not GET",
            });
          }
          const innerResponse = response[kState];
          if (innerResponse.status === 206) {
            throw webidl.errors.exception({
              header: "Cache.put",
              message: "Got 206 status",
            });
          }
          if (innerResponse.headersList.contains("vary")) {
            const fieldValues = getFieldValues(
              innerResponse.headersList.get("vary"),
            );
            for (const fieldValue of fieldValues) {
              if (fieldValue === "*") {
                throw webidl.errors.exception({
                  header: "Cache.put",
                  message: "Got * vary field value",
                });
              }
            }
          }
          if (
            innerResponse.body &&
            (isDisturbed(innerResponse.body.stream) ||
              innerResponse.body.stream.locked)
          ) {
            throw webidl.errors.exception({
              header: "Cache.put",
              message: "Response body is locked or disturbed",
            });
          }
          const clonedResponse = cloneResponse(innerResponse);
          const bodyReadPromise = createDeferredPromise();
          if (innerResponse.body != null) {
            const stream = innerResponse.body.stream;
            const reader = stream.getReader();
            readAllBytes(reader).then(
              bodyReadPromise.resolve,
              bodyReadPromise.reject,
            );
          } else {
            bodyReadPromise.resolve(void 0);
          }
          const operations = [];
          const operation = {
            type: "put",
            // 14.
            request: innerRequest,
            // 15.
            response: clonedResponse,
            // 16.
          };
          operations.push(operation);
          const bytes = await bodyReadPromise.promise;
          if (clonedResponse.body != null) {
            clonedResponse.body.source = bytes;
          }
          const cacheJobPromise = createDeferredPromise();
          let errorData = null;
          try {
            this.#batchCacheOperations(operations);
          } catch (e) {
            errorData = e;
          }
          queueMicrotask(() => {
            if (errorData === null) {
              cacheJobPromise.resolve();
            } else {
              cacheJobPromise.reject(errorData);
            }
          });
          return cacheJobPromise.promise;
        }
        async delete(request, options = {}) {
          webidl.brandCheck(this, _Cache);
          webidl.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
          request = webidl.converters.RequestInfo(request);
          options = webidl.converters.CacheQueryOptions(options);
          let r = null;
          if (request instanceof Request) {
            r = request[kState];
            if (r.method !== "GET" && !options.ignoreMethod) {
              return false;
            }
          } else {
            assert(typeof request === "string");
            r = new Request(request)[kState];
          }
          const operations = [];
          const operation = {
            type: "delete",
            request: r,
            options,
          };
          operations.push(operation);
          const cacheJobPromise = createDeferredPromise();
          let errorData = null;
          let requestResponses;
          try {
            requestResponses = this.#batchCacheOperations(operations);
          } catch (e) {
            errorData = e;
          }
          queueMicrotask(() => {
            if (errorData === null) {
              cacheJobPromise.resolve(!!requestResponses?.length);
            } else {
              cacheJobPromise.reject(errorData);
            }
          });
          return cacheJobPromise.promise;
        }
        /**
         * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
         * @param {any} request
         * @param {import('../../types/cache').CacheQueryOptions} options
         * @returns {readonly Request[]}
         */
        async keys(request = void 0, options = {}) {
          webidl.brandCheck(this, _Cache);
          if (request !== void 0)
            request = webidl.converters.RequestInfo(request);
          options = webidl.converters.CacheQueryOptions(options);
          let r = null;
          if (request !== void 0) {
            if (request instanceof Request) {
              r = request[kState];
              if (r.method !== "GET" && !options.ignoreMethod) {
                return [];
              }
            } else if (typeof request === "string") {
              r = new Request(request)[kState];
            }
          }
          const promise = createDeferredPromise();
          const requests = [];
          if (request === void 0) {
            for (const requestResponse of this.#relevantRequestResponseList) {
              requests.push(requestResponse[0]);
            }
          } else {
            const requestResponses = this.#queryCache(r, options);
            for (const requestResponse of requestResponses) {
              requests.push(requestResponse[0]);
            }
          }
          queueMicrotask(() => {
            const requestList = [];
            for (const request2 of requests) {
              const requestObject = new Request("https://a");
              requestObject[kState] = request2;
              requestObject[kHeaders][kHeadersList] = request2.headersList;
              requestObject[kHeaders][kGuard] = "immutable";
              requestObject[kRealm] = request2.client;
              requestList.push(requestObject);
            }
            promise.resolve(Object.freeze(requestList));
          });
          return promise.promise;
        }
        /**
         * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
         * @param {CacheBatchOperation[]} operations
         * @returns {requestResponseList}
         */
        #batchCacheOperations(operations) {
          const cache = this.#relevantRequestResponseList;
          const backupCache = [...cache];
          const addedItems = [];
          const resultList = [];
          try {
            for (const operation of operations) {
              if (operation.type !== "delete" && operation.type !== "put") {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message: 'operation type does not match "delete" or "put"',
                });
              }
              if (operation.type === "delete" && operation.response != null) {
                throw webidl.errors.exception({
                  header: "Cache.#batchCacheOperations",
                  message:
                    "delete operation should not have an associated response",
                });
              }
              if (
                this.#queryCache(
                  operation.request,
                  operation.options,
                  addedItems,
                ).length
              ) {
                throw new DOMException("???", "InvalidStateError");
              }
              let requestResponses;
              if (operation.type === "delete") {
                requestResponses = this.#queryCache(
                  operation.request,
                  operation.options,
                );
                if (requestResponses.length === 0) {
                  return [];
                }
                for (const requestResponse of requestResponses) {
                  const idx = cache.indexOf(requestResponse);
                  assert(idx !== -1);
                  cache.splice(idx, 1);
                }
              } else if (operation.type === "put") {
                if (operation.response == null) {
                  throw webidl.errors.exception({
                    header: "Cache.#batchCacheOperations",
                    message: "put operation should have an associated response",
                  });
                }
                const r = operation.request;
                if (!urlIsHttpHttpsScheme(r.url)) {
                  throw webidl.errors.exception({
                    header: "Cache.#batchCacheOperations",
                    message: "expected http or https scheme",
                  });
                }
                if (r.method !== "GET") {
                  throw webidl.errors.exception({
                    header: "Cache.#batchCacheOperations",
                    message: "not get method",
                  });
                }
                if (operation.options != null) {
                  throw webidl.errors.exception({
                    header: "Cache.#batchCacheOperations",
                    message: "options must not be defined",
                  });
                }
                requestResponses = this.#queryCache(operation.request);
                for (const requestResponse of requestResponses) {
                  const idx = cache.indexOf(requestResponse);
                  assert(idx !== -1);
                  cache.splice(idx, 1);
                }
                cache.push([operation.request, operation.response]);
                addedItems.push([operation.request, operation.response]);
              }
              resultList.push([operation.request, operation.response]);
            }
            return resultList;
          } catch (e) {
            this.#relevantRequestResponseList.length = 0;
            this.#relevantRequestResponseList = backupCache;
            throw e;
          }
        }
        /**
         * @see https://w3c.github.io/ServiceWorker/#query-cache
         * @param {any} requestQuery
         * @param {import('../../types/cache').CacheQueryOptions} options
         * @param {requestResponseList} targetStorage
         * @returns {requestResponseList}
         */
        #queryCache(requestQuery, options, targetStorage) {
          const resultList = [];
          const storage = targetStorage ?? this.#relevantRequestResponseList;
          for (const requestResponse of storage) {
            const [cachedRequest, cachedResponse] = requestResponse;
            if (
              this.#requestMatchesCachedItem(
                requestQuery,
                cachedRequest,
                cachedResponse,
                options,
              )
            ) {
              resultList.push(requestResponse);
            }
          }
          return resultList;
        }
        /**
         * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
         * @param {any} requestQuery
         * @param {any} request
         * @param {any | null} response
         * @param {import('../../types/cache').CacheQueryOptions | undefined} options
         * @returns {boolean}
         */
        #requestMatchesCachedItem(
          requestQuery,
          request,
          response = null,
          options,
        ) {
          const queryURL = new URL(requestQuery.url);
          const cachedURL = new URL(request.url);
          if (options?.ignoreSearch) {
            cachedURL.search = "";
            queryURL.search = "";
          }
          if (!urlEquals(queryURL, cachedURL, true)) {
            return false;
          }
          if (
            response == null ||
            options?.ignoreVary ||
            !response.headersList.contains("vary")
          ) {
            return true;
          }
          const fieldValues = getFieldValues(response.headersList.get("vary"));
          for (const fieldValue of fieldValues) {
            if (fieldValue === "*") {
              return false;
            }
            const requestValue = request.headersList.get(fieldValue);
            const queryValue = requestQuery.headersList.get(fieldValue);
            if (requestValue !== queryValue) {
              return false;
            }
          }
          return true;
        }
      };
      Object.defineProperties(Cache.prototype, {
        [Symbol.toStringTag]: {
          value: "Cache",
          configurable: true,
        },
        match: kEnumerableProperty,
        matchAll: kEnumerableProperty,
        add: kEnumerableProperty,
        addAll: kEnumerableProperty,
        put: kEnumerableProperty,
        delete: kEnumerableProperty,
        keys: kEnumerableProperty,
      });
      var cacheQueryOptionConverters = [
        {
          key: "ignoreSearch",
          converter: webidl.converters.boolean,
          defaultValue: false,
        },
        {
          key: "ignoreMethod",
          converter: webidl.converters.boolean,
          defaultValue: false,
        },
        {
          key: "ignoreVary",
          converter: webidl.converters.boolean,
          defaultValue: false,
        },
      ];
      webidl.converters.CacheQueryOptions = webidl.dictionaryConverter(
        cacheQueryOptionConverters,
      );
      webidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([
        ...cacheQueryOptionConverters,
        {
          key: "cacheName",
          converter: webidl.converters.DOMString,
        },
      ]);
      webidl.converters.Response = webidl.interfaceConverter(Response);
      webidl.converters["sequence<RequestInfo>"] = webidl.sequenceConverter(
        webidl.converters.RequestInfo,
      );
      module.exports = {
        Cache,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/cachestorage.js
  var require_cachestorage = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cache/cachestorage.js"(
      exports,
      module,
    ) {
      "use strict";
      var { kConstruct } = require_symbols4();
      var { Cache } = require_cache();
      var { webidl } = require_webidl();
      var { kEnumerableProperty } = require_util();
      var CacheStorage = class _CacheStorage {
        static {
          __name(this, "CacheStorage");
        }
        /**
         * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
         * @type {Map<string, import('./cache').requestResponseList}
         */
        #caches = /* @__PURE__ */ new Map();
        constructor() {
          if (arguments[0] !== kConstruct) {
            webidl.illegalConstructor();
          }
        }
        async match(request, options = {}) {
          webidl.brandCheck(this, _CacheStorage);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.match",
          });
          request = webidl.converters.RequestInfo(request);
          options = webidl.converters.MultiCacheQueryOptions(options);
          if (options.cacheName != null) {
            if (this.#caches.has(options.cacheName)) {
              const cacheList = this.#caches.get(options.cacheName);
              const cache = new Cache(kConstruct, cacheList);
              return await cache.match(request, options);
            }
          } else {
            for (const cacheList of this.#caches.values()) {
              const cache = new Cache(kConstruct, cacheList);
              const response = await cache.match(request, options);
              if (response !== void 0) {
                return response;
              }
            }
          }
        }
        /**
         * @see https://w3c.github.io/ServiceWorker/#cache-storage-has
         * @param {string} cacheName
         * @returns {Promise<boolean>}
         */
        async has(cacheName) {
          webidl.brandCheck(this, _CacheStorage);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.has",
          });
          cacheName = webidl.converters.DOMString(cacheName);
          return this.#caches.has(cacheName);
        }
        /**
         * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
         * @param {string} cacheName
         * @returns {Promise<Cache>}
         */
        async open(cacheName) {
          webidl.brandCheck(this, _CacheStorage);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.open",
          });
          cacheName = webidl.converters.DOMString(cacheName);
          if (this.#caches.has(cacheName)) {
            const cache2 = this.#caches.get(cacheName);
            return new Cache(kConstruct, cache2);
          }
          const cache = [];
          this.#caches.set(cacheName, cache);
          return new Cache(kConstruct, cache);
        }
        /**
         * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
         * @param {string} cacheName
         * @returns {Promise<boolean>}
         */
        async delete(cacheName) {
          webidl.brandCheck(this, _CacheStorage);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "CacheStorage.delete",
          });
          cacheName = webidl.converters.DOMString(cacheName);
          return this.#caches.delete(cacheName);
        }
        /**
         * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
         * @returns {string[]}
         */
        async keys() {
          webidl.brandCheck(this, _CacheStorage);
          const keys = this.#caches.keys();
          return [...keys];
        }
      };
      Object.defineProperties(CacheStorage.prototype, {
        [Symbol.toStringTag]: {
          value: "CacheStorage",
          configurable: true,
        },
        match: kEnumerableProperty,
        has: kEnumerableProperty,
        open: kEnumerableProperty,
        delete: kEnumerableProperty,
        keys: kEnumerableProperty,
      });
      module.exports = {
        CacheStorage,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/constants.js
  var require_constants4 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/constants.js"(
      exports,
      module,
    ) {
      "use strict";
      var maxAttributeValueSize = 1024;
      var maxNameValuePairSize = 4096;
      module.exports = {
        maxAttributeValueSize,
        maxNameValuePairSize,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/util.js
  var require_util6 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/util.js"(
      exports,
      module,
    ) {
      "use strict";
      var assert = __require("assert");
      var { kHeadersList } = require_symbols();
      function isCTLExcludingHtab(value) {
        if (value.length === 0) {
          return false;
        }
        for (const char of value) {
          const code2 = char.charCodeAt(0);
          if (
            code2 >= 0 ||
            code2 <= 8 ||
            code2 >= 10 ||
            code2 <= 31 ||
            code2 === 127
          ) {
            return false;
          }
        }
      }
      __name(isCTLExcludingHtab, "isCTLExcludingHtab");
      function validateCookieName(name) {
        for (const char of name) {
          const code2 = char.charCodeAt(0);
          if (
            code2 <= 32 ||
            code2 > 127 ||
            char === "(" ||
            char === ")" ||
            char === ">" ||
            char === "<" ||
            char === "@" ||
            char === "," ||
            char === ";" ||
            char === ":" ||
            char === "\\" ||
            char === '"' ||
            char === "/" ||
            char === "[" ||
            char === "]" ||
            char === "?" ||
            char === "=" ||
            char === "{" ||
            char === "}"
          ) {
            throw new Error("Invalid cookie name");
          }
        }
      }
      __name(validateCookieName, "validateCookieName");
      function validateCookieValue(value) {
        for (const char of value) {
          const code2 = char.charCodeAt(0);
          if (
            code2 < 33 || // exclude CTLs (0-31)
            code2 === 34 ||
            code2 === 44 ||
            code2 === 59 ||
            code2 === 92 ||
            code2 > 126
          ) {
            throw new Error("Invalid header value");
          }
        }
      }
      __name(validateCookieValue, "validateCookieValue");
      function validateCookiePath(path4) {
        for (const char of path4) {
          const code2 = char.charCodeAt(0);
          if (code2 < 33 || char === ";") {
            throw new Error("Invalid cookie path");
          }
        }
      }
      __name(validateCookiePath, "validateCookiePath");
      function validateCookieDomain(domain) {
        if (
          domain.startsWith("-") ||
          domain.endsWith(".") ||
          domain.endsWith("-")
        ) {
          throw new Error("Invalid cookie domain");
        }
      }
      __name(validateCookieDomain, "validateCookieDomain");
      function toIMFDate(date) {
        if (typeof date === "number") {
          date = new Date(date);
        }
        const days = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
        const months = [
          "Jan",
          "Feb",
          "Mar",
          "Apr",
          "May",
          "Jun",
          "Jul",
          "Aug",
          "Sep",
          "Oct",
          "Nov",
          "Dec",
        ];
        const dayName = days[date.getUTCDay()];
        const day = date.getUTCDate().toString().padStart(2, "0");
        const month = months[date.getUTCMonth()];
        const year = date.getUTCFullYear();
        const hour = date.getUTCHours().toString().padStart(2, "0");
        const minute = date.getUTCMinutes().toString().padStart(2, "0");
        const second = date.getUTCSeconds().toString().padStart(2, "0");
        return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
      }
      __name(toIMFDate, "toIMFDate");
      function validateCookieMaxAge(maxAge) {
        if (maxAge < 0) {
          throw new Error("Invalid cookie max-age");
        }
      }
      __name(validateCookieMaxAge, "validateCookieMaxAge");
      function stringify2(cookie) {
        if (cookie.name.length === 0) {
          return null;
        }
        validateCookieName(cookie.name);
        validateCookieValue(cookie.value);
        const out = [`${cookie.name}=${cookie.value}`];
        if (cookie.name.startsWith("__Secure-")) {
          cookie.secure = true;
        }
        if (cookie.name.startsWith("__Host-")) {
          cookie.secure = true;
          cookie.domain = null;
          cookie.path = "/";
        }
        if (cookie.secure) {
          out.push("Secure");
        }
        if (cookie.httpOnly) {
          out.push("HttpOnly");
        }
        if (typeof cookie.maxAge === "number") {
          validateCookieMaxAge(cookie.maxAge);
          out.push(`Max-Age=${cookie.maxAge}`);
        }
        if (cookie.domain) {
          validateCookieDomain(cookie.domain);
          out.push(`Domain=${cookie.domain}`);
        }
        if (cookie.path) {
          validateCookiePath(cookie.path);
          out.push(`Path=${cookie.path}`);
        }
        if (cookie.expires && cookie.expires.toString() !== "Invalid Date") {
          out.push(`Expires=${toIMFDate(cookie.expires)}`);
        }
        if (cookie.sameSite) {
          out.push(`SameSite=${cookie.sameSite}`);
        }
        for (const part of cookie.unparsed) {
          if (!part.includes("=")) {
            throw new Error("Invalid unparsed");
          }
          const [key, ...value] = part.split("=");
          out.push(`${key.trim()}=${value.join("=")}`);
        }
        return out.join("; ");
      }
      __name(stringify2, "stringify");
      var kHeadersListNode;
      function getHeadersList(headers) {
        if (headers[kHeadersList]) {
          return headers[kHeadersList];
        }
        if (!kHeadersListNode) {
          kHeadersListNode = Object.getOwnPropertySymbols(headers).find(
            (symbol) => symbol.description === "headers list",
          );
          assert(kHeadersListNode, "Headers cannot be parsed");
        }
        const headersList = headers[kHeadersListNode];
        assert(headersList);
        return headersList;
      }
      __name(getHeadersList, "getHeadersList");
      module.exports = {
        isCTLExcludingHtab,
        stringify: stringify2,
        getHeadersList,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/parse.js
  var require_parse = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/parse.js"(
      exports,
      module,
    ) {
      "use strict";
      var { maxNameValuePairSize, maxAttributeValueSize } =
        require_constants4();
      var { isCTLExcludingHtab } = require_util6();
      var { collectASequenceOfCodePointsFast } = require_dataURL();
      var assert = __require("assert");
      function parseSetCookie(header) {
        if (isCTLExcludingHtab(header)) {
          return null;
        }
        let nameValuePair = "";
        let unparsedAttributes = "";
        let name = "";
        let value = "";
        if (header.includes(";")) {
          const position2 = { position: 0 };
          nameValuePair = collectASequenceOfCodePointsFast(
            ";",
            header,
            position2,
          );
          unparsedAttributes = header.slice(position2.position);
        } else {
          nameValuePair = header;
        }
        if (!nameValuePair.includes("=")) {
          value = nameValuePair;
        } else {
          const position2 = { position: 0 };
          name = collectASequenceOfCodePointsFast(
            "=",
            nameValuePair,
            position2,
          );
          value = nameValuePair.slice(position2.position + 1);
        }
        name = name.trim();
        value = value.trim();
        if (name.length + value.length > maxNameValuePairSize) {
          return null;
        }
        return {
          name,
          value,
          ...parseUnparsedAttributes(unparsedAttributes),
        };
      }
      __name(parseSetCookie, "parseSetCookie");
      function parseUnparsedAttributes(
        unparsedAttributes,
        cookieAttributeList = {},
      ) {
        if (unparsedAttributes.length === 0) {
          return cookieAttributeList;
        }
        assert(unparsedAttributes[0] === ";");
        unparsedAttributes = unparsedAttributes.slice(1);
        let cookieAv = "";
        if (unparsedAttributes.includes(";")) {
          cookieAv = collectASequenceOfCodePointsFast(";", unparsedAttributes, {
            position: 0,
          });
          unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
        } else {
          cookieAv = unparsedAttributes;
          unparsedAttributes = "";
        }
        let attributeName = "";
        let attributeValue = "";
        if (cookieAv.includes("=")) {
          const position2 = { position: 0 };
          attributeName = collectASequenceOfCodePointsFast(
            "=",
            cookieAv,
            position2,
          );
          attributeValue = cookieAv.slice(position2.position + 1);
        } else {
          attributeName = cookieAv;
        }
        attributeName = attributeName.trim();
        attributeValue = attributeValue.trim();
        if (attributeValue.length > maxAttributeValueSize) {
          return parseUnparsedAttributes(
            unparsedAttributes,
            cookieAttributeList,
          );
        }
        const attributeNameLowercase = attributeName.toLowerCase();
        if (attributeNameLowercase === "expires") {
          const expiryTime = new Date(attributeValue);
          cookieAttributeList.expires = expiryTime;
        } else if (attributeNameLowercase === "max-age") {
          const charCode = attributeValue.charCodeAt(0);
          if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") {
            return parseUnparsedAttributes(
              unparsedAttributes,
              cookieAttributeList,
            );
          }
          if (!/^\d+$/.test(attributeValue)) {
            return parseUnparsedAttributes(
              unparsedAttributes,
              cookieAttributeList,
            );
          }
          const deltaSeconds = Number(attributeValue);
          cookieAttributeList.maxAge = deltaSeconds;
        } else if (attributeNameLowercase === "domain") {
          let cookieDomain = attributeValue;
          if (cookieDomain[0] === ".") {
            cookieDomain = cookieDomain.slice(1);
          }
          cookieDomain = cookieDomain.toLowerCase();
          cookieAttributeList.domain = cookieDomain;
        } else if (attributeNameLowercase === "path") {
          let cookiePath = "";
          if (attributeValue.length === 0 || attributeValue[0] !== "/") {
            cookiePath = "/";
          } else {
            cookiePath = attributeValue;
          }
          cookieAttributeList.path = cookiePath;
        } else if (attributeNameLowercase === "secure") {
          cookieAttributeList.secure = true;
        } else if (attributeNameLowercase === "httponly") {
          cookieAttributeList.httpOnly = true;
        } else if (attributeNameLowercase === "samesite") {
          let enforcement = "Default";
          const attributeValueLowercase = attributeValue.toLowerCase();
          if (attributeValueLowercase.includes("none")) {
            enforcement = "None";
          }
          if (attributeValueLowercase.includes("strict")) {
            enforcement = "Strict";
          }
          if (attributeValueLowercase.includes("lax")) {
            enforcement = "Lax";
          }
          cookieAttributeList.sameSite = enforcement;
        } else {
          cookieAttributeList.unparsed ??= [];
          cookieAttributeList.unparsed.push(
            `${attributeName}=${attributeValue}`,
          );
        }
        return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
      }
      __name(parseUnparsedAttributes, "parseUnparsedAttributes");
      module.exports = {
        parseSetCookie,
        parseUnparsedAttributes,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/index.js
  var require_cookies = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/cookies/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var { parseSetCookie } = require_parse();
      var { stringify: stringify2, getHeadersList } = require_util6();
      var { webidl } = require_webidl();
      var { Headers } = require_headers();
      function getCookies(headers) {
        webidl.argumentLengthCheck(arguments, 1, { header: "getCookies" });
        webidl.brandCheck(headers, Headers, { strict: false });
        const cookie = headers.get("cookie");
        const out = {};
        if (!cookie) {
          return out;
        }
        for (const piece of cookie.split(";")) {
          const [name, ...value] = piece.split("=");
          out[name.trim()] = value.join("=");
        }
        return out;
      }
      __name(getCookies, "getCookies");
      function deleteCookie(headers, name, attributes) {
        webidl.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
        webidl.brandCheck(headers, Headers, { strict: false });
        name = webidl.converters.DOMString(name);
        attributes = webidl.converters.DeleteCookieAttributes(attributes);
        setCookie(headers, {
          name,
          value: "",
          expires: /* @__PURE__ */ new Date(0),
          ...attributes,
        });
      }
      __name(deleteCookie, "deleteCookie");
      function getSetCookies(headers) {
        webidl.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
        webidl.brandCheck(headers, Headers, { strict: false });
        const cookies = getHeadersList(headers).cookies;
        if (!cookies) {
          return [];
        }
        return cookies.map((pair) =>
          parseSetCookie(Array.isArray(pair) ? pair[1] : pair),
        );
      }
      __name(getSetCookies, "getSetCookies");
      function setCookie(headers, cookie) {
        webidl.argumentLengthCheck(arguments, 2, { header: "setCookie" });
        webidl.brandCheck(headers, Headers, { strict: false });
        cookie = webidl.converters.Cookie(cookie);
        const str = stringify2(cookie);
        if (str) {
          headers.append("Set-Cookie", stringify2(cookie));
        }
      }
      __name(setCookie, "setCookie");
      webidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([
        {
          converter: webidl.nullableConverter(webidl.converters.DOMString),
          key: "path",
          defaultValue: null,
        },
        {
          converter: webidl.nullableConverter(webidl.converters.DOMString),
          key: "domain",
          defaultValue: null,
        },
      ]);
      webidl.converters.Cookie = webidl.dictionaryConverter([
        {
          converter: webidl.converters.DOMString,
          key: "name",
        },
        {
          converter: webidl.converters.DOMString,
          key: "value",
        },
        {
          converter: webidl.nullableConverter((value) => {
            if (typeof value === "number") {
              return webidl.converters["unsigned long long"](value);
            }
            return new Date(value);
          }),
          key: "expires",
          defaultValue: null,
        },
        {
          converter: webidl.nullableConverter(webidl.converters["long long"]),
          key: "maxAge",
          defaultValue: null,
        },
        {
          converter: webidl.nullableConverter(webidl.converters.DOMString),
          key: "domain",
          defaultValue: null,
        },
        {
          converter: webidl.nullableConverter(webidl.converters.DOMString),
          key: "path",
          defaultValue: null,
        },
        {
          converter: webidl.nullableConverter(webidl.converters.boolean),
          key: "secure",
          defaultValue: null,
        },
        {
          converter: webidl.nullableConverter(webidl.converters.boolean),
          key: "httpOnly",
          defaultValue: null,
        },
        {
          converter: webidl.converters.USVString,
          key: "sameSite",
          allowedValues: ["Strict", "Lax", "None"],
        },
        {
          converter: webidl.sequenceConverter(webidl.converters.DOMString),
          key: "unparsed",
          defaultValue: [],
        },
      ]);
      module.exports = {
        getCookies,
        deleteCookie,
        getSetCookies,
        setCookie,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/constants.js
  var require_constants5 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/constants.js"(
      exports,
      module,
    ) {
      "use strict";
      var uid = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
      var staticPropertyDescriptors = {
        enumerable: true,
        writable: false,
        configurable: false,
      };
      var states = {
        CONNECTING: 0,
        OPEN: 1,
        CLOSING: 2,
        CLOSED: 3,
      };
      var opcodes = {
        CONTINUATION: 0,
        TEXT: 1,
        BINARY: 2,
        CLOSE: 8,
        PING: 9,
        PONG: 10,
      };
      var maxUnsigned16Bit = 2 ** 16 - 1;
      var parserStates = {
        INFO: 0,
        PAYLOADLENGTH_16: 2,
        PAYLOADLENGTH_64: 3,
        READ_DATA: 4,
      };
      var emptyBuffer = Buffer.allocUnsafe(0);
      module.exports = {
        uid,
        staticPropertyDescriptors,
        states,
        opcodes,
        maxUnsigned16Bit,
        parserStates,
        emptyBuffer,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/symbols.js
  var require_symbols5 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/symbols.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = {
        kWebSocketURL: Symbol("url"),
        kReadyState: Symbol("ready state"),
        kController: Symbol("controller"),
        kResponse: Symbol("response"),
        kBinaryType: Symbol("binary type"),
        kSentClose: Symbol("sent close"),
        kReceivedClose: Symbol("received close"),
        kByteParser: Symbol("byte parser"),
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/events.js
  var require_events = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/events.js"(
      exports,
      module,
    ) {
      "use strict";
      var { webidl } = require_webidl();
      var { kEnumerableProperty } = require_util();
      var { MessagePort } = __require("worker_threads");
      var MessageEvent = class _MessageEvent extends Event {
        static {
          __name(this, "MessageEvent");
        }
        #eventInit;
        constructor(type, eventInitDict = {}) {
          webidl.argumentLengthCheck(arguments, 1, {
            header: "MessageEvent constructor",
          });
          type = webidl.converters.DOMString(type);
          eventInitDict = webidl.converters.MessageEventInit(eventInitDict);
          super(type, eventInitDict);
          this.#eventInit = eventInitDict;
        }
        get data() {
          webidl.brandCheck(this, _MessageEvent);
          return this.#eventInit.data;
        }
        get origin() {
          webidl.brandCheck(this, _MessageEvent);
          return this.#eventInit.origin;
        }
        get lastEventId() {
          webidl.brandCheck(this, _MessageEvent);
          return this.#eventInit.lastEventId;
        }
        get source() {
          webidl.brandCheck(this, _MessageEvent);
          return this.#eventInit.source;
        }
        get ports() {
          webidl.brandCheck(this, _MessageEvent);
          if (!Object.isFrozen(this.#eventInit.ports)) {
            Object.freeze(this.#eventInit.ports);
          }
          return this.#eventInit.ports;
        }
        initMessageEvent(
          type,
          bubbles = false,
          cancelable = false,
          data = null,
          origin = "",
          lastEventId = "",
          source = null,
          ports = [],
        ) {
          webidl.brandCheck(this, _MessageEvent);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "MessageEvent.initMessageEvent",
          });
          return new _MessageEvent(type, {
            bubbles,
            cancelable,
            data,
            origin,
            lastEventId,
            source,
            ports,
          });
        }
      };
      var CloseEvent = class _CloseEvent extends Event {
        static {
          __name(this, "CloseEvent");
        }
        #eventInit;
        constructor(type, eventInitDict = {}) {
          webidl.argumentLengthCheck(arguments, 1, {
            header: "CloseEvent constructor",
          });
          type = webidl.converters.DOMString(type);
          eventInitDict = webidl.converters.CloseEventInit(eventInitDict);
          super(type, eventInitDict);
          this.#eventInit = eventInitDict;
        }
        get wasClean() {
          webidl.brandCheck(this, _CloseEvent);
          return this.#eventInit.wasClean;
        }
        get code() {
          webidl.brandCheck(this, _CloseEvent);
          return this.#eventInit.code;
        }
        get reason() {
          webidl.brandCheck(this, _CloseEvent);
          return this.#eventInit.reason;
        }
      };
      var ErrorEvent = class _ErrorEvent extends Event {
        static {
          __name(this, "ErrorEvent");
        }
        #eventInit;
        constructor(type, eventInitDict) {
          webidl.argumentLengthCheck(arguments, 1, {
            header: "ErrorEvent constructor",
          });
          super(type, eventInitDict);
          type = webidl.converters.DOMString(type);
          eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {});
          this.#eventInit = eventInitDict;
        }
        get message() {
          webidl.brandCheck(this, _ErrorEvent);
          return this.#eventInit.message;
        }
        get filename() {
          webidl.brandCheck(this, _ErrorEvent);
          return this.#eventInit.filename;
        }
        get lineno() {
          webidl.brandCheck(this, _ErrorEvent);
          return this.#eventInit.lineno;
        }
        get colno() {
          webidl.brandCheck(this, _ErrorEvent);
          return this.#eventInit.colno;
        }
        get error() {
          webidl.brandCheck(this, _ErrorEvent);
          return this.#eventInit.error;
        }
      };
      Object.defineProperties(MessageEvent.prototype, {
        [Symbol.toStringTag]: {
          value: "MessageEvent",
          configurable: true,
        },
        data: kEnumerableProperty,
        origin: kEnumerableProperty,
        lastEventId: kEnumerableProperty,
        source: kEnumerableProperty,
        ports: kEnumerableProperty,
        initMessageEvent: kEnumerableProperty,
      });
      Object.defineProperties(CloseEvent.prototype, {
        [Symbol.toStringTag]: {
          value: "CloseEvent",
          configurable: true,
        },
        reason: kEnumerableProperty,
        code: kEnumerableProperty,
        wasClean: kEnumerableProperty,
      });
      Object.defineProperties(ErrorEvent.prototype, {
        [Symbol.toStringTag]: {
          value: "ErrorEvent",
          configurable: true,
        },
        message: kEnumerableProperty,
        filename: kEnumerableProperty,
        lineno: kEnumerableProperty,
        colno: kEnumerableProperty,
        error: kEnumerableProperty,
      });
      webidl.converters.MessagePort = webidl.interfaceConverter(MessagePort);
      webidl.converters["sequence<MessagePort>"] = webidl.sequenceConverter(
        webidl.converters.MessagePort,
      );
      var eventInit = [
        {
          key: "bubbles",
          converter: webidl.converters.boolean,
          defaultValue: false,
        },
        {
          key: "cancelable",
          converter: webidl.converters.boolean,
          defaultValue: false,
        },
        {
          key: "composed",
          converter: webidl.converters.boolean,
          defaultValue: false,
        },
      ];
      webidl.converters.MessageEventInit = webidl.dictionaryConverter([
        ...eventInit,
        {
          key: "data",
          converter: webidl.converters.any,
          defaultValue: null,
        },
        {
          key: "origin",
          converter: webidl.converters.USVString,
          defaultValue: "",
        },
        {
          key: "lastEventId",
          converter: webidl.converters.DOMString,
          defaultValue: "",
        },
        {
          key: "source",
          // Node doesn't implement WindowProxy or ServiceWorker, so the only
          // valid value for source is a MessagePort.
          converter: webidl.nullableConverter(webidl.converters.MessagePort),
          defaultValue: null,
        },
        {
          key: "ports",
          converter: webidl.converters["sequence<MessagePort>"],
          get defaultValue() {
            return [];
          },
        },
      ]);
      webidl.converters.CloseEventInit = webidl.dictionaryConverter([
        ...eventInit,
        {
          key: "wasClean",
          converter: webidl.converters.boolean,
          defaultValue: false,
        },
        {
          key: "code",
          converter: webidl.converters["unsigned short"],
          defaultValue: 0,
        },
        {
          key: "reason",
          converter: webidl.converters.USVString,
          defaultValue: "",
        },
      ]);
      webidl.converters.ErrorEventInit = webidl.dictionaryConverter([
        ...eventInit,
        {
          key: "message",
          converter: webidl.converters.DOMString,
          defaultValue: "",
        },
        {
          key: "filename",
          converter: webidl.converters.USVString,
          defaultValue: "",
        },
        {
          key: "lineno",
          converter: webidl.converters["unsigned long"],
          defaultValue: 0,
        },
        {
          key: "colno",
          converter: webidl.converters["unsigned long"],
          defaultValue: 0,
        },
        {
          key: "error",
          converter: webidl.converters.any,
        },
      ]);
      module.exports = {
        MessageEvent,
        CloseEvent,
        ErrorEvent,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/util.js
  var require_util7 = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/util.js"(
      exports,
      module,
    ) {
      "use strict";
      var { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } =
        require_symbols5();
      var { states, opcodes } = require_constants5();
      var { MessageEvent, ErrorEvent } = require_events();
      function isEstablished(ws) {
        return ws[kReadyState] === states.OPEN;
      }
      __name(isEstablished, "isEstablished");
      function isClosing(ws) {
        return ws[kReadyState] === states.CLOSING;
      }
      __name(isClosing, "isClosing");
      function isClosed(ws) {
        return ws[kReadyState] === states.CLOSED;
      }
      __name(isClosed, "isClosed");
      function fireEvent(e, target, eventConstructor = Event, eventInitDict) {
        const event = new eventConstructor(e, eventInitDict);
        target.dispatchEvent(event);
      }
      __name(fireEvent, "fireEvent");
      function websocketMessageReceived(ws, type, data) {
        if (ws[kReadyState] !== states.OPEN) {
          return;
        }
        let dataForEvent;
        if (type === opcodes.TEXT) {
          try {
            dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(
              data,
            );
          } catch {
            failWebsocketConnection(
              ws,
              "Received invalid UTF-8 in text frame.",
            );
            return;
          }
        } else if (type === opcodes.BINARY) {
          if (ws[kBinaryType] === "blob") {
            dataForEvent = new Blob([data]);
          } else {
            dataForEvent = new Uint8Array(data).buffer;
          }
        }
        fireEvent("message", ws, MessageEvent, {
          origin: ws[kWebSocketURL].origin,
          data: dataForEvent,
        });
      }
      __name(websocketMessageReceived, "websocketMessageReceived");
      function isValidSubprotocol(protocol) {
        if (protocol.length === 0) {
          return false;
        }
        for (const char of protocol) {
          const code2 = char.charCodeAt(0);
          if (
            code2 < 33 ||
            code2 > 126 ||
            char === "(" ||
            char === ")" ||
            char === "<" ||
            char === ">" ||
            char === "@" ||
            char === "," ||
            char === ";" ||
            char === ":" ||
            char === "\\" ||
            char === '"' ||
            char === "/" ||
            char === "[" ||
            char === "]" ||
            char === "?" ||
            char === "=" ||
            char === "{" ||
            char === "}" ||
            code2 === 32 || // SP
            code2 === 9
          ) {
            return false;
          }
        }
        return true;
      }
      __name(isValidSubprotocol, "isValidSubprotocol");
      function isValidStatusCode(code2) {
        if (code2 >= 1e3 && code2 < 1015) {
          return (
            code2 !== 1004 && // reserved
            code2 !== 1005 && // "MUST NOT be set as a status code"
            code2 !== 1006
          );
        }
        return code2 >= 3e3 && code2 <= 4999;
      }
      __name(isValidStatusCode, "isValidStatusCode");
      function failWebsocketConnection(ws, reason) {
        const { [kController]: controller, [kResponse]: response } = ws;
        controller.abort();
        if (response?.socket && !response.socket.destroyed) {
          response.socket.destroy();
        }
        if (reason) {
          fireEvent("error", ws, ErrorEvent, {
            error: new Error(reason),
          });
        }
      }
      __name(failWebsocketConnection, "failWebsocketConnection");
      module.exports = {
        isEstablished,
        isClosing,
        isClosed,
        fireEvent,
        isValidSubprotocol,
        isValidStatusCode,
        failWebsocketConnection,
        websocketMessageReceived,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/connection.js
  var require_connection = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/connection.js"(
      exports,
      module,
    ) {
      "use strict";
      var diagnosticsChannel = __require("diagnostics_channel");
      var { uid, states } = require_constants5();
      var { kReadyState, kSentClose, kByteParser, kReceivedClose } =
        require_symbols5();
      var { fireEvent, failWebsocketConnection } = require_util7();
      var { CloseEvent } = require_events();
      var { makeRequest } = require_request2();
      var { fetching } = require_fetch();
      var { Headers } = require_headers();
      var { getGlobalDispatcher } = require_global2();
      var { kHeadersList } = require_symbols();
      var channels = {};
      channels.open = diagnosticsChannel.channel("undici:websocket:open");
      channels.close = diagnosticsChannel.channel("undici:websocket:close");
      channels.socketError = diagnosticsChannel.channel(
        "undici:websocket:socket_error",
      );
      var crypto4;
      try {
        crypto4 = __require("crypto");
      } catch {}
      function establishWebSocketConnection(
        url,
        protocols,
        ws,
        onEstablish,
        options,
      ) {
        const requestURL = url;
        requestURL.protocol = url.protocol === "ws:" ? "http:" : "https:";
        const request = makeRequest({
          urlList: [requestURL],
          serviceWorkers: "none",
          referrer: "no-referrer",
          mode: "websocket",
          credentials: "include",
          cache: "no-store",
          redirect: "error",
        });
        if (options.headers) {
          const headersList = new Headers(options.headers)[kHeadersList];
          request.headersList = headersList;
        }
        const keyValue = crypto4.randomBytes(16).toString("base64");
        request.headersList.append("sec-websocket-key", keyValue);
        request.headersList.append("sec-websocket-version", "13");
        for (const protocol of protocols) {
          request.headersList.append("sec-websocket-protocol", protocol);
        }
        const permessageDeflate = "";
        const controller = fetching({
          request,
          useParallelQueue: true,
          dispatcher: options.dispatcher ?? getGlobalDispatcher(),
          processResponse(response) {
            if (response.type === "error" || response.status !== 101) {
              failWebsocketConnection(
                ws,
                "Received network error or non-101 status code.",
              );
              return;
            }
            if (
              protocols.length !== 0 &&
              !response.headersList.get("Sec-WebSocket-Protocol")
            ) {
              failWebsocketConnection(
                ws,
                "Server did not respond with sent protocols.",
              );
              return;
            }
            if (
              response.headersList.get("Upgrade")?.toLowerCase() !== "websocket"
            ) {
              failWebsocketConnection(
                ws,
                'Server did not set Upgrade header to "websocket".',
              );
              return;
            }
            if (
              response.headersList.get("Connection")?.toLowerCase() !==
              "upgrade"
            ) {
              failWebsocketConnection(
                ws,
                'Server did not set Connection header to "upgrade".',
              );
              return;
            }
            const secWSAccept = response.headersList.get(
              "Sec-WebSocket-Accept",
            );
            const digest = crypto4
              .createHash("sha1")
              .update(keyValue + uid)
              .digest("base64");
            if (secWSAccept !== digest) {
              failWebsocketConnection(
                ws,
                "Incorrect hash received in Sec-WebSocket-Accept header.",
              );
              return;
            }
            const secExtension = response.headersList.get(
              "Sec-WebSocket-Extensions",
            );
            if (secExtension !== null && secExtension !== permessageDeflate) {
              failWebsocketConnection(
                ws,
                "Received different permessage-deflate than the one set.",
              );
              return;
            }
            const secProtocol = response.headersList.get(
              "Sec-WebSocket-Protocol",
            );
            if (
              secProtocol !== null &&
              secProtocol !== request.headersList.get("Sec-WebSocket-Protocol")
            ) {
              failWebsocketConnection(
                ws,
                "Protocol was not set in the opening handshake.",
              );
              return;
            }
            response.socket.on("data", onSocketData);
            response.socket.on("close", onSocketClose);
            response.socket.on("error", onSocketError);
            if (channels.open.hasSubscribers) {
              channels.open.publish({
                address: response.socket.address(),
                protocol: secProtocol,
                extensions: secExtension,
              });
            }
            onEstablish(response);
          },
        });
        return controller;
      }
      __name(establishWebSocketConnection, "establishWebSocketConnection");
      function onSocketData(chunk) {
        if (!this.ws[kByteParser].write(chunk)) {
          this.pause();
        }
      }
      __name(onSocketData, "onSocketData");
      function onSocketClose() {
        const { ws } = this;
        const wasClean = ws[kSentClose] && ws[kReceivedClose];
        let code2 = 1005;
        let reason = "";
        const result = ws[kByteParser].closingInfo;
        if (result) {
          code2 = result.code ?? 1005;
          reason = result.reason;
        } else if (!ws[kSentClose]) {
          code2 = 1006;
        }
        ws[kReadyState] = states.CLOSED;
        fireEvent("close", ws, CloseEvent, {
          wasClean,
          code: code2,
          reason,
        });
        if (channels.close.hasSubscribers) {
          channels.close.publish({
            websocket: ws,
            code: code2,
            reason,
          });
        }
      }
      __name(onSocketClose, "onSocketClose");
      function onSocketError(error) {
        const { ws } = this;
        ws[kReadyState] = states.CLOSING;
        if (channels.socketError.hasSubscribers) {
          channels.socketError.publish(error);
        }
        this.destroy();
      }
      __name(onSocketError, "onSocketError");
      module.exports = {
        establishWebSocketConnection,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/frame.js
  var require_frame = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/frame.js"(
      exports,
      module,
    ) {
      "use strict";
      var { maxUnsigned16Bit } = require_constants5();
      var crypto4;
      try {
        crypto4 = __require("crypto");
      } catch {}
      var WebsocketFrameSend = class {
        static {
          __name(this, "WebsocketFrameSend");
        }
        /**
         * @param {Buffer|undefined} data
         */
        constructor(data) {
          this.frameData = data;
          this.maskKey = crypto4.randomBytes(4);
        }
        createFrame(opcode) {
          const bodyLength = this.frameData?.byteLength ?? 0;
          let payloadLength = bodyLength;
          let offset = 6;
          if (bodyLength > maxUnsigned16Bit) {
            offset += 8;
            payloadLength = 127;
          } else if (bodyLength > 125) {
            offset += 2;
            payloadLength = 126;
          }
          const buffer = Buffer.allocUnsafe(bodyLength + offset);
          buffer[0] = buffer[1] = 0;
          buffer[0] |= 128;
          buffer[0] = (buffer[0] & 240) + opcode;
          buffer[offset - 4] = this.maskKey[0];
          buffer[offset - 3] = this.maskKey[1];
          buffer[offset - 2] = this.maskKey[2];
          buffer[offset - 1] = this.maskKey[3];
          buffer[1] = payloadLength;
          if (payloadLength === 126) {
            buffer.writeUInt16BE(bodyLength, 2);
          } else if (payloadLength === 127) {
            buffer[2] = buffer[3] = 0;
            buffer.writeUIntBE(bodyLength, 4, 6);
          }
          buffer[1] |= 128;
          for (let i = 0; i < bodyLength; i++) {
            buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
          }
          return buffer;
        }
      };
      module.exports = {
        WebsocketFrameSend,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/receiver.js
  var require_receiver = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/receiver.js"(
      exports,
      module,
    ) {
      "use strict";
      var { Writable } = __require("stream");
      var diagnosticsChannel = __require("diagnostics_channel");
      var { parserStates, opcodes, states, emptyBuffer } = require_constants5();
      var { kReadyState, kSentClose, kResponse, kReceivedClose } =
        require_symbols5();
      var {
        isValidStatusCode,
        failWebsocketConnection,
        websocketMessageReceived,
      } = require_util7();
      var { WebsocketFrameSend } = require_frame();
      var channels = {};
      channels.ping = diagnosticsChannel.channel("undici:websocket:ping");
      channels.pong = diagnosticsChannel.channel("undici:websocket:pong");
      var ByteParser = class extends Writable {
        static {
          __name(this, "ByteParser");
        }
        #buffers = [];
        #byteOffset = 0;
        #state = parserStates.INFO;
        #info = {};
        #fragments = [];
        constructor(ws) {
          super();
          this.ws = ws;
        }
        /**
         * @param {Buffer} chunk
         * @param {() => void} callback
         */
        _write(chunk, _, callback) {
          this.#buffers.push(chunk);
          this.#byteOffset += chunk.length;
          this.run(callback);
        }
        /**
         * Runs whenever a new chunk is received.
         * Callback is called whenever there are no more chunks buffering,
         * or not enough bytes are buffered to parse.
         */
        run(callback) {
          while (true) {
            if (this.#state === parserStates.INFO) {
              if (this.#byteOffset < 2) {
                return callback();
              }
              const buffer = this.consume(2);
              this.#info.fin = (buffer[0] & 128) !== 0;
              this.#info.opcode = buffer[0] & 15;
              this.#info.originalOpcode ??= this.#info.opcode;
              this.#info.fragmented =
                !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION;
              if (
                this.#info.fragmented &&
                this.#info.opcode !== opcodes.BINARY &&
                this.#info.opcode !== opcodes.TEXT
              ) {
                failWebsocketConnection(
                  this.ws,
                  "Invalid frame type was fragmented.",
                );
                return;
              }
              const payloadLength = buffer[1] & 127;
              if (payloadLength <= 125) {
                this.#info.payloadLength = payloadLength;
                this.#state = parserStates.READ_DATA;
              } else if (payloadLength === 126) {
                this.#state = parserStates.PAYLOADLENGTH_16;
              } else if (payloadLength === 127) {
                this.#state = parserStates.PAYLOADLENGTH_64;
              }
              if (this.#info.fragmented && payloadLength > 125) {
                failWebsocketConnection(
                  this.ws,
                  "Fragmented frame exceeded 125 bytes.",
                );
                return;
              } else if (
                (this.#info.opcode === opcodes.PING ||
                  this.#info.opcode === opcodes.PONG ||
                  this.#info.opcode === opcodes.CLOSE) &&
                payloadLength > 125
              ) {
                failWebsocketConnection(
                  this.ws,
                  "Payload length for control frame exceeded 125 bytes.",
                );
                return;
              } else if (this.#info.opcode === opcodes.CLOSE) {
                if (payloadLength === 1) {
                  failWebsocketConnection(
                    this.ws,
                    "Received close frame with a 1-byte body.",
                  );
                  return;
                }
                const body = this.consume(payloadLength);
                this.#info.closeInfo = this.parseCloseBody(false, body);
                if (!this.ws[kSentClose]) {
                  const body2 = Buffer.allocUnsafe(2);
                  body2.writeUInt16BE(this.#info.closeInfo.code, 0);
                  const closeFrame = new WebsocketFrameSend(body2);
                  this.ws[kResponse].socket.write(
                    closeFrame.createFrame(opcodes.CLOSE),
                    (err) => {
                      if (!err) {
                        this.ws[kSentClose] = true;
                      }
                    },
                  );
                }
                this.ws[kReadyState] = states.CLOSING;
                this.ws[kReceivedClose] = true;
                this.end();
                return;
              } else if (this.#info.opcode === opcodes.PING) {
                const body = this.consume(payloadLength);
                if (!this.ws[kReceivedClose]) {
                  const frame = new WebsocketFrameSend(body);
                  this.ws[kResponse].socket.write(
                    frame.createFrame(opcodes.PONG),
                  );
                  if (channels.ping.hasSubscribers) {
                    channels.ping.publish({
                      payload: body,
                    });
                  }
                }
                this.#state = parserStates.INFO;
                if (this.#byteOffset > 0) {
                  continue;
                } else {
                  callback();
                  return;
                }
              } else if (this.#info.opcode === opcodes.PONG) {
                const body = this.consume(payloadLength);
                if (channels.pong.hasSubscribers) {
                  channels.pong.publish({
                    payload: body,
                  });
                }
                if (this.#byteOffset > 0) {
                  continue;
                } else {
                  callback();
                  return;
                }
              }
            } else if (this.#state === parserStates.PAYLOADLENGTH_16) {
              if (this.#byteOffset < 2) {
                return callback();
              }
              const buffer = this.consume(2);
              this.#info.payloadLength = buffer.readUInt16BE(0);
              this.#state = parserStates.READ_DATA;
            } else if (this.#state === parserStates.PAYLOADLENGTH_64) {
              if (this.#byteOffset < 8) {
                return callback();
              }
              const buffer = this.consume(8);
              const upper = buffer.readUInt32BE(0);
              if (upper > 2 ** 31 - 1) {
                failWebsocketConnection(
                  this.ws,
                  "Received payload length > 2^31 bytes.",
                );
                return;
              }
              const lower = buffer.readUInt32BE(4);
              this.#info.payloadLength = (upper << 8) + lower;
              this.#state = parserStates.READ_DATA;
            } else if (this.#state === parserStates.READ_DATA) {
              if (this.#byteOffset < this.#info.payloadLength) {
                return callback();
              } else if (this.#byteOffset >= this.#info.payloadLength) {
                const body = this.consume(this.#info.payloadLength);
                this.#fragments.push(body);
                if (
                  !this.#info.fragmented ||
                  (this.#info.fin && this.#info.opcode === opcodes.CONTINUATION)
                ) {
                  const fullMessage = Buffer.concat(this.#fragments);
                  websocketMessageReceived(
                    this.ws,
                    this.#info.originalOpcode,
                    fullMessage,
                  );
                  this.#info = {};
                  this.#fragments.length = 0;
                }
                this.#state = parserStates.INFO;
              }
            }
            if (this.#byteOffset > 0) {
              continue;
            } else {
              callback();
              break;
            }
          }
        }
        /**
         * Take n bytes from the buffered Buffers
         * @param {number} n
         * @returns {Buffer|null}
         */
        consume(n) {
          if (n > this.#byteOffset) {
            return null;
          } else if (n === 0) {
            return emptyBuffer;
          }
          if (this.#buffers[0].length === n) {
            this.#byteOffset -= this.#buffers[0].length;
            return this.#buffers.shift();
          }
          const buffer = Buffer.allocUnsafe(n);
          let offset = 0;
          while (offset !== n) {
            const next = this.#buffers[0];
            const { length } = next;
            if (length + offset === n) {
              buffer.set(this.#buffers.shift(), offset);
              break;
            } else if (length + offset > n) {
              buffer.set(next.subarray(0, n - offset), offset);
              this.#buffers[0] = next.subarray(n - offset);
              break;
            } else {
              buffer.set(this.#buffers.shift(), offset);
              offset += next.length;
            }
          }
          this.#byteOffset -= n;
          return buffer;
        }
        parseCloseBody(onlyCode, data) {
          let code2;
          if (data.length >= 2) {
            code2 = data.readUInt16BE(0);
          }
          if (onlyCode) {
            if (!isValidStatusCode(code2)) {
              return null;
            }
            return { code: code2 };
          }
          let reason = data.subarray(2);
          if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) {
            reason = reason.subarray(3);
          }
          if (code2 !== void 0 && !isValidStatusCode(code2)) {
            return null;
          }
          try {
            reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
          } catch {
            return null;
          }
          return { code: code2, reason };
        }
        get closingInfo() {
          return this.#info.closeInfo;
        }
      };
      module.exports = {
        ByteParser,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/websocket.js
  var require_websocket = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/lib/websocket/websocket.js"(
      exports,
      module,
    ) {
      "use strict";
      var { webidl } = require_webidl();
      var { DOMException: DOMException2 } = require_constants2();
      var { URLSerializer } = require_dataURL();
      var { getGlobalOrigin } = require_global();
      var { staticPropertyDescriptors, states, opcodes, emptyBuffer } =
        require_constants5();
      var {
        kWebSocketURL,
        kReadyState,
        kController,
        kBinaryType,
        kResponse,
        kSentClose,
        kByteParser,
      } = require_symbols5();
      var {
        isEstablished,
        isClosing,
        isValidSubprotocol,
        failWebsocketConnection,
        fireEvent,
      } = require_util7();
      var { establishWebSocketConnection } = require_connection();
      var { WebsocketFrameSend } = require_frame();
      var { ByteParser } = require_receiver();
      var { kEnumerableProperty, isBlobLike } = require_util();
      var { getGlobalDispatcher } = require_global2();
      var { types } = __require("util");
      var experimentalWarned = false;
      var WebSocket = class _WebSocket extends EventTarget {
        static {
          __name(this, "WebSocket");
        }
        #events = {
          open: null,
          error: null,
          close: null,
          message: null,
        };
        #bufferedAmount = 0;
        #protocol = "";
        #extensions = "";
        /**
         * @param {string} url
         * @param {string|string[]} protocols
         */
        constructor(url, protocols = []) {
          super();
          webidl.argumentLengthCheck(arguments, 1, {
            header: "WebSocket constructor",
          });
          if (!experimentalWarned) {
            experimentalWarned = true;
            process.emitWarning(
              "WebSockets are experimental, expect them to change at any time.",
              {
                code: "UNDICI-WS",
              },
            );
          }
          const options =
            webidl.converters[
              "DOMString or sequence<DOMString> or WebSocketInit"
            ](protocols);
          url = webidl.converters.USVString(url);
          protocols = options.protocols;
          const baseURL = getGlobalOrigin();
          let urlRecord;
          try {
            urlRecord = new URL(url, baseURL);
          } catch (e) {
            throw new DOMException2(e, "SyntaxError");
          }
          if (urlRecord.protocol === "http:") {
            urlRecord.protocol = "ws:";
          } else if (urlRecord.protocol === "https:") {
            urlRecord.protocol = "wss:";
          }
          if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") {
            throw new DOMException2(
              `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,
              "SyntaxError",
            );
          }
          if (urlRecord.hash || urlRecord.href.endsWith("#")) {
            throw new DOMException2("Got fragment", "SyntaxError");
          }
          if (typeof protocols === "string") {
            protocols = [protocols];
          }
          if (
            protocols.length !==
            new Set(protocols.map((p) => p.toLowerCase())).size
          ) {
            throw new DOMException2(
              "Invalid Sec-WebSocket-Protocol value",
              "SyntaxError",
            );
          }
          if (
            protocols.length > 0 &&
            !protocols.every((p) => isValidSubprotocol(p))
          ) {
            throw new DOMException2(
              "Invalid Sec-WebSocket-Protocol value",
              "SyntaxError",
            );
          }
          this[kWebSocketURL] = new URL(urlRecord.href);
          this[kController] = establishWebSocketConnection(
            urlRecord,
            protocols,
            this,
            (response) => this.#onConnectionEstablished(response),
            options,
          );
          this[kReadyState] = _WebSocket.CONNECTING;
          this[kBinaryType] = "blob";
        }
        /**
         * @see https://websockets.spec.whatwg.org/#dom-websocket-close
         * @param {number|undefined} code
         * @param {string|undefined} reason
         */
        close(code2 = void 0, reason = void 0) {
          webidl.brandCheck(this, _WebSocket);
          if (code2 !== void 0) {
            code2 = webidl.converters["unsigned short"](code2, { clamp: true });
          }
          if (reason !== void 0) {
            reason = webidl.converters.USVString(reason);
          }
          if (code2 !== void 0) {
            if (code2 !== 1e3 && (code2 < 3e3 || code2 > 4999)) {
              throw new DOMException2("invalid code", "InvalidAccessError");
            }
          }
          let reasonByteLength = 0;
          if (reason !== void 0) {
            reasonByteLength = Buffer.byteLength(reason);
            if (reasonByteLength > 123) {
              throw new DOMException2(
                `Reason must be less than 123 bytes; received ${reasonByteLength}`,
                "SyntaxError",
              );
            }
          }
          if (
            this[kReadyState] === _WebSocket.CLOSING ||
            this[kReadyState] === _WebSocket.CLOSED
          ) {
          } else if (!isEstablished(this)) {
            failWebsocketConnection(
              this,
              "Connection was closed before it was established.",
            );
            this[kReadyState] = _WebSocket.CLOSING;
          } else if (!isClosing(this)) {
            const frame = new WebsocketFrameSend();
            if (code2 !== void 0 && reason === void 0) {
              frame.frameData = Buffer.allocUnsafe(2);
              frame.frameData.writeUInt16BE(code2, 0);
            } else if (code2 !== void 0 && reason !== void 0) {
              frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
              frame.frameData.writeUInt16BE(code2, 0);
              frame.frameData.write(reason, 2, "utf-8");
            } else {
              frame.frameData = emptyBuffer;
            }
            const socket = this[kResponse].socket;
            socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
              if (!err) {
                this[kSentClose] = true;
              }
            });
            this[kReadyState] = states.CLOSING;
          } else {
            this[kReadyState] = _WebSocket.CLOSING;
          }
        }
        /**
         * @see https://websockets.spec.whatwg.org/#dom-websocket-send
         * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
         */
        send(data) {
          webidl.brandCheck(this, _WebSocket);
          webidl.argumentLengthCheck(arguments, 1, {
            header: "WebSocket.send",
          });
          data = webidl.converters.WebSocketSendData(data);
          if (this[kReadyState] === _WebSocket.CONNECTING) {
            throw new DOMException2(
              "Sent before connected.",
              "InvalidStateError",
            );
          }
          if (!isEstablished(this) || isClosing(this)) {
            return;
          }
          const socket = this[kResponse].socket;
          if (typeof data === "string") {
            const value = Buffer.from(data);
            const frame = new WebsocketFrameSend(value);
            const buffer = frame.createFrame(opcodes.TEXT);
            this.#bufferedAmount += value.byteLength;
            socket.write(buffer, () => {
              this.#bufferedAmount -= value.byteLength;
            });
          } else if (types.isArrayBuffer(data)) {
            const value = Buffer.from(data);
            const frame = new WebsocketFrameSend(value);
            const buffer = frame.createFrame(opcodes.BINARY);
            this.#bufferedAmount += value.byteLength;
            socket.write(buffer, () => {
              this.#bufferedAmount -= value.byteLength;
            });
          } else if (ArrayBuffer.isView(data)) {
            const ab = Buffer.from(data, data.byteOffset, data.byteLength);
            const frame = new WebsocketFrameSend(ab);
            const buffer = frame.createFrame(opcodes.BINARY);
            this.#bufferedAmount += ab.byteLength;
            socket.write(buffer, () => {
              this.#bufferedAmount -= ab.byteLength;
            });
          } else if (isBlobLike(data)) {
            const frame = new WebsocketFrameSend();
            data.arrayBuffer().then((ab) => {
              const value = Buffer.from(ab);
              frame.frameData = value;
              const buffer = frame.createFrame(opcodes.BINARY);
              this.#bufferedAmount += value.byteLength;
              socket.write(buffer, () => {
                this.#bufferedAmount -= value.byteLength;
              });
            });
          }
        }
        get readyState() {
          webidl.brandCheck(this, _WebSocket);
          return this[kReadyState];
        }
        get bufferedAmount() {
          webidl.brandCheck(this, _WebSocket);
          return this.#bufferedAmount;
        }
        get url() {
          webidl.brandCheck(this, _WebSocket);
          return URLSerializer(this[kWebSocketURL]);
        }
        get extensions() {
          webidl.brandCheck(this, _WebSocket);
          return this.#extensions;
        }
        get protocol() {
          webidl.brandCheck(this, _WebSocket);
          return this.#protocol;
        }
        get onopen() {
          webidl.brandCheck(this, _WebSocket);
          return this.#events.open;
        }
        set onopen(fn) {
          webidl.brandCheck(this, _WebSocket);
          if (this.#events.open) {
            this.removeEventListener("open", this.#events.open);
          }
          if (typeof fn === "function") {
            this.#events.open = fn;
            this.addEventListener("open", fn);
          } else {
            this.#events.open = null;
          }
        }
        get onerror() {
          webidl.brandCheck(this, _WebSocket);
          return this.#events.error;
        }
        set onerror(fn) {
          webidl.brandCheck(this, _WebSocket);
          if (this.#events.error) {
            this.removeEventListener("error", this.#events.error);
          }
          if (typeof fn === "function") {
            this.#events.error = fn;
            this.addEventListener("error", fn);
          } else {
            this.#events.error = null;
          }
        }
        get onclose() {
          webidl.brandCheck(this, _WebSocket);
          return this.#events.close;
        }
        set onclose(fn) {
          webidl.brandCheck(this, _WebSocket);
          if (this.#events.close) {
            this.removeEventListener("close", this.#events.close);
          }
          if (typeof fn === "function") {
            this.#events.close = fn;
            this.addEventListener("close", fn);
          } else {
            this.#events.close = null;
          }
        }
        get onmessage() {
          webidl.brandCheck(this, _WebSocket);
          return this.#events.message;
        }
        set onmessage(fn) {
          webidl.brandCheck(this, _WebSocket);
          if (this.#events.message) {
            this.removeEventListener("message", this.#events.message);
          }
          if (typeof fn === "function") {
            this.#events.message = fn;
            this.addEventListener("message", fn);
          } else {
            this.#events.message = null;
          }
        }
        get binaryType() {
          webidl.brandCheck(this, _WebSocket);
          return this[kBinaryType];
        }
        set binaryType(type) {
          webidl.brandCheck(this, _WebSocket);
          if (type !== "blob" && type !== "arraybuffer") {
            this[kBinaryType] = "blob";
          } else {
            this[kBinaryType] = type;
          }
        }
        /**
         * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
         */
        #onConnectionEstablished(response) {
          this[kResponse] = response;
          const parser = new ByteParser(this);
          parser.on(
            "drain",
            /* @__PURE__ */ __name(function onParserDrain() {
              this.ws[kResponse].socket.resume();
            }, "onParserDrain"),
          );
          response.socket.ws = this;
          this[kByteParser] = parser;
          this[kReadyState] = states.OPEN;
          const extensions = response.headersList.get(
            "sec-websocket-extensions",
          );
          if (extensions !== null) {
            this.#extensions = extensions;
          }
          const protocol = response.headersList.get("sec-websocket-protocol");
          if (protocol !== null) {
            this.#protocol = protocol;
          }
          fireEvent("open", this);
        }
      };
      WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
      WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
      WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
      WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
      Object.defineProperties(WebSocket.prototype, {
        CONNECTING: staticPropertyDescriptors,
        OPEN: staticPropertyDescriptors,
        CLOSING: staticPropertyDescriptors,
        CLOSED: staticPropertyDescriptors,
        url: kEnumerableProperty,
        readyState: kEnumerableProperty,
        bufferedAmount: kEnumerableProperty,
        onopen: kEnumerableProperty,
        onerror: kEnumerableProperty,
        onclose: kEnumerableProperty,
        close: kEnumerableProperty,
        onmessage: kEnumerableProperty,
        binaryType: kEnumerableProperty,
        send: kEnumerableProperty,
        extensions: kEnumerableProperty,
        protocol: kEnumerableProperty,
        [Symbol.toStringTag]: {
          value: "WebSocket",
          writable: false,
          enumerable: false,
          configurable: true,
        },
      });
      Object.defineProperties(WebSocket, {
        CONNECTING: staticPropertyDescriptors,
        OPEN: staticPropertyDescriptors,
        CLOSING: staticPropertyDescriptors,
        CLOSED: staticPropertyDescriptors,
      });
      webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(
        webidl.converters.DOMString,
      );
      webidl.converters["DOMString or sequence<DOMString>"] = function (V) {
        if (webidl.util.Type(V) === "Object" && Symbol.iterator in V) {
          return webidl.converters["sequence<DOMString>"](V);
        }
        return webidl.converters.DOMString(V);
      };
      webidl.converters.WebSocketInit = webidl.dictionaryConverter([
        {
          key: "protocols",
          converter: webidl.converters["DOMString or sequence<DOMString>"],
          get defaultValue() {
            return [];
          },
        },
        {
          key: "dispatcher",
          converter: /* @__PURE__ */ __name((V) => V, "converter"),
          get defaultValue() {
            return getGlobalDispatcher();
          },
        },
        {
          key: "headers",
          converter: webidl.nullableConverter(webidl.converters.HeadersInit),
        },
      ]);
      webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] =
        function (V) {
          if (webidl.util.Type(V) === "Object" && !(Symbol.iterator in V)) {
            return webidl.converters.WebSocketInit(V);
          }
          return {
            protocols: webidl.converters["DOMString or sequence<DOMString>"](V),
          };
        };
      webidl.converters.WebSocketSendData = function (V) {
        if (webidl.util.Type(V) === "Object") {
          if (isBlobLike(V)) {
            return webidl.converters.Blob(V, { strict: false });
          }
          if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {
            return webidl.converters.BufferSource(V);
          }
        }
        return webidl.converters.USVString(V);
      };
      module.exports = {
        WebSocket,
      };
    },
  });

  // node_modules/.pnpm/undici@5.28.4/node_modules/undici/index.js
  var require_undici = __commonJS({
    "node_modules/.pnpm/undici@5.28.4/node_modules/undici/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var Client = require_client();
      var Dispatcher = require_dispatcher();
      var errors = require_errors();
      var Pool = require_pool();
      var BalancedPool = require_balanced_pool();
      var Agent = require_agent();
      var util2 = require_util();
      var { InvalidArgumentError } = errors;
      var api = require_api();
      var buildConnector = require_connect();
      var MockClient = require_mock_client();
      var MockAgent = require_mock_agent();
      var MockPool = require_mock_pool();
      var mockErrors = require_mock_errors();
      var ProxyAgent = require_proxy_agent();
      var RetryHandler = require_RetryHandler();
      var { getGlobalDispatcher, setGlobalDispatcher } = require_global2();
      var DecoratorHandler = require_DecoratorHandler();
      var RedirectHandler = require_RedirectHandler();
      var createRedirectInterceptor = require_redirectInterceptor();
      var hasCrypto;
      try {
        __require("crypto");
        hasCrypto = true;
      } catch {
        hasCrypto = false;
      }
      Object.assign(Dispatcher.prototype, api);
      module.exports.Dispatcher = Dispatcher;
      module.exports.Client = Client;
      module.exports.Pool = Pool;
      module.exports.BalancedPool = BalancedPool;
      module.exports.Agent = Agent;
      module.exports.ProxyAgent = ProxyAgent;
      module.exports.RetryHandler = RetryHandler;
      module.exports.DecoratorHandler = DecoratorHandler;
      module.exports.RedirectHandler = RedirectHandler;
      module.exports.createRedirectInterceptor = createRedirectInterceptor;
      module.exports.buildConnector = buildConnector;
      module.exports.errors = errors;
      function makeDispatcher(fn) {
        return (url, opts, handler) => {
          if (typeof opts === "function") {
            handler = opts;
            opts = null;
          }
          if (
            !url ||
            (typeof url !== "string" &&
              typeof url !== "object" &&
              !(url instanceof URL))
          ) {
            throw new InvalidArgumentError("invalid url");
          }
          if (opts != null && typeof opts !== "object") {
            throw new InvalidArgumentError("invalid opts");
          }
          if (opts && opts.path != null) {
            if (typeof opts.path !== "string") {
              throw new InvalidArgumentError("invalid opts.path");
            }
            let path4 = opts.path;
            if (!opts.path.startsWith("/")) {
              path4 = `/${path4}`;
            }
            url = new URL(util2.parseOrigin(url).origin + path4);
          } else {
            if (!opts) {
              opts = typeof url === "object" ? url : {};
            }
            url = util2.parseURL(url);
          }
          const { agent, dispatcher = getGlobalDispatcher() } = opts;
          if (agent) {
            throw new InvalidArgumentError(
              "unsupported opts.agent. Did you mean opts.client?",
            );
          }
          return fn.call(
            dispatcher,
            {
              ...opts,
              origin: url.origin,
              path: url.search ? `${url.pathname}${url.search}` : url.pathname,
              method: opts.method || (opts.body ? "PUT" : "GET"),
            },
            handler,
          );
        };
      }
      __name(makeDispatcher, "makeDispatcher");
      module.exports.setGlobalDispatcher = setGlobalDispatcher;
      module.exports.getGlobalDispatcher = getGlobalDispatcher;
      if (
        util2.nodeMajor > 16 ||
        (util2.nodeMajor === 16 && util2.nodeMinor >= 8)
      ) {
        let fetchImpl = null;
        module.exports.fetch = /* @__PURE__ */ __name(async function fetch(
          resource,
        ) {
          if (!fetchImpl) {
            fetchImpl = require_fetch().fetch;
          }
          try {
            return await fetchImpl(...arguments);
          } catch (err) {
            if (typeof err === "object") {
              Error.captureStackTrace(err, this);
            }
            throw err;
          }
        }, "fetch");
        module.exports.Headers = require_headers().Headers;
        module.exports.Response = require_response().Response;
        module.exports.Request = require_request2().Request;
        module.exports.FormData = require_formdata().FormData;
        module.exports.File = require_file().File;
        module.exports.FileReader = require_filereader().FileReader;
        const { setGlobalOrigin, getGlobalOrigin } = require_global();
        module.exports.setGlobalOrigin = setGlobalOrigin;
        module.exports.getGlobalOrigin = getGlobalOrigin;
        const { CacheStorage } = require_cachestorage();
        const { kConstruct } = require_symbols4();
        module.exports.caches = new CacheStorage(kConstruct);
      }
      if (util2.nodeMajor >= 16) {
        const { deleteCookie, getCookies, getSetCookies, setCookie } =
          require_cookies();
        module.exports.deleteCookie = deleteCookie;
        module.exports.getCookies = getCookies;
        module.exports.getSetCookies = getSetCookies;
        module.exports.setCookie = setCookie;
        const { parseMIMEType, serializeAMimeType } = require_dataURL();
        module.exports.parseMIMEType = parseMIMEType;
        module.exports.serializeAMimeType = serializeAMimeType;
      }
      if (util2.nodeMajor >= 18 && hasCrypto) {
        const { WebSocket } = require_websocket();
        module.exports.WebSocket = WebSocket;
      }
      module.exports.request = makeDispatcher(api.request);
      module.exports.stream = makeDispatcher(api.stream);
      module.exports.pipeline = makeDispatcher(api.pipeline);
      module.exports.connect = makeDispatcher(api.connect);
      module.exports.upgrade = makeDispatcher(api.upgrade);
      module.exports.MockClient = MockClient;
      module.exports.MockPool = MockPool;
      module.exports.MockAgent = MockAgent;
      module.exports.mockErrors = mockErrors;
    },
  });

  // node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/index.js
  var require_lib = __commonJS({
    "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/index.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              var desc = Object.getOwnPropertyDescriptor(m, k);
              if (
                !desc ||
                ("get" in desc
                  ? !m.__esModule
                  : desc.writable || desc.configurable)
              ) {
                desc = {
                  enumerable: true,
                  get: /* @__PURE__ */ __name(function () {
                    return m[k];
                  }, "get"),
                };
              }
              Object.defineProperty(o, k2, desc);
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== "default" &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __awaiter =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          __name(adopt, "adopt");
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            __name(fulfilled, "fulfilled");
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            __name(rejected, "rejected");
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            __name(step, "step");
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.HttpClient =
        exports.isHttps =
        exports.HttpClientResponse =
        exports.HttpClientError =
        exports.getProxyUrl =
        exports.MediaTypes =
        exports.Headers =
        exports.HttpCodes =
          void 0;
      var http = __importStar(__require("http"));
      var https = __importStar(__require("https"));
      var pm = __importStar(require_proxy());
      var tunnel = __importStar(require_tunnel2());
      var undici_1 = require_undici();
      var HttpCodes;
      (function (HttpCodes2) {
        HttpCodes2[(HttpCodes2["OK"] = 200)] = "OK";
        HttpCodes2[(HttpCodes2["MultipleChoices"] = 300)] = "MultipleChoices";
        HttpCodes2[(HttpCodes2["MovedPermanently"] = 301)] = "MovedPermanently";
        HttpCodes2[(HttpCodes2["ResourceMoved"] = 302)] = "ResourceMoved";
        HttpCodes2[(HttpCodes2["SeeOther"] = 303)] = "SeeOther";
        HttpCodes2[(HttpCodes2["NotModified"] = 304)] = "NotModified";
        HttpCodes2[(HttpCodes2["UseProxy"] = 305)] = "UseProxy";
        HttpCodes2[(HttpCodes2["SwitchProxy"] = 306)] = "SwitchProxy";
        HttpCodes2[(HttpCodes2["TemporaryRedirect"] = 307)] =
          "TemporaryRedirect";
        HttpCodes2[(HttpCodes2["PermanentRedirect"] = 308)] =
          "PermanentRedirect";
        HttpCodes2[(HttpCodes2["BadRequest"] = 400)] = "BadRequest";
        HttpCodes2[(HttpCodes2["Unauthorized"] = 401)] = "Unauthorized";
        HttpCodes2[(HttpCodes2["PaymentRequired"] = 402)] = "PaymentRequired";
        HttpCodes2[(HttpCodes2["Forbidden"] = 403)] = "Forbidden";
        HttpCodes2[(HttpCodes2["NotFound"] = 404)] = "NotFound";
        HttpCodes2[(HttpCodes2["MethodNotAllowed"] = 405)] = "MethodNotAllowed";
        HttpCodes2[(HttpCodes2["NotAcceptable"] = 406)] = "NotAcceptable";
        HttpCodes2[(HttpCodes2["ProxyAuthenticationRequired"] = 407)] =
          "ProxyAuthenticationRequired";
        HttpCodes2[(HttpCodes2["RequestTimeout"] = 408)] = "RequestTimeout";
        HttpCodes2[(HttpCodes2["Conflict"] = 409)] = "Conflict";
        HttpCodes2[(HttpCodes2["Gone"] = 410)] = "Gone";
        HttpCodes2[(HttpCodes2["TooManyRequests"] = 429)] = "TooManyRequests";
        HttpCodes2[(HttpCodes2["InternalServerError"] = 500)] =
          "InternalServerError";
        HttpCodes2[(HttpCodes2["NotImplemented"] = 501)] = "NotImplemented";
        HttpCodes2[(HttpCodes2["BadGateway"] = 502)] = "BadGateway";
        HttpCodes2[(HttpCodes2["ServiceUnavailable"] = 503)] =
          "ServiceUnavailable";
        HttpCodes2[(HttpCodes2["GatewayTimeout"] = 504)] = "GatewayTimeout";
      })(HttpCodes || (exports.HttpCodes = HttpCodes = {}));
      var Headers;
      (function (Headers2) {
        Headers2["Accept"] = "accept";
        Headers2["ContentType"] = "content-type";
      })(Headers || (exports.Headers = Headers = {}));
      var MediaTypes;
      (function (MediaTypes2) {
        MediaTypes2["ApplicationJson"] = "application/json";
      })(MediaTypes || (exports.MediaTypes = MediaTypes = {}));
      function getProxyUrl(serverUrl) {
        const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
        return proxyUrl ? proxyUrl.href : "";
      }
      __name(getProxyUrl, "getProxyUrl");
      exports.getProxyUrl = getProxyUrl;
      var HttpRedirectCodes = [
        HttpCodes.MovedPermanently,
        HttpCodes.ResourceMoved,
        HttpCodes.SeeOther,
        HttpCodes.TemporaryRedirect,
        HttpCodes.PermanentRedirect,
      ];
      var HttpResponseRetryCodes = [
        HttpCodes.BadGateway,
        HttpCodes.ServiceUnavailable,
        HttpCodes.GatewayTimeout,
      ];
      var RetryableHttpVerbs = ["OPTIONS", "GET", "DELETE", "HEAD"];
      var ExponentialBackoffCeiling = 10;
      var ExponentialBackoffTimeSlice = 5;
      var HttpClientError = class _HttpClientError extends Error {
        static {
          __name(this, "HttpClientError");
        }
        constructor(message, statusCode) {
          super(message);
          this.name = "HttpClientError";
          this.statusCode = statusCode;
          Object.setPrototypeOf(this, _HttpClientError.prototype);
        }
      };
      exports.HttpClientError = HttpClientError;
      var HttpClientResponse = class {
        static {
          __name(this, "HttpClientResponse");
        }
        constructor(message) {
          this.message = message;
        }
        readBody() {
          return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) =>
              __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on("data", (chunk) => {
                  output = Buffer.concat([output, chunk]);
                });
                this.message.on("end", () => {
                  resolve(output.toString());
                });
              }),
            );
          });
        }
        readBodyBuffer() {
          return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) =>
              __awaiter(this, void 0, void 0, function* () {
                const chunks = [];
                this.message.on("data", (chunk) => {
                  chunks.push(chunk);
                });
                this.message.on("end", () => {
                  resolve(Buffer.concat(chunks));
                });
              }),
            );
          });
        }
      };
      exports.HttpClientResponse = HttpClientResponse;
      function isHttps(requestUrl) {
        const parsedUrl = new URL(requestUrl);
        return parsedUrl.protocol === "https:";
      }
      __name(isHttps, "isHttps");
      exports.isHttps = isHttps;
      var HttpClient = class {
        static {
          __name(this, "HttpClient");
        }
        constructor(userAgent, handlers, requestOptions) {
          this._ignoreSslError = false;
          this._allowRedirects = true;
          this._allowRedirectDowngrade = false;
          this._maxRedirects = 50;
          this._allowRetries = false;
          this._maxRetries = 1;
          this._keepAlive = false;
          this._disposed = false;
          this.userAgent = userAgent;
          this.handlers = handlers || [];
          this.requestOptions = requestOptions;
          if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
              this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
              this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
              this._allowRedirectDowngrade =
                requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
              this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
              this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
              this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
              this._maxRetries = requestOptions.maxRetries;
            }
          }
        }
        options(requestUrl, additionalHeaders) {
          return __awaiter(this, void 0, void 0, function* () {
            return this.request(
              "OPTIONS",
              requestUrl,
              null,
              additionalHeaders || {},
            );
          });
        }
        get(requestUrl, additionalHeaders) {
          return __awaiter(this, void 0, void 0, function* () {
            return this.request(
              "GET",
              requestUrl,
              null,
              additionalHeaders || {},
            );
          });
        }
        del(requestUrl, additionalHeaders) {
          return __awaiter(this, void 0, void 0, function* () {
            return this.request(
              "DELETE",
              requestUrl,
              null,
              additionalHeaders || {},
            );
          });
        }
        post(requestUrl, data, additionalHeaders) {
          return __awaiter(this, void 0, void 0, function* () {
            return this.request(
              "POST",
              requestUrl,
              data,
              additionalHeaders || {},
            );
          });
        }
        patch(requestUrl, data, additionalHeaders) {
          return __awaiter(this, void 0, void 0, function* () {
            return this.request(
              "PATCH",
              requestUrl,
              data,
              additionalHeaders || {},
            );
          });
        }
        put(requestUrl, data, additionalHeaders) {
          return __awaiter(this, void 0, void 0, function* () {
            return this.request(
              "PUT",
              requestUrl,
              data,
              additionalHeaders || {},
            );
          });
        }
        head(requestUrl, additionalHeaders) {
          return __awaiter(this, void 0, void 0, function* () {
            return this.request(
              "HEAD",
              requestUrl,
              null,
              additionalHeaders || {},
            );
          });
        }
        sendStream(verb, requestUrl, stream, additionalHeaders) {
          return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
          });
        }
        /**
         * Gets a typed object from an endpoint
         * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
         */
        getJson(requestUrl, additionalHeaders = {}) {
          return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] =
              this._getExistingOrDefaultHeader(
                additionalHeaders,
                Headers.Accept,
                MediaTypes.ApplicationJson,
              );
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
          });
        }
        postJson(requestUrl, obj, additionalHeaders = {}) {
          return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] =
              this._getExistingOrDefaultHeader(
                additionalHeaders,
                Headers.Accept,
                MediaTypes.ApplicationJson,
              );
            additionalHeaders[Headers.ContentType] =
              this._getExistingOrDefaultHeader(
                additionalHeaders,
                Headers.ContentType,
                MediaTypes.ApplicationJson,
              );
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
          });
        }
        putJson(requestUrl, obj, additionalHeaders = {}) {
          return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] =
              this._getExistingOrDefaultHeader(
                additionalHeaders,
                Headers.Accept,
                MediaTypes.ApplicationJson,
              );
            additionalHeaders[Headers.ContentType] =
              this._getExistingOrDefaultHeader(
                additionalHeaders,
                Headers.ContentType,
                MediaTypes.ApplicationJson,
              );
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
          });
        }
        patchJson(requestUrl, obj, additionalHeaders = {}) {
          return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] =
              this._getExistingOrDefaultHeader(
                additionalHeaders,
                Headers.Accept,
                MediaTypes.ApplicationJson,
              );
            additionalHeaders[Headers.ContentType] =
              this._getExistingOrDefaultHeader(
                additionalHeaders,
                Headers.ContentType,
                MediaTypes.ApplicationJson,
              );
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
          });
        }
        /**
         * Makes a raw http request.
         * All other methods such as get, post, patch, and request ultimately call this.
         * Prefer get, del, post and patch
         */
        request(verb, requestUrl, data, headers) {
          return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
              throw new Error("Client has already been disposed.");
            }
            const parsedUrl = new URL(requestUrl);
            let info2 = this._prepareRequest(verb, parsedUrl, headers);
            const maxTries =
              this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
              response = yield this.requestRaw(info2, data);
              if (
                response &&
                response.message &&
                response.message.statusCode === HttpCodes.Unauthorized
              ) {
                let authenticationHandler;
                for (const handler of this.handlers) {
                  if (handler.canHandleAuthentication(response)) {
                    authenticationHandler = handler;
                    break;
                  }
                }
                if (authenticationHandler) {
                  return authenticationHandler.handleAuthentication(
                    this,
                    info2,
                    data,
                  );
                } else {
                  return response;
                }
              }
              let redirectsRemaining = this._maxRedirects;
              while (
                response.message.statusCode &&
                HttpRedirectCodes.includes(response.message.statusCode) &&
                this._allowRedirects &&
                redirectsRemaining > 0
              ) {
                const redirectUrl = response.message.headers["location"];
                if (!redirectUrl) {
                  break;
                }
                const parsedRedirectUrl = new URL(redirectUrl);
                if (
                  parsedUrl.protocol === "https:" &&
                  parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                  !this._allowRedirectDowngrade
                ) {
                  throw new Error(
                    "Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.",
                  );
                }
                yield response.readBody();
                if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                  for (const header in headers) {
                    if (header.toLowerCase() === "authorization") {
                      delete headers[header];
                    }
                  }
                }
                info2 = this._prepareRequest(verb, parsedRedirectUrl, headers);
                response = yield this.requestRaw(info2, data);
                redirectsRemaining--;
              }
              if (
                !response.message.statusCode ||
                !HttpResponseRetryCodes.includes(response.message.statusCode)
              ) {
                return response;
              }
              numTries += 1;
              if (numTries < maxTries) {
                yield response.readBody();
                yield this._performExponentialBackoff(numTries);
              }
            } while (numTries < maxTries);
            return response;
          });
        }
        /**
         * Needs to be called if keepAlive is set to true in request options.
         */
        dispose() {
          if (this._agent) {
            this._agent.destroy();
          }
          this._disposed = true;
        }
        /**
         * Raw request.
         * @param info
         * @param data
         */
        requestRaw(info2, data) {
          return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
              function callbackForResult(err, res) {
                if (err) {
                  reject(err);
                } else if (!res) {
                  reject(new Error("Unknown error"));
                } else {
                  resolve(res);
                }
              }
              __name(callbackForResult, "callbackForResult");
              this.requestRawWithCallback(info2, data, callbackForResult);
            });
          });
        }
        /**
         * Raw request with callback.
         * @param info
         * @param data
         * @param onResult
         */
        requestRawWithCallback(info2, data, onResult) {
          if (typeof data === "string") {
            if (!info2.options.headers) {
              info2.options.headers = {};
            }
            info2.options.headers["Content-Length"] = Buffer.byteLength(
              data,
              "utf8",
            );
          }
          let callbackCalled = false;
          function handleResult(err, res) {
            if (!callbackCalled) {
              callbackCalled = true;
              onResult(err, res);
            }
          }
          __name(handleResult, "handleResult");
          const req = info2.httpModule.request(info2.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(void 0, res);
          });
          let socket;
          req.on("socket", (sock) => {
            socket = sock;
          });
          req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
            if (socket) {
              socket.end();
            }
            handleResult(new Error(`Request timeout: ${info2.options.path}`));
          });
          req.on("error", function (err) {
            handleResult(err);
          });
          if (data && typeof data === "string") {
            req.write(data, "utf8");
          }
          if (data && typeof data !== "string") {
            data.on("close", function () {
              req.end();
            });
            data.pipe(req);
          } else {
            req.end();
          }
        }
        /**
         * Gets an http agent. This function is useful when you need an http agent that handles
         * routing through a proxy server - depending upon the url and proxy environment variables.
         * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
         */
        getAgent(serverUrl) {
          const parsedUrl = new URL(serverUrl);
          return this._getAgent(parsedUrl);
        }
        getAgentDispatcher(serverUrl) {
          const parsedUrl = new URL(serverUrl);
          const proxyUrl = pm.getProxyUrl(parsedUrl);
          const useProxy = proxyUrl && proxyUrl.hostname;
          if (!useProxy) {
            return;
          }
          return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
        }
        _prepareRequest(method, requestUrl, headers) {
          const info2 = {};
          info2.parsedUrl = requestUrl;
          const usingSsl = info2.parsedUrl.protocol === "https:";
          info2.httpModule = usingSsl ? https : http;
          const defaultPort = usingSsl ? 443 : 80;
          info2.options = {};
          info2.options.host = info2.parsedUrl.hostname;
          info2.options.port = info2.parsedUrl.port
            ? parseInt(info2.parsedUrl.port)
            : defaultPort;
          info2.options.path =
            (info2.parsedUrl.pathname || "") + (info2.parsedUrl.search || "");
          info2.options.method = method;
          info2.options.headers = this._mergeHeaders(headers);
          if (this.userAgent != null) {
            info2.options.headers["user-agent"] = this.userAgent;
          }
          info2.options.agent = this._getAgent(info2.parsedUrl);
          if (this.handlers) {
            for (const handler of this.handlers) {
              handler.prepareRequest(info2.options);
            }
          }
          return info2;
        }
        _mergeHeaders(headers) {
          if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign(
              {},
              lowercaseKeys(this.requestOptions.headers),
              lowercaseKeys(headers || {}),
            );
          }
          return lowercaseKeys(headers || {});
        }
        _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
          let clientHeader;
          if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
          }
          return additionalHeaders[header] || clientHeader || _default;
        }
        _getAgent(parsedUrl) {
          let agent;
          const proxyUrl = pm.getProxyUrl(parsedUrl);
          const useProxy = proxyUrl && proxyUrl.hostname;
          if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
          }
          if (!useProxy) {
            agent = this._agent;
          }
          if (agent) {
            return agent;
          }
          const usingSsl = parsedUrl.protocol === "https:";
          let maxSockets = 100;
          if (this.requestOptions) {
            maxSockets =
              this.requestOptions.maxSockets || http.globalAgent.maxSockets;
          }
          if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
              maxSockets,
              keepAlive: this._keepAlive,
              proxy: Object.assign(
                Object.assign(
                  {},
                  (proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`,
                  },
                ),
                { host: proxyUrl.hostname, port: proxyUrl.port },
              ),
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === "https:";
            if (usingSsl) {
              tunnelAgent = overHttps
                ? tunnel.httpsOverHttps
                : tunnel.httpsOverHttp;
            } else {
              tunnelAgent = overHttps
                ? tunnel.httpOverHttps
                : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
          }
          if (!agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl
              ? new https.Agent(options)
              : new http.Agent(options);
            this._agent = agent;
          }
          if (usingSsl && this._ignoreSslError) {
            agent.options = Object.assign(agent.options || {}, {
              rejectUnauthorized: false,
            });
          }
          return agent;
        }
        _getProxyAgentDispatcher(parsedUrl, proxyUrl) {
          let proxyAgent;
          if (this._keepAlive) {
            proxyAgent = this._proxyAgentDispatcher;
          }
          if (proxyAgent) {
            return proxyAgent;
          }
          const usingSsl = parsedUrl.protocol === "https:";
          proxyAgent = new undici_1.ProxyAgent(
            Object.assign(
              { uri: proxyUrl.href, pipelining: !this._keepAlive ? 0 : 1 },
              (proxyUrl.username || proxyUrl.password) && {
                token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString("base64")}`,
              },
            ),
          );
          this._proxyAgentDispatcher = proxyAgent;
          if (usingSsl && this._ignoreSslError) {
            proxyAgent.options = Object.assign(
              proxyAgent.options.requestTls || {},
              {
                rejectUnauthorized: false,
              },
            );
          }
          return proxyAgent;
        }
        _performExponentialBackoff(retryNumber) {
          return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise((resolve) => setTimeout(() => resolve(), ms));
          });
        }
        _processResponse(res, options) {
          return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) =>
              __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                  statusCode,
                  result: null,
                  headers: {},
                };
                if (statusCode === HttpCodes.NotFound) {
                  resolve(response);
                }
                function dateTimeDeserializer(key, value) {
                  if (typeof value === "string") {
                    const a = new Date(value);
                    if (!isNaN(a.valueOf())) {
                      return a;
                    }
                  }
                  return value;
                }
                __name(dateTimeDeserializer, "dateTimeDeserializer");
                let obj;
                let contents;
                try {
                  contents = yield res.readBody();
                  if (contents && contents.length > 0) {
                    if (options && options.deserializeDates) {
                      obj = JSON.parse(contents, dateTimeDeserializer);
                    } else {
                      obj = JSON.parse(contents);
                    }
                    response.result = obj;
                  }
                  response.headers = res.message.headers;
                } catch (err) {}
                if (statusCode > 299) {
                  let msg;
                  if (obj && obj.message) {
                    msg = obj.message;
                  } else if (contents && contents.length > 0) {
                    msg = contents;
                  } else {
                    msg = `Failed request: (${statusCode})`;
                  }
                  const err = new HttpClientError(msg, statusCode);
                  err.result = response.result;
                  reject(err);
                } else {
                  resolve(response);
                }
              }),
            );
          });
        }
      };
      exports.HttpClient = HttpClient;
      var lowercaseKeys = /* @__PURE__ */ __name(
        (obj) =>
          Object.keys(obj).reduce(
            (c, k) => ((c[k.toLowerCase()] = obj[k]), c),
            {},
          ),
        "lowercaseKeys",
      );
    },
  });

  // node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/auth.js
  var require_auth = __commonJS({
    "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/auth.js"(
      exports,
    ) {
      "use strict";
      var __awaiter =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          __name(adopt, "adopt");
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            __name(fulfilled, "fulfilled");
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            __name(rejected, "rejected");
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            __name(step, "step");
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.PersonalAccessTokenCredentialHandler =
        exports.BearerCredentialHandler =
        exports.BasicCredentialHandler =
          void 0;
      var BasicCredentialHandler = class {
        static {
          __name(this, "BasicCredentialHandler");
        }
        constructor(username, password) {
          this.username = username;
          this.password = password;
        }
        prepareRequest(options) {
          if (!options.headers) {
            throw Error("The request has no headers");
          }
          options.headers["Authorization"] =
            `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
        }
        // This handler cannot handle 401
        canHandleAuthentication() {
          return false;
        }
        handleAuthentication() {
          return __awaiter(this, void 0, void 0, function* () {
            throw new Error("not implemented");
          });
        }
      };
      exports.BasicCredentialHandler = BasicCredentialHandler;
      var BearerCredentialHandler = class {
        static {
          __name(this, "BearerCredentialHandler");
        }
        constructor(token) {
          this.token = token;
        }
        // currently implements pre-authorization
        // TODO: support preAuth = false where it hooks on 401
        prepareRequest(options) {
          if (!options.headers) {
            throw Error("The request has no headers");
          }
          options.headers["Authorization"] = `Bearer ${this.token}`;
        }
        // This handler cannot handle 401
        canHandleAuthentication() {
          return false;
        }
        handleAuthentication() {
          return __awaiter(this, void 0, void 0, function* () {
            throw new Error("not implemented");
          });
        }
      };
      exports.BearerCredentialHandler = BearerCredentialHandler;
      var PersonalAccessTokenCredentialHandler = class {
        static {
          __name(this, "PersonalAccessTokenCredentialHandler");
        }
        constructor(token) {
          this.token = token;
        }
        // currently implements pre-authorization
        // TODO: support preAuth = false where it hooks on 401
        prepareRequest(options) {
          if (!options.headers) {
            throw Error("The request has no headers");
          }
          options.headers["Authorization"] =
            `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
        }
        // This handler cannot handle 401
        canHandleAuthentication() {
          return false;
        }
        handleAuthentication() {
          return __awaiter(this, void 0, void 0, function* () {
            throw new Error("not implemented");
          });
        }
      };
      exports.PersonalAccessTokenCredentialHandler =
        PersonalAccessTokenCredentialHandler;
    },
  });

  // node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/oidc-utils.js
  var require_oidc_utils = __commonJS({
    "node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/oidc-utils.js"(
      exports,
    ) {
      "use strict";
      var __awaiter =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          __name(adopt, "adopt");
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            __name(fulfilled, "fulfilled");
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            __name(rejected, "rejected");
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            __name(step, "step");
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.OidcClient = void 0;
      var http_client_1 = require_lib();
      var auth_1 = require_auth();
      var core_1 = require_core();
      var OidcClient = class _OidcClient {
        static {
          __name(this, "OidcClient");
        }
        static createHttpClient(allowRetry = true, maxRetry = 10) {
          const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry,
          };
          return new http_client_1.HttpClient(
            "actions/oidc-client",
            [new auth_1.BearerCredentialHandler(_OidcClient.getRequestToken())],
            requestOptions,
          );
        }
        static getRequestToken() {
          const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
          if (!token) {
            throw new Error(
              "Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable",
            );
          }
          return token;
        }
        static getIDTokenUrl() {
          const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
          if (!runtimeUrl) {
            throw new Error(
              "Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable",
            );
          }
          return runtimeUrl;
        }
        static getCall(id_token_url) {
          var _a;
          return __awaiter(this, void 0, void 0, function* () {
            const httpclient = _OidcClient.createHttpClient();
            const res = yield httpclient
              .getJson(id_token_url)
              .catch((error) => {
                throw new Error(`Failed to get ID Token. 
 
        Error Code : ${error.statusCode}
 
        Error Message: ${error.message}`);
              });
            const id_token =
              (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
              throw new Error("Response json body do not have ID Token field");
            }
            return id_token;
          });
        }
        static getIDToken(audience) {
          return __awaiter(this, void 0, void 0, function* () {
            try {
              let id_token_url = _OidcClient.getIDTokenUrl();
              if (audience) {
                const encodedAudience = encodeURIComponent(audience);
                id_token_url = `${id_token_url}&audience=${encodedAudience}`;
              }
              core_1.debug(`ID token url is ${id_token_url}`);
              const id_token = yield _OidcClient.getCall(id_token_url);
              core_1.setSecret(id_token);
              return id_token;
            } catch (error) {
              throw new Error(`Error message: ${error.message}`);
            }
          });
        }
      };
      exports.OidcClient = OidcClient;
    },
  });

  // node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/summary.js
  var require_summary = __commonJS({
    "node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/summary.js"(
      exports,
    ) {
      "use strict";
      var __awaiter =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          __name(adopt, "adopt");
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            __name(fulfilled, "fulfilled");
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            __name(rejected, "rejected");
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            __name(step, "step");
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.summary =
        exports.markdownSummary =
        exports.SUMMARY_DOCS_URL =
        exports.SUMMARY_ENV_VAR =
          void 0;
      var os_1 = __require("os");
      var fs_1 = __require("fs");
      var { access, appendFile, writeFile } = fs_1.promises;
      exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
      exports.SUMMARY_DOCS_URL =
        "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
      var Summary = class {
        static {
          __name(this, "Summary");
        }
        constructor() {
          this._buffer = "";
        }
        /**
         * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
         * Also checks r/w permissions.
         *
         * @returns step summary file path
         */
        filePath() {
          return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
              return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
              throw new Error(
                `Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`,
              );
            }
            try {
              yield access(
                pathFromEnv,
                fs_1.constants.R_OK | fs_1.constants.W_OK,
              );
            } catch (_a) {
              throw new Error(
                `Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`,
              );
            }
            this._filePath = pathFromEnv;
            return this._filePath;
          });
        }
        /**
         * Wraps content in an HTML tag, adding any HTML attributes
         *
         * @param {string} tag HTML tag to wrap
         * @param {string | null} content content within the tag
         * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
         *
         * @returns {string} content wrapped in HTML element
         */
        wrap(tag, content3, attrs = {}) {
          const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join("");
          if (!content3) {
            return `<${tag}${htmlAttrs}>`;
          }
          return `<${tag}${htmlAttrs}>${content3}</${tag}>`;
        }
        /**
         * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
         *
         * @param {SummaryWriteOptions} [options] (optional) options for write operation
         *
         * @returns {Promise<Summary>} summary instance
         */
        write(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0
              ? void 0
              : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
            return this.emptyBuffer();
          });
        }
        /**
         * Clears the summary buffer and wipes the summary file
         *
         * @returns {Summary} summary instance
         */
        clear() {
          return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
          });
        }
        /**
         * Returns the current summary buffer as a string
         *
         * @returns {string} string of summary buffer
         */
        stringify() {
          return this._buffer;
        }
        /**
         * If the summary buffer is empty
         *
         * @returns {boolen} true if the buffer is empty
         */
        isEmptyBuffer() {
          return this._buffer.length === 0;
        }
        /**
         * Resets the summary buffer without writing to summary file
         *
         * @returns {Summary} summary instance
         */
        emptyBuffer() {
          this._buffer = "";
          return this;
        }
        /**
         * Adds raw text to the summary buffer
         *
         * @param {string} text content to add
         * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
         *
         * @returns {Summary} summary instance
         */
        addRaw(text4, addEOL = false) {
          this._buffer += text4;
          return addEOL ? this.addEOL() : this;
        }
        /**
         * Adds the operating system-specific end-of-line marker to the buffer
         *
         * @returns {Summary} summary instance
         */
        addEOL() {
          return this.addRaw(os_1.EOL);
        }
        /**
         * Adds an HTML codeblock to the summary buffer
         *
         * @param {string} code content to render within fenced code block
         * @param {string} lang (optional) language to syntax highlight code
         *
         * @returns {Summary} summary instance
         */
        addCodeBlock(code2, lang) {
          const attrs = Object.assign({}, lang && { lang });
          const element = this.wrap("pre", this.wrap("code", code2), attrs);
          return this.addRaw(element).addEOL();
        }
        /**
         * Adds an HTML list to the summary buffer
         *
         * @param {string[]} items list of items to render
         * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
         *
         * @returns {Summary} summary instance
         */
        addList(items, ordered = false) {
          const tag = ordered ? "ol" : "ul";
          const listItems = items.map((item) => this.wrap("li", item)).join("");
          const element = this.wrap(tag, listItems);
          return this.addRaw(element).addEOL();
        }
        /**
         * Adds an HTML table to the summary buffer
         *
         * @param {SummaryTableCell[]} rows table rows
         *
         * @returns {Summary} summary instance
         */
        addTable(rows) {
          const tableBody = rows
            .map((row) => {
              const cells = row
                .map((cell) => {
                  if (typeof cell === "string") {
                    return this.wrap("td", cell);
                  }
                  const { header, data, colspan, rowspan } = cell;
                  const tag = header ? "th" : "td";
                  const attrs = Object.assign(
                    Object.assign({}, colspan && { colspan }),
                    rowspan && { rowspan },
                  );
                  return this.wrap(tag, data, attrs);
                })
                .join("");
              return this.wrap("tr", cells);
            })
            .join("");
          const element = this.wrap("table", tableBody);
          return this.addRaw(element).addEOL();
        }
        /**
         * Adds a collapsable HTML details element to the summary buffer
         *
         * @param {string} label text for the closed state
         * @param {string} content collapsable content
         *
         * @returns {Summary} summary instance
         */
        addDetails(label, content3) {
          const element = this.wrap(
            "details",
            this.wrap("summary", label) + content3,
          );
          return this.addRaw(element).addEOL();
        }
        /**
         * Adds an HTML image tag to the summary buffer
         *
         * @param {string} src path to the image you to embed
         * @param {string} alt text description of the image
         * @param {SummaryImageOptions} options (optional) addition image attributes
         *
         * @returns {Summary} summary instance
         */
        addImage(src, alt, options) {
          const { width, height } = options || {};
          const attrs = Object.assign(
            Object.assign({}, width && { width }),
            height && { height },
          );
          const element = this.wrap(
            "img",
            null,
            Object.assign({ src, alt }, attrs),
          );
          return this.addRaw(element).addEOL();
        }
        /**
         * Adds an HTML section heading element
         *
         * @param {string} text heading text
         * @param {number | string} [level=1] (optional) the heading level, default: 1
         *
         * @returns {Summary} summary instance
         */
        addHeading(text4, level) {
          const tag = `h${level}`;
          const allowedTag = ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag)
            ? tag
            : "h1";
          const element = this.wrap(allowedTag, text4);
          return this.addRaw(element).addEOL();
        }
        /**
         * Adds an HTML thematic break (<hr>) to the summary buffer
         *
         * @returns {Summary} summary instance
         */
        addSeparator() {
          const element = this.wrap("hr", null);
          return this.addRaw(element).addEOL();
        }
        /**
         * Adds an HTML line break (<br>) to the summary buffer
         *
         * @returns {Summary} summary instance
         */
        addBreak() {
          const element = this.wrap("br", null);
          return this.addRaw(element).addEOL();
        }
        /**
         * Adds an HTML blockquote to the summary buffer
         *
         * @param {string} text quote text
         * @param {string} cite (optional) citation url
         *
         * @returns {Summary} summary instance
         */
        addQuote(text4, cite) {
          const attrs = Object.assign({}, cite && { cite });
          const element = this.wrap("blockquote", text4, attrs);
          return this.addRaw(element).addEOL();
        }
        /**
         * Adds an HTML anchor tag to the summary buffer
         *
         * @param {string} text link text/content
         * @param {string} href hyperlink
         *
         * @returns {Summary} summary instance
         */
        addLink(text4, href) {
          const element = this.wrap("a", text4, { href });
          return this.addRaw(element).addEOL();
        }
      };
      var _summary = new Summary();
      exports.markdownSummary = _summary;
      exports.summary = _summary;
    },
  });

  // node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/path-utils.js
  var require_path_utils = __commonJS({
    "node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/path-utils.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: /* @__PURE__ */ __name(function () {
                  return m[k];
                }, "get"),
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toPlatformPath =
        exports.toWin32Path =
        exports.toPosixPath =
          void 0;
      var path4 = __importStar(__require("path"));
      function toPosixPath(pth) {
        return pth.replace(/[\\]/g, "/");
      }
      __name(toPosixPath, "toPosixPath");
      exports.toPosixPath = toPosixPath;
      function toWin32Path(pth) {
        return pth.replace(/[/]/g, "\\");
      }
      __name(toWin32Path, "toWin32Path");
      exports.toWin32Path = toWin32Path;
      function toPlatformPath(pth) {
        return pth.replace(/[/\\]/g, path4.sep);
      }
      __name(toPlatformPath, "toPlatformPath");
      exports.toPlatformPath = toPlatformPath;
    },
  });

  // node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/core.js
  var require_core = __commonJS({
    "node_modules/.pnpm/@actions+core@1.10.1/node_modules/@actions/core/lib/core.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: /* @__PURE__ */ __name(function () {
                  return m[k];
                }, "get"),
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __awaiter =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          __name(adopt, "adopt");
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            __name(fulfilled, "fulfilled");
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            __name(rejected, "rejected");
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            __name(step, "step");
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getIDToken =
        exports.getState =
        exports.saveState =
        exports.group =
        exports.endGroup =
        exports.startGroup =
        exports.info =
        exports.notice =
        exports.warning =
        exports.error =
        exports.debug =
        exports.isDebug =
        exports.setFailed =
        exports.setCommandEcho =
        exports.setOutput =
        exports.getBooleanInput =
        exports.getMultilineInput =
        exports.getInput =
        exports.addPath =
        exports.setSecret =
        exports.exportVariable =
        exports.ExitCode =
          void 0;
      var command_1 = require_command();
      var file_command_1 = require_file_command();
      var utils_1 = require_utils();
      var os = __importStar(__require("os"));
      var path4 = __importStar(__require("path"));
      var oidc_utils_1 = require_oidc_utils();
      var ExitCode;
      (function (ExitCode2) {
        ExitCode2[(ExitCode2["Success"] = 0)] = "Success";
        ExitCode2[(ExitCode2["Failure"] = 1)] = "Failure";
      })((ExitCode = exports.ExitCode || (exports.ExitCode = {})));
      function exportVariable(name, val) {
        const convertedVal = utils_1.toCommandValue(val);
        process.env[name] = convertedVal;
        const filePath = process.env["GITHUB_ENV"] || "";
        if (filePath) {
          return file_command_1.issueFileCommand(
            "ENV",
            file_command_1.prepareKeyValueMessage(name, val),
          );
        }
        command_1.issueCommand("set-env", { name }, convertedVal);
      }
      __name(exportVariable, "exportVariable");
      exports.exportVariable = exportVariable;
      function setSecret(secret) {
        command_1.issueCommand("add-mask", {}, secret);
      }
      __name(setSecret, "setSecret");
      exports.setSecret = setSecret;
      function addPath(inputPath) {
        const filePath = process.env["GITHUB_PATH"] || "";
        if (filePath) {
          file_command_1.issueFileCommand("PATH", inputPath);
        } else {
          command_1.issueCommand("add-path", {}, inputPath);
        }
        process.env["PATH"] =
          `${inputPath}${path4.delimiter}${process.env["PATH"]}`;
      }
      __name(addPath, "addPath");
      exports.addPath = addPath;
      function getInput(name, options) {
        const val =
          process.env[`INPUT_${name.replace(/ /g, "_").toUpperCase()}`] || "";
        if (options && options.required && !val) {
          throw new Error(`Input required and not supplied: ${name}`);
        }
        if (options && options.trimWhitespace === false) {
          return val;
        }
        return val.trim();
      }
      __name(getInput, "getInput");
      exports.getInput = getInput;
      function getMultilineInput(name, options) {
        const inputs = getInput(name, options)
          .split("\n")
          .filter((x) => x !== "");
        if (options && options.trimWhitespace === false) {
          return inputs;
        }
        return inputs.map((input) => input.trim());
      }
      __name(getMultilineInput, "getMultilineInput");
      exports.getMultilineInput = getMultilineInput;
      function getBooleanInput(name, options) {
        const trueValue = ["true", "True", "TRUE"];
        const falseValue = ["false", "False", "FALSE"];
        const val = getInput(name, options);
        if (trueValue.includes(val)) return true;
        if (falseValue.includes(val)) return false;
        throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}
Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
      }
      __name(getBooleanInput, "getBooleanInput");
      exports.getBooleanInput = getBooleanInput;
      function setOutput(name, value) {
        const filePath = process.env["GITHUB_OUTPUT"] || "";
        if (filePath) {
          return file_command_1.issueFileCommand(
            "OUTPUT",
            file_command_1.prepareKeyValueMessage(name, value),
          );
        }
        process.stdout.write(os.EOL);
        command_1.issueCommand(
          "set-output",
          { name },
          utils_1.toCommandValue(value),
        );
      }
      __name(setOutput, "setOutput");
      exports.setOutput = setOutput;
      function setCommandEcho(enabled) {
        command_1.issue("echo", enabled ? "on" : "off");
      }
      __name(setCommandEcho, "setCommandEcho");
      exports.setCommandEcho = setCommandEcho;
      function setFailed(message) {
        process.exitCode = ExitCode.Failure;
        error(message);
      }
      __name(setFailed, "setFailed");
      exports.setFailed = setFailed;
      function isDebug() {
        return process.env["RUNNER_DEBUG"] === "1";
      }
      __name(isDebug, "isDebug");
      exports.isDebug = isDebug;
      function debug(message) {
        command_1.issueCommand("debug", {}, message);
      }
      __name(debug, "debug");
      exports.debug = debug;
      function error(message, properties = {}) {
        command_1.issueCommand(
          "error",
          utils_1.toCommandProperties(properties),
          message instanceof Error ? message.toString() : message,
        );
      }
      __name(error, "error");
      exports.error = error;
      function warning2(message, properties = {}) {
        command_1.issueCommand(
          "warning",
          utils_1.toCommandProperties(properties),
          message instanceof Error ? message.toString() : message,
        );
      }
      __name(warning2, "warning");
      exports.warning = warning2;
      function notice(message, properties = {}) {
        command_1.issueCommand(
          "notice",
          utils_1.toCommandProperties(properties),
          message instanceof Error ? message.toString() : message,
        );
      }
      __name(notice, "notice");
      exports.notice = notice;
      function info2(message) {
        process.stdout.write(message + os.EOL);
      }
      __name(info2, "info");
      exports.info = info2;
      function startGroup(name) {
        command_1.issue("group", name);
      }
      __name(startGroup, "startGroup");
      exports.startGroup = startGroup;
      function endGroup() {
        command_1.issue("endgroup");
      }
      __name(endGroup, "endGroup");
      exports.endGroup = endGroup;
      function group(name, fn) {
        return __awaiter(this, void 0, void 0, function* () {
          startGroup(name);
          let result;
          try {
            result = yield fn();
          } finally {
            endGroup();
          }
          return result;
        });
      }
      __name(group, "group");
      exports.group = group;
      function saveState(name, value) {
        const filePath = process.env["GITHUB_STATE"] || "";
        if (filePath) {
          return file_command_1.issueFileCommand(
            "STATE",
            file_command_1.prepareKeyValueMessage(name, value),
          );
        }
        command_1.issueCommand(
          "save-state",
          { name },
          utils_1.toCommandValue(value),
        );
      }
      __name(saveState, "saveState");
      exports.saveState = saveState;
      function getState(name) {
        return process.env[`STATE_${name}`] || "";
      }
      __name(getState, "getState");
      exports.getState = getState;
      function getIDToken(aud) {
        return __awaiter(this, void 0, void 0, function* () {
          return yield oidc_utils_1.OidcClient.getIDToken(aud);
        });
      }
      __name(getIDToken, "getIDToken");
      exports.getIDToken = getIDToken;
      var summary_1 = require_summary();
      Object.defineProperty(exports, "summary", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function () {
          return summary_1.summary;
        }, "get"),
      });
      var summary_2 = require_summary();
      Object.defineProperty(exports, "markdownSummary", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function () {
          return summary_2.markdownSummary;
        }, "get"),
      });
      var path_utils_1 = require_path_utils();
      Object.defineProperty(exports, "toPosixPath", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function () {
          return path_utils_1.toPosixPath;
        }, "get"),
      });
      Object.defineProperty(exports, "toWin32Path", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function () {
          return path_utils_1.toWin32Path;
        }, "get"),
      });
      Object.defineProperty(exports, "toPlatformPath", {
        enumerable: true,
        get: /* @__PURE__ */ __name(function () {
          return path_utils_1.toPlatformPath;
        }, "get"),
      });
    },
  });

  // node_modules/.pnpm/universalify@2.0.1/node_modules/universalify/index.js
  var require_universalify = __commonJS({
    "node_modules/.pnpm/universalify@2.0.1/node_modules/universalify/index.js"(
      exports,
    ) {
      "use strict";
      exports.fromCallback = function (fn) {
        return Object.defineProperty(
          function (...args) {
            if (typeof args[args.length - 1] === "function")
              fn.apply(this, args);
            else {
              return new Promise((resolve, reject) => {
                args.push((err, res) =>
                  err != null ? reject(err) : resolve(res),
                );
                fn.apply(this, args);
              });
            }
          },
          "name",
          { value: fn.name },
        );
      };
      exports.fromPromise = function (fn) {
        return Object.defineProperty(
          function (...args) {
            const cb = args[args.length - 1];
            if (typeof cb !== "function") return fn.apply(this, args);
            else {
              args.pop();
              fn.apply(this, args).then((r) => cb(null, r), cb);
            }
          },
          "name",
          { value: fn.name },
        );
      };
    },
  });

  // node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/polyfills.js
  var require_polyfills = __commonJS({
    "node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/polyfills.js"(
      exports,
      module,
    ) {
      var constants = __require("constants");
      var origCwd = process.cwd;
      var cwd = null;
      var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
      process.cwd = function () {
        if (!cwd) cwd = origCwd.call(process);
        return cwd;
      };
      try {
        process.cwd();
      } catch (er) {}
      if (typeof process.chdir === "function") {
        chdir = process.chdir;
        process.chdir = function (d) {
          cwd = null;
          chdir.call(process, d);
        };
        if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
      }
      var chdir;
      module.exports = patch;
      function patch(fs6) {
        if (
          constants.hasOwnProperty("O_SYMLINK") &&
          process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)
        ) {
          patchLchmod(fs6);
        }
        if (!fs6.lutimes) {
          patchLutimes(fs6);
        }
        fs6.chown = chownFix(fs6.chown);
        fs6.fchown = chownFix(fs6.fchown);
        fs6.lchown = chownFix(fs6.lchown);
        fs6.chmod = chmodFix(fs6.chmod);
        fs6.fchmod = chmodFix(fs6.fchmod);
        fs6.lchmod = chmodFix(fs6.lchmod);
        fs6.chownSync = chownFixSync(fs6.chownSync);
        fs6.fchownSync = chownFixSync(fs6.fchownSync);
        fs6.lchownSync = chownFixSync(fs6.lchownSync);
        fs6.chmodSync = chmodFixSync(fs6.chmodSync);
        fs6.fchmodSync = chmodFixSync(fs6.fchmodSync);
        fs6.lchmodSync = chmodFixSync(fs6.lchmodSync);
        fs6.stat = statFix(fs6.stat);
        fs6.fstat = statFix(fs6.fstat);
        fs6.lstat = statFix(fs6.lstat);
        fs6.statSync = statFixSync(fs6.statSync);
        fs6.fstatSync = statFixSync(fs6.fstatSync);
        fs6.lstatSync = statFixSync(fs6.lstatSync);
        if (fs6.chmod && !fs6.lchmod) {
          fs6.lchmod = function (path4, mode, cb) {
            if (cb) process.nextTick(cb);
          };
          fs6.lchmodSync = function () {};
        }
        if (fs6.chown && !fs6.lchown) {
          fs6.lchown = function (path4, uid, gid, cb) {
            if (cb) process.nextTick(cb);
          };
          fs6.lchownSync = function () {};
        }
        if (platform === "win32") {
          fs6.rename =
            typeof fs6.rename !== "function"
              ? fs6.rename
              : (function (fs$rename) {
                  function rename(from, to, cb) {
                    var start = Date.now();
                    var backoff = 0;
                    fs$rename(
                      from,
                      to,
                      /* @__PURE__ */ __name(function CB(er) {
                        if (
                          er &&
                          (er.code === "EACCES" ||
                            er.code === "EPERM" ||
                            er.code === "EBUSY") &&
                          Date.now() - start < 6e4
                        ) {
                          setTimeout(function () {
                            fs6.stat(to, function (stater, st) {
                              if (stater && stater.code === "ENOENT")
                                fs$rename(from, to, CB);
                              else cb(er);
                            });
                          }, backoff);
                          if (backoff < 100) backoff += 10;
                          return;
                        }
                        if (cb) cb(er);
                      }, "CB"),
                    );
                  }
                  __name(rename, "rename");
                  if (Object.setPrototypeOf)
                    Object.setPrototypeOf(rename, fs$rename);
                  return rename;
                })(fs6.rename);
        }
        fs6.read =
          typeof fs6.read !== "function"
            ? fs6.read
            : (function (fs$read) {
                function read(
                  fd,
                  buffer,
                  offset,
                  length,
                  position2,
                  callback_,
                ) {
                  var callback;
                  if (callback_ && typeof callback_ === "function") {
                    var eagCounter = 0;
                    callback = /* @__PURE__ */ __name(function (er, _, __) {
                      if (er && er.code === "EAGAIN" && eagCounter < 10) {
                        eagCounter++;
                        return fs$read.call(
                          fs6,
                          fd,
                          buffer,
                          offset,
                          length,
                          position2,
                          callback,
                        );
                      }
                      callback_.apply(this, arguments);
                    }, "callback");
                  }
                  return fs$read.call(
                    fs6,
                    fd,
                    buffer,
                    offset,
                    length,
                    position2,
                    callback,
                  );
                }
                __name(read, "read");
                if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);
                return read;
              })(fs6.read);
        fs6.readSync =
          typeof fs6.readSync !== "function"
            ? fs6.readSync
            : /* @__PURE__ */ (function (fs$readSync) {
                return function (fd, buffer, offset, length, position2) {
                  var eagCounter = 0;
                  while (true) {
                    try {
                      return fs$readSync.call(
                        fs6,
                        fd,
                        buffer,
                        offset,
                        length,
                        position2,
                      );
                    } catch (er) {
                      if (er.code === "EAGAIN" && eagCounter < 10) {
                        eagCounter++;
                        continue;
                      }
                      throw er;
                    }
                  }
                };
              })(fs6.readSync);
        function patchLchmod(fs7) {
          fs7.lchmod = function (path4, mode, callback) {
            fs7.open(
              path4,
              constants.O_WRONLY | constants.O_SYMLINK,
              mode,
              function (err, fd) {
                if (err) {
                  if (callback) callback(err);
                  return;
                }
                fs7.fchmod(fd, mode, function (err2) {
                  fs7.close(fd, function (err22) {
                    if (callback) callback(err2 || err22);
                  });
                });
              },
            );
          };
          fs7.lchmodSync = function (path4, mode) {
            var fd = fs7.openSync(
              path4,
              constants.O_WRONLY | constants.O_SYMLINK,
              mode,
            );
            var threw = true;
            var ret;
            try {
              ret = fs7.fchmodSync(fd, mode);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs7.closeSync(fd);
                } catch (er) {}
              } else {
                fs7.closeSync(fd);
              }
            }
            return ret;
          };
        }
        __name(patchLchmod, "patchLchmod");
        function patchLutimes(fs7) {
          if (constants.hasOwnProperty("O_SYMLINK") && fs7.futimes) {
            fs7.lutimes = function (path4, at, mt, cb) {
              fs7.open(path4, constants.O_SYMLINK, function (er, fd) {
                if (er) {
                  if (cb) cb(er);
                  return;
                }
                fs7.futimes(fd, at, mt, function (er2) {
                  fs7.close(fd, function (er22) {
                    if (cb) cb(er2 || er22);
                  });
                });
              });
            };
            fs7.lutimesSync = function (path4, at, mt) {
              var fd = fs7.openSync(path4, constants.O_SYMLINK);
              var ret;
              var threw = true;
              try {
                ret = fs7.futimesSync(fd, at, mt);
                threw = false;
              } finally {
                if (threw) {
                  try {
                    fs7.closeSync(fd);
                  } catch (er) {}
                } else {
                  fs7.closeSync(fd);
                }
              }
              return ret;
            };
          } else if (fs7.futimes) {
            fs7.lutimes = function (_a, _b, _c, cb) {
              if (cb) process.nextTick(cb);
            };
            fs7.lutimesSync = function () {};
          }
        }
        __name(patchLutimes, "patchLutimes");
        function chmodFix(orig) {
          if (!orig) return orig;
          return function (target, mode, cb) {
            return orig.call(fs6, target, mode, function (er) {
              if (chownErOk(er)) er = null;
              if (cb) cb.apply(this, arguments);
            });
          };
        }
        __name(chmodFix, "chmodFix");
        function chmodFixSync(orig) {
          if (!orig) return orig;
          return function (target, mode) {
            try {
              return orig.call(fs6, target, mode);
            } catch (er) {
              if (!chownErOk(er)) throw er;
            }
          };
        }
        __name(chmodFixSync, "chmodFixSync");
        function chownFix(orig) {
          if (!orig) return orig;
          return function (target, uid, gid, cb) {
            return orig.call(fs6, target, uid, gid, function (er) {
              if (chownErOk(er)) er = null;
              if (cb) cb.apply(this, arguments);
            });
          };
        }
        __name(chownFix, "chownFix");
        function chownFixSync(orig) {
          if (!orig) return orig;
          return function (target, uid, gid) {
            try {
              return orig.call(fs6, target, uid, gid);
            } catch (er) {
              if (!chownErOk(er)) throw er;
            }
          };
        }
        __name(chownFixSync, "chownFixSync");
        function statFix(orig) {
          if (!orig) return orig;
          return function (target, options, cb) {
            if (typeof options === "function") {
              cb = options;
              options = null;
            }
            function callback(er, stats) {
              if (stats) {
                if (stats.uid < 0) stats.uid += 4294967296;
                if (stats.gid < 0) stats.gid += 4294967296;
              }
              if (cb) cb.apply(this, arguments);
            }
            __name(callback, "callback");
            return options
              ? orig.call(fs6, target, options, callback)
              : orig.call(fs6, target, callback);
          };
        }
        __name(statFix, "statFix");
        function statFixSync(orig) {
          if (!orig) return orig;
          return function (target, options) {
            var stats = options
              ? orig.call(fs6, target, options)
              : orig.call(fs6, target);
            if (stats) {
              if (stats.uid < 0) stats.uid += 4294967296;
              if (stats.gid < 0) stats.gid += 4294967296;
            }
            return stats;
          };
        }
        __name(statFixSync, "statFixSync");
        function chownErOk(er) {
          if (!er) return true;
          if (er.code === "ENOSYS") return true;
          var nonroot = !process.getuid || process.getuid() !== 0;
          if (nonroot) {
            if (er.code === "EINVAL" || er.code === "EPERM") return true;
          }
          return false;
        }
        __name(chownErOk, "chownErOk");
      }
      __name(patch, "patch");
    },
  });

  // node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/legacy-streams.js
  var require_legacy_streams = __commonJS({
    "node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/legacy-streams.js"(
      exports,
      module,
    ) {
      var Stream = __require("stream").Stream;
      module.exports = legacy;
      function legacy(fs6) {
        return {
          ReadStream,
          WriteStream,
        };
        function ReadStream(path4, options) {
          if (!(this instanceof ReadStream))
            return new ReadStream(path4, options);
          Stream.call(this);
          var self2 = this;
          this.path = path4;
          this.fd = null;
          this.readable = true;
          this.paused = false;
          this.flags = "r";
          this.mode = 438;
          this.bufferSize = 64 * 1024;
          options = options || {};
          var keys = Object.keys(options);
          for (
            var index2 = 0, length = keys.length;
            index2 < length;
            index2++
          ) {
            var key = keys[index2];
            this[key] = options[key];
          }
          if (this.encoding) this.setEncoding(this.encoding);
          if (this.start !== void 0) {
            if ("number" !== typeof this.start) {
              throw TypeError("start must be a Number");
            }
            if (this.end === void 0) {
              this.end = Infinity;
            } else if ("number" !== typeof this.end) {
              throw TypeError("end must be a Number");
            }
            if (this.start > this.end) {
              throw new Error("start must be <= end");
            }
            this.pos = this.start;
          }
          if (this.fd !== null) {
            process.nextTick(function () {
              self2._read();
            });
            return;
          }
          fs6.open(this.path, this.flags, this.mode, function (err, fd) {
            if (err) {
              self2.emit("error", err);
              self2.readable = false;
              return;
            }
            self2.fd = fd;
            self2.emit("open", fd);
            self2._read();
          });
        }
        __name(ReadStream, "ReadStream");
        function WriteStream(path4, options) {
          if (!(this instanceof WriteStream))
            return new WriteStream(path4, options);
          Stream.call(this);
          this.path = path4;
          this.fd = null;
          this.writable = true;
          this.flags = "w";
          this.encoding = "binary";
          this.mode = 438;
          this.bytesWritten = 0;
          options = options || {};
          var keys = Object.keys(options);
          for (
            var index2 = 0, length = keys.length;
            index2 < length;
            index2++
          ) {
            var key = keys[index2];
            this[key] = options[key];
          }
          if (this.start !== void 0) {
            if ("number" !== typeof this.start) {
              throw TypeError("start must be a Number");
            }
            if (this.start < 0) {
              throw new Error("start must be >= zero");
            }
            this.pos = this.start;
          }
          this.busy = false;
          this._queue = [];
          if (this.fd === null) {
            this._open = fs6.open;
            this._queue.push([
              this._open,
              this.path,
              this.flags,
              this.mode,
              void 0,
            ]);
            this.flush();
          }
        }
        __name(WriteStream, "WriteStream");
      }
      __name(legacy, "legacy");
    },
  });

  // node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/clone.js
  var require_clone = __commonJS({
    "node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/clone.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = clone;
      var getPrototypeOf =
        Object.getPrototypeOf ||
        function (obj) {
          return obj.__proto__;
        };
      function clone(obj) {
        if (obj === null || typeof obj !== "object") return obj;
        if (obj instanceof Object)
          var copy = { __proto__: getPrototypeOf(obj) };
        else var copy = /* @__PURE__ */ Object.create(null);
        Object.getOwnPropertyNames(obj).forEach(function (key) {
          Object.defineProperty(
            copy,
            key,
            Object.getOwnPropertyDescriptor(obj, key),
          );
        });
        return copy;
      }
      __name(clone, "clone");
    },
  });

  // node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/graceful-fs.js
  var require_graceful_fs = __commonJS({
    "node_modules/.pnpm/graceful-fs@4.2.11/node_modules/graceful-fs/graceful-fs.js"(
      exports,
      module,
    ) {
      var fs6 = __require("fs");
      var polyfills = require_polyfills();
      var legacy = require_legacy_streams();
      var clone = require_clone();
      var util2 = __require("util");
      var gracefulQueue;
      var previousSymbol;
      if (typeof Symbol === "function" && typeof Symbol.for === "function") {
        gracefulQueue = Symbol.for("graceful-fs.queue");
        previousSymbol = Symbol.for("graceful-fs.previous");
      } else {
        gracefulQueue = "___graceful-fs.queue";
        previousSymbol = "___graceful-fs.previous";
      }
      function noop2() {}
      __name(noop2, "noop");
      function publishQueue(context2, queue2) {
        Object.defineProperty(context2, gracefulQueue, {
          get: /* @__PURE__ */ __name(function () {
            return queue2;
          }, "get"),
        });
      }
      __name(publishQueue, "publishQueue");
      var debug = noop2;
      if (util2.debuglog) debug = util2.debuglog("gfs4");
      else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
        debug = /* @__PURE__ */ __name(function () {
          var m = util2.format.apply(util2, arguments);
          m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
          console.error(m);
        }, "debug");
      if (!fs6[gracefulQueue]) {
        queue = global[gracefulQueue] || [];
        publishQueue(fs6, queue);
        fs6.close = (function (fs$close) {
          function close(fd, cb) {
            return fs$close.call(fs6, fd, function (err) {
              if (!err) {
                resetQueue();
              }
              if (typeof cb === "function") cb.apply(this, arguments);
            });
          }
          __name(close, "close");
          Object.defineProperty(close, previousSymbol, {
            value: fs$close,
          });
          return close;
        })(fs6.close);
        fs6.closeSync = (function (fs$closeSync) {
          function closeSync(fd) {
            fs$closeSync.apply(fs6, arguments);
            resetQueue();
          }
          __name(closeSync, "closeSync");
          Object.defineProperty(closeSync, previousSymbol, {
            value: fs$closeSync,
          });
          return closeSync;
        })(fs6.closeSync);
        if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
          process.on("exit", function () {
            debug(fs6[gracefulQueue]);
            __require("assert").equal(fs6[gracefulQueue].length, 0);
          });
        }
      }
      var queue;
      if (!global[gracefulQueue]) {
        publishQueue(global, fs6[gracefulQueue]);
      }
      module.exports = patch(clone(fs6));
      if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs6.__patched) {
        module.exports = patch(fs6);
        fs6.__patched = true;
      }
      function patch(fs7) {
        polyfills(fs7);
        fs7.gracefulify = patch;
        fs7.createReadStream = createReadStream;
        fs7.createWriteStream = createWriteStream;
        var fs$readFile = fs7.readFile;
        fs7.readFile = readFile3;
        function readFile3(path4, options, cb) {
          if (typeof options === "function") (cb = options), (options = null);
          return go$readFile(path4, options, cb);
          function go$readFile(path5, options2, cb2, startTime) {
            return fs$readFile(path5, options2, function (err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$readFile,
                  [path5, options2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (typeof cb2 === "function") cb2.apply(this, arguments);
              }
            });
          }
          __name(go$readFile, "go$readFile");
        }
        __name(readFile3, "readFile");
        var fs$writeFile = fs7.writeFile;
        fs7.writeFile = writeFile;
        function writeFile(path4, data, options, cb) {
          if (typeof options === "function") (cb = options), (options = null);
          return go$writeFile(path4, data, options, cb);
          function go$writeFile(path5, data2, options2, cb2, startTime) {
            return fs$writeFile(path5, data2, options2, function (err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$writeFile,
                  [path5, data2, options2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (typeof cb2 === "function") cb2.apply(this, arguments);
              }
            });
          }
          __name(go$writeFile, "go$writeFile");
        }
        __name(writeFile, "writeFile");
        var fs$appendFile = fs7.appendFile;
        if (fs$appendFile) fs7.appendFile = appendFile;
        function appendFile(path4, data, options, cb) {
          if (typeof options === "function") (cb = options), (options = null);
          return go$appendFile(path4, data, options, cb);
          function go$appendFile(path5, data2, options2, cb2, startTime) {
            return fs$appendFile(path5, data2, options2, function (err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$appendFile,
                  [path5, data2, options2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (typeof cb2 === "function") cb2.apply(this, arguments);
              }
            });
          }
          __name(go$appendFile, "go$appendFile");
        }
        __name(appendFile, "appendFile");
        var fs$copyFile = fs7.copyFile;
        if (fs$copyFile) fs7.copyFile = copyFile;
        function copyFile(src, dest, flags, cb) {
          if (typeof flags === "function") {
            cb = flags;
            flags = 0;
          }
          return go$copyFile(src, dest, flags, cb);
          function go$copyFile(src2, dest2, flags2, cb2, startTime) {
            return fs$copyFile(src2, dest2, flags2, function (err) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$copyFile,
                  [src2, dest2, flags2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (typeof cb2 === "function") cb2.apply(this, arguments);
              }
            });
          }
          __name(go$copyFile, "go$copyFile");
        }
        __name(copyFile, "copyFile");
        var fs$readdir = fs7.readdir;
        fs7.readdir = readdir;
        var noReaddirOptionVersions = /^v[0-5]\./;
        function readdir(path4, options, cb) {
          if (typeof options === "function") (cb = options), (options = null);
          var go$readdir = noReaddirOptionVersions.test(process.version)
            ? /* @__PURE__ */ __name(function go$readdir2(
                path5,
                options2,
                cb2,
                startTime,
              ) {
                return fs$readdir(
                  path5,
                  fs$readdirCallback(path5, options2, cb2, startTime),
                );
              }, "go$readdir")
            : /* @__PURE__ */ __name(function go$readdir2(
                path5,
                options2,
                cb2,
                startTime,
              ) {
                return fs$readdir(
                  path5,
                  options2,
                  fs$readdirCallback(path5, options2, cb2, startTime),
                );
              }, "go$readdir");
          return go$readdir(path4, options, cb);
          function fs$readdirCallback(path5, options2, cb2, startTime) {
            return function (err, files) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$readdir,
                  [path5, options2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (files && files.sort) files.sort();
                if (typeof cb2 === "function") cb2.call(this, err, files);
              }
            };
          }
          __name(fs$readdirCallback, "fs$readdirCallback");
        }
        __name(readdir, "readdir");
        if (process.version.substr(0, 4) === "v0.8") {
          var legStreams = legacy(fs7);
          ReadStream = legStreams.ReadStream;
          WriteStream = legStreams.WriteStream;
        }
        var fs$ReadStream = fs7.ReadStream;
        if (fs$ReadStream) {
          ReadStream.prototype = Object.create(fs$ReadStream.prototype);
          ReadStream.prototype.open = ReadStream$open;
        }
        var fs$WriteStream = fs7.WriteStream;
        if (fs$WriteStream) {
          WriteStream.prototype = Object.create(fs$WriteStream.prototype);
          WriteStream.prototype.open = WriteStream$open;
        }
        Object.defineProperty(fs7, "ReadStream", {
          get: /* @__PURE__ */ __name(function () {
            return ReadStream;
          }, "get"),
          set: /* @__PURE__ */ __name(function (val) {
            ReadStream = val;
          }, "set"),
          enumerable: true,
          configurable: true,
        });
        Object.defineProperty(fs7, "WriteStream", {
          get: /* @__PURE__ */ __name(function () {
            return WriteStream;
          }, "get"),
          set: /* @__PURE__ */ __name(function (val) {
            WriteStream = val;
          }, "set"),
          enumerable: true,
          configurable: true,
        });
        var FileReadStream = ReadStream;
        Object.defineProperty(fs7, "FileReadStream", {
          get: /* @__PURE__ */ __name(function () {
            return FileReadStream;
          }, "get"),
          set: /* @__PURE__ */ __name(function (val) {
            FileReadStream = val;
          }, "set"),
          enumerable: true,
          configurable: true,
        });
        var FileWriteStream = WriteStream;
        Object.defineProperty(fs7, "FileWriteStream", {
          get: /* @__PURE__ */ __name(function () {
            return FileWriteStream;
          }, "get"),
          set: /* @__PURE__ */ __name(function (val) {
            FileWriteStream = val;
          }, "set"),
          enumerable: true,
          configurable: true,
        });
        function ReadStream(path4, options) {
          if (this instanceof ReadStream)
            return fs$ReadStream.apply(this, arguments), this;
          else
            return ReadStream.apply(
              Object.create(ReadStream.prototype),
              arguments,
            );
        }
        __name(ReadStream, "ReadStream");
        function ReadStream$open() {
          var that = this;
          open(that.path, that.flags, that.mode, function (err, fd) {
            if (err) {
              if (that.autoClose) that.destroy();
              that.emit("error", err);
            } else {
              that.fd = fd;
              that.emit("open", fd);
              that.read();
            }
          });
        }
        __name(ReadStream$open, "ReadStream$open");
        function WriteStream(path4, options) {
          if (this instanceof WriteStream)
            return fs$WriteStream.apply(this, arguments), this;
          else
            return WriteStream.apply(
              Object.create(WriteStream.prototype),
              arguments,
            );
        }
        __name(WriteStream, "WriteStream");
        function WriteStream$open() {
          var that = this;
          open(that.path, that.flags, that.mode, function (err, fd) {
            if (err) {
              that.destroy();
              that.emit("error", err);
            } else {
              that.fd = fd;
              that.emit("open", fd);
            }
          });
        }
        __name(WriteStream$open, "WriteStream$open");
        function createReadStream(path4, options) {
          return new fs7.ReadStream(path4, options);
        }
        __name(createReadStream, "createReadStream");
        function createWriteStream(path4, options) {
          return new fs7.WriteStream(path4, options);
        }
        __name(createWriteStream, "createWriteStream");
        var fs$open = fs7.open;
        fs7.open = open;
        function open(path4, flags, mode, cb) {
          if (typeof mode === "function") (cb = mode), (mode = null);
          return go$open(path4, flags, mode, cb);
          function go$open(path5, flags2, mode2, cb2, startTime) {
            return fs$open(path5, flags2, mode2, function (err, fd) {
              if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
                enqueue([
                  go$open,
                  [path5, flags2, mode2, cb2],
                  err,
                  startTime || Date.now(),
                  Date.now(),
                ]);
              else {
                if (typeof cb2 === "function") cb2.apply(this, arguments);
              }
            });
          }
          __name(go$open, "go$open");
        }
        __name(open, "open");
        return fs7;
      }
      __name(patch, "patch");
      function enqueue(elem) {
        debug("ENQUEUE", elem[0].name, elem[1]);
        fs6[gracefulQueue].push(elem);
        retry();
      }
      __name(enqueue, "enqueue");
      var retryTimer;
      function resetQueue() {
        var now = Date.now();
        for (var i = 0; i < fs6[gracefulQueue].length; ++i) {
          if (fs6[gracefulQueue][i].length > 2) {
            fs6[gracefulQueue][i][3] = now;
            fs6[gracefulQueue][i][4] = now;
          }
        }
        retry();
      }
      __name(resetQueue, "resetQueue");
      function retry() {
        clearTimeout(retryTimer);
        retryTimer = void 0;
        if (fs6[gracefulQueue].length === 0) return;
        var elem = fs6[gracefulQueue].shift();
        var fn = elem[0];
        var args = elem[1];
        var err = elem[2];
        var startTime = elem[3];
        var lastTime = elem[4];
        if (startTime === void 0) {
          debug("RETRY", fn.name, args);
          fn.apply(null, args);
        } else if (Date.now() - startTime >= 6e4) {
          debug("TIMEOUT", fn.name, args);
          var cb = args.pop();
          if (typeof cb === "function") cb.call(null, err);
        } else {
          var sinceAttempt = Date.now() - lastTime;
          var sinceStart = Math.max(lastTime - startTime, 1);
          var desiredDelay = Math.min(sinceStart * 1.2, 100);
          if (sinceAttempt >= desiredDelay) {
            debug("RETRY", fn.name, args);
            fn.apply(null, args.concat([startTime]));
          } else {
            fs6[gracefulQueue].push(elem);
          }
        }
        if (retryTimer === void 0) {
          retryTimer = setTimeout(retry, 0);
        }
      }
      __name(retry, "retry");
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/fs/index.js
  var require_fs = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/fs/index.js"(
      exports,
    ) {
      "use strict";
      var u = require_universalify().fromCallback;
      var fs6 = require_graceful_fs();
      var api = [
        "access",
        "appendFile",
        "chmod",
        "chown",
        "close",
        "copyFile",
        "fchmod",
        "fchown",
        "fdatasync",
        "fstat",
        "fsync",
        "ftruncate",
        "futimes",
        "lchmod",
        "lchown",
        "link",
        "lstat",
        "mkdir",
        "mkdtemp",
        "open",
        "opendir",
        "readdir",
        "readFile",
        "readlink",
        "realpath",
        "rename",
        "rm",
        "rmdir",
        "stat",
        "symlink",
        "truncate",
        "unlink",
        "utimes",
        "writeFile",
      ].filter((key) => {
        return typeof fs6[key] === "function";
      });
      Object.assign(exports, fs6);
      api.forEach((method) => {
        exports[method] = u(fs6[method]);
      });
      exports.exists = function (filename, callback) {
        if (typeof callback === "function") {
          return fs6.exists(filename, callback);
        }
        return new Promise((resolve) => {
          return fs6.exists(filename, resolve);
        });
      };
      exports.read = function (
        fd,
        buffer,
        offset,
        length,
        position2,
        callback,
      ) {
        if (typeof callback === "function") {
          return fs6.read(fd, buffer, offset, length, position2, callback);
        }
        return new Promise((resolve, reject) => {
          fs6.read(
            fd,
            buffer,
            offset,
            length,
            position2,
            (err, bytesRead, buffer2) => {
              if (err) return reject(err);
              resolve({ bytesRead, buffer: buffer2 });
            },
          );
        });
      };
      exports.write = function (fd, buffer, ...args) {
        if (typeof args[args.length - 1] === "function") {
          return fs6.write(fd, buffer, ...args);
        }
        return new Promise((resolve, reject) => {
          fs6.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
            if (err) return reject(err);
            resolve({ bytesWritten, buffer: buffer2 });
          });
        });
      };
      exports.readv = function (fd, buffers, ...args) {
        if (typeof args[args.length - 1] === "function") {
          return fs6.readv(fd, buffers, ...args);
        }
        return new Promise((resolve, reject) => {
          fs6.readv(fd, buffers, ...args, (err, bytesRead, buffers2) => {
            if (err) return reject(err);
            resolve({ bytesRead, buffers: buffers2 });
          });
        });
      };
      exports.writev = function (fd, buffers, ...args) {
        if (typeof args[args.length - 1] === "function") {
          return fs6.writev(fd, buffers, ...args);
        }
        return new Promise((resolve, reject) => {
          fs6.writev(fd, buffers, ...args, (err, bytesWritten, buffers2) => {
            if (err) return reject(err);
            resolve({ bytesWritten, buffers: buffers2 });
          });
        });
      };
      if (typeof fs6.realpath.native === "function") {
        exports.realpath.native = u(fs6.realpath.native);
      } else {
        process.emitWarning(
          "fs.realpath.native is not a function. Is fs being monkey-patched?",
          "Warning",
          "fs-extra-WARN0003",
        );
      }
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/utils.js
  var require_utils3 = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/utils.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      module.exports.checkPath = /* @__PURE__ */ __name(function checkPath(
        pth,
      ) {
        if (process.platform === "win32") {
          const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(
            pth.replace(path4.parse(pth).root, ""),
          );
          if (pathHasInvalidWinCharacters) {
            const error = new Error(`Path contains invalid characters: ${pth}`);
            error.code = "EINVAL";
            throw error;
          }
        }
      }, "checkPath");
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/make-dir.js
  var require_make_dir = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/make-dir.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_fs();
      var { checkPath } = require_utils3();
      var getMode = /* @__PURE__ */ __name((options) => {
        const defaults = { mode: 511 };
        if (typeof options === "number") return options;
        return { ...defaults, ...options }.mode;
      }, "getMode");
      module.exports.makeDir = async (dir, options) => {
        checkPath(dir);
        return fs6.mkdir(dir, {
          mode: getMode(options),
          recursive: true,
        });
      };
      module.exports.makeDirSync = (dir, options) => {
        checkPath(dir);
        return fs6.mkdirSync(dir, {
          mode: getMode(options),
          recursive: true,
        });
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/index.js
  var require_mkdirs = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/mkdirs/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify().fromPromise;
      var { makeDir: _makeDir, makeDirSync } = require_make_dir();
      var makeDir = u(_makeDir);
      module.exports = {
        mkdirs: makeDir,
        mkdirsSync: makeDirSync,
        // alias
        mkdirp: makeDir,
        mkdirpSync: makeDirSync,
        ensureDir: makeDir,
        ensureDirSync: makeDirSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/path-exists/index.js
  var require_path_exists = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/path-exists/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify().fromPromise;
      var fs6 = require_fs();
      function pathExists(path4) {
        return fs6
          .access(path4)
          .then(() => true)
          .catch(() => false);
      }
      __name(pathExists, "pathExists");
      module.exports = {
        pathExists: u(pathExists),
        pathExistsSync: fs6.existsSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/util/utimes.js
  var require_utimes = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/util/utimes.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_fs();
      var u = require_universalify().fromPromise;
      async function utimesMillis(path4, atime, mtime) {
        const fd = await fs6.open(path4, "r+");
        let closeErr = null;
        try {
          await fs6.futimes(fd, atime, mtime);
        } finally {
          try {
            await fs6.close(fd);
          } catch (e) {
            closeErr = e;
          }
        }
        if (closeErr) {
          throw closeErr;
        }
      }
      __name(utimesMillis, "utimesMillis");
      function utimesMillisSync(path4, atime, mtime) {
        const fd = fs6.openSync(path4, "r+");
        fs6.futimesSync(fd, atime, mtime);
        return fs6.closeSync(fd);
      }
      __name(utimesMillisSync, "utimesMillisSync");
      module.exports = {
        utimesMillis: u(utimesMillis),
        utimesMillisSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/util/stat.js
  var require_stat = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/util/stat.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_fs();
      var path4 = __require("path");
      var u = require_universalify().fromPromise;
      function getStats(src, dest, opts) {
        const statFunc = opts.dereference
          ? (file) => fs6.stat(file, { bigint: true })
          : (file) => fs6.lstat(file, { bigint: true });
        return Promise.all([
          statFunc(src),
          statFunc(dest).catch((err) => {
            if (err.code === "ENOENT") return null;
            throw err;
          }),
        ]).then(([srcStat, destStat]) => ({ srcStat, destStat }));
      }
      __name(getStats, "getStats");
      function getStatsSync(src, dest, opts) {
        let destStat;
        const statFunc = opts.dereference
          ? (file) => fs6.statSync(file, { bigint: true })
          : (file) => fs6.lstatSync(file, { bigint: true });
        const srcStat = statFunc(src);
        try {
          destStat = statFunc(dest);
        } catch (err) {
          if (err.code === "ENOENT") return { srcStat, destStat: null };
          throw err;
        }
        return { srcStat, destStat };
      }
      __name(getStatsSync, "getStatsSync");
      async function checkPaths(src, dest, funcName, opts) {
        const { srcStat, destStat } = await getStats(src, dest, opts);
        if (destStat) {
          if (areIdentical(srcStat, destStat)) {
            const srcBaseName = path4.basename(src);
            const destBaseName = path4.basename(dest);
            if (
              funcName === "move" &&
              srcBaseName !== destBaseName &&
              srcBaseName.toLowerCase() === destBaseName.toLowerCase()
            ) {
              return { srcStat, destStat, isChangingCase: true };
            }
            throw new Error("Source and destination must not be the same.");
          }
          if (srcStat.isDirectory() && !destStat.isDirectory()) {
            throw new Error(
              `Cannot overwrite non-directory '${dest}' with directory '${src}'.`,
            );
          }
          if (!srcStat.isDirectory() && destStat.isDirectory()) {
            throw new Error(
              `Cannot overwrite directory '${dest}' with non-directory '${src}'.`,
            );
          }
        }
        if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
          throw new Error(errMsg(src, dest, funcName));
        }
        return { srcStat, destStat };
      }
      __name(checkPaths, "checkPaths");
      function checkPathsSync(src, dest, funcName, opts) {
        const { srcStat, destStat } = getStatsSync(src, dest, opts);
        if (destStat) {
          if (areIdentical(srcStat, destStat)) {
            const srcBaseName = path4.basename(src);
            const destBaseName = path4.basename(dest);
            if (
              funcName === "move" &&
              srcBaseName !== destBaseName &&
              srcBaseName.toLowerCase() === destBaseName.toLowerCase()
            ) {
              return { srcStat, destStat, isChangingCase: true };
            }
            throw new Error("Source and destination must not be the same.");
          }
          if (srcStat.isDirectory() && !destStat.isDirectory()) {
            throw new Error(
              `Cannot overwrite non-directory '${dest}' with directory '${src}'.`,
            );
          }
          if (!srcStat.isDirectory() && destStat.isDirectory()) {
            throw new Error(
              `Cannot overwrite directory '${dest}' with non-directory '${src}'.`,
            );
          }
        }
        if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
          throw new Error(errMsg(src, dest, funcName));
        }
        return { srcStat, destStat };
      }
      __name(checkPathsSync, "checkPathsSync");
      async function checkParentPaths(src, srcStat, dest, funcName) {
        const srcParent = path4.resolve(path4.dirname(src));
        const destParent = path4.resolve(path4.dirname(dest));
        if (
          destParent === srcParent ||
          destParent === path4.parse(destParent).root
        )
          return;
        let destStat;
        try {
          destStat = await fs6.stat(destParent, { bigint: true });
        } catch (err) {
          if (err.code === "ENOENT") return;
          throw err;
        }
        if (areIdentical(srcStat, destStat)) {
          throw new Error(errMsg(src, dest, funcName));
        }
        return checkParentPaths(src, srcStat, destParent, funcName);
      }
      __name(checkParentPaths, "checkParentPaths");
      function checkParentPathsSync(src, srcStat, dest, funcName) {
        const srcParent = path4.resolve(path4.dirname(src));
        const destParent = path4.resolve(path4.dirname(dest));
        if (
          destParent === srcParent ||
          destParent === path4.parse(destParent).root
        )
          return;
        let destStat;
        try {
          destStat = fs6.statSync(destParent, { bigint: true });
        } catch (err) {
          if (err.code === "ENOENT") return;
          throw err;
        }
        if (areIdentical(srcStat, destStat)) {
          throw new Error(errMsg(src, dest, funcName));
        }
        return checkParentPathsSync(src, srcStat, destParent, funcName);
      }
      __name(checkParentPathsSync, "checkParentPathsSync");
      function areIdentical(srcStat, destStat) {
        return (
          destStat.ino &&
          destStat.dev &&
          destStat.ino === srcStat.ino &&
          destStat.dev === srcStat.dev
        );
      }
      __name(areIdentical, "areIdentical");
      function isSrcSubdir(src, dest) {
        const srcArr = path4
          .resolve(src)
          .split(path4.sep)
          .filter((i) => i);
        const destArr = path4
          .resolve(dest)
          .split(path4.sep)
          .filter((i) => i);
        return srcArr.every((cur, i) => destArr[i] === cur);
      }
      __name(isSrcSubdir, "isSrcSubdir");
      function errMsg(src, dest, funcName) {
        return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
      }
      __name(errMsg, "errMsg");
      module.exports = {
        // checkPaths
        checkPaths: u(checkPaths),
        checkPathsSync,
        // checkParent
        checkParentPaths: u(checkParentPaths),
        checkParentPathsSync,
        // Misc
        isSrcSubdir,
        areIdentical,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/copy.js
  var require_copy = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/copy.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_fs();
      var path4 = __require("path");
      var { mkdirs } = require_mkdirs();
      var { pathExists } = require_path_exists();
      var { utimesMillis } = require_utimes();
      var stat = require_stat();
      async function copy(src, dest, opts = {}) {
        if (typeof opts === "function") {
          opts = { filter: opts };
        }
        opts.clobber = "clobber" in opts ? !!opts.clobber : true;
        opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
        if (opts.preserveTimestamps && process.arch === "ia32") {
          process.emitWarning(
            "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
            "Warning",
            "fs-extra-WARN0001",
          );
        }
        const { srcStat, destStat } = await stat.checkPaths(
          src,
          dest,
          "copy",
          opts,
        );
        await stat.checkParentPaths(src, srcStat, dest, "copy");
        const include = await runFilter(src, dest, opts);
        if (!include) return;
        const destParent = path4.dirname(dest);
        const dirExists = await pathExists(destParent);
        if (!dirExists) {
          await mkdirs(destParent);
        }
        await getStatsAndPerformCopy(destStat, src, dest, opts);
      }
      __name(copy, "copy");
      async function runFilter(src, dest, opts) {
        if (!opts.filter) return true;
        return opts.filter(src, dest);
      }
      __name(runFilter, "runFilter");
      async function getStatsAndPerformCopy(destStat, src, dest, opts) {
        const statFn = opts.dereference ? fs6.stat : fs6.lstat;
        const srcStat = await statFn(src);
        if (srcStat.isDirectory())
          return onDir(srcStat, destStat, src, dest, opts);
        if (
          srcStat.isFile() ||
          srcStat.isCharacterDevice() ||
          srcStat.isBlockDevice()
        )
          return onFile(srcStat, destStat, src, dest, opts);
        if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts);
        if (srcStat.isSocket())
          throw new Error(`Cannot copy a socket file: ${src}`);
        if (srcStat.isFIFO())
          throw new Error(`Cannot copy a FIFO pipe: ${src}`);
        throw new Error(`Unknown file: ${src}`);
      }
      __name(getStatsAndPerformCopy, "getStatsAndPerformCopy");
      async function onFile(srcStat, destStat, src, dest, opts) {
        if (!destStat) return copyFile(srcStat, src, dest, opts);
        if (opts.overwrite) {
          await fs6.unlink(dest);
          return copyFile(srcStat, src, dest, opts);
        }
        if (opts.errorOnExist) {
          throw new Error(`'${dest}' already exists`);
        }
      }
      __name(onFile, "onFile");
      async function copyFile(srcStat, src, dest, opts) {
        await fs6.copyFile(src, dest);
        if (opts.preserveTimestamps) {
          if (fileIsNotWritable(srcStat.mode)) {
            await makeFileWritable(dest, srcStat.mode);
          }
          const updatedSrcStat = await fs6.stat(src);
          await utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
        }
        return fs6.chmod(dest, srcStat.mode);
      }
      __name(copyFile, "copyFile");
      function fileIsNotWritable(srcMode) {
        return (srcMode & 128) === 0;
      }
      __name(fileIsNotWritable, "fileIsNotWritable");
      function makeFileWritable(dest, srcMode) {
        return fs6.chmod(dest, srcMode | 128);
      }
      __name(makeFileWritable, "makeFileWritable");
      async function onDir(srcStat, destStat, src, dest, opts) {
        if (!destStat) {
          await fs6.mkdir(dest);
        }
        const items = await fs6.readdir(src);
        await Promise.all(
          items.map(async (item) => {
            const srcItem = path4.join(src, item);
            const destItem = path4.join(dest, item);
            const include = await runFilter(srcItem, destItem, opts);
            if (!include) return;
            const { destStat: destStat2 } = await stat.checkPaths(
              srcItem,
              destItem,
              "copy",
              opts,
            );
            return getStatsAndPerformCopy(destStat2, srcItem, destItem, opts);
          }),
        );
        if (!destStat) {
          await fs6.chmod(dest, srcStat.mode);
        }
      }
      __name(onDir, "onDir");
      async function onLink(destStat, src, dest, opts) {
        let resolvedSrc = await fs6.readlink(src);
        if (opts.dereference) {
          resolvedSrc = path4.resolve(process.cwd(), resolvedSrc);
        }
        if (!destStat) {
          return fs6.symlink(resolvedSrc, dest);
        }
        let resolvedDest = null;
        try {
          resolvedDest = await fs6.readlink(dest);
        } catch (e) {
          if (e.code === "EINVAL" || e.code === "UNKNOWN")
            return fs6.symlink(resolvedSrc, dest);
          throw e;
        }
        if (opts.dereference) {
          resolvedDest = path4.resolve(process.cwd(), resolvedDest);
        }
        if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
          throw new Error(
            `Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`,
          );
        }
        if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
          throw new Error(
            `Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`,
          );
        }
        await fs6.unlink(dest);
        return fs6.symlink(resolvedSrc, dest);
      }
      __name(onLink, "onLink");
      module.exports = copy;
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/copy-sync.js
  var require_copy_sync = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/copy-sync.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var mkdirsSync = require_mkdirs().mkdirsSync;
      var utimesMillisSync = require_utimes().utimesMillisSync;
      var stat = require_stat();
      function copySync(src, dest, opts) {
        if (typeof opts === "function") {
          opts = { filter: opts };
        }
        opts = opts || {};
        opts.clobber = "clobber" in opts ? !!opts.clobber : true;
        opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
        if (opts.preserveTimestamps && process.arch === "ia32") {
          process.emitWarning(
            "Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269",
            "Warning",
            "fs-extra-WARN0002",
          );
        }
        const { srcStat, destStat } = stat.checkPathsSync(
          src,
          dest,
          "copy",
          opts,
        );
        stat.checkParentPathsSync(src, srcStat, dest, "copy");
        if (opts.filter && !opts.filter(src, dest)) return;
        const destParent = path4.dirname(dest);
        if (!fs6.existsSync(destParent)) mkdirsSync(destParent);
        return getStats(destStat, src, dest, opts);
      }
      __name(copySync, "copySync");
      function getStats(destStat, src, dest, opts) {
        const statSync = opts.dereference ? fs6.statSync : fs6.lstatSync;
        const srcStat = statSync(src);
        if (srcStat.isDirectory())
          return onDir(srcStat, destStat, src, dest, opts);
        else if (
          srcStat.isFile() ||
          srcStat.isCharacterDevice() ||
          srcStat.isBlockDevice()
        )
          return onFile(srcStat, destStat, src, dest, opts);
        else if (srcStat.isSymbolicLink())
          return onLink(destStat, src, dest, opts);
        else if (srcStat.isSocket())
          throw new Error(`Cannot copy a socket file: ${src}`);
        else if (srcStat.isFIFO())
          throw new Error(`Cannot copy a FIFO pipe: ${src}`);
        throw new Error(`Unknown file: ${src}`);
      }
      __name(getStats, "getStats");
      function onFile(srcStat, destStat, src, dest, opts) {
        if (!destStat) return copyFile(srcStat, src, dest, opts);
        return mayCopyFile(srcStat, src, dest, opts);
      }
      __name(onFile, "onFile");
      function mayCopyFile(srcStat, src, dest, opts) {
        if (opts.overwrite) {
          fs6.unlinkSync(dest);
          return copyFile(srcStat, src, dest, opts);
        } else if (opts.errorOnExist) {
          throw new Error(`'${dest}' already exists`);
        }
      }
      __name(mayCopyFile, "mayCopyFile");
      function copyFile(srcStat, src, dest, opts) {
        fs6.copyFileSync(src, dest);
        if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest);
        return setDestMode(dest, srcStat.mode);
      }
      __name(copyFile, "copyFile");
      function handleTimestamps(srcMode, src, dest) {
        if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode);
        return setDestTimestamps(src, dest);
      }
      __name(handleTimestamps, "handleTimestamps");
      function fileIsNotWritable(srcMode) {
        return (srcMode & 128) === 0;
      }
      __name(fileIsNotWritable, "fileIsNotWritable");
      function makeFileWritable(dest, srcMode) {
        return setDestMode(dest, srcMode | 128);
      }
      __name(makeFileWritable, "makeFileWritable");
      function setDestMode(dest, srcMode) {
        return fs6.chmodSync(dest, srcMode);
      }
      __name(setDestMode, "setDestMode");
      function setDestTimestamps(src, dest) {
        const updatedSrcStat = fs6.statSync(src);
        return utimesMillisSync(
          dest,
          updatedSrcStat.atime,
          updatedSrcStat.mtime,
        );
      }
      __name(setDestTimestamps, "setDestTimestamps");
      function onDir(srcStat, destStat, src, dest, opts) {
        if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts);
        return copyDir(src, dest, opts);
      }
      __name(onDir, "onDir");
      function mkDirAndCopy(srcMode, src, dest, opts) {
        fs6.mkdirSync(dest);
        copyDir(src, dest, opts);
        return setDestMode(dest, srcMode);
      }
      __name(mkDirAndCopy, "mkDirAndCopy");
      function copyDir(src, dest, opts) {
        fs6
          .readdirSync(src)
          .forEach((item) => copyDirItem(item, src, dest, opts));
      }
      __name(copyDir, "copyDir");
      function copyDirItem(item, src, dest, opts) {
        const srcItem = path4.join(src, item);
        const destItem = path4.join(dest, item);
        if (opts.filter && !opts.filter(srcItem, destItem)) return;
        const { destStat } = stat.checkPathsSync(
          srcItem,
          destItem,
          "copy",
          opts,
        );
        return getStats(destStat, srcItem, destItem, opts);
      }
      __name(copyDirItem, "copyDirItem");
      function onLink(destStat, src, dest, opts) {
        let resolvedSrc = fs6.readlinkSync(src);
        if (opts.dereference) {
          resolvedSrc = path4.resolve(process.cwd(), resolvedSrc);
        }
        if (!destStat) {
          return fs6.symlinkSync(resolvedSrc, dest);
        } else {
          let resolvedDest;
          try {
            resolvedDest = fs6.readlinkSync(dest);
          } catch (err) {
            if (err.code === "EINVAL" || err.code === "UNKNOWN")
              return fs6.symlinkSync(resolvedSrc, dest);
            throw err;
          }
          if (opts.dereference) {
            resolvedDest = path4.resolve(process.cwd(), resolvedDest);
          }
          if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
            throw new Error(
              `Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`,
            );
          }
          if (stat.isSrcSubdir(resolvedDest, resolvedSrc)) {
            throw new Error(
              `Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`,
            );
          }
          return copyLink(resolvedSrc, dest);
        }
      }
      __name(onLink, "onLink");
      function copyLink(resolvedSrc, dest) {
        fs6.unlinkSync(dest);
        return fs6.symlinkSync(resolvedSrc, dest);
      }
      __name(copyLink, "copyLink");
      module.exports = copySync;
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/index.js
  var require_copy2 = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/copy/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify().fromPromise;
      module.exports = {
        copy: u(require_copy()),
        copySync: require_copy_sync(),
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/remove/index.js
  var require_remove = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/remove/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var u = require_universalify().fromCallback;
      function remove(path4, callback) {
        fs6.rm(path4, { recursive: true, force: true }, callback);
      }
      __name(remove, "remove");
      function removeSync(path4) {
        fs6.rmSync(path4, { recursive: true, force: true });
      }
      __name(removeSync, "removeSync");
      module.exports = {
        remove: u(remove),
        removeSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/empty/index.js
  var require_empty = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/empty/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify().fromPromise;
      var fs6 = require_fs();
      var path4 = __require("path");
      var mkdir = require_mkdirs();
      var remove = require_remove();
      var emptyDir = u(
        /* @__PURE__ */ __name(async function emptyDir2(dir) {
          let items;
          try {
            items = await fs6.readdir(dir);
          } catch {
            return mkdir.mkdirs(dir);
          }
          return Promise.all(
            items.map((item) => remove.remove(path4.join(dir, item))),
          );
        }, "emptyDir"),
      );
      function emptyDirSync(dir) {
        let items;
        try {
          items = fs6.readdirSync(dir);
        } catch {
          return mkdir.mkdirsSync(dir);
        }
        items.forEach((item) => {
          item = path4.join(dir, item);
          remove.removeSync(item);
        });
      }
      __name(emptyDirSync, "emptyDirSync");
      module.exports = {
        emptyDirSync,
        emptydirSync: emptyDirSync,
        emptyDir,
        emptydir: emptyDir,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/file.js
  var require_file2 = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/file.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify().fromPromise;
      var path4 = __require("path");
      var fs6 = require_fs();
      var mkdir = require_mkdirs();
      async function createFile(file) {
        let stats;
        try {
          stats = await fs6.stat(file);
        } catch {}
        if (stats && stats.isFile()) return;
        const dir = path4.dirname(file);
        let dirStats = null;
        try {
          dirStats = await fs6.stat(dir);
        } catch (err) {
          if (err.code === "ENOENT") {
            await mkdir.mkdirs(dir);
            await fs6.writeFile(file, "");
            return;
          } else {
            throw err;
          }
        }
        if (dirStats.isDirectory()) {
          await fs6.writeFile(file, "");
        } else {
          await fs6.readdir(dir);
        }
      }
      __name(createFile, "createFile");
      function createFileSync(file) {
        let stats;
        try {
          stats = fs6.statSync(file);
        } catch {}
        if (stats && stats.isFile()) return;
        const dir = path4.dirname(file);
        try {
          if (!fs6.statSync(dir).isDirectory()) {
            fs6.readdirSync(dir);
          }
        } catch (err) {
          if (err && err.code === "ENOENT") mkdir.mkdirsSync(dir);
          else throw err;
        }
        fs6.writeFileSync(file, "");
      }
      __name(createFileSync, "createFileSync");
      module.exports = {
        createFile: u(createFile),
        createFileSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/link.js
  var require_link = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/link.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify().fromPromise;
      var path4 = __require("path");
      var fs6 = require_fs();
      var mkdir = require_mkdirs();
      var { pathExists } = require_path_exists();
      var { areIdentical } = require_stat();
      async function createLink(srcpath, dstpath) {
        let dstStat;
        try {
          dstStat = await fs6.lstat(dstpath);
        } catch {}
        let srcStat;
        try {
          srcStat = await fs6.lstat(srcpath);
        } catch (err) {
          err.message = err.message.replace("lstat", "ensureLink");
          throw err;
        }
        if (dstStat && areIdentical(srcStat, dstStat)) return;
        const dir = path4.dirname(dstpath);
        const dirExists = await pathExists(dir);
        if (!dirExists) {
          await mkdir.mkdirs(dir);
        }
        await fs6.link(srcpath, dstpath);
      }
      __name(createLink, "createLink");
      function createLinkSync(srcpath, dstpath) {
        let dstStat;
        try {
          dstStat = fs6.lstatSync(dstpath);
        } catch {}
        try {
          const srcStat = fs6.lstatSync(srcpath);
          if (dstStat && areIdentical(srcStat, dstStat)) return;
        } catch (err) {
          err.message = err.message.replace("lstat", "ensureLink");
          throw err;
        }
        const dir = path4.dirname(dstpath);
        const dirExists = fs6.existsSync(dir);
        if (dirExists) return fs6.linkSync(srcpath, dstpath);
        mkdir.mkdirsSync(dir);
        return fs6.linkSync(srcpath, dstpath);
      }
      __name(createLinkSync, "createLinkSync");
      module.exports = {
        createLink: u(createLink),
        createLinkSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink-paths.js
  var require_symlink_paths = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink-paths.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var fs6 = require_fs();
      var { pathExists } = require_path_exists();
      var u = require_universalify().fromPromise;
      async function symlinkPaths(srcpath, dstpath) {
        if (path4.isAbsolute(srcpath)) {
          try {
            await fs6.lstat(srcpath);
          } catch (err) {
            err.message = err.message.replace("lstat", "ensureSymlink");
            throw err;
          }
          return {
            toCwd: srcpath,
            toDst: srcpath,
          };
        }
        const dstdir = path4.dirname(dstpath);
        const relativeToDst = path4.join(dstdir, srcpath);
        const exists = await pathExists(relativeToDst);
        if (exists) {
          return {
            toCwd: relativeToDst,
            toDst: srcpath,
          };
        }
        try {
          await fs6.lstat(srcpath);
        } catch (err) {
          err.message = err.message.replace("lstat", "ensureSymlink");
          throw err;
        }
        return {
          toCwd: srcpath,
          toDst: path4.relative(dstdir, srcpath),
        };
      }
      __name(symlinkPaths, "symlinkPaths");
      function symlinkPathsSync(srcpath, dstpath) {
        if (path4.isAbsolute(srcpath)) {
          const exists2 = fs6.existsSync(srcpath);
          if (!exists2) throw new Error("absolute srcpath does not exist");
          return {
            toCwd: srcpath,
            toDst: srcpath,
          };
        }
        const dstdir = path4.dirname(dstpath);
        const relativeToDst = path4.join(dstdir, srcpath);
        const exists = fs6.existsSync(relativeToDst);
        if (exists) {
          return {
            toCwd: relativeToDst,
            toDst: srcpath,
          };
        }
        const srcExists = fs6.existsSync(srcpath);
        if (!srcExists) throw new Error("relative srcpath does not exist");
        return {
          toCwd: srcpath,
          toDst: path4.relative(dstdir, srcpath),
        };
      }
      __name(symlinkPathsSync, "symlinkPathsSync");
      module.exports = {
        symlinkPaths: u(symlinkPaths),
        symlinkPathsSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink-type.js
  var require_symlink_type = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink-type.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_fs();
      var u = require_universalify().fromPromise;
      async function symlinkType(srcpath, type) {
        if (type) return type;
        let stats;
        try {
          stats = await fs6.lstat(srcpath);
        } catch {
          return "file";
        }
        return stats && stats.isDirectory() ? "dir" : "file";
      }
      __name(symlinkType, "symlinkType");
      function symlinkTypeSync(srcpath, type) {
        if (type) return type;
        let stats;
        try {
          stats = fs6.lstatSync(srcpath);
        } catch {
          return "file";
        }
        return stats && stats.isDirectory() ? "dir" : "file";
      }
      __name(symlinkTypeSync, "symlinkTypeSync");
      module.exports = {
        symlinkType: u(symlinkType),
        symlinkTypeSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink.js
  var require_symlink = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/symlink.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify().fromPromise;
      var path4 = __require("path");
      var fs6 = require_fs();
      var { mkdirs, mkdirsSync } = require_mkdirs();
      var { symlinkPaths, symlinkPathsSync } = require_symlink_paths();
      var { symlinkType, symlinkTypeSync } = require_symlink_type();
      var { pathExists } = require_path_exists();
      var { areIdentical } = require_stat();
      async function createSymlink(srcpath, dstpath, type) {
        let stats;
        try {
          stats = await fs6.lstat(dstpath);
        } catch {}
        if (stats && stats.isSymbolicLink()) {
          const [srcStat, dstStat] = await Promise.all([
            fs6.stat(srcpath),
            fs6.stat(dstpath),
          ]);
          if (areIdentical(srcStat, dstStat)) return;
        }
        const relative = await symlinkPaths(srcpath, dstpath);
        srcpath = relative.toDst;
        const toType = await symlinkType(relative.toCwd, type);
        const dir = path4.dirname(dstpath);
        if (!(await pathExists(dir))) {
          await mkdirs(dir);
        }
        return fs6.symlink(srcpath, dstpath, toType);
      }
      __name(createSymlink, "createSymlink");
      function createSymlinkSync(srcpath, dstpath, type) {
        let stats;
        try {
          stats = fs6.lstatSync(dstpath);
        } catch {}
        if (stats && stats.isSymbolicLink()) {
          const srcStat = fs6.statSync(srcpath);
          const dstStat = fs6.statSync(dstpath);
          if (areIdentical(srcStat, dstStat)) return;
        }
        const relative = symlinkPathsSync(srcpath, dstpath);
        srcpath = relative.toDst;
        type = symlinkTypeSync(relative.toCwd, type);
        const dir = path4.dirname(dstpath);
        const exists = fs6.existsSync(dir);
        if (exists) return fs6.symlinkSync(srcpath, dstpath, type);
        mkdirsSync(dir);
        return fs6.symlinkSync(srcpath, dstpath, type);
      }
      __name(createSymlinkSync, "createSymlinkSync");
      module.exports = {
        createSymlink: u(createSymlink),
        createSymlinkSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/index.js
  var require_ensure = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/ensure/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var { createFile, createFileSync } = require_file2();
      var { createLink, createLinkSync } = require_link();
      var { createSymlink, createSymlinkSync } = require_symlink();
      module.exports = {
        // file
        createFile,
        createFileSync,
        ensureFile: createFile,
        ensureFileSync: createFileSync,
        // link
        createLink,
        createLinkSync,
        ensureLink: createLink,
        ensureLinkSync: createLinkSync,
        // symlink
        createSymlink,
        createSymlinkSync,
        ensureSymlink: createSymlink,
        ensureSymlinkSync: createSymlinkSync,
      };
    },
  });

  // node_modules/.pnpm/jsonfile@6.1.0/node_modules/jsonfile/utils.js
  var require_utils4 = __commonJS({
    "node_modules/.pnpm/jsonfile@6.1.0/node_modules/jsonfile/utils.js"(
      exports,
      module,
    ) {
      function stringify2(
        obj,
        { EOL = "\n", finalEOL = true, replacer = null, spaces } = {},
      ) {
        const EOF = finalEOL ? EOL : "";
        const str = JSON.stringify(obj, replacer, spaces);
        return str.replace(/\n/g, EOL) + EOF;
      }
      __name(stringify2, "stringify");
      function stripBom(content3) {
        if (Buffer.isBuffer(content3)) content3 = content3.toString("utf8");
        return content3.replace(/^\uFEFF/, "");
      }
      __name(stripBom, "stripBom");
      module.exports = { stringify: stringify2, stripBom };
    },
  });

  // node_modules/.pnpm/jsonfile@6.1.0/node_modules/jsonfile/index.js
  var require_jsonfile = __commonJS({
    "node_modules/.pnpm/jsonfile@6.1.0/node_modules/jsonfile/index.js"(
      exports,
      module,
    ) {
      var _fs;
      try {
        _fs = require_graceful_fs();
      } catch (_) {
        _fs = __require("fs");
      }
      var universalify = require_universalify();
      var { stringify: stringify2, stripBom } = require_utils4();
      async function _readFile(file, options = {}) {
        if (typeof options === "string") {
          options = { encoding: options };
        }
        const fs6 = options.fs || _fs;
        const shouldThrow = "throws" in options ? options.throws : true;
        let data = await universalify.fromCallback(fs6.readFile)(file, options);
        data = stripBom(data);
        let obj;
        try {
          obj = JSON.parse(data, options ? options.reviver : null);
        } catch (err) {
          if (shouldThrow) {
            err.message = `${file}: ${err.message}`;
            throw err;
          } else {
            return null;
          }
        }
        return obj;
      }
      __name(_readFile, "_readFile");
      var readFile3 = universalify.fromPromise(_readFile);
      function readFileSync(file, options = {}) {
        if (typeof options === "string") {
          options = { encoding: options };
        }
        const fs6 = options.fs || _fs;
        const shouldThrow = "throws" in options ? options.throws : true;
        try {
          let content3 = fs6.readFileSync(file, options);
          content3 = stripBom(content3);
          return JSON.parse(content3, options.reviver);
        } catch (err) {
          if (shouldThrow) {
            err.message = `${file}: ${err.message}`;
            throw err;
          } else {
            return null;
          }
        }
      }
      __name(readFileSync, "readFileSync");
      async function _writeFile(file, obj, options = {}) {
        const fs6 = options.fs || _fs;
        const str = stringify2(obj, options);
        await universalify.fromCallback(fs6.writeFile)(file, str, options);
      }
      __name(_writeFile, "_writeFile");
      var writeFile = universalify.fromPromise(_writeFile);
      function writeFileSync(file, obj, options = {}) {
        const fs6 = options.fs || _fs;
        const str = stringify2(obj, options);
        return fs6.writeFileSync(file, str, options);
      }
      __name(writeFileSync, "writeFileSync");
      var jsonfile = {
        readFile: readFile3,
        readFileSync,
        writeFile,
        writeFileSync,
      };
      module.exports = jsonfile;
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/jsonfile.js
  var require_jsonfile2 = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/jsonfile.js"(
      exports,
      module,
    ) {
      "use strict";
      var jsonFile = require_jsonfile();
      module.exports = {
        // jsonfile exports
        readJson: jsonFile.readFile,
        readJsonSync: jsonFile.readFileSync,
        writeJson: jsonFile.writeFile,
        writeJsonSync: jsonFile.writeFileSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/output-file/index.js
  var require_output_file = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/output-file/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify().fromPromise;
      var fs6 = require_fs();
      var path4 = __require("path");
      var mkdir = require_mkdirs();
      var pathExists = require_path_exists().pathExists;
      async function outputFile2(file, data, encoding = "utf-8") {
        const dir = path4.dirname(file);
        if (!(await pathExists(dir))) {
          await mkdir.mkdirs(dir);
        }
        return fs6.writeFile(file, data, encoding);
      }
      __name(outputFile2, "outputFile");
      function outputFileSync(file, ...args) {
        const dir = path4.dirname(file);
        if (!fs6.existsSync(dir)) {
          mkdir.mkdirsSync(dir);
        }
        fs6.writeFileSync(file, ...args);
      }
      __name(outputFileSync, "outputFileSync");
      module.exports = {
        outputFile: u(outputFile2),
        outputFileSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/output-json.js
  var require_output_json = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/output-json.js"(
      exports,
      module,
    ) {
      "use strict";
      var { stringify: stringify2 } = require_utils4();
      var { outputFile: outputFile2 } = require_output_file();
      async function outputJson(file, data, options = {}) {
        const str = stringify2(data, options);
        await outputFile2(file, str, options);
      }
      __name(outputJson, "outputJson");
      module.exports = outputJson;
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/output-json-sync.js
  var require_output_json_sync = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/output-json-sync.js"(
      exports,
      module,
    ) {
      "use strict";
      var { stringify: stringify2 } = require_utils4();
      var { outputFileSync } = require_output_file();
      function outputJsonSync(file, data, options) {
        const str = stringify2(data, options);
        outputFileSync(file, str, options);
      }
      __name(outputJsonSync, "outputJsonSync");
      module.exports = outputJsonSync;
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/index.js
  var require_json = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/json/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify().fromPromise;
      var jsonFile = require_jsonfile2();
      jsonFile.outputJson = u(require_output_json());
      jsonFile.outputJsonSync = require_output_json_sync();
      jsonFile.outputJSON = jsonFile.outputJson;
      jsonFile.outputJSONSync = jsonFile.outputJsonSync;
      jsonFile.writeJSON = jsonFile.writeJson;
      jsonFile.writeJSONSync = jsonFile.writeJsonSync;
      jsonFile.readJSON = jsonFile.readJson;
      jsonFile.readJSONSync = jsonFile.readJsonSync;
      module.exports = jsonFile;
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/move/move.js
  var require_move = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/move/move.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_fs();
      var path4 = __require("path");
      var { copy } = require_copy2();
      var { remove } = require_remove();
      var { mkdirp } = require_mkdirs();
      var { pathExists } = require_path_exists();
      var stat = require_stat();
      async function move(src, dest, opts = {}) {
        const overwrite = opts.overwrite || opts.clobber || false;
        const { srcStat, isChangingCase = false } = await stat.checkPaths(
          src,
          dest,
          "move",
          opts,
        );
        await stat.checkParentPaths(src, srcStat, dest, "move");
        const destParent = path4.dirname(dest);
        const parsedParentPath = path4.parse(destParent);
        if (parsedParentPath.root !== destParent) {
          await mkdirp(destParent);
        }
        return doRename(src, dest, overwrite, isChangingCase);
      }
      __name(move, "move");
      async function doRename(src, dest, overwrite, isChangingCase) {
        if (!isChangingCase) {
          if (overwrite) {
            await remove(dest);
          } else if (await pathExists(dest)) {
            throw new Error("dest already exists.");
          }
        }
        try {
          await fs6.rename(src, dest);
        } catch (err) {
          if (err.code !== "EXDEV") {
            throw err;
          }
          await moveAcrossDevice(src, dest, overwrite);
        }
      }
      __name(doRename, "doRename");
      async function moveAcrossDevice(src, dest, overwrite) {
        const opts = {
          overwrite,
          errorOnExist: true,
          preserveTimestamps: true,
        };
        await copy(src, dest, opts);
        return remove(src);
      }
      __name(moveAcrossDevice, "moveAcrossDevice");
      module.exports = move;
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/move/move-sync.js
  var require_move_sync = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/move/move-sync.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var copySync = require_copy2().copySync;
      var removeSync = require_remove().removeSync;
      var mkdirpSync = require_mkdirs().mkdirpSync;
      var stat = require_stat();
      function moveSync(src, dest, opts) {
        opts = opts || {};
        const overwrite = opts.overwrite || opts.clobber || false;
        const { srcStat, isChangingCase = false } = stat.checkPathsSync(
          src,
          dest,
          "move",
          opts,
        );
        stat.checkParentPathsSync(src, srcStat, dest, "move");
        if (!isParentRoot(dest)) mkdirpSync(path4.dirname(dest));
        return doRename(src, dest, overwrite, isChangingCase);
      }
      __name(moveSync, "moveSync");
      function isParentRoot(dest) {
        const parent = path4.dirname(dest);
        const parsedPath = path4.parse(parent);
        return parsedPath.root === parent;
      }
      __name(isParentRoot, "isParentRoot");
      function doRename(src, dest, overwrite, isChangingCase) {
        if (isChangingCase) return rename(src, dest, overwrite);
        if (overwrite) {
          removeSync(dest);
          return rename(src, dest, overwrite);
        }
        if (fs6.existsSync(dest)) throw new Error("dest already exists.");
        return rename(src, dest, overwrite);
      }
      __name(doRename, "doRename");
      function rename(src, dest, overwrite) {
        try {
          fs6.renameSync(src, dest);
        } catch (err) {
          if (err.code !== "EXDEV") throw err;
          return moveAcrossDevice(src, dest, overwrite);
        }
      }
      __name(rename, "rename");
      function moveAcrossDevice(src, dest, overwrite) {
        const opts = {
          overwrite,
          errorOnExist: true,
          preserveTimestamps: true,
        };
        copySync(src, dest, opts);
        return removeSync(src);
      }
      __name(moveAcrossDevice, "moveAcrossDevice");
      module.exports = moveSync;
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/move/index.js
  var require_move2 = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/move/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify().fromPromise;
      module.exports = {
        move: u(require_move()),
        moveSync: require_move_sync(),
      };
    },
  });

  // node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/index.js
  var require_lib2 = __commonJS({
    "node_modules/.pnpm/fs-extra@11.2.0/node_modules/fs-extra/lib/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = {
        // Export promiseified graceful-fs:
        ...require_fs(),
        // Export extra methods:
        ...require_copy2(),
        ...require_empty(),
        ...require_ensure(),
        ...require_json(),
        ...require_mkdirs(),
        ...require_move2(),
        ...require_output_file(),
        ...require_path_exists(),
        ...require_remove(),
      };
    },
  });

  // node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io-util.js
  var require_io_util = __commonJS({
    "node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io-util.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: /* @__PURE__ */ __name(function () {
                  return m[k];
                }, "get"),
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __awaiter =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          __name(adopt, "adopt");
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            __name(fulfilled, "fulfilled");
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            __name(rejected, "rejected");
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            __name(step, "step");
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      var _a;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getCmdPath =
        exports.tryGetExecutablePath =
        exports.isRooted =
        exports.isDirectory =
        exports.exists =
        exports.READONLY =
        exports.UV_FS_O_EXLOCK =
        exports.IS_WINDOWS =
        exports.unlink =
        exports.symlink =
        exports.stat =
        exports.rmdir =
        exports.rm =
        exports.rename =
        exports.readlink =
        exports.readdir =
        exports.open =
        exports.mkdir =
        exports.lstat =
        exports.copyFile =
        exports.chmod =
          void 0;
      var fs6 = __importStar(__require("fs"));
      var path4 = __importStar(__require("path"));
      (_a = fs6.promises),
        (exports.chmod = _a.chmod),
        (exports.copyFile = _a.copyFile),
        (exports.lstat = _a.lstat),
        (exports.mkdir = _a.mkdir),
        (exports.open = _a.open),
        (exports.readdir = _a.readdir),
        (exports.readlink = _a.readlink),
        (exports.rename = _a.rename),
        (exports.rm = _a.rm),
        (exports.rmdir = _a.rmdir),
        (exports.stat = _a.stat),
        (exports.symlink = _a.symlink),
        (exports.unlink = _a.unlink);
      exports.IS_WINDOWS = process.platform === "win32";
      exports.UV_FS_O_EXLOCK = 268435456;
      exports.READONLY = fs6.constants.O_RDONLY;
      function exists(fsPath) {
        return __awaiter(this, void 0, void 0, function* () {
          try {
            yield exports.stat(fsPath);
          } catch (err) {
            if (err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return true;
        });
      }
      __name(exists, "exists");
      exports.exists = exists;
      function isDirectory(fsPath, useStat = false) {
        return __awaiter(this, void 0, void 0, function* () {
          const stats = useStat
            ? yield exports.stat(fsPath)
            : yield exports.lstat(fsPath);
          return stats.isDirectory();
        });
      }
      __name(isDirectory, "isDirectory");
      exports.isDirectory = isDirectory;
      function isRooted(p) {
        p = normalizeSeparators(p);
        if (!p) {
          throw new Error('isRooted() parameter "p" cannot be empty');
        }
        if (exports.IS_WINDOWS) {
          return p.startsWith("\\") || /^[A-Z]:/i.test(p);
        }
        return p.startsWith("/");
      }
      __name(isRooted, "isRooted");
      exports.isRooted = isRooted;
      function tryGetExecutablePath(filePath, extensions) {
        return __awaiter(this, void 0, void 0, function* () {
          let stats = void 0;
          try {
            stats = yield exports.stat(filePath);
          } catch (err) {
            if (err.code !== "ENOENT") {
              console.log(
                `Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`,
              );
            }
          }
          if (stats && stats.isFile()) {
            if (exports.IS_WINDOWS) {
              const upperExt = path4.extname(filePath).toUpperCase();
              if (
                extensions.some(
                  (validExt) => validExt.toUpperCase() === upperExt,
                )
              ) {
                return filePath;
              }
            } else {
              if (isUnixExecutable(stats)) {
                return filePath;
              }
            }
          }
          const originalFilePath = filePath;
          for (const extension2 of extensions) {
            filePath = originalFilePath + extension2;
            stats = void 0;
            try {
              stats = yield exports.stat(filePath);
            } catch (err) {
              if (err.code !== "ENOENT") {
                console.log(
                  `Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`,
                );
              }
            }
            if (stats && stats.isFile()) {
              if (exports.IS_WINDOWS) {
                try {
                  const directory = path4.dirname(filePath);
                  const upperName = path4.basename(filePath).toUpperCase();
                  for (const actualName of yield exports.readdir(directory)) {
                    if (upperName === actualName.toUpperCase()) {
                      filePath = path4.join(directory, actualName);
                      break;
                    }
                  }
                } catch (err) {
                  console.log(
                    `Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`,
                  );
                }
                return filePath;
              } else {
                if (isUnixExecutable(stats)) {
                  return filePath;
                }
              }
            }
          }
          return "";
        });
      }
      __name(tryGetExecutablePath, "tryGetExecutablePath");
      exports.tryGetExecutablePath = tryGetExecutablePath;
      function normalizeSeparators(p) {
        p = p || "";
        if (exports.IS_WINDOWS) {
          p = p.replace(/\//g, "\\");
          return p.replace(/\\\\+/g, "\\");
        }
        return p.replace(/\/\/+/g, "/");
      }
      __name(normalizeSeparators, "normalizeSeparators");
      function isUnixExecutable(stats) {
        return (
          (stats.mode & 1) > 0 ||
          ((stats.mode & 8) > 0 && stats.gid === process.getgid()) ||
          ((stats.mode & 64) > 0 && stats.uid === process.getuid())
        );
      }
      __name(isUnixExecutable, "isUnixExecutable");
      function getCmdPath() {
        var _a2;
        return (_a2 = process.env["COMSPEC"]) !== null && _a2 !== void 0
          ? _a2
          : `cmd.exe`;
      }
      __name(getCmdPath, "getCmdPath");
      exports.getCmdPath = getCmdPath;
    },
  });

  // node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io.js
  var require_io = __commonJS({
    "node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: /* @__PURE__ */ __name(function () {
                  return m[k];
                }, "get"),
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __awaiter =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          __name(adopt, "adopt");
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            __name(fulfilled, "fulfilled");
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            __name(rejected, "rejected");
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            __name(step, "step");
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.findInPath =
        exports.which =
        exports.mkdirP =
        exports.rmRF =
        exports.mv =
        exports.cp =
          void 0;
      var assert_1 = __require("assert");
      var path4 = __importStar(__require("path"));
      var ioUtil = __importStar(require_io_util());
      function cp(source, dest, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          const { force, recursive, copySourceDirectory } =
            readCopyOptions(options);
          const destStat = (yield ioUtil.exists(dest))
            ? yield ioUtil.stat(dest)
            : null;
          if (destStat && destStat.isFile() && !force) {
            return;
          }
          const newDest =
            destStat && destStat.isDirectory() && copySourceDirectory
              ? path4.join(dest, path4.basename(source))
              : dest;
          if (!(yield ioUtil.exists(source))) {
            throw new Error(`no such file or directory: ${source}`);
          }
          const sourceStat = yield ioUtil.stat(source);
          if (sourceStat.isDirectory()) {
            if (!recursive) {
              throw new Error(
                `Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`,
              );
            } else {
              yield cpDirRecursive(source, newDest, 0, force);
            }
          } else {
            if (path4.relative(source, newDest) === "") {
              throw new Error(`'${newDest}' and '${source}' are the same file`);
            }
            yield copyFile(source, newDest, force);
          }
        });
      }
      __name(cp, "cp");
      exports.cp = cp;
      function mv(source, dest, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
          if (yield ioUtil.exists(dest)) {
            let destExists = true;
            if (yield ioUtil.isDirectory(dest)) {
              dest = path4.join(dest, path4.basename(source));
              destExists = yield ioUtil.exists(dest);
            }
            if (destExists) {
              if (options.force == null || options.force) {
                yield rmRF(dest);
              } else {
                throw new Error("Destination already exists");
              }
            }
          }
          yield mkdirP(path4.dirname(dest));
          yield ioUtil.rename(source, dest);
        });
      }
      __name(mv, "mv");
      exports.mv = mv;
      function rmRF(inputPath) {
        return __awaiter(this, void 0, void 0, function* () {
          if (ioUtil.IS_WINDOWS) {
            if (/[*"<>|]/.test(inputPath)) {
              throw new Error(
                'File path must not contain `*`, `"`, `<`, `>` or `|` on Windows',
              );
            }
          }
          try {
            yield ioUtil.rm(inputPath, {
              force: true,
              maxRetries: 3,
              recursive: true,
              retryDelay: 300,
            });
          } catch (err) {
            throw new Error(`File was unable to be removed ${err}`);
          }
        });
      }
      __name(rmRF, "rmRF");
      exports.rmRF = rmRF;
      function mkdirP(fsPath) {
        return __awaiter(this, void 0, void 0, function* () {
          assert_1.ok(fsPath, "a path argument must be provided");
          yield ioUtil.mkdir(fsPath, { recursive: true });
        });
      }
      __name(mkdirP, "mkdirP");
      exports.mkdirP = mkdirP;
      function which(tool, check) {
        return __awaiter(this, void 0, void 0, function* () {
          if (!tool) {
            throw new Error("parameter 'tool' is required");
          }
          if (check) {
            const result = yield which(tool, false);
            if (!result) {
              if (ioUtil.IS_WINDOWS) {
                throw new Error(
                  `Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`,
                );
              } else {
                throw new Error(
                  `Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`,
                );
              }
            }
            return result;
          }
          const matches = yield findInPath(tool);
          if (matches && matches.length > 0) {
            return matches[0];
          }
          return "";
        });
      }
      __name(which, "which");
      exports.which = which;
      function findInPath(tool) {
        return __awaiter(this, void 0, void 0, function* () {
          if (!tool) {
            throw new Error("parameter 'tool' is required");
          }
          const extensions = [];
          if (ioUtil.IS_WINDOWS && process.env["PATHEXT"]) {
            for (const extension2 of process.env["PATHEXT"].split(
              path4.delimiter,
            )) {
              if (extension2) {
                extensions.push(extension2);
              }
            }
          }
          if (ioUtil.isRooted(tool)) {
            const filePath = yield ioUtil.tryGetExecutablePath(
              tool,
              extensions,
            );
            if (filePath) {
              return [filePath];
            }
            return [];
          }
          if (tool.includes(path4.sep)) {
            return [];
          }
          const directories = [];
          if (process.env.PATH) {
            for (const p of process.env.PATH.split(path4.delimiter)) {
              if (p) {
                directories.push(p);
              }
            }
          }
          const matches = [];
          for (const directory of directories) {
            const filePath = yield ioUtil.tryGetExecutablePath(
              path4.join(directory, tool),
              extensions,
            );
            if (filePath) {
              matches.push(filePath);
            }
          }
          return matches;
        });
      }
      __name(findInPath, "findInPath");
      exports.findInPath = findInPath;
      function readCopyOptions(options) {
        const force = options.force == null ? true : options.force;
        const recursive = Boolean(options.recursive);
        const copySourceDirectory =
          options.copySourceDirectory == null
            ? true
            : Boolean(options.copySourceDirectory);
        return { force, recursive, copySourceDirectory };
      }
      __name(readCopyOptions, "readCopyOptions");
      function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
        return __awaiter(this, void 0, void 0, function* () {
          if (currentDepth >= 255) return;
          currentDepth++;
          yield mkdirP(destDir);
          const files = yield ioUtil.readdir(sourceDir);
          for (const fileName of files) {
            const srcFile = `${sourceDir}/${fileName}`;
            const destFile = `${destDir}/${fileName}`;
            const srcFileStat = yield ioUtil.lstat(srcFile);
            if (srcFileStat.isDirectory()) {
              yield cpDirRecursive(srcFile, destFile, currentDepth, force);
            } else {
              yield copyFile(srcFile, destFile, force);
            }
          }
          yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);
        });
      }
      __name(cpDirRecursive, "cpDirRecursive");
      function copyFile(srcFile, destFile, force) {
        return __awaiter(this, void 0, void 0, function* () {
          if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {
            try {
              yield ioUtil.lstat(destFile);
              yield ioUtil.unlink(destFile);
            } catch (e) {
              if (e.code === "EPERM") {
                yield ioUtil.chmod(destFile, "0666");
                yield ioUtil.unlink(destFile);
              }
            }
            const symlinkFull = yield ioUtil.readlink(srcFile);
            yield ioUtil.symlink(
              symlinkFull,
              destFile,
              ioUtil.IS_WINDOWS ? "junction" : null,
            );
          } else if (!(yield ioUtil.exists(destFile)) || force) {
            yield ioUtil.copyFile(srcFile, destFile);
          }
        });
      }
      __name(copyFile, "copyFile");
    },
  });

  // node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/toolrunner.js
  var require_toolrunner = __commonJS({
    "node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/toolrunner.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: /* @__PURE__ */ __name(function () {
                  return m[k];
                }, "get"),
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __awaiter =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          __name(adopt, "adopt");
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            __name(fulfilled, "fulfilled");
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            __name(rejected, "rejected");
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            __name(step, "step");
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.argStringToArray = exports.ToolRunner = void 0;
      var os = __importStar(__require("os"));
      var events = __importStar(__require("events"));
      var child = __importStar(__require("child_process"));
      var path4 = __importStar(__require("path"));
      var io = __importStar(require_io());
      var ioUtil = __importStar(require_io_util());
      var timers_1 = __require("timers");
      var IS_WINDOWS = process.platform === "win32";
      var ToolRunner = class extends events.EventEmitter {
        static {
          __name(this, "ToolRunner");
        }
        constructor(toolPath, args, options) {
          super();
          if (!toolPath) {
            throw new Error("Parameter 'toolPath' cannot be null or empty.");
          }
          this.toolPath = toolPath;
          this.args = args || [];
          this.options = options || {};
        }
        _debug(message) {
          if (this.options.listeners && this.options.listeners.debug) {
            this.options.listeners.debug(message);
          }
        }
        _getCommandString(options, noPrefix) {
          const toolPath = this._getSpawnFileName();
          const args = this._getSpawnArgs(options);
          let cmd = noPrefix ? "" : "[command]";
          if (IS_WINDOWS) {
            if (this._isCmdFile()) {
              cmd += toolPath;
              for (const a of args) {
                cmd += ` ${a}`;
              }
            } else if (options.windowsVerbatimArguments) {
              cmd += `"${toolPath}"`;
              for (const a of args) {
                cmd += ` ${a}`;
              }
            } else {
              cmd += this._windowsQuoteCmdArg(toolPath);
              for (const a of args) {
                cmd += ` ${this._windowsQuoteCmdArg(a)}`;
              }
            }
          } else {
            cmd += toolPath;
            for (const a of args) {
              cmd += ` ${a}`;
            }
          }
          return cmd;
        }
        _processLineBuffer(data, strBuffer, onLine) {
          try {
            let s = strBuffer + data.toString();
            let n = s.indexOf(os.EOL);
            while (n > -1) {
              const line = s.substring(0, n);
              onLine(line);
              s = s.substring(n + os.EOL.length);
              n = s.indexOf(os.EOL);
            }
            return s;
          } catch (err) {
            this._debug(`error processing line. Failed with error ${err}`);
            return "";
          }
        }
        _getSpawnFileName() {
          if (IS_WINDOWS) {
            if (this._isCmdFile()) {
              return process.env["COMSPEC"] || "cmd.exe";
            }
          }
          return this.toolPath;
        }
        _getSpawnArgs(options) {
          if (IS_WINDOWS) {
            if (this._isCmdFile()) {
              let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
              for (const a of this.args) {
                argline += " ";
                argline += options.windowsVerbatimArguments
                  ? a
                  : this._windowsQuoteCmdArg(a);
              }
              argline += '"';
              return [argline];
            }
          }
          return this.args;
        }
        _endsWith(str, end) {
          return str.endsWith(end);
        }
        _isCmdFile() {
          const upperToolPath = this.toolPath.toUpperCase();
          return (
            this._endsWith(upperToolPath, ".CMD") ||
            this._endsWith(upperToolPath, ".BAT")
          );
        }
        _windowsQuoteCmdArg(arg) {
          if (!this._isCmdFile()) {
            return this._uvQuoteCmdArg(arg);
          }
          if (!arg) {
            return '""';
          }
          const cmdSpecialChars = [
            " ",
            "	",
            "&",
            "(",
            ")",
            "[",
            "]",
            "{",
            "}",
            "^",
            "=",
            ";",
            "!",
            "'",
            "+",
            ",",
            "`",
            "~",
            "|",
            "<",
            ">",
            '"',
          ];
          let needsQuotes = false;
          for (const char of arg) {
            if (cmdSpecialChars.some((x) => x === char)) {
              needsQuotes = true;
              break;
            }
          }
          if (!needsQuotes) {
            return arg;
          }
          let reverse = '"';
          let quoteHit = true;
          for (let i = arg.length; i > 0; i--) {
            reverse += arg[i - 1];
            if (quoteHit && arg[i - 1] === "\\") {
              reverse += "\\";
            } else if (arg[i - 1] === '"') {
              quoteHit = true;
              reverse += '"';
            } else {
              quoteHit = false;
            }
          }
          reverse += '"';
          return reverse.split("").reverse().join("");
        }
        _uvQuoteCmdArg(arg) {
          if (!arg) {
            return '""';
          }
          if (!arg.includes(" ") && !arg.includes("	") && !arg.includes('"')) {
            return arg;
          }
          if (!arg.includes('"') && !arg.includes("\\")) {
            return `"${arg}"`;
          }
          let reverse = '"';
          let quoteHit = true;
          for (let i = arg.length; i > 0; i--) {
            reverse += arg[i - 1];
            if (quoteHit && arg[i - 1] === "\\") {
              reverse += "\\";
            } else if (arg[i - 1] === '"') {
              quoteHit = true;
              reverse += "\\";
            } else {
              quoteHit = false;
            }
          }
          reverse += '"';
          return reverse.split("").reverse().join("");
        }
        _cloneExecOptions(options) {
          options = options || {};
          const result = {
            cwd: options.cwd || process.cwd(),
            env: options.env || process.env,
            silent: options.silent || false,
            windowsVerbatimArguments: options.windowsVerbatimArguments || false,
            failOnStdErr: options.failOnStdErr || false,
            ignoreReturnCode: options.ignoreReturnCode || false,
            delay: options.delay || 1e4,
          };
          result.outStream = options.outStream || process.stdout;
          result.errStream = options.errStream || process.stderr;
          return result;
        }
        _getSpawnOptions(options, toolPath) {
          options = options || {};
          const result = {};
          result.cwd = options.cwd;
          result.env = options.env;
          result["windowsVerbatimArguments"] =
            options.windowsVerbatimArguments || this._isCmdFile();
          if (options.windowsVerbatimArguments) {
            result.argv0 = `"${toolPath}"`;
          }
          return result;
        }
        /**
         * Exec a tool.
         * Output will be streamed to the live console.
         * Returns promise with return code
         *
         * @param     tool     path to tool to exec
         * @param     options  optional exec options.  See ExecOptions
         * @returns   number
         */
        exec() {
          return __awaiter(this, void 0, void 0, function* () {
            if (
              !ioUtil.isRooted(this.toolPath) &&
              (this.toolPath.includes("/") ||
                (IS_WINDOWS && this.toolPath.includes("\\")))
            ) {
              this.toolPath = path4.resolve(
                process.cwd(),
                this.options.cwd || process.cwd(),
                this.toolPath,
              );
            }
            this.toolPath = yield io.which(this.toolPath, true);
            return new Promise((resolve, reject) =>
              __awaiter(this, void 0, void 0, function* () {
                this._debug(`exec tool: ${this.toolPath}`);
                this._debug("arguments:");
                for (const arg of this.args) {
                  this._debug(`   ${arg}`);
                }
                const optionsNonNull = this._cloneExecOptions(this.options);
                if (!optionsNonNull.silent && optionsNonNull.outStream) {
                  optionsNonNull.outStream.write(
                    this._getCommandString(optionsNonNull) + os.EOL,
                  );
                }
                const state = new ExecState(optionsNonNull, this.toolPath);
                state.on("debug", (message) => {
                  this._debug(message);
                });
                if (
                  this.options.cwd &&
                  !(yield ioUtil.exists(this.options.cwd))
                ) {
                  return reject(
                    new Error(`The cwd: ${this.options.cwd} does not exist!`),
                  );
                }
                const fileName = this._getSpawnFileName();
                const cp = child.spawn(
                  fileName,
                  this._getSpawnArgs(optionsNonNull),
                  this._getSpawnOptions(this.options, fileName),
                );
                let stdbuffer = "";
                if (cp.stdout) {
                  cp.stdout.on("data", (data) => {
                    if (
                      this.options.listeners &&
                      this.options.listeners.stdout
                    ) {
                      this.options.listeners.stdout(data);
                    }
                    if (!optionsNonNull.silent && optionsNonNull.outStream) {
                      optionsNonNull.outStream.write(data);
                    }
                    stdbuffer = this._processLineBuffer(
                      data,
                      stdbuffer,
                      (line) => {
                        if (
                          this.options.listeners &&
                          this.options.listeners.stdline
                        ) {
                          this.options.listeners.stdline(line);
                        }
                      },
                    );
                  });
                }
                let errbuffer = "";
                if (cp.stderr) {
                  cp.stderr.on("data", (data) => {
                    state.processStderr = true;
                    if (
                      this.options.listeners &&
                      this.options.listeners.stderr
                    ) {
                      this.options.listeners.stderr(data);
                    }
                    if (
                      !optionsNonNull.silent &&
                      optionsNonNull.errStream &&
                      optionsNonNull.outStream
                    ) {
                      const s = optionsNonNull.failOnStdErr
                        ? optionsNonNull.errStream
                        : optionsNonNull.outStream;
                      s.write(data);
                    }
                    errbuffer = this._processLineBuffer(
                      data,
                      errbuffer,
                      (line) => {
                        if (
                          this.options.listeners &&
                          this.options.listeners.errline
                        ) {
                          this.options.listeners.errline(line);
                        }
                      },
                    );
                  });
                }
                cp.on("error", (err) => {
                  state.processError = err.message;
                  state.processExited = true;
                  state.processClosed = true;
                  state.CheckComplete();
                });
                cp.on("exit", (code2) => {
                  state.processExitCode = code2;
                  state.processExited = true;
                  this._debug(
                    `Exit code ${code2} received from tool '${this.toolPath}'`,
                  );
                  state.CheckComplete();
                });
                cp.on("close", (code2) => {
                  state.processExitCode = code2;
                  state.processExited = true;
                  state.processClosed = true;
                  this._debug(
                    `STDIO streams have closed for tool '${this.toolPath}'`,
                  );
                  state.CheckComplete();
                });
                state.on("done", (error, exitCode) => {
                  if (stdbuffer.length > 0) {
                    this.emit("stdline", stdbuffer);
                  }
                  if (errbuffer.length > 0) {
                    this.emit("errline", errbuffer);
                  }
                  cp.removeAllListeners();
                  if (error) {
                    reject(error);
                  } else {
                    resolve(exitCode);
                  }
                });
                if (this.options.input) {
                  if (!cp.stdin) {
                    throw new Error("child process missing stdin");
                  }
                  cp.stdin.end(this.options.input);
                }
              }),
            );
          });
        }
      };
      exports.ToolRunner = ToolRunner;
      function argStringToArray(argString) {
        const args = [];
        let inQuotes = false;
        let escaped = false;
        let arg = "";
        function append(c) {
          if (escaped && c !== '"') {
            arg += "\\";
          }
          arg += c;
          escaped = false;
        }
        __name(append, "append");
        for (let i = 0; i < argString.length; i++) {
          const c = argString.charAt(i);
          if (c === '"') {
            if (!escaped) {
              inQuotes = !inQuotes;
            } else {
              append(c);
            }
            continue;
          }
          if (c === "\\" && escaped) {
            append(c);
            continue;
          }
          if (c === "\\" && inQuotes) {
            escaped = true;
            continue;
          }
          if (c === " " && !inQuotes) {
            if (arg.length > 0) {
              args.push(arg);
              arg = "";
            }
            continue;
          }
          append(c);
        }
        if (arg.length > 0) {
          args.push(arg.trim());
        }
        return args;
      }
      __name(argStringToArray, "argStringToArray");
      exports.argStringToArray = argStringToArray;
      var ExecState = class _ExecState extends events.EventEmitter {
        static {
          __name(this, "ExecState");
        }
        constructor(options, toolPath) {
          super();
          this.processClosed = false;
          this.processError = "";
          this.processExitCode = 0;
          this.processExited = false;
          this.processStderr = false;
          this.delay = 1e4;
          this.done = false;
          this.timeout = null;
          if (!toolPath) {
            throw new Error("toolPath must not be empty");
          }
          this.options = options;
          this.toolPath = toolPath;
          if (options.delay) {
            this.delay = options.delay;
          }
        }
        CheckComplete() {
          if (this.done) {
            return;
          }
          if (this.processClosed) {
            this._setResult();
          } else if (this.processExited) {
            this.timeout = timers_1.setTimeout(
              _ExecState.HandleTimeout,
              this.delay,
              this,
            );
          }
        }
        _debug(message) {
          this.emit("debug", message);
        }
        _setResult() {
          let error;
          if (this.processExited) {
            if (this.processError) {
              error = new Error(
                `There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`,
              );
            } else if (
              this.processExitCode !== 0 &&
              !this.options.ignoreReturnCode
            ) {
              error = new Error(
                `The process '${this.toolPath}' failed with exit code ${this.processExitCode}`,
              );
            } else if (this.processStderr && this.options.failOnStdErr) {
              error = new Error(
                `The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`,
              );
            }
          }
          if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
          }
          this.done = true;
          this.emit("done", error, this.processExitCode);
        }
        static HandleTimeout(state) {
          if (state.done) {
            return;
          }
          if (!state.processClosed && state.processExited) {
            const message = `The STDIO streams did not close within ${state.delay / 1e3} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
            state._debug(message);
          }
          state._setResult();
        }
      };
    },
  });

  // node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js
  var require_exec = __commonJS({
    "node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              Object.defineProperty(o, k2, {
                enumerable: true,
                get: /* @__PURE__ */ __name(function () {
                  return m[k];
                }, "get"),
              });
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (k !== "default" && Object.hasOwnProperty.call(mod, k))
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __awaiter =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          __name(adopt, "adopt");
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            __name(fulfilled, "fulfilled");
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            __name(rejected, "rejected");
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            __name(step, "step");
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getExecOutput = exports.exec = void 0;
      var string_decoder_1 = __require("string_decoder");
      var tr = __importStar(require_toolrunner());
      function exec3(commandLine, args, options) {
        return __awaiter(this, void 0, void 0, function* () {
          const commandArgs = tr.argStringToArray(commandLine);
          if (commandArgs.length === 0) {
            throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
          }
          const toolPath = commandArgs[0];
          args = commandArgs.slice(1).concat(args || []);
          const runner = new tr.ToolRunner(toolPath, args, options);
          return runner.exec();
        });
      }
      __name(exec3, "exec");
      exports.exec = exec3;
      function getExecOutput3(commandLine, args, options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
          let stdout = "";
          let stderr = "";
          const stdoutDecoder = new string_decoder_1.StringDecoder("utf8");
          const stderrDecoder = new string_decoder_1.StringDecoder("utf8");
          const originalStdoutListener =
            (_a =
              options === null || options === void 0
                ? void 0
                : options.listeners) === null || _a === void 0
              ? void 0
              : _a.stdout;
          const originalStdErrListener =
            (_b =
              options === null || options === void 0
                ? void 0
                : options.listeners) === null || _b === void 0
              ? void 0
              : _b.stderr;
          const stdErrListener = /* @__PURE__ */ __name((data) => {
            stderr += stderrDecoder.write(data);
            if (originalStdErrListener) {
              originalStdErrListener(data);
            }
          }, "stdErrListener");
          const stdOutListener = /* @__PURE__ */ __name((data) => {
            stdout += stdoutDecoder.write(data);
            if (originalStdoutListener) {
              originalStdoutListener(data);
            }
          }, "stdOutListener");
          const listeners = Object.assign(
            Object.assign(
              {},
              options === null || options === void 0
                ? void 0
                : options.listeners,
            ),
            { stdout: stdOutListener, stderr: stdErrListener },
          );
          const exitCode = yield exec3(
            commandLine,
            args,
            Object.assign(Object.assign({}, options), { listeners }),
          );
          stdout += stdoutDecoder.end();
          stderr += stderrDecoder.end();
          return {
            exitCode,
            stdout,
            stderr,
          };
        });
      }
      __name(getExecOutput3, "getExecOutput");
      exports.getExecOutput = getExecOutput3;
    },
  });

  // node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/context.js
  var require_context = __commonJS({
    "node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/context.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Context = void 0;
      var fs_1 = __require("fs");
      var os_1 = __require("os");
      var Context = class {
        static {
          __name(this, "Context");
        }
        /**
         * Hydrate the context from the environment
         */
        constructor() {
          var _a, _b, _c;
          this.payload = {};
          if (process.env.GITHUB_EVENT_PATH) {
            if ((0, fs_1.existsSync)(process.env.GITHUB_EVENT_PATH)) {
              this.payload = JSON.parse(
                (0, fs_1.readFileSync)(process.env.GITHUB_EVENT_PATH, {
                  encoding: "utf8",
                }),
              );
            } else {
              const path4 = process.env.GITHUB_EVENT_PATH;
              process.stdout.write(
                `GITHUB_EVENT_PATH ${path4} does not exist${os_1.EOL}`,
              );
            }
          }
          this.eventName = process.env.GITHUB_EVENT_NAME;
          this.sha = process.env.GITHUB_SHA;
          this.ref = process.env.GITHUB_REF;
          this.workflow = process.env.GITHUB_WORKFLOW;
          this.action = process.env.GITHUB_ACTION;
          this.actor = process.env.GITHUB_ACTOR;
          this.job = process.env.GITHUB_JOB;
          this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
          this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
          this.apiUrl =
            (_a = process.env.GITHUB_API_URL) !== null && _a !== void 0
              ? _a
              : `https://api.github.com`;
          this.serverUrl =
            (_b = process.env.GITHUB_SERVER_URL) !== null && _b !== void 0
              ? _b
              : `https://github.com`;
          this.graphqlUrl =
            (_c = process.env.GITHUB_GRAPHQL_URL) !== null && _c !== void 0
              ? _c
              : `https://api.github.com/graphql`;
        }
        get issue() {
          const payload = this.payload;
          return Object.assign(Object.assign({}, this.repo), {
            number: (payload.issue || payload.pull_request || payload).number,
          });
        }
        get repo() {
          if (process.env.GITHUB_REPOSITORY) {
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
            return { owner, repo };
          }
          if (this.payload.repository) {
            return {
              owner: this.payload.repository.owner.login,
              repo: this.payload.repository.name,
            };
          }
          throw new Error(
            "context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'",
          );
        }
      };
      exports.Context = Context;
    },
  });

  // node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/internal/utils.js
  var require_utils5 = __commonJS({
    "node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/internal/utils.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              var desc = Object.getOwnPropertyDescriptor(m, k);
              if (
                !desc ||
                ("get" in desc
                  ? !m.__esModule
                  : desc.writable || desc.configurable)
              ) {
                desc = {
                  enumerable: true,
                  get: /* @__PURE__ */ __name(function () {
                    return m[k];
                  }, "get"),
                };
              }
              Object.defineProperty(o, k2, desc);
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== "default" &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      var __awaiter =
        (exports && exports.__awaiter) ||
        function (thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P
              ? value
              : new P(function (resolve) {
                  resolve(value);
                });
          }
          __name(adopt, "adopt");
          return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            __name(fulfilled, "fulfilled");
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            __name(rejected, "rejected");
            function step(result) {
              result.done
                ? resolve(result.value)
                : adopt(result.value).then(fulfilled, rejected);
            }
            __name(step, "step");
            step(
              (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
          });
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getApiBaseUrl =
        exports.getProxyFetch =
        exports.getProxyAgentDispatcher =
        exports.getProxyAgent =
        exports.getAuthString =
          void 0;
      var httpClient = __importStar(require_lib());
      var undici_1 = require_undici();
      function getAuthString(token, options) {
        if (!token && !options.auth) {
          throw new Error("Parameter token or opts.auth is required");
        } else if (token && options.auth) {
          throw new Error(
            "Parameters token and opts.auth may not both be specified",
          );
        }
        return typeof options.auth === "string"
          ? options.auth
          : `token ${token}`;
      }
      __name(getAuthString, "getAuthString");
      exports.getAuthString = getAuthString;
      function getProxyAgent(destinationUrl) {
        const hc = new httpClient.HttpClient();
        return hc.getAgent(destinationUrl);
      }
      __name(getProxyAgent, "getProxyAgent");
      exports.getProxyAgent = getProxyAgent;
      function getProxyAgentDispatcher(destinationUrl) {
        const hc = new httpClient.HttpClient();
        return hc.getAgentDispatcher(destinationUrl);
      }
      __name(getProxyAgentDispatcher, "getProxyAgentDispatcher");
      exports.getProxyAgentDispatcher = getProxyAgentDispatcher;
      function getProxyFetch(destinationUrl) {
        const httpDispatcher = getProxyAgentDispatcher(destinationUrl);
        const proxyFetch = /* @__PURE__ */ __name(
          (url, opts) =>
            __awaiter(this, void 0, void 0, function* () {
              return (0, undici_1.fetch)(
                url,
                Object.assign(Object.assign({}, opts), {
                  dispatcher: httpDispatcher,
                }),
              );
            }),
          "proxyFetch",
        );
        return proxyFetch;
      }
      __name(getProxyFetch, "getProxyFetch");
      exports.getProxyFetch = getProxyFetch;
      function getApiBaseUrl() {
        return process.env["GITHUB_API_URL"] || "https://api.github.com";
      }
      __name(getApiBaseUrl, "getApiBaseUrl");
      exports.getApiBaseUrl = getApiBaseUrl;
    },
  });

  // node_modules/.pnpm/universal-user-agent@6.0.1/node_modules/universal-user-agent/dist-node/index.js
  var require_dist_node = __commonJS({
    "node_modules/.pnpm/universal-user-agent@6.0.1/node_modules/universal-user-agent/dist-node/index.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function getUserAgent() {
        if (typeof navigator === "object" && "userAgent" in navigator) {
          return navigator.userAgent;
        }
        if (typeof process === "object" && process.version !== void 0) {
          return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
        }
        return "<environment undetectable>";
      }
      __name(getUserAgent, "getUserAgent");
      exports.getUserAgent = getUserAgent;
    },
  });

  // node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/register.js
  var require_register = __commonJS({
    "node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/register.js"(
      exports,
      module,
    ) {
      module.exports = register;
      function register(state, name, method, options) {
        if (typeof method !== "function") {
          throw new Error("method for before hook must be a function");
        }
        if (!options) {
          options = {};
        }
        if (Array.isArray(name)) {
          return name.reverse().reduce(function (callback, name2) {
            return register.bind(null, state, name2, callback, options);
          }, method)();
        }
        return Promise.resolve().then(function () {
          if (!state.registry[name]) {
            return method(options);
          }
          return state.registry[name].reduce(function (method2, registered) {
            return registered.hook.bind(null, method2, options);
          }, method)();
        });
      }
      __name(register, "register");
    },
  });

  // node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/add.js
  var require_add = __commonJS({
    "node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/add.js"(
      exports,
      module,
    ) {
      module.exports = addHook;
      function addHook(state, kind, name, hook) {
        var orig = hook;
        if (!state.registry[name]) {
          state.registry[name] = [];
        }
        if (kind === "before") {
          hook = /* @__PURE__ */ __name(function (method, options) {
            return Promise.resolve()
              .then(orig.bind(null, options))
              .then(method.bind(null, options));
          }, "hook");
        }
        if (kind === "after") {
          hook = /* @__PURE__ */ __name(function (method, options) {
            var result;
            return Promise.resolve()
              .then(method.bind(null, options))
              .then(function (result_) {
                result = result_;
                return orig(result, options);
              })
              .then(function () {
                return result;
              });
          }, "hook");
        }
        if (kind === "error") {
          hook = /* @__PURE__ */ __name(function (method, options) {
            return Promise.resolve()
              .then(method.bind(null, options))
              .catch(function (error) {
                return orig(error, options);
              });
          }, "hook");
        }
        state.registry[name].push({
          hook,
          orig,
        });
      }
      __name(addHook, "addHook");
    },
  });

  // node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/remove.js
  var require_remove2 = __commonJS({
    "node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/lib/remove.js"(
      exports,
      module,
    ) {
      module.exports = removeHook;
      function removeHook(state, name, method) {
        if (!state.registry[name]) {
          return;
        }
        var index2 = state.registry[name]
          .map(function (registered) {
            return registered.orig;
          })
          .indexOf(method);
        if (index2 === -1) {
          return;
        }
        state.registry[name].splice(index2, 1);
      }
      __name(removeHook, "removeHook");
    },
  });

  // node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/index.js
  var require_before_after_hook = __commonJS({
    "node_modules/.pnpm/before-after-hook@2.2.3/node_modules/before-after-hook/index.js"(
      exports,
      module,
    ) {
      var register = require_register();
      var addHook = require_add();
      var removeHook = require_remove2();
      var bind = Function.bind;
      var bindable = bind.bind(bind);
      function bindApi(hook, state, name) {
        var removeHookRef = bindable(removeHook, null).apply(
          null,
          name ? [state, name] : [state],
        );
        hook.api = { remove: removeHookRef };
        hook.remove = removeHookRef;
        ["before", "error", "after", "wrap"].forEach(function (kind) {
          var args = name ? [state, kind, name] : [state, kind];
          hook[kind] = hook.api[kind] = bindable(addHook, null).apply(
            null,
            args,
          );
        });
      }
      __name(bindApi, "bindApi");
      function HookSingular() {
        var singularHookName = "h";
        var singularHookState = {
          registry: {},
        };
        var singularHook = register.bind(
          null,
          singularHookState,
          singularHookName,
        );
        bindApi(singularHook, singularHookState, singularHookName);
        return singularHook;
      }
      __name(HookSingular, "HookSingular");
      function HookCollection() {
        var state = {
          registry: {},
        };
        var hook = register.bind(null, state);
        bindApi(hook, state);
        return hook;
      }
      __name(HookCollection, "HookCollection");
      var collectionHookDeprecationMessageDisplayed = false;
      function Hook() {
        if (!collectionHookDeprecationMessageDisplayed) {
          console.warn(
            '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4',
          );
          collectionHookDeprecationMessageDisplayed = true;
        }
        return HookCollection();
      }
      __name(Hook, "Hook");
      Hook.Singular = HookSingular.bind();
      Hook.Collection = HookCollection.bind();
      module.exports = Hook;
      module.exports.Hook = Hook;
      module.exports.Singular = Hook.Singular;
      module.exports.Collection = Hook.Collection;
    },
  });

  // node_modules/.pnpm/@octokit+endpoint@9.0.5/node_modules/@octokit/endpoint/dist-node/index.js
  var require_dist_node2 = __commonJS({
    "node_modules/.pnpm/@octokit+endpoint@9.0.5/node_modules/@octokit/endpoint/dist-node/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = /* @__PURE__ */ __name((target, all2) => {
        for (var name in all2)
          __defProp2(target, name, { get: all2[name], enumerable: true });
      }, "__export");
      var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
        if ((from && typeof from === "object") || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, {
                get: /* @__PURE__ */ __name(() => from[key], "get"),
                enumerable:
                  !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
              });
        }
        return to;
      }, "__copyProps");
      var __toCommonJS2 = /* @__PURE__ */ __name(
        (mod) =>
          __copyProps2(__defProp2({}, "__esModule", { value: true }), mod),
        "__toCommonJS",
      );
      var dist_src_exports = {};
      __export2(dist_src_exports, {
        endpoint: /* @__PURE__ */ __name(() => endpoint, "endpoint"),
      });
      module.exports = __toCommonJS2(dist_src_exports);
      var import_universal_user_agent = require_dist_node();
      var VERSION2 = "9.0.5";
      var userAgent = `octokit-endpoint.js/${VERSION2} ${(0, import_universal_user_agent.getUserAgent)()}`;
      var DEFAULTS = {
        method: "GET",
        baseUrl: "https://api.github.com",
        headers: {
          accept: "application/vnd.github.v3+json",
          "user-agent": userAgent,
        },
        mediaType: {
          format: "",
        },
      };
      function lowercaseKeys(object) {
        if (!object) {
          return {};
        }
        return Object.keys(object).reduce((newObj, key) => {
          newObj[key.toLowerCase()] = object[key];
          return newObj;
        }, {});
      }
      __name(lowercaseKeys, "lowercaseKeys");
      function isPlainObject2(value) {
        if (typeof value !== "object" || value === null) return false;
        if (Object.prototype.toString.call(value) !== "[object Object]")
          return false;
        const proto = Object.getPrototypeOf(value);
        if (proto === null) return true;
        const Ctor =
          Object.prototype.hasOwnProperty.call(proto, "constructor") &&
          proto.constructor;
        return (
          typeof Ctor === "function" &&
          Ctor instanceof Ctor &&
          Function.prototype.call(Ctor) === Function.prototype.call(value)
        );
      }
      __name(isPlainObject2, "isPlainObject");
      function mergeDeep(defaults, options) {
        const result = Object.assign({}, defaults);
        Object.keys(options).forEach((key) => {
          if (isPlainObject2(options[key])) {
            if (!(key in defaults))
              Object.assign(result, { [key]: options[key] });
            else result[key] = mergeDeep(defaults[key], options[key]);
          } else {
            Object.assign(result, { [key]: options[key] });
          }
        });
        return result;
      }
      __name(mergeDeep, "mergeDeep");
      function removeUndefinedProperties(obj) {
        for (const key in obj) {
          if (obj[key] === void 0) {
            delete obj[key];
          }
        }
        return obj;
      }
      __name(removeUndefinedProperties, "removeUndefinedProperties");
      function merge(defaults, route, options) {
        if (typeof route === "string") {
          let [method, url] = route.split(" ");
          options = Object.assign(
            url ? { method, url } : { url: method },
            options,
          );
        } else {
          options = Object.assign({}, route);
        }
        options.headers = lowercaseKeys(options.headers);
        removeUndefinedProperties(options);
        removeUndefinedProperties(options.headers);
        const mergedOptions = mergeDeep(defaults || {}, options);
        if (options.url === "/graphql") {
          if (defaults && defaults.mediaType.previews?.length) {
            mergedOptions.mediaType.previews = defaults.mediaType.previews
              .filter(
                (preview) =>
                  !mergedOptions.mediaType.previews.includes(preview),
              )
              .concat(mergedOptions.mediaType.previews);
          }
          mergedOptions.mediaType.previews = (
            mergedOptions.mediaType.previews || []
          ).map((preview) => preview.replace(/-preview/, ""));
        }
        return mergedOptions;
      }
      __name(merge, "merge");
      function addQueryParameters(url, parameters) {
        const separator = /\?/.test(url) ? "&" : "?";
        const names = Object.keys(parameters);
        if (names.length === 0) {
          return url;
        }
        return (
          url +
          separator +
          names
            .map((name) => {
              if (name === "q") {
                return (
                  "q=" +
                  parameters.q.split("+").map(encodeURIComponent).join("+")
                );
              }
              return `${name}=${encodeURIComponent(parameters[name])}`;
            })
            .join("&")
        );
      }
      __name(addQueryParameters, "addQueryParameters");
      var urlVariableRegex = /\{[^}]+\}/g;
      function removeNonChars(variableName) {
        return variableName.replace(/^\W+|\W+$/g, "").split(/,/);
      }
      __name(removeNonChars, "removeNonChars");
      function extractUrlVariableNames(url) {
        const matches = url.match(urlVariableRegex);
        if (!matches) {
          return [];
        }
        return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);
      }
      __name(extractUrlVariableNames, "extractUrlVariableNames");
      function omit(object, keysToOmit) {
        const result = { __proto__: null };
        for (const key of Object.keys(object)) {
          if (keysToOmit.indexOf(key) === -1) {
            result[key] = object[key];
          }
        }
        return result;
      }
      __name(omit, "omit");
      function encodeReserved(str) {
        return str
          .split(/(%[0-9A-Fa-f]{2})/g)
          .map(function (part) {
            if (!/%[0-9A-Fa-f]/.test(part)) {
              part = encodeURI(part).replace(/%5B/g, "[").replace(/%5D/g, "]");
            }
            return part;
          })
          .join("");
      }
      __name(encodeReserved, "encodeReserved");
      function encodeUnreserved(str) {
        return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
          return "%" + c.charCodeAt(0).toString(16).toUpperCase();
        });
      }
      __name(encodeUnreserved, "encodeUnreserved");
      function encodeValue(operator, value, key) {
        value =
          operator === "+" || operator === "#"
            ? encodeReserved(value)
            : encodeUnreserved(value);
        if (key) {
          return encodeUnreserved(key) + "=" + value;
        } else {
          return value;
        }
      }
      __name(encodeValue, "encodeValue");
      function isDefined(value) {
        return value !== void 0 && value !== null;
      }
      __name(isDefined, "isDefined");
      function isKeyOperator(operator) {
        return operator === ";" || operator === "&" || operator === "?";
      }
      __name(isKeyOperator, "isKeyOperator");
      function getValues(context2, operator, key, modifier) {
        var value = context2[key],
          result = [];
        if (isDefined(value) && value !== "") {
          if (
            typeof value === "string" ||
            typeof value === "number" ||
            typeof value === "boolean"
          ) {
            value = value.toString();
            if (modifier && modifier !== "*") {
              value = value.substring(0, parseInt(modifier, 10));
            }
            result.push(
              encodeValue(operator, value, isKeyOperator(operator) ? key : ""),
            );
          } else {
            if (modifier === "*") {
              if (Array.isArray(value)) {
                value.filter(isDefined).forEach(function (value2) {
                  result.push(
                    encodeValue(
                      operator,
                      value2,
                      isKeyOperator(operator) ? key : "",
                    ),
                  );
                });
              } else {
                Object.keys(value).forEach(function (k) {
                  if (isDefined(value[k])) {
                    result.push(encodeValue(operator, value[k], k));
                  }
                });
              }
            } else {
              const tmp = [];
              if (Array.isArray(value)) {
                value.filter(isDefined).forEach(function (value2) {
                  tmp.push(encodeValue(operator, value2));
                });
              } else {
                Object.keys(value).forEach(function (k) {
                  if (isDefined(value[k])) {
                    tmp.push(encodeUnreserved(k));
                    tmp.push(encodeValue(operator, value[k].toString()));
                  }
                });
              }
              if (isKeyOperator(operator)) {
                result.push(encodeUnreserved(key) + "=" + tmp.join(","));
              } else if (tmp.length !== 0) {
                result.push(tmp.join(","));
              }
            }
          }
        } else {
          if (operator === ";") {
            if (isDefined(value)) {
              result.push(encodeUnreserved(key));
            }
          } else if (value === "" && (operator === "&" || operator === "?")) {
            result.push(encodeUnreserved(key) + "=");
          } else if (value === "") {
            result.push("");
          }
        }
        return result;
      }
      __name(getValues, "getValues");
      function parseUrl(template) {
        return {
          expand: expand.bind(null, template),
        };
      }
      __name(parseUrl, "parseUrl");
      function expand(template, context2) {
        var operators = ["+", "#", ".", "/", ";", "?", "&"];
        template = template.replace(
          /\{([^\{\}]+)\}|([^\{\}]+)/g,
          function (_, expression, literal) {
            if (expression) {
              let operator = "";
              const values = [];
              if (operators.indexOf(expression.charAt(0)) !== -1) {
                operator = expression.charAt(0);
                expression = expression.substr(1);
              }
              expression.split(/,/g).forEach(function (variable) {
                var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
                values.push(
                  getValues(context2, operator, tmp[1], tmp[2] || tmp[3]),
                );
              });
              if (operator && operator !== "+") {
                var separator = ",";
                if (operator === "?") {
                  separator = "&";
                } else if (operator !== "#") {
                  separator = operator;
                }
                return (
                  (values.length !== 0 ? operator : "") + values.join(separator)
                );
              } else {
                return values.join(",");
              }
            } else {
              return encodeReserved(literal);
            }
          },
        );
        if (template === "/") {
          return template;
        } else {
          return template.replace(/\/$/, "");
        }
      }
      __name(expand, "expand");
      function parse3(options) {
        let method = options.method.toUpperCase();
        let url = (options.url || "/").replace(/:([a-z]\w+)/g, "{$1}");
        let headers = Object.assign({}, options.headers);
        let body;
        let parameters = omit(options, [
          "method",
          "baseUrl",
          "url",
          "headers",
          "request",
          "mediaType",
        ]);
        const urlVariableNames = extractUrlVariableNames(url);
        url = parseUrl(url).expand(parameters);
        if (!/^http/.test(url)) {
          url = options.baseUrl + url;
        }
        const omittedParameters = Object.keys(options)
          .filter((option) => urlVariableNames.includes(option))
          .concat("baseUrl");
        const remainingParameters = omit(parameters, omittedParameters);
        const isBinaryRequest = /application\/octet-stream/i.test(
          headers.accept,
        );
        if (!isBinaryRequest) {
          if (options.mediaType.format) {
            headers.accept = headers.accept
              .split(/,/)
              .map((format2) =>
                format2.replace(
                  /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
                  `application/vnd$1$2.${options.mediaType.format}`,
                ),
              )
              .join(",");
          }
          if (url.endsWith("/graphql")) {
            if (options.mediaType.previews?.length) {
              const previewsFromAcceptHeader =
                headers.accept.match(/[\w-]+(?=-preview)/g) || [];
              headers.accept = previewsFromAcceptHeader
                .concat(options.mediaType.previews)
                .map((preview) => {
                  const format2 = options.mediaType.format
                    ? `.${options.mediaType.format}`
                    : "+json";
                  return `application/vnd.github.${preview}-preview${format2}`;
                })
                .join(",");
            }
          }
        }
        if (["GET", "HEAD"].includes(method)) {
          url = addQueryParameters(url, remainingParameters);
        } else {
          if ("data" in remainingParameters) {
            body = remainingParameters.data;
          } else {
            if (Object.keys(remainingParameters).length) {
              body = remainingParameters;
            }
          }
        }
        if (!headers["content-type"] && typeof body !== "undefined") {
          headers["content-type"] = "application/json; charset=utf-8";
        }
        if (["PATCH", "PUT"].includes(method) && typeof body === "undefined") {
          body = "";
        }
        return Object.assign(
          { method, url, headers },
          typeof body !== "undefined" ? { body } : null,
          options.request ? { request: options.request } : null,
        );
      }
      __name(parse3, "parse");
      function endpointWithDefaults(defaults, route, options) {
        return parse3(merge(defaults, route, options));
      }
      __name(endpointWithDefaults, "endpointWithDefaults");
      function withDefaults(oldDefaults, newDefaults) {
        const DEFAULTS2 = merge(oldDefaults, newDefaults);
        const endpoint2 = endpointWithDefaults.bind(null, DEFAULTS2);
        return Object.assign(endpoint2, {
          DEFAULTS: DEFAULTS2,
          defaults: withDefaults.bind(null, DEFAULTS2),
          merge: merge.bind(null, DEFAULTS2),
          parse: parse3,
        });
      }
      __name(withDefaults, "withDefaults");
      var endpoint = withDefaults(null, DEFAULTS);
    },
  });

  // node_modules/.pnpm/deprecation@2.3.1/node_modules/deprecation/dist-node/index.js
  var require_dist_node3 = __commonJS({
    "node_modules/.pnpm/deprecation@2.3.1/node_modules/deprecation/dist-node/index.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var Deprecation = class extends Error {
        static {
          __name(this, "Deprecation");
        }
        constructor(message) {
          super(message);
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          }
          this.name = "Deprecation";
        }
      };
      exports.Deprecation = Deprecation;
    },
  });

  // node_modules/.pnpm/wrappy@1.0.2/node_modules/wrappy/wrappy.js
  var require_wrappy = __commonJS({
    "node_modules/.pnpm/wrappy@1.0.2/node_modules/wrappy/wrappy.js"(
      exports,
      module,
    ) {
      module.exports = wrappy;
      function wrappy(fn, cb) {
        if (fn && cb) return wrappy(fn)(cb);
        if (typeof fn !== "function")
          throw new TypeError("need wrapper function");
        Object.keys(fn).forEach(function (k) {
          wrapper[k] = fn[k];
        });
        return wrapper;
        function wrapper() {
          var args = new Array(arguments.length);
          for (var i = 0; i < args.length; i++) {
            args[i] = arguments[i];
          }
          var ret = fn.apply(this, args);
          var cb2 = args[args.length - 1];
          if (typeof ret === "function" && ret !== cb2) {
            Object.keys(cb2).forEach(function (k) {
              ret[k] = cb2[k];
            });
          }
          return ret;
        }
        __name(wrapper, "wrapper");
      }
      __name(wrappy, "wrappy");
    },
  });

  // node_modules/.pnpm/once@1.4.0/node_modules/once/once.js
  var require_once = __commonJS({
    "node_modules/.pnpm/once@1.4.0/node_modules/once/once.js"(exports, module) {
      var wrappy = require_wrappy();
      module.exports = wrappy(once);
      module.exports.strict = wrappy(onceStrict);
      once.proto = once(function () {
        Object.defineProperty(Function.prototype, "once", {
          value: /* @__PURE__ */ __name(function () {
            return once(this);
          }, "value"),
          configurable: true,
        });
        Object.defineProperty(Function.prototype, "onceStrict", {
          value: /* @__PURE__ */ __name(function () {
            return onceStrict(this);
          }, "value"),
          configurable: true,
        });
      });
      function once(fn) {
        var f = /* @__PURE__ */ __name(function () {
          if (f.called) return f.value;
          f.called = true;
          return (f.value = fn.apply(this, arguments));
        }, "f");
        f.called = false;
        return f;
      }
      __name(once, "once");
      function onceStrict(fn) {
        var f = /* @__PURE__ */ __name(function () {
          if (f.called) throw new Error(f.onceError);
          f.called = true;
          return (f.value = fn.apply(this, arguments));
        }, "f");
        var name = fn.name || "Function wrapped with `once`";
        f.onceError = name + " shouldn't be called more than once";
        f.called = false;
        return f;
      }
      __name(onceStrict, "onceStrict");
    },
  });

  // node_modules/.pnpm/@octokit+request-error@5.1.0/node_modules/@octokit/request-error/dist-node/index.js
  var require_dist_node4 = __commonJS({
    "node_modules/.pnpm/@octokit+request-error@5.1.0/node_modules/@octokit/request-error/dist-node/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var __create2 = Object.create;
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __getProtoOf2 = Object.getPrototypeOf;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = /* @__PURE__ */ __name((target, all2) => {
        for (var name in all2)
          __defProp2(target, name, { get: all2[name], enumerable: true });
      }, "__export");
      var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
        if ((from && typeof from === "object") || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, {
                get: /* @__PURE__ */ __name(() => from[key], "get"),
                enumerable:
                  !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
              });
        }
        return to;
      }, "__copyProps");
      var __toESM2 = /* @__PURE__ */ __name(
        (mod, isNodeMode, target) => (
          (target = mod != null ? __create2(__getProtoOf2(mod)) : {}),
          __copyProps2(
            // If the importer is in node compatibility mode or this is not an ESM
            // file that has been converted to a CommonJS file using a Babel-
            // compatible transform (i.e. "__esModule" has not been set), then set
            // "default" to the CommonJS "module.exports" for node compatibility.
            isNodeMode || !mod || !mod.__esModule
              ? __defProp2(target, "default", { value: mod, enumerable: true })
              : target,
            mod,
          )
        ),
        "__toESM",
      );
      var __toCommonJS2 = /* @__PURE__ */ __name(
        (mod) =>
          __copyProps2(__defProp2({}, "__esModule", { value: true }), mod),
        "__toCommonJS",
      );
      var dist_src_exports = {};
      __export2(dist_src_exports, {
        RequestError: /* @__PURE__ */ __name(
          () => RequestError,
          "RequestError",
        ),
      });
      module.exports = __toCommonJS2(dist_src_exports);
      var import_deprecation = require_dist_node3();
      var import_once = __toESM2(require_once());
      var logOnceCode = (0, import_once.default)((deprecation) =>
        console.warn(deprecation),
      );
      var logOnceHeaders = (0, import_once.default)((deprecation) =>
        console.warn(deprecation),
      );
      var RequestError = class extends Error {
        static {
          __name(this, "RequestError");
        }
        constructor(message, statusCode, options) {
          super(message);
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          }
          this.name = "HttpError";
          this.status = statusCode;
          let headers;
          if ("headers" in options && typeof options.headers !== "undefined") {
            headers = options.headers;
          }
          if ("response" in options) {
            this.response = options.response;
            headers = options.response.headers;
          }
          const requestCopy = Object.assign({}, options.request);
          if (options.request.headers.authorization) {
            requestCopy.headers = Object.assign({}, options.request.headers, {
              authorization: options.request.headers.authorization.replace(
                / .*$/,
                " [REDACTED]",
              ),
            });
          }
          requestCopy.url = requestCopy.url
            .replace(/\bclient_secret=\w+/g, "client_secret=[REDACTED]")
            .replace(/\baccess_token=\w+/g, "access_token=[REDACTED]");
          this.request = requestCopy;
          Object.defineProperty(this, "code", {
            get() {
              logOnceCode(
                new import_deprecation.Deprecation(
                  "[@octokit/request-error] `error.code` is deprecated, use `error.status`.",
                ),
              );
              return statusCode;
            },
          });
          Object.defineProperty(this, "headers", {
            get() {
              logOnceHeaders(
                new import_deprecation.Deprecation(
                  "[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.",
                ),
              );
              return headers || {};
            },
          });
        }
      };
    },
  });

  // node_modules/.pnpm/@octokit+request@8.4.0/node_modules/@octokit/request/dist-node/index.js
  var require_dist_node5 = __commonJS({
    "node_modules/.pnpm/@octokit+request@8.4.0/node_modules/@octokit/request/dist-node/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = /* @__PURE__ */ __name((target, all2) => {
        for (var name in all2)
          __defProp2(target, name, { get: all2[name], enumerable: true });
      }, "__export");
      var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
        if ((from && typeof from === "object") || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, {
                get: /* @__PURE__ */ __name(() => from[key], "get"),
                enumerable:
                  !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
              });
        }
        return to;
      }, "__copyProps");
      var __toCommonJS2 = /* @__PURE__ */ __name(
        (mod) =>
          __copyProps2(__defProp2({}, "__esModule", { value: true }), mod),
        "__toCommonJS",
      );
      var dist_src_exports = {};
      __export2(dist_src_exports, {
        request: /* @__PURE__ */ __name(() => request, "request"),
      });
      module.exports = __toCommonJS2(dist_src_exports);
      var import_endpoint = require_dist_node2();
      var import_universal_user_agent = require_dist_node();
      var VERSION2 = "8.4.0";
      function isPlainObject2(value) {
        if (typeof value !== "object" || value === null) return false;
        if (Object.prototype.toString.call(value) !== "[object Object]")
          return false;
        const proto = Object.getPrototypeOf(value);
        if (proto === null) return true;
        const Ctor =
          Object.prototype.hasOwnProperty.call(proto, "constructor") &&
          proto.constructor;
        return (
          typeof Ctor === "function" &&
          Ctor instanceof Ctor &&
          Function.prototype.call(Ctor) === Function.prototype.call(value)
        );
      }
      __name(isPlainObject2, "isPlainObject");
      var import_request_error = require_dist_node4();
      function getBufferResponse(response) {
        return response.arrayBuffer();
      }
      __name(getBufferResponse, "getBufferResponse");
      function fetchWrapper(requestOptions) {
        var _a, _b, _c, _d;
        const log =
          requestOptions.request && requestOptions.request.log
            ? requestOptions.request.log
            : console;
        const parseSuccessResponseBody =
          ((_a = requestOptions.request) == null
            ? void 0
            : _a.parseSuccessResponseBody) !== false;
        if (
          isPlainObject2(requestOptions.body) ||
          Array.isArray(requestOptions.body)
        ) {
          requestOptions.body = JSON.stringify(requestOptions.body);
        }
        let headers = {};
        let status;
        let url;
        let { fetch } = globalThis;
        if ((_b = requestOptions.request) == null ? void 0 : _b.fetch) {
          fetch = requestOptions.request.fetch;
        }
        if (!fetch) {
          throw new Error(
            "fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing",
          );
        }
        return fetch(requestOptions.url, {
          method: requestOptions.method,
          body: requestOptions.body,
          redirect:
            (_c = requestOptions.request) == null ? void 0 : _c.redirect,
          headers: requestOptions.headers,
          signal: (_d = requestOptions.request) == null ? void 0 : _d.signal,
          // duplex must be set if request.body is ReadableStream or Async Iterables.
          // See https://fetch.spec.whatwg.org/#dom-requestinit-duplex.
          ...(requestOptions.body && { duplex: "half" }),
        })
          .then(async (response) => {
            url = response.url;
            status = response.status;
            for (const keyAndValue of response.headers) {
              headers[keyAndValue[0]] = keyAndValue[1];
            }
            if ("deprecation" in headers) {
              const matches =
                headers.link &&
                headers.link.match(/<([^>]+)>; rel="deprecation"/);
              const deprecationLink = matches && matches.pop();
              log.warn(
                `[@octokit/request] "${requestOptions.method} ${requestOptions.url}" is deprecated. It is scheduled to be removed on ${headers.sunset}${deprecationLink ? `. See ${deprecationLink}` : ""}`,
              );
            }
            if (status === 204 || status === 205) {
              return;
            }
            if (requestOptions.method === "HEAD") {
              if (status < 400) {
                return;
              }
              throw new import_request_error.RequestError(
                response.statusText,
                status,
                {
                  response: {
                    url,
                    status,
                    headers,
                    data: void 0,
                  },
                  request: requestOptions,
                },
              );
            }
            if (status === 304) {
              throw new import_request_error.RequestError(
                "Not modified",
                status,
                {
                  response: {
                    url,
                    status,
                    headers,
                    data: await getResponseData(response),
                  },
                  request: requestOptions,
                },
              );
            }
            if (status >= 400) {
              const data = await getResponseData(response);
              const error = new import_request_error.RequestError(
                toErrorMessage(data),
                status,
                {
                  response: {
                    url,
                    status,
                    headers,
                    data,
                  },
                  request: requestOptions,
                },
              );
              throw error;
            }
            return parseSuccessResponseBody
              ? await getResponseData(response)
              : response.body;
          })
          .then((data) => {
            return {
              status,
              url,
              headers,
              data,
            };
          })
          .catch((error) => {
            if (error instanceof import_request_error.RequestError) throw error;
            else if (error.name === "AbortError") throw error;
            let message = error.message;
            if (error.name === "TypeError" && "cause" in error) {
              if (error.cause instanceof Error) {
                message = error.cause.message;
              } else if (typeof error.cause === "string") {
                message = error.cause;
              }
            }
            throw new import_request_error.RequestError(message, 500, {
              request: requestOptions,
            });
          });
      }
      __name(fetchWrapper, "fetchWrapper");
      async function getResponseData(response) {
        const contentType = response.headers.get("content-type");
        if (/application\/json/.test(contentType)) {
          return response
            .json()
            .catch(() => response.text())
            .catch(() => "");
        }
        if (!contentType || /^text\/|charset=utf-8$/.test(contentType)) {
          return response.text();
        }
        return getBufferResponse(response);
      }
      __name(getResponseData, "getResponseData");
      function toErrorMessage(data) {
        if (typeof data === "string") return data;
        let suffix;
        if ("documentation_url" in data) {
          suffix = ` - ${data.documentation_url}`;
        } else {
          suffix = "";
        }
        if ("message" in data) {
          if (Array.isArray(data.errors)) {
            return `${data.message}: ${data.errors.map(JSON.stringify).join(", ")}${suffix}`;
          }
          return `${data.message}${suffix}`;
        }
        return `Unknown error: ${JSON.stringify(data)}`;
      }
      __name(toErrorMessage, "toErrorMessage");
      function withDefaults(oldEndpoint, newDefaults) {
        const endpoint2 = oldEndpoint.defaults(newDefaults);
        const newApi = /* @__PURE__ */ __name(function (route, parameters) {
          const endpointOptions = endpoint2.merge(route, parameters);
          if (!endpointOptions.request || !endpointOptions.request.hook) {
            return fetchWrapper(endpoint2.parse(endpointOptions));
          }
          const request2 = /* @__PURE__ */ __name((route2, parameters2) => {
            return fetchWrapper(
              endpoint2.parse(endpoint2.merge(route2, parameters2)),
            );
          }, "request2");
          Object.assign(request2, {
            endpoint: endpoint2,
            defaults: withDefaults.bind(null, endpoint2),
          });
          return endpointOptions.request.hook(request2, endpointOptions);
        }, "newApi");
        return Object.assign(newApi, {
          endpoint: endpoint2,
          defaults: withDefaults.bind(null, endpoint2),
        });
      }
      __name(withDefaults, "withDefaults");
      var request = withDefaults(import_endpoint.endpoint, {
        headers: {
          "user-agent": `octokit-request.js/${VERSION2} ${(0, import_universal_user_agent.getUserAgent)()}`,
        },
      });
    },
  });

  // node_modules/.pnpm/@octokit+graphql@7.1.0/node_modules/@octokit/graphql/dist-node/index.js
  var require_dist_node6 = __commonJS({
    "node_modules/.pnpm/@octokit+graphql@7.1.0/node_modules/@octokit/graphql/dist-node/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = /* @__PURE__ */ __name((target, all2) => {
        for (var name in all2)
          __defProp2(target, name, { get: all2[name], enumerable: true });
      }, "__export");
      var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
        if ((from && typeof from === "object") || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, {
                get: /* @__PURE__ */ __name(() => from[key], "get"),
                enumerable:
                  !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
              });
        }
        return to;
      }, "__copyProps");
      var __toCommonJS2 = /* @__PURE__ */ __name(
        (mod) =>
          __copyProps2(__defProp2({}, "__esModule", { value: true }), mod),
        "__toCommonJS",
      );
      var dist_src_exports = {};
      __export2(dist_src_exports, {
        GraphqlResponseError: /* @__PURE__ */ __name(
          () => GraphqlResponseError,
          "GraphqlResponseError",
        ),
        graphql: /* @__PURE__ */ __name(() => graphql2, "graphql"),
        withCustomRequest: /* @__PURE__ */ __name(
          () => withCustomRequest,
          "withCustomRequest",
        ),
      });
      module.exports = __toCommonJS2(dist_src_exports);
      var import_request3 = require_dist_node5();
      var import_universal_user_agent = require_dist_node();
      var VERSION2 = "7.1.0";
      var import_request2 = require_dist_node5();
      var import_request = require_dist_node5();
      function _buildMessageForResponseErrors(data) {
        return (
          `Request failed due to following response errors:
` + data.errors.map((e) => ` - ${e.message}`).join("\n")
        );
      }
      __name(_buildMessageForResponseErrors, "_buildMessageForResponseErrors");
      var GraphqlResponseError = class extends Error {
        static {
          __name(this, "GraphqlResponseError");
        }
        constructor(request2, headers, response) {
          super(_buildMessageForResponseErrors(response));
          this.request = request2;
          this.headers = headers;
          this.response = response;
          this.name = "GraphqlResponseError";
          this.errors = response.errors;
          this.data = response.data;
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          }
        }
      };
      var NON_VARIABLE_OPTIONS = [
        "method",
        "baseUrl",
        "url",
        "headers",
        "request",
        "query",
        "mediaType",
      ];
      var FORBIDDEN_VARIABLE_OPTIONS = ["query", "method", "url"];
      var GHES_V3_SUFFIX_REGEX = /\/api\/v3\/?$/;
      function graphql(request2, query, options) {
        if (options) {
          if (typeof query === "string" && "query" in options) {
            return Promise.reject(
              new Error(
                `[@octokit/graphql] "query" cannot be used as variable name`,
              ),
            );
          }
          for (const key in options) {
            if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key)) continue;
            return Promise.reject(
              new Error(
                `[@octokit/graphql] "${key}" cannot be used as variable name`,
              ),
            );
          }
        }
        const parsedOptions =
          typeof query === "string" ? Object.assign({ query }, options) : query;
        const requestOptions = Object.keys(parsedOptions).reduce(
          (result, key) => {
            if (NON_VARIABLE_OPTIONS.includes(key)) {
              result[key] = parsedOptions[key];
              return result;
            }
            if (!result.variables) {
              result.variables = {};
            }
            result.variables[key] = parsedOptions[key];
            return result;
          },
          {},
        );
        const baseUrl =
          parsedOptions.baseUrl || request2.endpoint.DEFAULTS.baseUrl;
        if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {
          requestOptions.url = baseUrl.replace(
            GHES_V3_SUFFIX_REGEX,
            "/api/graphql",
          );
        }
        return request2(requestOptions).then((response) => {
          if (response.data.errors) {
            const headers = {};
            for (const key of Object.keys(response.headers)) {
              headers[key] = response.headers[key];
            }
            throw new GraphqlResponseError(
              requestOptions,
              headers,
              response.data,
            );
          }
          return response.data.data;
        });
      }
      __name(graphql, "graphql");
      function withDefaults(request2, newDefaults) {
        const newRequest = request2.defaults(newDefaults);
        const newApi = /* @__PURE__ */ __name((query, options) => {
          return graphql(newRequest, query, options);
        }, "newApi");
        return Object.assign(newApi, {
          defaults: withDefaults.bind(null, newRequest),
          endpoint: newRequest.endpoint,
        });
      }
      __name(withDefaults, "withDefaults");
      var graphql2 = withDefaults(import_request3.request, {
        headers: {
          "user-agent": `octokit-graphql.js/${VERSION2} ${(0, import_universal_user_agent.getUserAgent)()}`,
        },
        method: "POST",
        url: "/graphql",
      });
      function withCustomRequest(customRequest) {
        return withDefaults(customRequest, {
          method: "POST",
          url: "/graphql",
        });
      }
      __name(withCustomRequest, "withCustomRequest");
    },
  });

  // node_modules/.pnpm/@octokit+auth-token@4.0.0/node_modules/@octokit/auth-token/dist-node/index.js
  var require_dist_node7 = __commonJS({
    "node_modules/.pnpm/@octokit+auth-token@4.0.0/node_modules/@octokit/auth-token/dist-node/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = /* @__PURE__ */ __name((target, all2) => {
        for (var name in all2)
          __defProp2(target, name, { get: all2[name], enumerable: true });
      }, "__export");
      var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
        if ((from && typeof from === "object") || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, {
                get: /* @__PURE__ */ __name(() => from[key], "get"),
                enumerable:
                  !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
              });
        }
        return to;
      }, "__copyProps");
      var __toCommonJS2 = /* @__PURE__ */ __name(
        (mod) =>
          __copyProps2(__defProp2({}, "__esModule", { value: true }), mod),
        "__toCommonJS",
      );
      var dist_src_exports = {};
      __export2(dist_src_exports, {
        createTokenAuth: /* @__PURE__ */ __name(
          () => createTokenAuth,
          "createTokenAuth",
        ),
      });
      module.exports = __toCommonJS2(dist_src_exports);
      var REGEX_IS_INSTALLATION_LEGACY = /^v1\./;
      var REGEX_IS_INSTALLATION = /^ghs_/;
      var REGEX_IS_USER_TO_SERVER = /^ghu_/;
      async function auth(token) {
        const isApp = token.split(/\./).length === 3;
        const isInstallation =
          REGEX_IS_INSTALLATION_LEGACY.test(token) ||
          REGEX_IS_INSTALLATION.test(token);
        const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);
        const tokenType = isApp
          ? "app"
          : isInstallation
            ? "installation"
            : isUserToServer
              ? "user-to-server"
              : "oauth";
        return {
          type: "token",
          token,
          tokenType,
        };
      }
      __name(auth, "auth");
      function withAuthorizationPrefix(token) {
        if (token.split(/\./).length === 3) {
          return `bearer ${token}`;
        }
        return `token ${token}`;
      }
      __name(withAuthorizationPrefix, "withAuthorizationPrefix");
      async function hook(token, request, route, parameters) {
        const endpoint = request.endpoint.merge(route, parameters);
        endpoint.headers.authorization = withAuthorizationPrefix(token);
        return request(endpoint);
      }
      __name(hook, "hook");
      var createTokenAuth = /* @__PURE__ */ __name(function createTokenAuth2(
        token,
      ) {
        if (!token) {
          throw new Error(
            "[@octokit/auth-token] No token passed to createTokenAuth",
          );
        }
        if (typeof token !== "string") {
          throw new Error(
            "[@octokit/auth-token] Token passed to createTokenAuth is not a string",
          );
        }
        token = token.replace(/^(token|bearer) +/i, "");
        return Object.assign(auth.bind(null, token), {
          hook: hook.bind(null, token),
        });
      }, "createTokenAuth2");
    },
  });

  // node_modules/.pnpm/@octokit+core@5.2.0/node_modules/@octokit/core/dist-node/index.js
  var require_dist_node8 = __commonJS({
    "node_modules/.pnpm/@octokit+core@5.2.0/node_modules/@octokit/core/dist-node/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = /* @__PURE__ */ __name((target, all2) => {
        for (var name in all2)
          __defProp2(target, name, { get: all2[name], enumerable: true });
      }, "__export");
      var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
        if ((from && typeof from === "object") || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, {
                get: /* @__PURE__ */ __name(() => from[key], "get"),
                enumerable:
                  !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
              });
        }
        return to;
      }, "__copyProps");
      var __toCommonJS2 = /* @__PURE__ */ __name(
        (mod) =>
          __copyProps2(__defProp2({}, "__esModule", { value: true }), mod),
        "__toCommonJS",
      );
      var dist_src_exports = {};
      __export2(dist_src_exports, {
        Octokit: /* @__PURE__ */ __name(() => Octokit, "Octokit"),
      });
      module.exports = __toCommonJS2(dist_src_exports);
      var import_universal_user_agent = require_dist_node();
      var import_before_after_hook = require_before_after_hook();
      var import_request = require_dist_node5();
      var import_graphql = require_dist_node6();
      var import_auth_token = require_dist_node7();
      var VERSION2 = "5.2.0";
      var noop2 = /* @__PURE__ */ __name(() => {}, "noop");
      var consoleWarn = console.warn.bind(console);
      var consoleError = console.error.bind(console);
      var userAgentTrail = `octokit-core.js/${VERSION2} ${(0, import_universal_user_agent.getUserAgent)()}`;
      var Octokit = class {
        static {
          __name(this, "Octokit");
        }
        static {
          this.VERSION = VERSION2;
        }
        static defaults(defaults) {
          const OctokitWithDefaults = class extends this {
            static {
              __name(this, "OctokitWithDefaults");
            }
            constructor(...args) {
              const options = args[0] || {};
              if (typeof defaults === "function") {
                super(defaults(options));
                return;
              }
              super(
                Object.assign(
                  {},
                  defaults,
                  options,
                  options.userAgent && defaults.userAgent
                    ? {
                        userAgent: `${options.userAgent} ${defaults.userAgent}`,
                      }
                    : null,
                ),
              );
            }
          };
          return OctokitWithDefaults;
        }
        static {
          this.plugins = [];
        }
        /**
         * Attach a plugin (or many) to your Octokit instance.
         *
         * @example
         * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)
         */
        static plugin(...newPlugins) {
          const currentPlugins = this.plugins;
          const NewOctokit = class extends this {
            static {
              __name(this, "NewOctokit");
            }
            static {
              this.plugins = currentPlugins.concat(
                newPlugins.filter((plugin) => !currentPlugins.includes(plugin)),
              );
            }
          };
          return NewOctokit;
        }
        constructor(options = {}) {
          const hook = new import_before_after_hook.Collection();
          const requestDefaults = {
            baseUrl: import_request.request.endpoint.DEFAULTS.baseUrl,
            headers: {},
            request: Object.assign({}, options.request, {
              // @ts-ignore internal usage only, no need to type
              hook: hook.bind(null, "request"),
            }),
            mediaType: {
              previews: [],
              format: "",
            },
          };
          requestDefaults.headers["user-agent"] = options.userAgent
            ? `${options.userAgent} ${userAgentTrail}`
            : userAgentTrail;
          if (options.baseUrl) {
            requestDefaults.baseUrl = options.baseUrl;
          }
          if (options.previews) {
            requestDefaults.mediaType.previews = options.previews;
          }
          if (options.timeZone) {
            requestDefaults.headers["time-zone"] = options.timeZone;
          }
          this.request = import_request.request.defaults(requestDefaults);
          this.graphql = (0, import_graphql.withCustomRequest)(
            this.request,
          ).defaults(requestDefaults);
          this.log = Object.assign(
            {
              debug: noop2,
              info: noop2,
              warn: consoleWarn,
              error: consoleError,
            },
            options.log,
          );
          this.hook = hook;
          if (!options.authStrategy) {
            if (!options.auth) {
              this.auth = async () => ({
                type: "unauthenticated",
              });
            } else {
              const auth = (0, import_auth_token.createTokenAuth)(options.auth);
              hook.wrap("request", auth.hook);
              this.auth = auth;
            }
          } else {
            const { authStrategy, ...otherOptions } = options;
            const auth = authStrategy(
              Object.assign(
                {
                  request: this.request,
                  log: this.log,
                  // we pass the current octokit instance as well as its constructor options
                  // to allow for authentication strategies that return a new octokit instance
                  // that shares the same internal state as the current one. The original
                  // requirement for this was the "event-octokit" authentication strategy
                  // of https://github.com/probot/octokit-auth-probot.
                  octokit: this,
                  octokitOptions: otherOptions,
                },
                options.auth,
              ),
            );
            hook.wrap("request", auth.hook);
            this.auth = auth;
          }
          const classConstructor = this.constructor;
          for (let i = 0; i < classConstructor.plugins.length; ++i) {
            Object.assign(this, classConstructor.plugins[i](this, options));
          }
        }
      };
    },
  });

  // node_modules/.pnpm/@octokit+plugin-rest-endpoint-methods@10.4.1_@octokit+core@5.2.0/node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js
  var require_dist_node9 = __commonJS({
    "node_modules/.pnpm/@octokit+plugin-rest-endpoint-methods@10.4.1_@octokit+core@5.2.0/node_modules/@octokit/plugin-rest-endpoint-methods/dist-node/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = /* @__PURE__ */ __name((target, all2) => {
        for (var name in all2)
          __defProp2(target, name, { get: all2[name], enumerable: true });
      }, "__export");
      var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
        if ((from && typeof from === "object") || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, {
                get: /* @__PURE__ */ __name(() => from[key], "get"),
                enumerable:
                  !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
              });
        }
        return to;
      }, "__copyProps");
      var __toCommonJS2 = /* @__PURE__ */ __name(
        (mod) =>
          __copyProps2(__defProp2({}, "__esModule", { value: true }), mod),
        "__toCommonJS",
      );
      var dist_src_exports = {};
      __export2(dist_src_exports, {
        legacyRestEndpointMethods: /* @__PURE__ */ __name(
          () => legacyRestEndpointMethods,
          "legacyRestEndpointMethods",
        ),
        restEndpointMethods: /* @__PURE__ */ __name(
          () => restEndpointMethods,
          "restEndpointMethods",
        ),
      });
      module.exports = __toCommonJS2(dist_src_exports);
      var VERSION2 = "10.4.1";
      var Endpoints = {
        actions: {
          addCustomLabelsToSelfHostedRunnerForOrg: [
            "POST /orgs/{org}/actions/runners/{runner_id}/labels",
          ],
          addCustomLabelsToSelfHostedRunnerForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
          ],
          addSelectedRepoToOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
          ],
          addSelectedRepoToOrgVariable: [
            "PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}",
          ],
          approveWorkflowRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve",
          ],
          cancelWorkflowRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel",
          ],
          createEnvironmentVariable: [
            "POST /repositories/{repository_id}/environments/{environment_name}/variables",
          ],
          createOrUpdateEnvironmentSecret: [
            "PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
          ],
          createOrUpdateOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}",
          ],
          createOrUpdateRepoSecret: [
            "PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}",
          ],
          createOrgVariable: ["POST /orgs/{org}/actions/variables"],
          createRegistrationTokenForOrg: [
            "POST /orgs/{org}/actions/runners/registration-token",
          ],
          createRegistrationTokenForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/registration-token",
          ],
          createRemoveTokenForOrg: [
            "POST /orgs/{org}/actions/runners/remove-token",
          ],
          createRemoveTokenForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/remove-token",
          ],
          createRepoVariable: ["POST /repos/{owner}/{repo}/actions/variables"],
          createWorkflowDispatch: [
            "POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches",
          ],
          deleteActionsCacheById: [
            "DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}",
          ],
          deleteActionsCacheByKey: [
            "DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}",
          ],
          deleteArtifact: [
            "DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
          ],
          deleteEnvironmentSecret: [
            "DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
          ],
          deleteEnvironmentVariable: [
            "DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}",
          ],
          deleteOrgSecret: ["DELETE /orgs/{org}/actions/secrets/{secret_name}"],
          deleteOrgVariable: ["DELETE /orgs/{org}/actions/variables/{name}"],
          deleteRepoSecret: [
            "DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}",
          ],
          deleteRepoVariable: [
            "DELETE /repos/{owner}/{repo}/actions/variables/{name}",
          ],
          deleteSelfHostedRunnerFromOrg: [
            "DELETE /orgs/{org}/actions/runners/{runner_id}",
          ],
          deleteSelfHostedRunnerFromRepo: [
            "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}",
          ],
          deleteWorkflowRun: [
            "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}",
          ],
          deleteWorkflowRunLogs: [
            "DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs",
          ],
          disableSelectedRepositoryGithubActionsOrganization: [
            "DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}",
          ],
          disableWorkflow: [
            "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable",
          ],
          downloadArtifact: [
            "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}",
          ],
          downloadJobLogsForWorkflowRun: [
            "GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs",
          ],
          downloadWorkflowRunAttemptLogs: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs",
          ],
          downloadWorkflowRunLogs: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs",
          ],
          enableSelectedRepositoryGithubActionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/repositories/{repository_id}",
          ],
          enableWorkflow: [
            "PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable",
          ],
          forceCancelWorkflowRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel",
          ],
          generateRunnerJitconfigForOrg: [
            "POST /orgs/{org}/actions/runners/generate-jitconfig",
          ],
          generateRunnerJitconfigForRepo: [
            "POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig",
          ],
          getActionsCacheList: ["GET /repos/{owner}/{repo}/actions/caches"],
          getActionsCacheUsage: [
            "GET /repos/{owner}/{repo}/actions/cache/usage",
          ],
          getActionsCacheUsageByRepoForOrg: [
            "GET /orgs/{org}/actions/cache/usage-by-repository",
          ],
          getActionsCacheUsageForOrg: ["GET /orgs/{org}/actions/cache/usage"],
          getAllowedActionsOrganization: [
            "GET /orgs/{org}/actions/permissions/selected-actions",
          ],
          getAllowedActionsRepository: [
            "GET /repos/{owner}/{repo}/actions/permissions/selected-actions",
          ],
          getArtifact: [
            "GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}",
          ],
          getCustomOidcSubClaimForRepo: [
            "GET /repos/{owner}/{repo}/actions/oidc/customization/sub",
          ],
          getEnvironmentPublicKey: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key",
          ],
          getEnvironmentSecret: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}",
          ],
          getEnvironmentVariable: [
            "GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}",
          ],
          getGithubActionsDefaultWorkflowPermissionsOrganization: [
            "GET /orgs/{org}/actions/permissions/workflow",
          ],
          getGithubActionsDefaultWorkflowPermissionsRepository: [
            "GET /repos/{owner}/{repo}/actions/permissions/workflow",
          ],
          getGithubActionsPermissionsOrganization: [
            "GET /orgs/{org}/actions/permissions",
          ],
          getGithubActionsPermissionsRepository: [
            "GET /repos/{owner}/{repo}/actions/permissions",
          ],
          getJobForWorkflowRun: [
            "GET /repos/{owner}/{repo}/actions/jobs/{job_id}",
          ],
          getOrgPublicKey: ["GET /orgs/{org}/actions/secrets/public-key"],
          getOrgSecret: ["GET /orgs/{org}/actions/secrets/{secret_name}"],
          getOrgVariable: ["GET /orgs/{org}/actions/variables/{name}"],
          getPendingDeploymentsForRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
          ],
          getRepoPermissions: [
            "GET /repos/{owner}/{repo}/actions/permissions",
            {},
            { renamed: ["actions", "getGithubActionsPermissionsRepository"] },
          ],
          getRepoPublicKey: [
            "GET /repos/{owner}/{repo}/actions/secrets/public-key",
          ],
          getRepoSecret: [
            "GET /repos/{owner}/{repo}/actions/secrets/{secret_name}",
          ],
          getRepoVariable: [
            "GET /repos/{owner}/{repo}/actions/variables/{name}",
          ],
          getReviewsForRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals",
          ],
          getSelfHostedRunnerForOrg: [
            "GET /orgs/{org}/actions/runners/{runner_id}",
          ],
          getSelfHostedRunnerForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners/{runner_id}",
          ],
          getWorkflow: [
            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}",
          ],
          getWorkflowAccessToRepository: [
            "GET /repos/{owner}/{repo}/actions/permissions/access",
          ],
          getWorkflowRun: ["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],
          getWorkflowRunAttempt: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}",
          ],
          getWorkflowRunUsage: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing",
          ],
          getWorkflowUsage: [
            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing",
          ],
          listArtifactsForRepo: ["GET /repos/{owner}/{repo}/actions/artifacts"],
          listEnvironmentSecrets: [
            "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
          ],
          listEnvironmentVariables: [
            "GET /repositories/{repository_id}/environments/{environment_name}/variables",
          ],
          listJobsForWorkflowRun: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
          ],
          listJobsForWorkflowRunAttempt: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
          ],
          listLabelsForSelfHostedRunnerForOrg: [
            "GET /orgs/{org}/actions/runners/{runner_id}/labels",
          ],
          listLabelsForSelfHostedRunnerForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
          ],
          listOrgSecrets: ["GET /orgs/{org}/actions/secrets"],
          listOrgVariables: ["GET /orgs/{org}/actions/variables"],
          listRepoOrganizationSecrets: [
            "GET /repos/{owner}/{repo}/actions/organization-secrets",
          ],
          listRepoOrganizationVariables: [
            "GET /repos/{owner}/{repo}/actions/organization-variables",
          ],
          listRepoSecrets: ["GET /repos/{owner}/{repo}/actions/secrets"],
          listRepoVariables: ["GET /repos/{owner}/{repo}/actions/variables"],
          listRepoWorkflows: ["GET /repos/{owner}/{repo}/actions/workflows"],
          listRunnerApplicationsForOrg: [
            "GET /orgs/{org}/actions/runners/downloads",
          ],
          listRunnerApplicationsForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners/downloads",
          ],
          listSelectedReposForOrgSecret: [
            "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
          ],
          listSelectedReposForOrgVariable: [
            "GET /orgs/{org}/actions/variables/{name}/repositories",
          ],
          listSelectedRepositoriesEnabledGithubActionsOrganization: [
            "GET /orgs/{org}/actions/permissions/repositories",
          ],
          listSelfHostedRunnersForOrg: ["GET /orgs/{org}/actions/runners"],
          listSelfHostedRunnersForRepo: [
            "GET /repos/{owner}/{repo}/actions/runners",
          ],
          listWorkflowRunArtifacts: [
            "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
          ],
          listWorkflowRuns: [
            "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
          ],
          listWorkflowRunsForRepo: ["GET /repos/{owner}/{repo}/actions/runs"],
          reRunJobForWorkflowRun: [
            "POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun",
          ],
          reRunWorkflow: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun",
          ],
          reRunWorkflowFailedJobs: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs",
          ],
          removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
            "DELETE /orgs/{org}/actions/runners/{runner_id}/labels",
          ],
          removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
            "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
          ],
          removeCustomLabelFromSelfHostedRunnerForOrg: [
            "DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}",
          ],
          removeCustomLabelFromSelfHostedRunnerForRepo: [
            "DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}",
          ],
          removeSelectedRepoFromOrgSecret: [
            "DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}",
          ],
          removeSelectedRepoFromOrgVariable: [
            "DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}",
          ],
          reviewCustomGatesForRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule",
          ],
          reviewPendingDeploymentsForRun: [
            "POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments",
          ],
          setAllowedActionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/selected-actions",
          ],
          setAllowedActionsRepository: [
            "PUT /repos/{owner}/{repo}/actions/permissions/selected-actions",
          ],
          setCustomLabelsForSelfHostedRunnerForOrg: [
            "PUT /orgs/{org}/actions/runners/{runner_id}/labels",
          ],
          setCustomLabelsForSelfHostedRunnerForRepo: [
            "PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels",
          ],
          setCustomOidcSubClaimForRepo: [
            "PUT /repos/{owner}/{repo}/actions/oidc/customization/sub",
          ],
          setGithubActionsDefaultWorkflowPermissionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/workflow",
          ],
          setGithubActionsDefaultWorkflowPermissionsRepository: [
            "PUT /repos/{owner}/{repo}/actions/permissions/workflow",
          ],
          setGithubActionsPermissionsOrganization: [
            "PUT /orgs/{org}/actions/permissions",
          ],
          setGithubActionsPermissionsRepository: [
            "PUT /repos/{owner}/{repo}/actions/permissions",
          ],
          setSelectedReposForOrgSecret: [
            "PUT /orgs/{org}/actions/secrets/{secret_name}/repositories",
          ],
          setSelectedReposForOrgVariable: [
            "PUT /orgs/{org}/actions/variables/{name}/repositories",
          ],
          setSelectedRepositoriesEnabledGithubActionsOrganization: [
            "PUT /orgs/{org}/actions/permissions/repositories",
          ],
          setWorkflowAccessToRepository: [
            "PUT /repos/{owner}/{repo}/actions/permissions/access",
          ],
          updateEnvironmentVariable: [
            "PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}",
          ],
          updateOrgVariable: ["PATCH /orgs/{org}/actions/variables/{name}"],
          updateRepoVariable: [
            "PATCH /repos/{owner}/{repo}/actions/variables/{name}",
          ],
        },
        activity: {
          checkRepoIsStarredByAuthenticatedUser: [
            "GET /user/starred/{owner}/{repo}",
          ],
          deleteRepoSubscription: ["DELETE /repos/{owner}/{repo}/subscription"],
          deleteThreadSubscription: [
            "DELETE /notifications/threads/{thread_id}/subscription",
          ],
          getFeeds: ["GET /feeds"],
          getRepoSubscription: ["GET /repos/{owner}/{repo}/subscription"],
          getThread: ["GET /notifications/threads/{thread_id}"],
          getThreadSubscriptionForAuthenticatedUser: [
            "GET /notifications/threads/{thread_id}/subscription",
          ],
          listEventsForAuthenticatedUser: ["GET /users/{username}/events"],
          listNotificationsForAuthenticatedUser: ["GET /notifications"],
          listOrgEventsForAuthenticatedUser: [
            "GET /users/{username}/events/orgs/{org}",
          ],
          listPublicEvents: ["GET /events"],
          listPublicEventsForRepoNetwork: [
            "GET /networks/{owner}/{repo}/events",
          ],
          listPublicEventsForUser: ["GET /users/{username}/events/public"],
          listPublicOrgEvents: ["GET /orgs/{org}/events"],
          listReceivedEventsForUser: ["GET /users/{username}/received_events"],
          listReceivedPublicEventsForUser: [
            "GET /users/{username}/received_events/public",
          ],
          listRepoEvents: ["GET /repos/{owner}/{repo}/events"],
          listRepoNotificationsForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/notifications",
          ],
          listReposStarredByAuthenticatedUser: ["GET /user/starred"],
          listReposStarredByUser: ["GET /users/{username}/starred"],
          listReposWatchedByUser: ["GET /users/{username}/subscriptions"],
          listStargazersForRepo: ["GET /repos/{owner}/{repo}/stargazers"],
          listWatchedReposForAuthenticatedUser: ["GET /user/subscriptions"],
          listWatchersForRepo: ["GET /repos/{owner}/{repo}/subscribers"],
          markNotificationsAsRead: ["PUT /notifications"],
          markRepoNotificationsAsRead: [
            "PUT /repos/{owner}/{repo}/notifications",
          ],
          markThreadAsDone: ["DELETE /notifications/threads/{thread_id}"],
          markThreadAsRead: ["PATCH /notifications/threads/{thread_id}"],
          setRepoSubscription: ["PUT /repos/{owner}/{repo}/subscription"],
          setThreadSubscription: [
            "PUT /notifications/threads/{thread_id}/subscription",
          ],
          starRepoForAuthenticatedUser: ["PUT /user/starred/{owner}/{repo}"],
          unstarRepoForAuthenticatedUser: [
            "DELETE /user/starred/{owner}/{repo}",
          ],
        },
        apps: {
          addRepoToInstallation: [
            "PUT /user/installations/{installation_id}/repositories/{repository_id}",
            {},
            { renamed: ["apps", "addRepoToInstallationForAuthenticatedUser"] },
          ],
          addRepoToInstallationForAuthenticatedUser: [
            "PUT /user/installations/{installation_id}/repositories/{repository_id}",
          ],
          checkToken: ["POST /applications/{client_id}/token"],
          createFromManifest: ["POST /app-manifests/{code}/conversions"],
          createInstallationAccessToken: [
            "POST /app/installations/{installation_id}/access_tokens",
          ],
          deleteAuthorization: ["DELETE /applications/{client_id}/grant"],
          deleteInstallation: ["DELETE /app/installations/{installation_id}"],
          deleteToken: ["DELETE /applications/{client_id}/token"],
          getAuthenticated: ["GET /app"],
          getBySlug: ["GET /apps/{app_slug}"],
          getInstallation: ["GET /app/installations/{installation_id}"],
          getOrgInstallation: ["GET /orgs/{org}/installation"],
          getRepoInstallation: ["GET /repos/{owner}/{repo}/installation"],
          getSubscriptionPlanForAccount: [
            "GET /marketplace_listing/accounts/{account_id}",
          ],
          getSubscriptionPlanForAccountStubbed: [
            "GET /marketplace_listing/stubbed/accounts/{account_id}",
          ],
          getUserInstallation: ["GET /users/{username}/installation"],
          getWebhookConfigForApp: ["GET /app/hook/config"],
          getWebhookDelivery: ["GET /app/hook/deliveries/{delivery_id}"],
          listAccountsForPlan: [
            "GET /marketplace_listing/plans/{plan_id}/accounts",
          ],
          listAccountsForPlanStubbed: [
            "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
          ],
          listInstallationReposForAuthenticatedUser: [
            "GET /user/installations/{installation_id}/repositories",
          ],
          listInstallationRequestsForAuthenticatedApp: [
            "GET /app/installation-requests",
          ],
          listInstallations: ["GET /app/installations"],
          listInstallationsForAuthenticatedUser: ["GET /user/installations"],
          listPlans: ["GET /marketplace_listing/plans"],
          listPlansStubbed: ["GET /marketplace_listing/stubbed/plans"],
          listReposAccessibleToInstallation: ["GET /installation/repositories"],
          listSubscriptionsForAuthenticatedUser: [
            "GET /user/marketplace_purchases",
          ],
          listSubscriptionsForAuthenticatedUserStubbed: [
            "GET /user/marketplace_purchases/stubbed",
          ],
          listWebhookDeliveries: ["GET /app/hook/deliveries"],
          redeliverWebhookDelivery: [
            "POST /app/hook/deliveries/{delivery_id}/attempts",
          ],
          removeRepoFromInstallation: [
            "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
            {},
            {
              renamed: [
                "apps",
                "removeRepoFromInstallationForAuthenticatedUser",
              ],
            },
          ],
          removeRepoFromInstallationForAuthenticatedUser: [
            "DELETE /user/installations/{installation_id}/repositories/{repository_id}",
          ],
          resetToken: ["PATCH /applications/{client_id}/token"],
          revokeInstallationAccessToken: ["DELETE /installation/token"],
          scopeToken: ["POST /applications/{client_id}/token/scoped"],
          suspendInstallation: [
            "PUT /app/installations/{installation_id}/suspended",
          ],
          unsuspendInstallation: [
            "DELETE /app/installations/{installation_id}/suspended",
          ],
          updateWebhookConfigForApp: ["PATCH /app/hook/config"],
        },
        billing: {
          getGithubActionsBillingOrg: [
            "GET /orgs/{org}/settings/billing/actions",
          ],
          getGithubActionsBillingUser: [
            "GET /users/{username}/settings/billing/actions",
          ],
          getGithubPackagesBillingOrg: [
            "GET /orgs/{org}/settings/billing/packages",
          ],
          getGithubPackagesBillingUser: [
            "GET /users/{username}/settings/billing/packages",
          ],
          getSharedStorageBillingOrg: [
            "GET /orgs/{org}/settings/billing/shared-storage",
          ],
          getSharedStorageBillingUser: [
            "GET /users/{username}/settings/billing/shared-storage",
          ],
        },
        checks: {
          create: ["POST /repos/{owner}/{repo}/check-runs"],
          createSuite: ["POST /repos/{owner}/{repo}/check-suites"],
          get: ["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],
          getSuite: ["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],
          listAnnotations: [
            "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
          ],
          listForRef: ["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],
          listForSuite: [
            "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
          ],
          listSuitesForRef: [
            "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
          ],
          rerequestRun: [
            "POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest",
          ],
          rerequestSuite: [
            "POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest",
          ],
          setSuitesPreferences: [
            "PATCH /repos/{owner}/{repo}/check-suites/preferences",
          ],
          update: ["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"],
        },
        codeScanning: {
          deleteAnalysis: [
            "DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}",
          ],
          getAlert: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
            {},
            { renamedParameters: { alert_id: "alert_number" } },
          ],
          getAnalysis: [
            "GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}",
          ],
          getCodeqlDatabase: [
            "GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}",
          ],
          getDefaultSetup: [
            "GET /repos/{owner}/{repo}/code-scanning/default-setup",
          ],
          getSarif: [
            "GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}",
          ],
          listAlertInstances: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
          ],
          listAlertsForOrg: ["GET /orgs/{org}/code-scanning/alerts"],
          listAlertsForRepo: ["GET /repos/{owner}/{repo}/code-scanning/alerts"],
          listAlertsInstances: [
            "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
            {},
            { renamed: ["codeScanning", "listAlertInstances"] },
          ],
          listCodeqlDatabases: [
            "GET /repos/{owner}/{repo}/code-scanning/codeql/databases",
          ],
          listRecentAnalyses: [
            "GET /repos/{owner}/{repo}/code-scanning/analyses",
          ],
          updateAlert: [
            "PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",
          ],
          updateDefaultSetup: [
            "PATCH /repos/{owner}/{repo}/code-scanning/default-setup",
          ],
          uploadSarif: ["POST /repos/{owner}/{repo}/code-scanning/sarifs"],
        },
        codesOfConduct: {
          getAllCodesOfConduct: ["GET /codes_of_conduct"],
          getConductCode: ["GET /codes_of_conduct/{key}"],
        },
        codespaces: {
          addRepositoryForSecretForAuthenticatedUser: [
            "PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}",
          ],
          addSelectedRepoToOrgSecret: [
            "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}",
          ],
          checkPermissionsForDevcontainer: [
            "GET /repos/{owner}/{repo}/codespaces/permissions_check",
          ],
          codespaceMachinesForAuthenticatedUser: [
            "GET /user/codespaces/{codespace_name}/machines",
          ],
          createForAuthenticatedUser: ["POST /user/codespaces"],
          createOrUpdateOrgSecret: [
            "PUT /orgs/{org}/codespaces/secrets/{secret_name}",
          ],
          createOrUpdateRepoSecret: [
            "PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
          ],
          createOrUpdateSecretForAuthenticatedUser: [
            "PUT /user/codespaces/secrets/{secret_name}",
          ],
          createWithPrForAuthenticatedUser: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces",
          ],
          createWithRepoForAuthenticatedUser: [
            "POST /repos/{owner}/{repo}/codespaces",
          ],
          deleteForAuthenticatedUser: [
            "DELETE /user/codespaces/{codespace_name}",
          ],
          deleteFromOrganization: [
            "DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}",
          ],
          deleteOrgSecret: [
            "DELETE /orgs/{org}/codespaces/secrets/{secret_name}",
          ],
          deleteRepoSecret: [
            "DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
          ],
          deleteSecretForAuthenticatedUser: [
            "DELETE /user/codespaces/secrets/{secret_name}",
          ],
          exportForAuthenticatedUser: [
            "POST /user/codespaces/{codespace_name}/exports",
          ],
          getCodespacesForUserInOrg: [
            "GET /orgs/{org}/members/{username}/codespaces",
          ],
          getExportDetailsForAuthenticatedUser: [
            "GET /user/codespaces/{codespace_name}/exports/{export_id}",
          ],
          getForAuthenticatedUser: ["GET /user/codespaces/{codespace_name}"],
          getOrgPublicKey: ["GET /orgs/{org}/codespaces/secrets/public-key"],
          getOrgSecret: ["GET /orgs/{org}/codespaces/secrets/{secret_name}"],
          getPublicKeyForAuthenticatedUser: [
            "GET /user/codespaces/secrets/public-key",
          ],
          getRepoPublicKey: [
            "GET /repos/{owner}/{repo}/codespaces/secrets/public-key",
          ],
          getRepoSecret: [
            "GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}",
          ],
          getSecretForAuthenticatedUser: [
            "GET /user/codespaces/secrets/{secret_name}",
          ],
          listDevcontainersInRepositoryForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/codespaces/devcontainers",
          ],
          listForAuthenticatedUser: ["GET /user/codespaces"],
          listInOrganization: [
            "GET /orgs/{org}/codespaces",
            {},
            { renamedParameters: { org_id: "org" } },
          ],
          listInRepositoryForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/codespaces",
          ],
          listOrgSecrets: ["GET /orgs/{org}/codespaces/secrets"],
          listRepoSecrets: ["GET /repos/{owner}/{repo}/codespaces/secrets"],
          listRepositoriesForSecretForAuthenticatedUser: [
            "GET /user/codespaces/secrets/{secret_name}/repositories",
          ],
          listSecretsForAuthenticatedUser: ["GET /user/codespaces/secrets"],
          listSelectedReposForOrgSecret: [
            "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
          ],
          preFlightWithRepoForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/codespaces/new",
          ],
          publishForAuthenticatedUser: [
            "POST /user/codespaces/{codespace_name}/publish",
          ],
          removeRepositoryForSecretForAuthenticatedUser: [
            "DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}",
          ],
          removeSelectedRepoFromOrgSecret: [
            "DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}",
          ],
          repoMachinesForAuthenticatedUser: [
            "GET /repos/{owner}/{repo}/codespaces/machines",
          ],
          setRepositoriesForSecretForAuthenticatedUser: [
            "PUT /user/codespaces/secrets/{secret_name}/repositories",
          ],
          setSelectedReposForOrgSecret: [
            "PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
          ],
          startForAuthenticatedUser: [
            "POST /user/codespaces/{codespace_name}/start",
          ],
          stopForAuthenticatedUser: [
            "POST /user/codespaces/{codespace_name}/stop",
          ],
          stopInOrganization: [
            "POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop",
          ],
          updateForAuthenticatedUser: [
            "PATCH /user/codespaces/{codespace_name}",
          ],
        },
        copilot: {
          addCopilotSeatsForTeams: [
            "POST /orgs/{org}/copilot/billing/selected_teams",
          ],
          addCopilotSeatsForUsers: [
            "POST /orgs/{org}/copilot/billing/selected_users",
          ],
          cancelCopilotSeatAssignmentForTeams: [
            "DELETE /orgs/{org}/copilot/billing/selected_teams",
          ],
          cancelCopilotSeatAssignmentForUsers: [
            "DELETE /orgs/{org}/copilot/billing/selected_users",
          ],
          getCopilotOrganizationDetails: ["GET /orgs/{org}/copilot/billing"],
          getCopilotSeatDetailsForUser: [
            "GET /orgs/{org}/members/{username}/copilot",
          ],
          listCopilotSeats: ["GET /orgs/{org}/copilot/billing/seats"],
        },
        dependabot: {
          addSelectedRepoToOrgSecret: [
            "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}",
          ],
          createOrUpdateOrgSecret: [
            "PUT /orgs/{org}/dependabot/secrets/{secret_name}",
          ],
          createOrUpdateRepoSecret: [
            "PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
          ],
          deleteOrgSecret: [
            "DELETE /orgs/{org}/dependabot/secrets/{secret_name}",
          ],
          deleteRepoSecret: [
            "DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
          ],
          getAlert: [
            "GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}",
          ],
          getOrgPublicKey: ["GET /orgs/{org}/dependabot/secrets/public-key"],
          getOrgSecret: ["GET /orgs/{org}/dependabot/secrets/{secret_name}"],
          getRepoPublicKey: [
            "GET /repos/{owner}/{repo}/dependabot/secrets/public-key",
          ],
          getRepoSecret: [
            "GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}",
          ],
          listAlertsForEnterprise: [
            "GET /enterprises/{enterprise}/dependabot/alerts",
          ],
          listAlertsForOrg: ["GET /orgs/{org}/dependabot/alerts"],
          listAlertsForRepo: ["GET /repos/{owner}/{repo}/dependabot/alerts"],
          listOrgSecrets: ["GET /orgs/{org}/dependabot/secrets"],
          listRepoSecrets: ["GET /repos/{owner}/{repo}/dependabot/secrets"],
          listSelectedReposForOrgSecret: [
            "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
          ],
          removeSelectedRepoFromOrgSecret: [
            "DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}",
          ],
          setSelectedReposForOrgSecret: [
            "PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
          ],
          updateAlert: [
            "PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}",
          ],
        },
        dependencyGraph: {
          createRepositorySnapshot: [
            "POST /repos/{owner}/{repo}/dependency-graph/snapshots",
          ],
          diffRange: [
            "GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}",
          ],
          exportSbom: ["GET /repos/{owner}/{repo}/dependency-graph/sbom"],
        },
        emojis: { get: ["GET /emojis"] },
        gists: {
          checkIsStarred: ["GET /gists/{gist_id}/star"],
          create: ["POST /gists"],
          createComment: ["POST /gists/{gist_id}/comments"],
          delete: ["DELETE /gists/{gist_id}"],
          deleteComment: ["DELETE /gists/{gist_id}/comments/{comment_id}"],
          fork: ["POST /gists/{gist_id}/forks"],
          get: ["GET /gists/{gist_id}"],
          getComment: ["GET /gists/{gist_id}/comments/{comment_id}"],
          getRevision: ["GET /gists/{gist_id}/{sha}"],
          list: ["GET /gists"],
          listComments: ["GET /gists/{gist_id}/comments"],
          listCommits: ["GET /gists/{gist_id}/commits"],
          listForUser: ["GET /users/{username}/gists"],
          listForks: ["GET /gists/{gist_id}/forks"],
          listPublic: ["GET /gists/public"],
          listStarred: ["GET /gists/starred"],
          star: ["PUT /gists/{gist_id}/star"],
          unstar: ["DELETE /gists/{gist_id}/star"],
          update: ["PATCH /gists/{gist_id}"],
          updateComment: ["PATCH /gists/{gist_id}/comments/{comment_id}"],
        },
        git: {
          createBlob: ["POST /repos/{owner}/{repo}/git/blobs"],
          createCommit: ["POST /repos/{owner}/{repo}/git/commits"],
          createRef: ["POST /repos/{owner}/{repo}/git/refs"],
          createTag: ["POST /repos/{owner}/{repo}/git/tags"],
          createTree: ["POST /repos/{owner}/{repo}/git/trees"],
          deleteRef: ["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],
          getBlob: ["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],
          getCommit: ["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],
          getRef: ["GET /repos/{owner}/{repo}/git/ref/{ref}"],
          getTag: ["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],
          getTree: ["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],
          listMatchingRefs: [
            "GET /repos/{owner}/{repo}/git/matching-refs/{ref}",
          ],
          updateRef: ["PATCH /repos/{owner}/{repo}/git/refs/{ref}"],
        },
        gitignore: {
          getAllTemplates: ["GET /gitignore/templates"],
          getTemplate: ["GET /gitignore/templates/{name}"],
        },
        interactions: {
          getRestrictionsForAuthenticatedUser: ["GET /user/interaction-limits"],
          getRestrictionsForOrg: ["GET /orgs/{org}/interaction-limits"],
          getRestrictionsForRepo: [
            "GET /repos/{owner}/{repo}/interaction-limits",
          ],
          getRestrictionsForYourPublicRepos: [
            "GET /user/interaction-limits",
            {},
            {
              renamed: ["interactions", "getRestrictionsForAuthenticatedUser"],
            },
          ],
          removeRestrictionsForAuthenticatedUser: [
            "DELETE /user/interaction-limits",
          ],
          removeRestrictionsForOrg: ["DELETE /orgs/{org}/interaction-limits"],
          removeRestrictionsForRepo: [
            "DELETE /repos/{owner}/{repo}/interaction-limits",
          ],
          removeRestrictionsForYourPublicRepos: [
            "DELETE /user/interaction-limits",
            {},
            {
              renamed: [
                "interactions",
                "removeRestrictionsForAuthenticatedUser",
              ],
            },
          ],
          setRestrictionsForAuthenticatedUser: ["PUT /user/interaction-limits"],
          setRestrictionsForOrg: ["PUT /orgs/{org}/interaction-limits"],
          setRestrictionsForRepo: [
            "PUT /repos/{owner}/{repo}/interaction-limits",
          ],
          setRestrictionsForYourPublicRepos: [
            "PUT /user/interaction-limits",
            {},
            {
              renamed: ["interactions", "setRestrictionsForAuthenticatedUser"],
            },
          ],
        },
        issues: {
          addAssignees: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/assignees",
          ],
          addLabels: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/labels",
          ],
          checkUserCanBeAssigned: [
            "GET /repos/{owner}/{repo}/assignees/{assignee}",
          ],
          checkUserCanBeAssignedToIssue: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}",
          ],
          create: ["POST /repos/{owner}/{repo}/issues"],
          createComment: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/comments",
          ],
          createLabel: ["POST /repos/{owner}/{repo}/labels"],
          createMilestone: ["POST /repos/{owner}/{repo}/milestones"],
          deleteComment: [
            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}",
          ],
          deleteLabel: ["DELETE /repos/{owner}/{repo}/labels/{name}"],
          deleteMilestone: [
            "DELETE /repos/{owner}/{repo}/milestones/{milestone_number}",
          ],
          get: ["GET /repos/{owner}/{repo}/issues/{issue_number}"],
          getComment: [
            "GET /repos/{owner}/{repo}/issues/comments/{comment_id}",
          ],
          getEvent: ["GET /repos/{owner}/{repo}/issues/events/{event_id}"],
          getLabel: ["GET /repos/{owner}/{repo}/labels/{name}"],
          getMilestone: [
            "GET /repos/{owner}/{repo}/milestones/{milestone_number}",
          ],
          list: ["GET /issues"],
          listAssignees: ["GET /repos/{owner}/{repo}/assignees"],
          listComments: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
          ],
          listCommentsForRepo: ["GET /repos/{owner}/{repo}/issues/comments"],
          listEvents: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
          ],
          listEventsForRepo: ["GET /repos/{owner}/{repo}/issues/events"],
          listEventsForTimeline: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
          ],
          listForAuthenticatedUser: ["GET /user/issues"],
          listForOrg: ["GET /orgs/{org}/issues"],
          listForRepo: ["GET /repos/{owner}/{repo}/issues"],
          listLabelsForMilestone: [
            "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
          ],
          listLabelsForRepo: ["GET /repos/{owner}/{repo}/labels"],
          listLabelsOnIssue: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
          ],
          listMilestones: ["GET /repos/{owner}/{repo}/milestones"],
          lock: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],
          removeAllLabels: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels",
          ],
          removeAssignees: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees",
          ],
          removeLabel: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}",
          ],
          setLabels: ["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],
          unlock: ["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],
          update: ["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],
          updateComment: [
            "PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}",
          ],
          updateLabel: ["PATCH /repos/{owner}/{repo}/labels/{name}"],
          updateMilestone: [
            "PATCH /repos/{owner}/{repo}/milestones/{milestone_number}",
          ],
        },
        licenses: {
          get: ["GET /licenses/{license}"],
          getAllCommonlyUsed: ["GET /licenses"],
          getForRepo: ["GET /repos/{owner}/{repo}/license"],
        },
        markdown: {
          render: ["POST /markdown"],
          renderRaw: [
            "POST /markdown/raw",
            { headers: { "content-type": "text/plain; charset=utf-8" } },
          ],
        },
        meta: {
          get: ["GET /meta"],
          getAllVersions: ["GET /versions"],
          getOctocat: ["GET /octocat"],
          getZen: ["GET /zen"],
          root: ["GET /"],
        },
        migrations: {
          cancelImport: [
            "DELETE /repos/{owner}/{repo}/import",
            {},
            {
              deprecated:
                "octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import",
            },
          ],
          deleteArchiveForAuthenticatedUser: [
            "DELETE /user/migrations/{migration_id}/archive",
          ],
          deleteArchiveForOrg: [
            "DELETE /orgs/{org}/migrations/{migration_id}/archive",
          ],
          downloadArchiveForOrg: [
            "GET /orgs/{org}/migrations/{migration_id}/archive",
          ],
          getArchiveForAuthenticatedUser: [
            "GET /user/migrations/{migration_id}/archive",
          ],
          getCommitAuthors: [
            "GET /repos/{owner}/{repo}/import/authors",
            {},
            {
              deprecated:
                "octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors",
            },
          ],
          getImportStatus: [
            "GET /repos/{owner}/{repo}/import",
            {},
            {
              deprecated:
                "octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status",
            },
          ],
          getLargeFiles: [
            "GET /repos/{owner}/{repo}/import/large_files",
            {},
            {
              deprecated:
                "octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files",
            },
          ],
          getStatusForAuthenticatedUser: [
            "GET /user/migrations/{migration_id}",
          ],
          getStatusForOrg: ["GET /orgs/{org}/migrations/{migration_id}"],
          listForAuthenticatedUser: ["GET /user/migrations"],
          listForOrg: ["GET /orgs/{org}/migrations"],
          listReposForAuthenticatedUser: [
            "GET /user/migrations/{migration_id}/repositories",
          ],
          listReposForOrg: [
            "GET /orgs/{org}/migrations/{migration_id}/repositories",
          ],
          listReposForUser: [
            "GET /user/migrations/{migration_id}/repositories",
            {},
            { renamed: ["migrations", "listReposForAuthenticatedUser"] },
          ],
          mapCommitAuthor: [
            "PATCH /repos/{owner}/{repo}/import/authors/{author_id}",
            {},
            {
              deprecated:
                "octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author",
            },
          ],
          setLfsPreference: [
            "PATCH /repos/{owner}/{repo}/import/lfs",
            {},
            {
              deprecated:
                "octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference",
            },
          ],
          startForAuthenticatedUser: ["POST /user/migrations"],
          startForOrg: ["POST /orgs/{org}/migrations"],
          startImport: [
            "PUT /repos/{owner}/{repo}/import",
            {},
            {
              deprecated:
                "octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import",
            },
          ],
          unlockRepoForAuthenticatedUser: [
            "DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock",
          ],
          unlockRepoForOrg: [
            "DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock",
          ],
          updateImport: [
            "PATCH /repos/{owner}/{repo}/import",
            {},
            {
              deprecated:
                "octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import",
            },
          ],
        },
        oidc: {
          getOidcCustomSubTemplateForOrg: [
            "GET /orgs/{org}/actions/oidc/customization/sub",
          ],
          updateOidcCustomSubTemplateForOrg: [
            "PUT /orgs/{org}/actions/oidc/customization/sub",
          ],
        },
        orgs: {
          addSecurityManagerTeam: [
            "PUT /orgs/{org}/security-managers/teams/{team_slug}",
          ],
          assignTeamToOrgRole: [
            "PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}",
          ],
          assignUserToOrgRole: [
            "PUT /orgs/{org}/organization-roles/users/{username}/{role_id}",
          ],
          blockUser: ["PUT /orgs/{org}/blocks/{username}"],
          cancelInvitation: ["DELETE /orgs/{org}/invitations/{invitation_id}"],
          checkBlockedUser: ["GET /orgs/{org}/blocks/{username}"],
          checkMembershipForUser: ["GET /orgs/{org}/members/{username}"],
          checkPublicMembershipForUser: [
            "GET /orgs/{org}/public_members/{username}",
          ],
          convertMemberToOutsideCollaborator: [
            "PUT /orgs/{org}/outside_collaborators/{username}",
          ],
          createCustomOrganizationRole: ["POST /orgs/{org}/organization-roles"],
          createInvitation: ["POST /orgs/{org}/invitations"],
          createOrUpdateCustomProperties: [
            "PATCH /orgs/{org}/properties/schema",
          ],
          createOrUpdateCustomPropertiesValuesForRepos: [
            "PATCH /orgs/{org}/properties/values",
          ],
          createOrUpdateCustomProperty: [
            "PUT /orgs/{org}/properties/schema/{custom_property_name}",
          ],
          createWebhook: ["POST /orgs/{org}/hooks"],
          delete: ["DELETE /orgs/{org}"],
          deleteCustomOrganizationRole: [
            "DELETE /orgs/{org}/organization-roles/{role_id}",
          ],
          deleteWebhook: ["DELETE /orgs/{org}/hooks/{hook_id}"],
          enableOrDisableSecurityProductOnAllOrgRepos: [
            "POST /orgs/{org}/{security_product}/{enablement}",
          ],
          get: ["GET /orgs/{org}"],
          getAllCustomProperties: ["GET /orgs/{org}/properties/schema"],
          getCustomProperty: [
            "GET /orgs/{org}/properties/schema/{custom_property_name}",
          ],
          getMembershipForAuthenticatedUser: [
            "GET /user/memberships/orgs/{org}",
          ],
          getMembershipForUser: ["GET /orgs/{org}/memberships/{username}"],
          getOrgRole: ["GET /orgs/{org}/organization-roles/{role_id}"],
          getWebhook: ["GET /orgs/{org}/hooks/{hook_id}"],
          getWebhookConfigForOrg: ["GET /orgs/{org}/hooks/{hook_id}/config"],
          getWebhookDelivery: [
            "GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}",
          ],
          list: ["GET /organizations"],
          listAppInstallations: ["GET /orgs/{org}/installations"],
          listBlockedUsers: ["GET /orgs/{org}/blocks"],
          listCustomPropertiesValuesForRepos: [
            "GET /orgs/{org}/properties/values",
          ],
          listFailedInvitations: ["GET /orgs/{org}/failed_invitations"],
          listForAuthenticatedUser: ["GET /user/orgs"],
          listForUser: ["GET /users/{username}/orgs"],
          listInvitationTeams: [
            "GET /orgs/{org}/invitations/{invitation_id}/teams",
          ],
          listMembers: ["GET /orgs/{org}/members"],
          listMembershipsForAuthenticatedUser: ["GET /user/memberships/orgs"],
          listOrgRoleTeams: [
            "GET /orgs/{org}/organization-roles/{role_id}/teams",
          ],
          listOrgRoleUsers: [
            "GET /orgs/{org}/organization-roles/{role_id}/users",
          ],
          listOrgRoles: ["GET /orgs/{org}/organization-roles"],
          listOrganizationFineGrainedPermissions: [
            "GET /orgs/{org}/organization-fine-grained-permissions",
          ],
          listOutsideCollaborators: ["GET /orgs/{org}/outside_collaborators"],
          listPatGrantRepositories: [
            "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
          ],
          listPatGrantRequestRepositories: [
            "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
          ],
          listPatGrantRequests: [
            "GET /orgs/{org}/personal-access-token-requests",
          ],
          listPatGrants: ["GET /orgs/{org}/personal-access-tokens"],
          listPendingInvitations: ["GET /orgs/{org}/invitations"],
          listPublicMembers: ["GET /orgs/{org}/public_members"],
          listSecurityManagerTeams: ["GET /orgs/{org}/security-managers"],
          listWebhookDeliveries: ["GET /orgs/{org}/hooks/{hook_id}/deliveries"],
          listWebhooks: ["GET /orgs/{org}/hooks"],
          patchCustomOrganizationRole: [
            "PATCH /orgs/{org}/organization-roles/{role_id}",
          ],
          pingWebhook: ["POST /orgs/{org}/hooks/{hook_id}/pings"],
          redeliverWebhookDelivery: [
            "POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
          ],
          removeCustomProperty: [
            "DELETE /orgs/{org}/properties/schema/{custom_property_name}",
          ],
          removeMember: ["DELETE /orgs/{org}/members/{username}"],
          removeMembershipForUser: [
            "DELETE /orgs/{org}/memberships/{username}",
          ],
          removeOutsideCollaborator: [
            "DELETE /orgs/{org}/outside_collaborators/{username}",
          ],
          removePublicMembershipForAuthenticatedUser: [
            "DELETE /orgs/{org}/public_members/{username}",
          ],
          removeSecurityManagerTeam: [
            "DELETE /orgs/{org}/security-managers/teams/{team_slug}",
          ],
          reviewPatGrantRequest: [
            "POST /orgs/{org}/personal-access-token-requests/{pat_request_id}",
          ],
          reviewPatGrantRequestsInBulk: [
            "POST /orgs/{org}/personal-access-token-requests",
          ],
          revokeAllOrgRolesTeam: [
            "DELETE /orgs/{org}/organization-roles/teams/{team_slug}",
          ],
          revokeAllOrgRolesUser: [
            "DELETE /orgs/{org}/organization-roles/users/{username}",
          ],
          revokeOrgRoleTeam: [
            "DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}",
          ],
          revokeOrgRoleUser: [
            "DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}",
          ],
          setMembershipForUser: ["PUT /orgs/{org}/memberships/{username}"],
          setPublicMembershipForAuthenticatedUser: [
            "PUT /orgs/{org}/public_members/{username}",
          ],
          unblockUser: ["DELETE /orgs/{org}/blocks/{username}"],
          update: ["PATCH /orgs/{org}"],
          updateMembershipForAuthenticatedUser: [
            "PATCH /user/memberships/orgs/{org}",
          ],
          updatePatAccess: ["POST /orgs/{org}/personal-access-tokens/{pat_id}"],
          updatePatAccesses: ["POST /orgs/{org}/personal-access-tokens"],
          updateWebhook: ["PATCH /orgs/{org}/hooks/{hook_id}"],
          updateWebhookConfigForOrg: [
            "PATCH /orgs/{org}/hooks/{hook_id}/config",
          ],
        },
        packages: {
          deletePackageForAuthenticatedUser: [
            "DELETE /user/packages/{package_type}/{package_name}",
          ],
          deletePackageForOrg: [
            "DELETE /orgs/{org}/packages/{package_type}/{package_name}",
          ],
          deletePackageForUser: [
            "DELETE /users/{username}/packages/{package_type}/{package_name}",
          ],
          deletePackageVersionForAuthenticatedUser: [
            "DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}",
          ],
          deletePackageVersionForOrg: [
            "DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
          ],
          deletePackageVersionForUser: [
            "DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
          ],
          getAllPackageVersionsForAPackageOwnedByAnOrg: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
            {},
            {
              renamed: [
                "packages",
                "getAllPackageVersionsForPackageOwnedByOrg",
              ],
            },
          ],
          getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions",
            {},
            {
              renamed: [
                "packages",
                "getAllPackageVersionsForPackageOwnedByAuthenticatedUser",
              ],
            },
          ],
          getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions",
          ],
          getAllPackageVersionsForPackageOwnedByOrg: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
          ],
          getAllPackageVersionsForPackageOwnedByUser: [
            "GET /users/{username}/packages/{package_type}/{package_name}/versions",
          ],
          getPackageForAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}",
          ],
          getPackageForOrganization: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}",
          ],
          getPackageForUser: [
            "GET /users/{username}/packages/{package_type}/{package_name}",
          ],
          getPackageVersionForAuthenticatedUser: [
            "GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}",
          ],
          getPackageVersionForOrganization: [
            "GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}",
          ],
          getPackageVersionForUser: [
            "GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}",
          ],
          listDockerMigrationConflictingPackagesForAuthenticatedUser: [
            "GET /user/docker/conflicts",
          ],
          listDockerMigrationConflictingPackagesForOrganization: [
            "GET /orgs/{org}/docker/conflicts",
          ],
          listDockerMigrationConflictingPackagesForUser: [
            "GET /users/{username}/docker/conflicts",
          ],
          listPackagesForAuthenticatedUser: ["GET /user/packages"],
          listPackagesForOrganization: ["GET /orgs/{org}/packages"],
          listPackagesForUser: ["GET /users/{username}/packages"],
          restorePackageForAuthenticatedUser: [
            "POST /user/packages/{package_type}/{package_name}/restore{?token}",
          ],
          restorePackageForOrg: [
            "POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}",
          ],
          restorePackageForUser: [
            "POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}",
          ],
          restorePackageVersionForAuthenticatedUser: [
            "POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
          ],
          restorePackageVersionForOrg: [
            "POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
          ],
          restorePackageVersionForUser: [
            "POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore",
          ],
        },
        projects: {
          addCollaborator: [
            "PUT /projects/{project_id}/collaborators/{username}",
          ],
          createCard: ["POST /projects/columns/{column_id}/cards"],
          createColumn: ["POST /projects/{project_id}/columns"],
          createForAuthenticatedUser: ["POST /user/projects"],
          createForOrg: ["POST /orgs/{org}/projects"],
          createForRepo: ["POST /repos/{owner}/{repo}/projects"],
          delete: ["DELETE /projects/{project_id}"],
          deleteCard: ["DELETE /projects/columns/cards/{card_id}"],
          deleteColumn: ["DELETE /projects/columns/{column_id}"],
          get: ["GET /projects/{project_id}"],
          getCard: ["GET /projects/columns/cards/{card_id}"],
          getColumn: ["GET /projects/columns/{column_id}"],
          getPermissionForUser: [
            "GET /projects/{project_id}/collaborators/{username}/permission",
          ],
          listCards: ["GET /projects/columns/{column_id}/cards"],
          listCollaborators: ["GET /projects/{project_id}/collaborators"],
          listColumns: ["GET /projects/{project_id}/columns"],
          listForOrg: ["GET /orgs/{org}/projects"],
          listForRepo: ["GET /repos/{owner}/{repo}/projects"],
          listForUser: ["GET /users/{username}/projects"],
          moveCard: ["POST /projects/columns/cards/{card_id}/moves"],
          moveColumn: ["POST /projects/columns/{column_id}/moves"],
          removeCollaborator: [
            "DELETE /projects/{project_id}/collaborators/{username}",
          ],
          update: ["PATCH /projects/{project_id}"],
          updateCard: ["PATCH /projects/columns/cards/{card_id}"],
          updateColumn: ["PATCH /projects/columns/{column_id}"],
        },
        pulls: {
          checkIfMerged: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/merge",
          ],
          create: ["POST /repos/{owner}/{repo}/pulls"],
          createReplyForReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
          ],
          createReview: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
          ],
          createReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/comments",
          ],
          deletePendingReview: [
            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
          ],
          deleteReviewComment: [
            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}",
          ],
          dismissReview: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals",
          ],
          get: ["GET /repos/{owner}/{repo}/pulls/{pull_number}"],
          getReview: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
          ],
          getReviewComment: [
            "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}",
          ],
          list: ["GET /repos/{owner}/{repo}/pulls"],
          listCommentsForReview: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
          ],
          listCommits: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
          ],
          listFiles: ["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],
          listRequestedReviewers: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
          ],
          listReviewComments: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
          ],
          listReviewCommentsForRepo: [
            "GET /repos/{owner}/{repo}/pulls/comments",
          ],
          listReviews: [
            "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
          ],
          merge: ["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],
          removeRequestedReviewers: [
            "DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
          ],
          requestReviewers: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
          ],
          submitReview: [
            "POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events",
          ],
          update: ["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],
          updateBranch: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch",
          ],
          updateReview: [
            "PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}",
          ],
          updateReviewComment: [
            "PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}",
          ],
        },
        rateLimit: { get: ["GET /rate_limit"] },
        reactions: {
          createForCommitComment: [
            "POST /repos/{owner}/{repo}/comments/{comment_id}/reactions",
          ],
          createForIssue: [
            "POST /repos/{owner}/{repo}/issues/{issue_number}/reactions",
          ],
          createForIssueComment: [
            "POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
          ],
          createForPullRequestReviewComment: [
            "POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
          ],
          createForRelease: [
            "POST /repos/{owner}/{repo}/releases/{release_id}/reactions",
          ],
          createForTeamDiscussionCommentInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
          ],
          createForTeamDiscussionInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
          ],
          deleteForCommitComment: [
            "DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}",
          ],
          deleteForIssue: [
            "DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}",
          ],
          deleteForIssueComment: [
            "DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}",
          ],
          deleteForPullRequestComment: [
            "DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}",
          ],
          deleteForRelease: [
            "DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}",
          ],
          deleteForTeamDiscussion: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}",
          ],
          deleteForTeamDiscussionComment: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}",
          ],
          listForCommitComment: [
            "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
          ],
          listForIssue: [
            "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
          ],
          listForIssueComment: [
            "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
          ],
          listForPullRequestReviewComment: [
            "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
          ],
          listForRelease: [
            "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
          ],
          listForTeamDiscussionCommentInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
          ],
          listForTeamDiscussionInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
          ],
        },
        repos: {
          acceptInvitation: [
            "PATCH /user/repository_invitations/{invitation_id}",
            {},
            { renamed: ["repos", "acceptInvitationForAuthenticatedUser"] },
          ],
          acceptInvitationForAuthenticatedUser: [
            "PATCH /user/repository_invitations/{invitation_id}",
          ],
          addAppAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            { mapToData: "apps" },
          ],
          addCollaborator: [
            "PUT /repos/{owner}/{repo}/collaborators/{username}",
          ],
          addStatusCheckContexts: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            { mapToData: "contexts" },
          ],
          addTeamAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            { mapToData: "teams" },
          ],
          addUserAccessRestrictions: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            { mapToData: "users" },
          ],
          cancelPagesDeployment: [
            "POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel",
          ],
          checkAutomatedSecurityFixes: [
            "GET /repos/{owner}/{repo}/automated-security-fixes",
          ],
          checkCollaborator: [
            "GET /repos/{owner}/{repo}/collaborators/{username}",
          ],
          checkVulnerabilityAlerts: [
            "GET /repos/{owner}/{repo}/vulnerability-alerts",
          ],
          codeownersErrors: ["GET /repos/{owner}/{repo}/codeowners/errors"],
          compareCommits: ["GET /repos/{owner}/{repo}/compare/{base}...{head}"],
          compareCommitsWithBasehead: [
            "GET /repos/{owner}/{repo}/compare/{basehead}",
          ],
          createAutolink: ["POST /repos/{owner}/{repo}/autolinks"],
          createCommitComment: [
            "POST /repos/{owner}/{repo}/commits/{commit_sha}/comments",
          ],
          createCommitSignatureProtection: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
          ],
          createCommitStatus: ["POST /repos/{owner}/{repo}/statuses/{sha}"],
          createDeployKey: ["POST /repos/{owner}/{repo}/keys"],
          createDeployment: ["POST /repos/{owner}/{repo}/deployments"],
          createDeploymentBranchPolicy: [
            "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
          ],
          createDeploymentProtectionRule: [
            "POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules",
          ],
          createDeploymentStatus: [
            "POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
          ],
          createDispatchEvent: ["POST /repos/{owner}/{repo}/dispatches"],
          createForAuthenticatedUser: ["POST /user/repos"],
          createFork: ["POST /repos/{owner}/{repo}/forks"],
          createInOrg: ["POST /orgs/{org}/repos"],
          createOrUpdateCustomPropertiesValues: [
            "PATCH /repos/{owner}/{repo}/properties/values",
          ],
          createOrUpdateEnvironment: [
            "PUT /repos/{owner}/{repo}/environments/{environment_name}",
          ],
          createOrUpdateFileContents: [
            "PUT /repos/{owner}/{repo}/contents/{path}",
          ],
          createOrgRuleset: ["POST /orgs/{org}/rulesets"],
          createPagesDeployment: [
            "POST /repos/{owner}/{repo}/pages/deployments",
          ],
          createPagesSite: ["POST /repos/{owner}/{repo}/pages"],
          createRelease: ["POST /repos/{owner}/{repo}/releases"],
          createRepoRuleset: ["POST /repos/{owner}/{repo}/rulesets"],
          createTagProtection: ["POST /repos/{owner}/{repo}/tags/protection"],
          createUsingTemplate: [
            "POST /repos/{template_owner}/{template_repo}/generate",
          ],
          createWebhook: ["POST /repos/{owner}/{repo}/hooks"],
          declineInvitation: [
            "DELETE /user/repository_invitations/{invitation_id}",
            {},
            { renamed: ["repos", "declineInvitationForAuthenticatedUser"] },
          ],
          declineInvitationForAuthenticatedUser: [
            "DELETE /user/repository_invitations/{invitation_id}",
          ],
          delete: ["DELETE /repos/{owner}/{repo}"],
          deleteAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
          ],
          deleteAdminBranchProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
          ],
          deleteAnEnvironment: [
            "DELETE /repos/{owner}/{repo}/environments/{environment_name}",
          ],
          deleteAutolink: [
            "DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}",
          ],
          deleteBranchProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection",
          ],
          deleteCommitComment: [
            "DELETE /repos/{owner}/{repo}/comments/{comment_id}",
          ],
          deleteCommitSignatureProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
          ],
          deleteDeployKey: ["DELETE /repos/{owner}/{repo}/keys/{key_id}"],
          deleteDeployment: [
            "DELETE /repos/{owner}/{repo}/deployments/{deployment_id}",
          ],
          deleteDeploymentBranchPolicy: [
            "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
          ],
          deleteFile: ["DELETE /repos/{owner}/{repo}/contents/{path}"],
          deleteInvitation: [
            "DELETE /repos/{owner}/{repo}/invitations/{invitation_id}",
          ],
          deleteOrgRuleset: ["DELETE /orgs/{org}/rulesets/{ruleset_id}"],
          deletePagesSite: ["DELETE /repos/{owner}/{repo}/pages"],
          deletePullRequestReviewProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
          ],
          deleteRelease: ["DELETE /repos/{owner}/{repo}/releases/{release_id}"],
          deleteReleaseAsset: [
            "DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}",
          ],
          deleteRepoRuleset: [
            "DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}",
          ],
          deleteTagProtection: [
            "DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}",
          ],
          deleteWebhook: ["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],
          disableAutomatedSecurityFixes: [
            "DELETE /repos/{owner}/{repo}/automated-security-fixes",
          ],
          disableDeploymentProtectionRule: [
            "DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}",
          ],
          disablePrivateVulnerabilityReporting: [
            "DELETE /repos/{owner}/{repo}/private-vulnerability-reporting",
          ],
          disableVulnerabilityAlerts: [
            "DELETE /repos/{owner}/{repo}/vulnerability-alerts",
          ],
          downloadArchive: [
            "GET /repos/{owner}/{repo}/zipball/{ref}",
            {},
            { renamed: ["repos", "downloadZipballArchive"] },
          ],
          downloadTarballArchive: ["GET /repos/{owner}/{repo}/tarball/{ref}"],
          downloadZipballArchive: ["GET /repos/{owner}/{repo}/zipball/{ref}"],
          enableAutomatedSecurityFixes: [
            "PUT /repos/{owner}/{repo}/automated-security-fixes",
          ],
          enablePrivateVulnerabilityReporting: [
            "PUT /repos/{owner}/{repo}/private-vulnerability-reporting",
          ],
          enableVulnerabilityAlerts: [
            "PUT /repos/{owner}/{repo}/vulnerability-alerts",
          ],
          generateReleaseNotes: [
            "POST /repos/{owner}/{repo}/releases/generate-notes",
          ],
          get: ["GET /repos/{owner}/{repo}"],
          getAccessRestrictions: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions",
          ],
          getAdminBranchProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
          ],
          getAllDeploymentProtectionRules: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules",
          ],
          getAllEnvironments: ["GET /repos/{owner}/{repo}/environments"],
          getAllStatusCheckContexts: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
          ],
          getAllTopics: ["GET /repos/{owner}/{repo}/topics"],
          getAppsWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
          ],
          getAutolink: ["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],
          getBranch: ["GET /repos/{owner}/{repo}/branches/{branch}"],
          getBranchProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection",
          ],
          getBranchRules: ["GET /repos/{owner}/{repo}/rules/branches/{branch}"],
          getClones: ["GET /repos/{owner}/{repo}/traffic/clones"],
          getCodeFrequencyStats: [
            "GET /repos/{owner}/{repo}/stats/code_frequency",
          ],
          getCollaboratorPermissionLevel: [
            "GET /repos/{owner}/{repo}/collaborators/{username}/permission",
          ],
          getCombinedStatusForRef: [
            "GET /repos/{owner}/{repo}/commits/{ref}/status",
          ],
          getCommit: ["GET /repos/{owner}/{repo}/commits/{ref}"],
          getCommitActivityStats: [
            "GET /repos/{owner}/{repo}/stats/commit_activity",
          ],
          getCommitComment: ["GET /repos/{owner}/{repo}/comments/{comment_id}"],
          getCommitSignatureProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures",
          ],
          getCommunityProfileMetrics: [
            "GET /repos/{owner}/{repo}/community/profile",
          ],
          getContent: ["GET /repos/{owner}/{repo}/contents/{path}"],
          getContributorsStats: [
            "GET /repos/{owner}/{repo}/stats/contributors",
          ],
          getCustomDeploymentProtectionRule: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}",
          ],
          getCustomPropertiesValues: [
            "GET /repos/{owner}/{repo}/properties/values",
          ],
          getDeployKey: ["GET /repos/{owner}/{repo}/keys/{key_id}"],
          getDeployment: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}",
          ],
          getDeploymentBranchPolicy: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
          ],
          getDeploymentStatus: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}",
          ],
          getEnvironment: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}",
          ],
          getLatestPagesBuild: [
            "GET /repos/{owner}/{repo}/pages/builds/latest",
          ],
          getLatestRelease: ["GET /repos/{owner}/{repo}/releases/latest"],
          getOrgRuleSuite: [
            "GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}",
          ],
          getOrgRuleSuites: ["GET /orgs/{org}/rulesets/rule-suites"],
          getOrgRuleset: ["GET /orgs/{org}/rulesets/{ruleset_id}"],
          getOrgRulesets: ["GET /orgs/{org}/rulesets"],
          getPages: ["GET /repos/{owner}/{repo}/pages"],
          getPagesBuild: ["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],
          getPagesDeployment: [
            "GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}",
          ],
          getPagesHealthCheck: ["GET /repos/{owner}/{repo}/pages/health"],
          getParticipationStats: [
            "GET /repos/{owner}/{repo}/stats/participation",
          ],
          getPullRequestReviewProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
          ],
          getPunchCardStats: ["GET /repos/{owner}/{repo}/stats/punch_card"],
          getReadme: ["GET /repos/{owner}/{repo}/readme"],
          getReadmeInDirectory: ["GET /repos/{owner}/{repo}/readme/{dir}"],
          getRelease: ["GET /repos/{owner}/{repo}/releases/{release_id}"],
          getReleaseAsset: [
            "GET /repos/{owner}/{repo}/releases/assets/{asset_id}",
          ],
          getReleaseByTag: ["GET /repos/{owner}/{repo}/releases/tags/{tag}"],
          getRepoRuleSuite: [
            "GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}",
          ],
          getRepoRuleSuites: ["GET /repos/{owner}/{repo}/rulesets/rule-suites"],
          getRepoRuleset: ["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],
          getRepoRulesets: ["GET /repos/{owner}/{repo}/rulesets"],
          getStatusChecksProtection: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
          ],
          getTeamsWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
          ],
          getTopPaths: ["GET /repos/{owner}/{repo}/traffic/popular/paths"],
          getTopReferrers: [
            "GET /repos/{owner}/{repo}/traffic/popular/referrers",
          ],
          getUsersWithAccessToProtectedBranch: [
            "GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
          ],
          getViews: ["GET /repos/{owner}/{repo}/traffic/views"],
          getWebhook: ["GET /repos/{owner}/{repo}/hooks/{hook_id}"],
          getWebhookConfigForRepo: [
            "GET /repos/{owner}/{repo}/hooks/{hook_id}/config",
          ],
          getWebhookDelivery: [
            "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}",
          ],
          listActivities: ["GET /repos/{owner}/{repo}/activity"],
          listAutolinks: ["GET /repos/{owner}/{repo}/autolinks"],
          listBranches: ["GET /repos/{owner}/{repo}/branches"],
          listBranchesForHeadCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head",
          ],
          listCollaborators: ["GET /repos/{owner}/{repo}/collaborators"],
          listCommentsForCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
          ],
          listCommitCommentsForRepo: ["GET /repos/{owner}/{repo}/comments"],
          listCommitStatusesForRef: [
            "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
          ],
          listCommits: ["GET /repos/{owner}/{repo}/commits"],
          listContributors: ["GET /repos/{owner}/{repo}/contributors"],
          listCustomDeploymentRuleIntegrations: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
          ],
          listDeployKeys: ["GET /repos/{owner}/{repo}/keys"],
          listDeploymentBranchPolicies: [
            "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
          ],
          listDeploymentStatuses: [
            "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
          ],
          listDeployments: ["GET /repos/{owner}/{repo}/deployments"],
          listForAuthenticatedUser: ["GET /user/repos"],
          listForOrg: ["GET /orgs/{org}/repos"],
          listForUser: ["GET /users/{username}/repos"],
          listForks: ["GET /repos/{owner}/{repo}/forks"],
          listInvitations: ["GET /repos/{owner}/{repo}/invitations"],
          listInvitationsForAuthenticatedUser: [
            "GET /user/repository_invitations",
          ],
          listLanguages: ["GET /repos/{owner}/{repo}/languages"],
          listPagesBuilds: ["GET /repos/{owner}/{repo}/pages/builds"],
          listPublic: ["GET /repositories"],
          listPullRequestsAssociatedWithCommit: [
            "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
          ],
          listReleaseAssets: [
            "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
          ],
          listReleases: ["GET /repos/{owner}/{repo}/releases"],
          listTagProtection: ["GET /repos/{owner}/{repo}/tags/protection"],
          listTags: ["GET /repos/{owner}/{repo}/tags"],
          listTeams: ["GET /repos/{owner}/{repo}/teams"],
          listWebhookDeliveries: [
            "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
          ],
          listWebhooks: ["GET /repos/{owner}/{repo}/hooks"],
          merge: ["POST /repos/{owner}/{repo}/merges"],
          mergeUpstream: ["POST /repos/{owner}/{repo}/merge-upstream"],
          pingWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],
          redeliverWebhookDelivery: [
            "POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts",
          ],
          removeAppAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            { mapToData: "apps" },
          ],
          removeCollaborator: [
            "DELETE /repos/{owner}/{repo}/collaborators/{username}",
          ],
          removeStatusCheckContexts: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            { mapToData: "contexts" },
          ],
          removeStatusCheckProtection: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
          ],
          removeTeamAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            { mapToData: "teams" },
          ],
          removeUserAccessRestrictions: [
            "DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            { mapToData: "users" },
          ],
          renameBranch: ["POST /repos/{owner}/{repo}/branches/{branch}/rename"],
          replaceAllTopics: ["PUT /repos/{owner}/{repo}/topics"],
          requestPagesBuild: ["POST /repos/{owner}/{repo}/pages/builds"],
          setAdminBranchProtection: [
            "POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins",
          ],
          setAppAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",
            {},
            { mapToData: "apps" },
          ],
          setStatusCheckContexts: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",
            {},
            { mapToData: "contexts" },
          ],
          setTeamAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",
            {},
            { mapToData: "teams" },
          ],
          setUserAccessRestrictions: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",
            {},
            { mapToData: "users" },
          ],
          testPushWebhook: ["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],
          transfer: ["POST /repos/{owner}/{repo}/transfer"],
          update: ["PATCH /repos/{owner}/{repo}"],
          updateBranchProtection: [
            "PUT /repos/{owner}/{repo}/branches/{branch}/protection",
          ],
          updateCommitComment: [
            "PATCH /repos/{owner}/{repo}/comments/{comment_id}",
          ],
          updateDeploymentBranchPolicy: [
            "PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}",
          ],
          updateInformationAboutPagesSite: ["PUT /repos/{owner}/{repo}/pages"],
          updateInvitation: [
            "PATCH /repos/{owner}/{repo}/invitations/{invitation_id}",
          ],
          updateOrgRuleset: ["PUT /orgs/{org}/rulesets/{ruleset_id}"],
          updatePullRequestReviewProtection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews",
          ],
          updateRelease: ["PATCH /repos/{owner}/{repo}/releases/{release_id}"],
          updateReleaseAsset: [
            "PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}",
          ],
          updateRepoRuleset: [
            "PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}",
          ],
          updateStatusCheckPotection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
            {},
            { renamed: ["repos", "updateStatusCheckProtection"] },
          ],
          updateStatusCheckProtection: [
            "PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",
          ],
          updateWebhook: ["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],
          updateWebhookConfigForRepo: [
            "PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config",
          ],
          uploadReleaseAsset: [
            "POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",
            { baseUrl: "https://uploads.github.com" },
          ],
        },
        search: {
          code: ["GET /search/code"],
          commits: ["GET /search/commits"],
          issuesAndPullRequests: ["GET /search/issues"],
          labels: ["GET /search/labels"],
          repos: ["GET /search/repositories"],
          topics: ["GET /search/topics"],
          users: ["GET /search/users"],
        },
        secretScanning: {
          getAlert: [
            "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
          ],
          listAlertsForEnterprise: [
            "GET /enterprises/{enterprise}/secret-scanning/alerts",
          ],
          listAlertsForOrg: ["GET /orgs/{org}/secret-scanning/alerts"],
          listAlertsForRepo: [
            "GET /repos/{owner}/{repo}/secret-scanning/alerts",
          ],
          listLocationsForAlert: [
            "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
          ],
          updateAlert: [
            "PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}",
          ],
        },
        securityAdvisories: {
          createFork: [
            "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks",
          ],
          createPrivateVulnerabilityReport: [
            "POST /repos/{owner}/{repo}/security-advisories/reports",
          ],
          createRepositoryAdvisory: [
            "POST /repos/{owner}/{repo}/security-advisories",
          ],
          createRepositoryAdvisoryCveRequest: [
            "POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve",
          ],
          getGlobalAdvisory: ["GET /advisories/{ghsa_id}"],
          getRepositoryAdvisory: [
            "GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}",
          ],
          listGlobalAdvisories: ["GET /advisories"],
          listOrgRepositoryAdvisories: ["GET /orgs/{org}/security-advisories"],
          listRepositoryAdvisories: [
            "GET /repos/{owner}/{repo}/security-advisories",
          ],
          updateRepositoryAdvisory: [
            "PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}",
          ],
        },
        teams: {
          addOrUpdateMembershipForUserInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/memberships/{username}",
          ],
          addOrUpdateProjectPermissionsInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",
          ],
          addOrUpdateRepoPermissionsInOrg: [
            "PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
          ],
          checkPermissionsForProjectInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",
          ],
          checkPermissionsForRepoInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
          ],
          create: ["POST /orgs/{org}/teams"],
          createDiscussionCommentInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
          ],
          createDiscussionInOrg: [
            "POST /orgs/{org}/teams/{team_slug}/discussions",
          ],
          deleteDiscussionCommentInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
          ],
          deleteDiscussionInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
          ],
          deleteInOrg: ["DELETE /orgs/{org}/teams/{team_slug}"],
          getByName: ["GET /orgs/{org}/teams/{team_slug}"],
          getDiscussionCommentInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
          ],
          getDiscussionInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
          ],
          getMembershipForUserInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/memberships/{username}",
          ],
          list: ["GET /orgs/{org}/teams"],
          listChildInOrg: ["GET /orgs/{org}/teams/{team_slug}/teams"],
          listDiscussionCommentsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
          ],
          listDiscussionsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/discussions",
          ],
          listForAuthenticatedUser: ["GET /user/teams"],
          listMembersInOrg: ["GET /orgs/{org}/teams/{team_slug}/members"],
          listPendingInvitationsInOrg: [
            "GET /orgs/{org}/teams/{team_slug}/invitations",
          ],
          listProjectsInOrg: ["GET /orgs/{org}/teams/{team_slug}/projects"],
          listReposInOrg: ["GET /orgs/{org}/teams/{team_slug}/repos"],
          removeMembershipForUserInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}",
          ],
          removeProjectInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}",
          ],
          removeRepoInOrg: [
            "DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}",
          ],
          updateDiscussionCommentInOrg: [
            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}",
          ],
          updateDiscussionInOrg: [
            "PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}",
          ],
          updateInOrg: ["PATCH /orgs/{org}/teams/{team_slug}"],
        },
        users: {
          addEmailForAuthenticated: [
            "POST /user/emails",
            {},
            { renamed: ["users", "addEmailForAuthenticatedUser"] },
          ],
          addEmailForAuthenticatedUser: ["POST /user/emails"],
          addSocialAccountForAuthenticatedUser: ["POST /user/social_accounts"],
          block: ["PUT /user/blocks/{username}"],
          checkBlocked: ["GET /user/blocks/{username}"],
          checkFollowingForUser: [
            "GET /users/{username}/following/{target_user}",
          ],
          checkPersonIsFollowedByAuthenticated: [
            "GET /user/following/{username}",
          ],
          createGpgKeyForAuthenticated: [
            "POST /user/gpg_keys",
            {},
            { renamed: ["users", "createGpgKeyForAuthenticatedUser"] },
          ],
          createGpgKeyForAuthenticatedUser: ["POST /user/gpg_keys"],
          createPublicSshKeyForAuthenticated: [
            "POST /user/keys",
            {},
            { renamed: ["users", "createPublicSshKeyForAuthenticatedUser"] },
          ],
          createPublicSshKeyForAuthenticatedUser: ["POST /user/keys"],
          createSshSigningKeyForAuthenticatedUser: [
            "POST /user/ssh_signing_keys",
          ],
          deleteEmailForAuthenticated: [
            "DELETE /user/emails",
            {},
            { renamed: ["users", "deleteEmailForAuthenticatedUser"] },
          ],
          deleteEmailForAuthenticatedUser: ["DELETE /user/emails"],
          deleteGpgKeyForAuthenticated: [
            "DELETE /user/gpg_keys/{gpg_key_id}",
            {},
            { renamed: ["users", "deleteGpgKeyForAuthenticatedUser"] },
          ],
          deleteGpgKeyForAuthenticatedUser: [
            "DELETE /user/gpg_keys/{gpg_key_id}",
          ],
          deletePublicSshKeyForAuthenticated: [
            "DELETE /user/keys/{key_id}",
            {},
            { renamed: ["users", "deletePublicSshKeyForAuthenticatedUser"] },
          ],
          deletePublicSshKeyForAuthenticatedUser: [
            "DELETE /user/keys/{key_id}",
          ],
          deleteSocialAccountForAuthenticatedUser: [
            "DELETE /user/social_accounts",
          ],
          deleteSshSigningKeyForAuthenticatedUser: [
            "DELETE /user/ssh_signing_keys/{ssh_signing_key_id}",
          ],
          follow: ["PUT /user/following/{username}"],
          getAuthenticated: ["GET /user"],
          getByUsername: ["GET /users/{username}"],
          getContextForUser: ["GET /users/{username}/hovercard"],
          getGpgKeyForAuthenticated: [
            "GET /user/gpg_keys/{gpg_key_id}",
            {},
            { renamed: ["users", "getGpgKeyForAuthenticatedUser"] },
          ],
          getGpgKeyForAuthenticatedUser: ["GET /user/gpg_keys/{gpg_key_id}"],
          getPublicSshKeyForAuthenticated: [
            "GET /user/keys/{key_id}",
            {},
            { renamed: ["users", "getPublicSshKeyForAuthenticatedUser"] },
          ],
          getPublicSshKeyForAuthenticatedUser: ["GET /user/keys/{key_id}"],
          getSshSigningKeyForAuthenticatedUser: [
            "GET /user/ssh_signing_keys/{ssh_signing_key_id}",
          ],
          list: ["GET /users"],
          listBlockedByAuthenticated: [
            "GET /user/blocks",
            {},
            { renamed: ["users", "listBlockedByAuthenticatedUser"] },
          ],
          listBlockedByAuthenticatedUser: ["GET /user/blocks"],
          listEmailsForAuthenticated: [
            "GET /user/emails",
            {},
            { renamed: ["users", "listEmailsForAuthenticatedUser"] },
          ],
          listEmailsForAuthenticatedUser: ["GET /user/emails"],
          listFollowedByAuthenticated: [
            "GET /user/following",
            {},
            { renamed: ["users", "listFollowedByAuthenticatedUser"] },
          ],
          listFollowedByAuthenticatedUser: ["GET /user/following"],
          listFollowersForAuthenticatedUser: ["GET /user/followers"],
          listFollowersForUser: ["GET /users/{username}/followers"],
          listFollowingForUser: ["GET /users/{username}/following"],
          listGpgKeysForAuthenticated: [
            "GET /user/gpg_keys",
            {},
            { renamed: ["users", "listGpgKeysForAuthenticatedUser"] },
          ],
          listGpgKeysForAuthenticatedUser: ["GET /user/gpg_keys"],
          listGpgKeysForUser: ["GET /users/{username}/gpg_keys"],
          listPublicEmailsForAuthenticated: [
            "GET /user/public_emails",
            {},
            { renamed: ["users", "listPublicEmailsForAuthenticatedUser"] },
          ],
          listPublicEmailsForAuthenticatedUser: ["GET /user/public_emails"],
          listPublicKeysForUser: ["GET /users/{username}/keys"],
          listPublicSshKeysForAuthenticated: [
            "GET /user/keys",
            {},
            { renamed: ["users", "listPublicSshKeysForAuthenticatedUser"] },
          ],
          listPublicSshKeysForAuthenticatedUser: ["GET /user/keys"],
          listSocialAccountsForAuthenticatedUser: ["GET /user/social_accounts"],
          listSocialAccountsForUser: ["GET /users/{username}/social_accounts"],
          listSshSigningKeysForAuthenticatedUser: [
            "GET /user/ssh_signing_keys",
          ],
          listSshSigningKeysForUser: ["GET /users/{username}/ssh_signing_keys"],
          setPrimaryEmailVisibilityForAuthenticated: [
            "PATCH /user/email/visibility",
            {},
            {
              renamed: [
                "users",
                "setPrimaryEmailVisibilityForAuthenticatedUser",
              ],
            },
          ],
          setPrimaryEmailVisibilityForAuthenticatedUser: [
            "PATCH /user/email/visibility",
          ],
          unblock: ["DELETE /user/blocks/{username}"],
          unfollow: ["DELETE /user/following/{username}"],
          updateAuthenticated: ["PATCH /user"],
        },
      };
      var endpoints_default = Endpoints;
      var endpointMethodsMap = /* @__PURE__ */ new Map();
      for (const [scope, endpoints] of Object.entries(endpoints_default)) {
        for (const [methodName, endpoint] of Object.entries(endpoints)) {
          const [route, defaults, decorations] = endpoint;
          const [method, url] = route.split(/ /);
          const endpointDefaults = Object.assign(
            {
              method,
              url,
            },
            defaults,
          );
          if (!endpointMethodsMap.has(scope)) {
            endpointMethodsMap.set(scope, /* @__PURE__ */ new Map());
          }
          endpointMethodsMap.get(scope).set(methodName, {
            scope,
            methodName,
            endpointDefaults,
            decorations,
          });
        }
      }
      var handler = {
        has({ scope }, methodName) {
          return endpointMethodsMap.get(scope).has(methodName);
        },
        getOwnPropertyDescriptor(target, methodName) {
          return {
            value: this.get(target, methodName),
            // ensures method is in the cache
            configurable: true,
            writable: true,
            enumerable: true,
          };
        },
        defineProperty(target, methodName, descriptor) {
          Object.defineProperty(target.cache, methodName, descriptor);
          return true;
        },
        deleteProperty(target, methodName) {
          delete target.cache[methodName];
          return true;
        },
        ownKeys({ scope }) {
          return [...endpointMethodsMap.get(scope).keys()];
        },
        set(target, methodName, value) {
          return (target.cache[methodName] = value);
        },
        get({ octokit, scope, cache }, methodName) {
          if (cache[methodName]) {
            return cache[methodName];
          }
          const method = endpointMethodsMap.get(scope).get(methodName);
          if (!method) {
            return void 0;
          }
          const { endpointDefaults, decorations } = method;
          if (decorations) {
            cache[methodName] = decorate(
              octokit,
              scope,
              methodName,
              endpointDefaults,
              decorations,
            );
          } else {
            cache[methodName] = octokit.request.defaults(endpointDefaults);
          }
          return cache[methodName];
        },
      };
      function endpointsToMethods(octokit) {
        const newMethods = {};
        for (const scope of endpointMethodsMap.keys()) {
          newMethods[scope] = new Proxy({ octokit, scope, cache: {} }, handler);
        }
        return newMethods;
      }
      __name(endpointsToMethods, "endpointsToMethods");
      function decorate(octokit, scope, methodName, defaults, decorations) {
        const requestWithDefaults = octokit.request.defaults(defaults);
        function withDecorations(...args) {
          let options = requestWithDefaults.endpoint.merge(...args);
          if (decorations.mapToData) {
            options = Object.assign({}, options, {
              data: options[decorations.mapToData],
              [decorations.mapToData]: void 0,
            });
            return requestWithDefaults(options);
          }
          if (decorations.renamed) {
            const [newScope, newMethodName] = decorations.renamed;
            octokit.log.warn(
              `octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`,
            );
          }
          if (decorations.deprecated) {
            octokit.log.warn(decorations.deprecated);
          }
          if (decorations.renamedParameters) {
            const options2 = requestWithDefaults.endpoint.merge(...args);
            for (const [name, alias] of Object.entries(
              decorations.renamedParameters,
            )) {
              if (name in options2) {
                octokit.log.warn(
                  `"${name}" parameter is deprecated for "octokit.${scope}.${methodName}()". Use "${alias}" instead`,
                );
                if (!(alias in options2)) {
                  options2[alias] = options2[name];
                }
                delete options2[name];
              }
            }
            return requestWithDefaults(options2);
          }
          return requestWithDefaults(...args);
        }
        __name(withDecorations, "withDecorations");
        return Object.assign(withDecorations, requestWithDefaults);
      }
      __name(decorate, "decorate");
      function restEndpointMethods(octokit) {
        const api = endpointsToMethods(octokit);
        return {
          rest: api,
        };
      }
      __name(restEndpointMethods, "restEndpointMethods");
      restEndpointMethods.VERSION = VERSION2;
      function legacyRestEndpointMethods(octokit) {
        const api = endpointsToMethods(octokit);
        return {
          ...api,
          rest: api,
        };
      }
      __name(legacyRestEndpointMethods, "legacyRestEndpointMethods");
      legacyRestEndpointMethods.VERSION = VERSION2;
    },
  });

  // node_modules/.pnpm/@octokit+plugin-paginate-rest@9.2.1_@octokit+core@5.2.0/node_modules/@octokit/plugin-paginate-rest/dist-node/index.js
  var require_dist_node10 = __commonJS({
    "node_modules/.pnpm/@octokit+plugin-paginate-rest@9.2.1_@octokit+core@5.2.0/node_modules/@octokit/plugin-paginate-rest/dist-node/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var __defProp2 = Object.defineProperty;
      var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
      var __getOwnPropNames2 = Object.getOwnPropertyNames;
      var __hasOwnProp2 = Object.prototype.hasOwnProperty;
      var __export2 = /* @__PURE__ */ __name((target, all2) => {
        for (var name in all2)
          __defProp2(target, name, { get: all2[name], enumerable: true });
      }, "__export");
      var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
        if ((from && typeof from === "object") || typeof from === "function") {
          for (let key of __getOwnPropNames2(from))
            if (!__hasOwnProp2.call(to, key) && key !== except)
              __defProp2(to, key, {
                get: /* @__PURE__ */ __name(() => from[key], "get"),
                enumerable:
                  !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable,
              });
        }
        return to;
      }, "__copyProps");
      var __toCommonJS2 = /* @__PURE__ */ __name(
        (mod) =>
          __copyProps2(__defProp2({}, "__esModule", { value: true }), mod),
        "__toCommonJS",
      );
      var dist_src_exports = {};
      __export2(dist_src_exports, {
        composePaginateRest: /* @__PURE__ */ __name(
          () => composePaginateRest,
          "composePaginateRest",
        ),
        isPaginatingEndpoint: /* @__PURE__ */ __name(
          () => isPaginatingEndpoint,
          "isPaginatingEndpoint",
        ),
        paginateRest: /* @__PURE__ */ __name(
          () => paginateRest,
          "paginateRest",
        ),
        paginatingEndpoints: /* @__PURE__ */ __name(
          () => paginatingEndpoints,
          "paginatingEndpoints",
        ),
      });
      module.exports = __toCommonJS2(dist_src_exports);
      var VERSION2 = "9.2.1";
      function normalizePaginatedListResponse(response) {
        if (!response.data) {
          return {
            ...response,
            data: [],
          };
        }
        const responseNeedsNormalization =
          "total_count" in response.data && !("url" in response.data);
        if (!responseNeedsNormalization) return response;
        const incompleteResults = response.data.incomplete_results;
        const repositorySelection = response.data.repository_selection;
        const totalCount = response.data.total_count;
        delete response.data.incomplete_results;
        delete response.data.repository_selection;
        delete response.data.total_count;
        const namespaceKey = Object.keys(response.data)[0];
        const data = response.data[namespaceKey];
        response.data = data;
        if (typeof incompleteResults !== "undefined") {
          response.data.incomplete_results = incompleteResults;
        }
        if (typeof repositorySelection !== "undefined") {
          response.data.repository_selection = repositorySelection;
        }
        response.data.total_count = totalCount;
        return response;
      }
      __name(normalizePaginatedListResponse, "normalizePaginatedListResponse");
      function iterator(octokit, route, parameters) {
        const options =
          typeof route === "function"
            ? route.endpoint(parameters)
            : octokit.request.endpoint(route, parameters);
        const requestMethod =
          typeof route === "function" ? route : octokit.request;
        const method = options.method;
        const headers = options.headers;
        let url = options.url;
        return {
          [Symbol.asyncIterator]: () => ({
            async next() {
              if (!url) return { done: true };
              try {
                const response = await requestMethod({ method, url, headers });
                const normalizedResponse =
                  normalizePaginatedListResponse(response);
                url = ((normalizedResponse.headers.link || "").match(
                  /<([^>]+)>;\s*rel="next"/,
                ) || [])[1];
                return { value: normalizedResponse };
              } catch (error) {
                if (error.status !== 409) throw error;
                url = "";
                return {
                  value: {
                    status: 200,
                    headers: {},
                    data: [],
                  },
                };
              }
            },
          }),
        };
      }
      __name(iterator, "iterator");
      function paginate(octokit, route, parameters, mapFn) {
        if (typeof parameters === "function") {
          mapFn = parameters;
          parameters = void 0;
        }
        return gather(
          octokit,
          [],
          iterator(octokit, route, parameters)[Symbol.asyncIterator](),
          mapFn,
        );
      }
      __name(paginate, "paginate");
      function gather(octokit, results, iterator2, mapFn) {
        return iterator2.next().then((result) => {
          if (result.done) {
            return results;
          }
          let earlyExit = false;
          function done() {
            earlyExit = true;
          }
          __name(done, "done");
          results = results.concat(
            mapFn ? mapFn(result.value, done) : result.value.data,
          );
          if (earlyExit) {
            return results;
          }
          return gather(octokit, results, iterator2, mapFn);
        });
      }
      __name(gather, "gather");
      var composePaginateRest = Object.assign(paginate, {
        iterator,
      });
      var paginatingEndpoints = [
        "GET /advisories",
        "GET /app/hook/deliveries",
        "GET /app/installation-requests",
        "GET /app/installations",
        "GET /assignments/{assignment_id}/accepted_assignments",
        "GET /classrooms",
        "GET /classrooms/{classroom_id}/assignments",
        "GET /enterprises/{enterprise}/dependabot/alerts",
        "GET /enterprises/{enterprise}/secret-scanning/alerts",
        "GET /events",
        "GET /gists",
        "GET /gists/public",
        "GET /gists/starred",
        "GET /gists/{gist_id}/comments",
        "GET /gists/{gist_id}/commits",
        "GET /gists/{gist_id}/forks",
        "GET /installation/repositories",
        "GET /issues",
        "GET /licenses",
        "GET /marketplace_listing/plans",
        "GET /marketplace_listing/plans/{plan_id}/accounts",
        "GET /marketplace_listing/stubbed/plans",
        "GET /marketplace_listing/stubbed/plans/{plan_id}/accounts",
        "GET /networks/{owner}/{repo}/events",
        "GET /notifications",
        "GET /organizations",
        "GET /orgs/{org}/actions/cache/usage-by-repository",
        "GET /orgs/{org}/actions/permissions/repositories",
        "GET /orgs/{org}/actions/runners",
        "GET /orgs/{org}/actions/secrets",
        "GET /orgs/{org}/actions/secrets/{secret_name}/repositories",
        "GET /orgs/{org}/actions/variables",
        "GET /orgs/{org}/actions/variables/{name}/repositories",
        "GET /orgs/{org}/blocks",
        "GET /orgs/{org}/code-scanning/alerts",
        "GET /orgs/{org}/codespaces",
        "GET /orgs/{org}/codespaces/secrets",
        "GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories",
        "GET /orgs/{org}/copilot/billing/seats",
        "GET /orgs/{org}/dependabot/alerts",
        "GET /orgs/{org}/dependabot/secrets",
        "GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories",
        "GET /orgs/{org}/events",
        "GET /orgs/{org}/failed_invitations",
        "GET /orgs/{org}/hooks",
        "GET /orgs/{org}/hooks/{hook_id}/deliveries",
        "GET /orgs/{org}/installations",
        "GET /orgs/{org}/invitations",
        "GET /orgs/{org}/invitations/{invitation_id}/teams",
        "GET /orgs/{org}/issues",
        "GET /orgs/{org}/members",
        "GET /orgs/{org}/members/{username}/codespaces",
        "GET /orgs/{org}/migrations",
        "GET /orgs/{org}/migrations/{migration_id}/repositories",
        "GET /orgs/{org}/organization-roles/{role_id}/teams",
        "GET /orgs/{org}/organization-roles/{role_id}/users",
        "GET /orgs/{org}/outside_collaborators",
        "GET /orgs/{org}/packages",
        "GET /orgs/{org}/packages/{package_type}/{package_name}/versions",
        "GET /orgs/{org}/personal-access-token-requests",
        "GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories",
        "GET /orgs/{org}/personal-access-tokens",
        "GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories",
        "GET /orgs/{org}/projects",
        "GET /orgs/{org}/properties/values",
        "GET /orgs/{org}/public_members",
        "GET /orgs/{org}/repos",
        "GET /orgs/{org}/rulesets",
        "GET /orgs/{org}/rulesets/rule-suites",
        "GET /orgs/{org}/secret-scanning/alerts",
        "GET /orgs/{org}/security-advisories",
        "GET /orgs/{org}/teams",
        "GET /orgs/{org}/teams/{team_slug}/discussions",
        "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
        "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions",
        "GET /orgs/{org}/teams/{team_slug}/invitations",
        "GET /orgs/{org}/teams/{team_slug}/members",
        "GET /orgs/{org}/teams/{team_slug}/projects",
        "GET /orgs/{org}/teams/{team_slug}/repos",
        "GET /orgs/{org}/teams/{team_slug}/teams",
        "GET /projects/columns/{column_id}/cards",
        "GET /projects/{project_id}/collaborators",
        "GET /projects/{project_id}/columns",
        "GET /repos/{owner}/{repo}/actions/artifacts",
        "GET /repos/{owner}/{repo}/actions/caches",
        "GET /repos/{owner}/{repo}/actions/organization-secrets",
        "GET /repos/{owner}/{repo}/actions/organization-variables",
        "GET /repos/{owner}/{repo}/actions/runners",
        "GET /repos/{owner}/{repo}/actions/runs",
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts",
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs",
        "GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs",
        "GET /repos/{owner}/{repo}/actions/secrets",
        "GET /repos/{owner}/{repo}/actions/variables",
        "GET /repos/{owner}/{repo}/actions/workflows",
        "GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs",
        "GET /repos/{owner}/{repo}/activity",
        "GET /repos/{owner}/{repo}/assignees",
        "GET /repos/{owner}/{repo}/branches",
        "GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations",
        "GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs",
        "GET /repos/{owner}/{repo}/code-scanning/alerts",
        "GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",
        "GET /repos/{owner}/{repo}/code-scanning/analyses",
        "GET /repos/{owner}/{repo}/codespaces",
        "GET /repos/{owner}/{repo}/codespaces/devcontainers",
        "GET /repos/{owner}/{repo}/codespaces/secrets",
        "GET /repos/{owner}/{repo}/collaborators",
        "GET /repos/{owner}/{repo}/comments",
        "GET /repos/{owner}/{repo}/comments/{comment_id}/reactions",
        "GET /repos/{owner}/{repo}/commits",
        "GET /repos/{owner}/{repo}/commits/{commit_sha}/comments",
        "GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls",
        "GET /repos/{owner}/{repo}/commits/{ref}/check-runs",
        "GET /repos/{owner}/{repo}/commits/{ref}/check-suites",
        "GET /repos/{owner}/{repo}/commits/{ref}/status",
        "GET /repos/{owner}/{repo}/commits/{ref}/statuses",
        "GET /repos/{owner}/{repo}/contributors",
        "GET /repos/{owner}/{repo}/dependabot/alerts",
        "GET /repos/{owner}/{repo}/dependabot/secrets",
        "GET /repos/{owner}/{repo}/deployments",
        "GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses",
        "GET /repos/{owner}/{repo}/environments",
        "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies",
        "GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps",
        "GET /repos/{owner}/{repo}/events",
        "GET /repos/{owner}/{repo}/forks",
        "GET /repos/{owner}/{repo}/hooks",
        "GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries",
        "GET /repos/{owner}/{repo}/invitations",
        "GET /repos/{owner}/{repo}/issues",
        "GET /repos/{owner}/{repo}/issues/comments",
        "GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions",
        "GET /repos/{owner}/{repo}/issues/events",
        "GET /repos/{owner}/{repo}/issues/{issue_number}/comments",
        "GET /repos/{owner}/{repo}/issues/{issue_number}/events",
        "GET /repos/{owner}/{repo}/issues/{issue_number}/labels",
        "GET /repos/{owner}/{repo}/issues/{issue_number}/reactions",
        "GET /repos/{owner}/{repo}/issues/{issue_number}/timeline",
        "GET /repos/{owner}/{repo}/keys",
        "GET /repos/{owner}/{repo}/labels",
        "GET /repos/{owner}/{repo}/milestones",
        "GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels",
        "GET /repos/{owner}/{repo}/notifications",
        "GET /repos/{owner}/{repo}/pages/builds",
        "GET /repos/{owner}/{repo}/projects",
        "GET /repos/{owner}/{repo}/pulls",
        "GET /repos/{owner}/{repo}/pulls/comments",
        "GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions",
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/comments",
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/commits",
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/files",
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews",
        "GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments",
        "GET /repos/{owner}/{repo}/releases",
        "GET /repos/{owner}/{repo}/releases/{release_id}/assets",
        "GET /repos/{owner}/{repo}/releases/{release_id}/reactions",
        "GET /repos/{owner}/{repo}/rules/branches/{branch}",
        "GET /repos/{owner}/{repo}/rulesets",
        "GET /repos/{owner}/{repo}/rulesets/rule-suites",
        "GET /repos/{owner}/{repo}/secret-scanning/alerts",
        "GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations",
        "GET /repos/{owner}/{repo}/security-advisories",
        "GET /repos/{owner}/{repo}/stargazers",
        "GET /repos/{owner}/{repo}/subscribers",
        "GET /repos/{owner}/{repo}/tags",
        "GET /repos/{owner}/{repo}/teams",
        "GET /repos/{owner}/{repo}/topics",
        "GET /repositories",
        "GET /repositories/{repository_id}/environments/{environment_name}/secrets",
        "GET /repositories/{repository_id}/environments/{environment_name}/variables",
        "GET /search/code",
        "GET /search/commits",
        "GET /search/issues",
        "GET /search/labels",
        "GET /search/repositories",
        "GET /search/topics",
        "GET /search/users",
        "GET /teams/{team_id}/discussions",
        "GET /teams/{team_id}/discussions/{discussion_number}/comments",
        "GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions",
        "GET /teams/{team_id}/discussions/{discussion_number}/reactions",
        "GET /teams/{team_id}/invitations",
        "GET /teams/{team_id}/members",
        "GET /teams/{team_id}/projects",
        "GET /teams/{team_id}/repos",
        "GET /teams/{team_id}/teams",
        "GET /user/blocks",
        "GET /user/codespaces",
        "GET /user/codespaces/secrets",
        "GET /user/emails",
        "GET /user/followers",
        "GET /user/following",
        "GET /user/gpg_keys",
        "GET /user/installations",
        "GET /user/installations/{installation_id}/repositories",
        "GET /user/issues",
        "GET /user/keys",
        "GET /user/marketplace_purchases",
        "GET /user/marketplace_purchases/stubbed",
        "GET /user/memberships/orgs",
        "GET /user/migrations",
        "GET /user/migrations/{migration_id}/repositories",
        "GET /user/orgs",
        "GET /user/packages",
        "GET /user/packages/{package_type}/{package_name}/versions",
        "GET /user/public_emails",
        "GET /user/repos",
        "GET /user/repository_invitations",
        "GET /user/social_accounts",
        "GET /user/ssh_signing_keys",
        "GET /user/starred",
        "GET /user/subscriptions",
        "GET /user/teams",
        "GET /users",
        "GET /users/{username}/events",
        "GET /users/{username}/events/orgs/{org}",
        "GET /users/{username}/events/public",
        "GET /users/{username}/followers",
        "GET /users/{username}/following",
        "GET /users/{username}/gists",
        "GET /users/{username}/gpg_keys",
        "GET /users/{username}/keys",
        "GET /users/{username}/orgs",
        "GET /users/{username}/packages",
        "GET /users/{username}/projects",
        "GET /users/{username}/received_events",
        "GET /users/{username}/received_events/public",
        "GET /users/{username}/repos",
        "GET /users/{username}/social_accounts",
        "GET /users/{username}/ssh_signing_keys",
        "GET /users/{username}/starred",
        "GET /users/{username}/subscriptions",
      ];
      function isPaginatingEndpoint(arg) {
        if (typeof arg === "string") {
          return paginatingEndpoints.includes(arg);
        } else {
          return false;
        }
      }
      __name(isPaginatingEndpoint, "isPaginatingEndpoint");
      function paginateRest(octokit) {
        return {
          paginate: Object.assign(paginate.bind(null, octokit), {
            iterator: iterator.bind(null, octokit),
          }),
        };
      }
      __name(paginateRest, "paginateRest");
      paginateRest.VERSION = VERSION2;
    },
  });

  // node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/utils.js
  var require_utils6 = __commonJS({
    "node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/utils.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              var desc = Object.getOwnPropertyDescriptor(m, k);
              if (
                !desc ||
                ("get" in desc
                  ? !m.__esModule
                  : desc.writable || desc.configurable)
              ) {
                desc = {
                  enumerable: true,
                  get: /* @__PURE__ */ __name(function () {
                    return m[k];
                  }, "get"),
                };
              }
              Object.defineProperty(o, k2, desc);
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== "default" &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getOctokitOptions =
        exports.GitHub =
        exports.defaults =
        exports.context =
          void 0;
      var Context = __importStar(require_context());
      var Utils = __importStar(require_utils5());
      var core_1 = require_dist_node8();
      var plugin_rest_endpoint_methods_1 = require_dist_node9();
      var plugin_paginate_rest_1 = require_dist_node10();
      exports.context = new Context.Context();
      var baseUrl = Utils.getApiBaseUrl();
      exports.defaults = {
        baseUrl,
        request: {
          agent: Utils.getProxyAgent(baseUrl),
          fetch: Utils.getProxyFetch(baseUrl),
        },
      };
      exports.GitHub = core_1.Octokit.plugin(
        plugin_rest_endpoint_methods_1.restEndpointMethods,
        plugin_paginate_rest_1.paginateRest,
      ).defaults(exports.defaults);
      function getOctokitOptions2(token, options) {
        const opts = Object.assign({}, options || {});
        const auth = Utils.getAuthString(token, opts);
        if (auth) {
          opts.auth = auth;
        }
        return opts;
      }
      __name(getOctokitOptions2, "getOctokitOptions");
      exports.getOctokitOptions = getOctokitOptions2;
    },
  });

  // node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/github.js
  var require_github = __commonJS({
    "node_modules/.pnpm/@actions+github@6.0.0/node_modules/@actions/github/lib/github.js"(
      exports,
    ) {
      "use strict";
      var __createBinding =
        (exports && exports.__createBinding) ||
        (Object.create
          ? function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              var desc = Object.getOwnPropertyDescriptor(m, k);
              if (
                !desc ||
                ("get" in desc
                  ? !m.__esModule
                  : desc.writable || desc.configurable)
              ) {
                desc = {
                  enumerable: true,
                  get: /* @__PURE__ */ __name(function () {
                    return m[k];
                  }, "get"),
                };
              }
              Object.defineProperty(o, k2, desc);
            }
          : function (o, m, k, k2) {
              if (k2 === void 0) k2 = k;
              o[k2] = m[k];
            });
      var __setModuleDefault =
        (exports && exports.__setModuleDefault) ||
        (Object.create
          ? function (o, v) {
              Object.defineProperty(o, "default", {
                enumerable: true,
                value: v,
              });
            }
          : function (o, v) {
              o["default"] = v;
            });
      var __importStar =
        (exports && exports.__importStar) ||
        function (mod) {
          if (mod && mod.__esModule) return mod;
          var result = {};
          if (mod != null) {
            for (var k in mod)
              if (
                k !== "default" &&
                Object.prototype.hasOwnProperty.call(mod, k)
              )
                __createBinding(result, mod, k);
          }
          __setModuleDefault(result, mod);
          return result;
        };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getOctokit = exports.context = void 0;
      var Context = __importStar(require_context());
      var utils_1 = require_utils6();
      exports.context = new Context.Context();
      function getOctokit(token, options, ...additionalPlugins) {
        const GitHubWithPlugins = utils_1.GitHub.plugin(...additionalPlugins);
        return new GitHubWithPlugins(
          (0, utils_1.getOctokitOptions)(token, options),
        );
      }
      __name(getOctokit, "getOctokit");
      exports.getOctokit = getOctokit;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/array.js
  var require_array = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/array.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.splitWhen = exports.flatten = void 0;
      function flatten(items) {
        return items.reduce(
          (collection, item) => [].concat(collection, item),
          [],
        );
      }
      __name(flatten, "flatten");
      exports.flatten = flatten;
      function splitWhen(items, predicate) {
        const result = [[]];
        let groupIndex = 0;
        for (const item of items) {
          if (predicate(item)) {
            groupIndex++;
            result[groupIndex] = [];
          } else {
            result[groupIndex].push(item);
          }
        }
        return result;
      }
      __name(splitWhen, "splitWhen");
      exports.splitWhen = splitWhen;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/errno.js
  var require_errno = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/errno.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isEnoentCodeError = void 0;
      function isEnoentCodeError(error) {
        return error.code === "ENOENT";
      }
      __name(isEnoentCodeError, "isEnoentCodeError");
      exports.isEnoentCodeError = isEnoentCodeError;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/fs.js
  var require_fs2 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/fs.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createDirentFromStats = void 0;
      var DirentFromStats = class {
        static {
          __name(this, "DirentFromStats");
        }
        constructor(name, stats) {
          this.name = name;
          this.isBlockDevice = stats.isBlockDevice.bind(stats);
          this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
          this.isDirectory = stats.isDirectory.bind(stats);
          this.isFIFO = stats.isFIFO.bind(stats);
          this.isFile = stats.isFile.bind(stats);
          this.isSocket = stats.isSocket.bind(stats);
          this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
        }
      };
      function createDirentFromStats(name, stats) {
        return new DirentFromStats(name, stats);
      }
      __name(createDirentFromStats, "createDirentFromStats");
      exports.createDirentFromStats = createDirentFromStats;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/path.js
  var require_path = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/path.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.convertPosixPathToPattern =
        exports.convertWindowsPathToPattern =
        exports.convertPathToPattern =
        exports.escapePosixPath =
        exports.escapeWindowsPath =
        exports.escape =
        exports.removeLeadingDotSegment =
        exports.makeAbsolute =
        exports.unixify =
          void 0;
      var os = __require("os");
      var path4 = __require("path");
      var IS_WINDOWS_PLATFORM = os.platform() === "win32";
      var LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
      var POSIX_UNESCAPED_GLOB_SYMBOLS_RE =
        /(\\?)([()*?[\]{|}]|^!|[!+@](?=\()|\\(?![!()*+?@[\]{|}]))/g;
      var WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE =
        /(\\?)([()[\]{}]|^!|[!+@](?=\())/g;
      var DOS_DEVICE_PATH_RE = /^\\\\([.?])/;
      var WINDOWS_BACKSLASHES_RE = /\\(?![!()+@[\]{}])/g;
      function unixify(filepath) {
        return filepath.replace(/\\/g, "/");
      }
      __name(unixify, "unixify");
      exports.unixify = unixify;
      function makeAbsolute(cwd, filepath) {
        return path4.resolve(cwd, filepath);
      }
      __name(makeAbsolute, "makeAbsolute");
      exports.makeAbsolute = makeAbsolute;
      function removeLeadingDotSegment(entry) {
        if (entry.charAt(0) === ".") {
          const secondCharactery = entry.charAt(1);
          if (secondCharactery === "/" || secondCharactery === "\\") {
            return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
          }
        }
        return entry;
      }
      __name(removeLeadingDotSegment, "removeLeadingDotSegment");
      exports.removeLeadingDotSegment = removeLeadingDotSegment;
      exports.escape = IS_WINDOWS_PLATFORM
        ? escapeWindowsPath
        : escapePosixPath;
      function escapeWindowsPath(pattern) {
        return pattern.replace(WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
      }
      __name(escapeWindowsPath, "escapeWindowsPath");
      exports.escapeWindowsPath = escapeWindowsPath;
      function escapePosixPath(pattern) {
        return pattern.replace(POSIX_UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
      }
      __name(escapePosixPath, "escapePosixPath");
      exports.escapePosixPath = escapePosixPath;
      exports.convertPathToPattern = IS_WINDOWS_PLATFORM
        ? convertWindowsPathToPattern
        : convertPosixPathToPattern;
      function convertWindowsPathToPattern(filepath) {
        return escapeWindowsPath(filepath)
          .replace(DOS_DEVICE_PATH_RE, "//$1")
          .replace(WINDOWS_BACKSLASHES_RE, "/");
      }
      __name(convertWindowsPathToPattern, "convertWindowsPathToPattern");
      exports.convertWindowsPathToPattern = convertWindowsPathToPattern;
      function convertPosixPathToPattern(filepath) {
        return escapePosixPath(filepath);
      }
      __name(convertPosixPathToPattern, "convertPosixPathToPattern");
      exports.convertPosixPathToPattern = convertPosixPathToPattern;
    },
  });

  // node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js
  var require_is_extglob = __commonJS({
    "node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js"(
      exports,
      module,
    ) {
      module.exports = /* @__PURE__ */ __name(function isExtglob(str) {
        if (typeof str !== "string" || str === "") {
          return false;
        }
        var match;
        while ((match = /(\\).|([@?!+*]\(.*\))/g.exec(str))) {
          if (match[2]) return true;
          str = str.slice(match.index + match[0].length);
        }
        return false;
      }, "isExtglob");
    },
  });

  // node_modules/.pnpm/is-glob@4.0.3/node_modules/is-glob/index.js
  var require_is_glob = __commonJS({
    "node_modules/.pnpm/is-glob@4.0.3/node_modules/is-glob/index.js"(
      exports,
      module,
    ) {
      var isExtglob = require_is_extglob();
      var chars = { "{": "}", "(": ")", "[": "]" };
      var strictCheck = /* @__PURE__ */ __name(function (str) {
        if (str[0] === "!") {
          return true;
        }
        var index2 = 0;
        var pipeIndex = -2;
        var closeSquareIndex = -2;
        var closeCurlyIndex = -2;
        var closeParenIndex = -2;
        var backSlashIndex = -2;
        while (index2 < str.length) {
          if (str[index2] === "*") {
            return true;
          }
          if (str[index2 + 1] === "?" && /[\].+)]/.test(str[index2])) {
            return true;
          }
          if (
            closeSquareIndex !== -1 &&
            str[index2] === "[" &&
            str[index2 + 1] !== "]"
          ) {
            if (closeSquareIndex < index2) {
              closeSquareIndex = str.indexOf("]", index2);
            }
            if (closeSquareIndex > index2) {
              if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
                return true;
              }
              backSlashIndex = str.indexOf("\\", index2);
              if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
                return true;
              }
            }
          }
          if (
            closeCurlyIndex !== -1 &&
            str[index2] === "{" &&
            str[index2 + 1] !== "}"
          ) {
            closeCurlyIndex = str.indexOf("}", index2);
            if (closeCurlyIndex > index2) {
              backSlashIndex = str.indexOf("\\", index2);
              if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
                return true;
              }
            }
          }
          if (
            closeParenIndex !== -1 &&
            str[index2] === "(" &&
            str[index2 + 1] === "?" &&
            /[:!=]/.test(str[index2 + 2]) &&
            str[index2 + 3] !== ")"
          ) {
            closeParenIndex = str.indexOf(")", index2);
            if (closeParenIndex > index2) {
              backSlashIndex = str.indexOf("\\", index2);
              if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                return true;
              }
            }
          }
          if (
            pipeIndex !== -1 &&
            str[index2] === "(" &&
            str[index2 + 1] !== "|"
          ) {
            if (pipeIndex < index2) {
              pipeIndex = str.indexOf("|", index2);
            }
            if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
              closeParenIndex = str.indexOf(")", pipeIndex);
              if (closeParenIndex > pipeIndex) {
                backSlashIndex = str.indexOf("\\", pipeIndex);
                if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                  return true;
                }
              }
            }
          }
          if (str[index2] === "\\") {
            var open = str[index2 + 1];
            index2 += 2;
            var close = chars[open];
            if (close) {
              var n = str.indexOf(close, index2);
              if (n !== -1) {
                index2 = n + 1;
              }
            }
            if (str[index2] === "!") {
              return true;
            }
          } else {
            index2++;
          }
        }
        return false;
      }, "strictCheck");
      var relaxedCheck = /* @__PURE__ */ __name(function (str) {
        if (str[0] === "!") {
          return true;
        }
        var index2 = 0;
        while (index2 < str.length) {
          if (/[*?{}()[\]]/.test(str[index2])) {
            return true;
          }
          if (str[index2] === "\\") {
            var open = str[index2 + 1];
            index2 += 2;
            var close = chars[open];
            if (close) {
              var n = str.indexOf(close, index2);
              if (n !== -1) {
                index2 = n + 1;
              }
            }
            if (str[index2] === "!") {
              return true;
            }
          } else {
            index2++;
          }
        }
        return false;
      }, "relaxedCheck");
      module.exports = /* @__PURE__ */ __name(function isGlob(str, options) {
        if (typeof str !== "string" || str === "") {
          return false;
        }
        if (isExtglob(str)) {
          return true;
        }
        var check = strictCheck;
        if (options && options.strict === false) {
          check = relaxedCheck;
        }
        return check(str);
      }, "isGlob");
    },
  });

  // node_modules/.pnpm/glob-parent@5.1.2/node_modules/glob-parent/index.js
  var require_glob_parent = __commonJS({
    "node_modules/.pnpm/glob-parent@5.1.2/node_modules/glob-parent/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var isGlob = require_is_glob();
      var pathPosixDirname = __require("path").posix.dirname;
      var isWin32 = __require("os").platform() === "win32";
      var slash = "/";
      var backslash = /\\/g;
      var enclosure = /[\{\[].*[\}\]]$/;
      var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
      var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
      module.exports = /* @__PURE__ */ __name(function globParent(str, opts) {
        var options = Object.assign({ flipBackslashes: true }, opts);
        if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
          str = str.replace(backslash, slash);
        }
        if (enclosure.test(str)) {
          str += slash;
        }
        str += "a";
        do {
          str = pathPosixDirname(str);
        } while (isGlob(str) || globby.test(str));
        return str.replace(escaped, "$1");
      }, "globParent");
    },
  });

  // node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/utils.js
  var require_utils7 = __commonJS({
    "node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/utils.js"(
      exports,
    ) {
      "use strict";
      exports.isInteger = (num) => {
        if (typeof num === "number") {
          return Number.isInteger(num);
        }
        if (typeof num === "string" && num.trim() !== "") {
          return Number.isInteger(Number(num));
        }
        return false;
      };
      exports.find = (node2, type) =>
        node2.nodes.find((node3) => node3.type === type);
      exports.exceedsLimit = (min, max, step = 1, limit) => {
        if (limit === false) return false;
        if (!exports.isInteger(min) || !exports.isInteger(max)) return false;
        return (Number(max) - Number(min)) / Number(step) >= limit;
      };
      exports.escapeNode = (block, n = 0, type) => {
        const node2 = block.nodes[n];
        if (!node2) return;
        if (
          (type && node2.type === type) ||
          node2.type === "open" ||
          node2.type === "close"
        ) {
          if (node2.escaped !== true) {
            node2.value = "\\" + node2.value;
            node2.escaped = true;
          }
        }
      };
      exports.encloseBrace = (node2) => {
        if (node2.type !== "brace") return false;
        if ((node2.commas >> (0 + node2.ranges)) >> 0 === 0) {
          node2.invalid = true;
          return true;
        }
        return false;
      };
      exports.isInvalidBrace = (block) => {
        if (block.type !== "brace") return false;
        if (block.invalid === true || block.dollar) return true;
        if ((block.commas >> (0 + block.ranges)) >> 0 === 0) {
          block.invalid = true;
          return true;
        }
        if (block.open !== true || block.close !== true) {
          block.invalid = true;
          return true;
        }
        return false;
      };
      exports.isOpenOrClose = (node2) => {
        if (node2.type === "open" || node2.type === "close") {
          return true;
        }
        return node2.open === true || node2.close === true;
      };
      exports.reduce = (nodes) =>
        nodes.reduce((acc, node2) => {
          if (node2.type === "text") acc.push(node2.value);
          if (node2.type === "range") node2.type = "text";
          return acc;
        }, []);
      exports.flatten = (...args) => {
        const result = [];
        const flat = /* @__PURE__ */ __name((arr) => {
          for (let i = 0; i < arr.length; i++) {
            const ele = arr[i];
            if (Array.isArray(ele)) {
              flat(ele);
              continue;
            }
            if (ele !== void 0) {
              result.push(ele);
            }
          }
          return result;
        }, "flat");
        flat(args);
        return result;
      };
    },
  });

  // node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/stringify.js
  var require_stringify = __commonJS({
    "node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/stringify.js"(
      exports,
      module,
    ) {
      "use strict";
      var utils = require_utils7();
      module.exports = (ast, options = {}) => {
        const stringify2 = /* @__PURE__ */ __name((node2, parent = {}) => {
          const invalidBlock =
            options.escapeInvalid && utils.isInvalidBrace(parent);
          const invalidNode =
            node2.invalid === true && options.escapeInvalid === true;
          let output = "";
          if (node2.value) {
            if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node2)) {
              return "\\" + node2.value;
            }
            return node2.value;
          }
          if (node2.value) {
            return node2.value;
          }
          if (node2.nodes) {
            for (const child of node2.nodes) {
              output += stringify2(child);
            }
          }
          return output;
        }, "stringify");
        return stringify2(ast);
      };
    },
  });

  // node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js
  var require_is_number = __commonJS({
    "node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = function (num) {
        if (typeof num === "number") {
          return num - num === 0;
        }
        if (typeof num === "string" && num.trim() !== "") {
          return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
        }
        return false;
      };
    },
  });

  // node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js
  var require_to_regex_range = __commonJS({
    "node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var isNumber = require_is_number();
      var toRegexRange = /* @__PURE__ */ __name((min, max, options) => {
        if (isNumber(min) === false) {
          throw new TypeError(
            "toRegexRange: expected the first argument to be a number",
          );
        }
        if (max === void 0 || min === max) {
          return String(min);
        }
        if (isNumber(max) === false) {
          throw new TypeError(
            "toRegexRange: expected the second argument to be a number.",
          );
        }
        let opts = { relaxZeros: true, ...options };
        if (typeof opts.strictZeros === "boolean") {
          opts.relaxZeros = opts.strictZeros === false;
        }
        let relax = String(opts.relaxZeros);
        let shorthand = String(opts.shorthand);
        let capture = String(opts.capture);
        let wrap2 = String(opts.wrap);
        let cacheKey =
          min + ":" + max + "=" + relax + shorthand + capture + wrap2;
        if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
          return toRegexRange.cache[cacheKey].result;
        }
        let a = Math.min(min, max);
        let b = Math.max(min, max);
        if (Math.abs(a - b) === 1) {
          let result = min + "|" + max;
          if (opts.capture) {
            return `(${result})`;
          }
          if (opts.wrap === false) {
            return result;
          }
          return `(?:${result})`;
        }
        let isPadded = hasPadding(min) || hasPadding(max);
        let state = { min, max, a, b };
        let positives = [];
        let negatives = [];
        if (isPadded) {
          state.isPadded = isPadded;
          state.maxLen = String(state.max).length;
        }
        if (a < 0) {
          let newMin = b < 0 ? Math.abs(b) : 1;
          negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
          a = state.a = 0;
        }
        if (b >= 0) {
          positives = splitToPatterns(a, b, state, opts);
        }
        state.negatives = negatives;
        state.positives = positives;
        state.result = collatePatterns(negatives, positives, opts);
        if (opts.capture === true) {
          state.result = `(${state.result})`;
        } else if (
          opts.wrap !== false &&
          positives.length + negatives.length > 1
        ) {
          state.result = `(?:${state.result})`;
        }
        toRegexRange.cache[cacheKey] = state;
        return state.result;
      }, "toRegexRange");
      function collatePatterns(neg, pos, options) {
        let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
        let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
        let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
        let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
        return subpatterns.join("|");
      }
      __name(collatePatterns, "collatePatterns");
      function splitToRanges(min, max) {
        let nines = 1;
        let zeros = 1;
        let stop = countNines(min, nines);
        let stops = /* @__PURE__ */ new Set([max]);
        while (min <= stop && stop <= max) {
          stops.add(stop);
          nines += 1;
          stop = countNines(min, nines);
        }
        stop = countZeros(max + 1, zeros) - 1;
        while (min < stop && stop <= max) {
          stops.add(stop);
          zeros += 1;
          stop = countZeros(max + 1, zeros) - 1;
        }
        stops = [...stops];
        stops.sort(compare);
        return stops;
      }
      __name(splitToRanges, "splitToRanges");
      function rangeToPattern(start, stop, options) {
        if (start === stop) {
          return { pattern: start, count: [], digits: 0 };
        }
        let zipped = zip(start, stop);
        let digits = zipped.length;
        let pattern = "";
        let count = 0;
        for (let i = 0; i < digits; i++) {
          let [startDigit, stopDigit] = zipped[i];
          if (startDigit === stopDigit) {
            pattern += startDigit;
          } else if (startDigit !== "0" || stopDigit !== "9") {
            pattern += toCharacterClass(startDigit, stopDigit, options);
          } else {
            count++;
          }
        }
        if (count) {
          pattern += options.shorthand === true ? "\\d" : "[0-9]";
        }
        return { pattern, count: [count], digits };
      }
      __name(rangeToPattern, "rangeToPattern");
      function splitToPatterns(min, max, tok, options) {
        let ranges = splitToRanges(min, max);
        let tokens = [];
        let start = min;
        let prev;
        for (let i = 0; i < ranges.length; i++) {
          let max2 = ranges[i];
          let obj = rangeToPattern(String(start), String(max2), options);
          let zeros = "";
          if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
            if (prev.count.length > 1) {
              prev.count.pop();
            }
            prev.count.push(obj.count[0]);
            prev.string = prev.pattern + toQuantifier(prev.count);
            start = max2 + 1;
            continue;
          }
          if (tok.isPadded) {
            zeros = padZeros(max2, tok, options);
          }
          obj.string = zeros + obj.pattern + toQuantifier(obj.count);
          tokens.push(obj);
          start = max2 + 1;
          prev = obj;
        }
        return tokens;
      }
      __name(splitToPatterns, "splitToPatterns");
      function filterPatterns(arr, comparison, prefix2, intersection, options) {
        let result = [];
        for (let ele of arr) {
          let { string: string3 } = ele;
          if (!intersection && !contains(comparison, "string", string3)) {
            result.push(prefix2 + string3);
          }
          if (intersection && contains(comparison, "string", string3)) {
            result.push(prefix2 + string3);
          }
        }
        return result;
      }
      __name(filterPatterns, "filterPatterns");
      function zip(a, b) {
        let arr = [];
        for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);
        return arr;
      }
      __name(zip, "zip");
      function compare(a, b) {
        return a > b ? 1 : b > a ? -1 : 0;
      }
      __name(compare, "compare");
      function contains(arr, key, val) {
        return arr.some((ele) => ele[key] === val);
      }
      __name(contains, "contains");
      function countNines(min, len) {
        return Number(String(min).slice(0, -len) + "9".repeat(len));
      }
      __name(countNines, "countNines");
      function countZeros(integer, zeros) {
        return integer - (integer % Math.pow(10, zeros));
      }
      __name(countZeros, "countZeros");
      function toQuantifier(digits) {
        let [start = 0, stop = ""] = digits;
        if (stop || start > 1) {
          return `{${start + (stop ? "," + stop : "")}}`;
        }
        return "";
      }
      __name(toQuantifier, "toQuantifier");
      function toCharacterClass(a, b, options) {
        return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
      }
      __name(toCharacterClass, "toCharacterClass");
      function hasPadding(str) {
        return /^-?(0+)\d/.test(str);
      }
      __name(hasPadding, "hasPadding");
      function padZeros(value, tok, options) {
        if (!tok.isPadded) {
          return value;
        }
        let diff = Math.abs(tok.maxLen - String(value).length);
        let relax = options.relaxZeros !== false;
        switch (diff) {
          case 0:
            return "";
          case 1:
            return relax ? "0?" : "0";
          case 2:
            return relax ? "0{0,2}" : "00";
          default: {
            return relax ? `0{0,${diff}}` : `0{${diff}}`;
          }
        }
      }
      __name(padZeros, "padZeros");
      toRegexRange.cache = {};
      toRegexRange.clearCache = () => (toRegexRange.cache = {});
      module.exports = toRegexRange;
    },
  });

  // node_modules/.pnpm/fill-range@7.1.1/node_modules/fill-range/index.js
  var require_fill_range = __commonJS({
    "node_modules/.pnpm/fill-range@7.1.1/node_modules/fill-range/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var util2 = __require("util");
      var toRegexRange = require_to_regex_range();
      var isObject = /* @__PURE__ */ __name(
        (val) => val !== null && typeof val === "object" && !Array.isArray(val),
        "isObject",
      );
      var transform = /* @__PURE__ */ __name((toNumber) => {
        return (value) => (toNumber === true ? Number(value) : String(value));
      }, "transform");
      var isValidValue = /* @__PURE__ */ __name((value) => {
        return (
          typeof value === "number" ||
          (typeof value === "string" && value !== "")
        );
      }, "isValidValue");
      var isNumber = /* @__PURE__ */ __name(
        (num) => Number.isInteger(+num),
        "isNumber",
      );
      var zeros = /* @__PURE__ */ __name((input) => {
        let value = `${input}`;
        let index2 = -1;
        if (value[0] === "-") value = value.slice(1);
        if (value === "0") return false;
        while (value[++index2] === "0");
        return index2 > 0;
      }, "zeros");
      var stringify2 = /* @__PURE__ */ __name((start, end, options) => {
        if (typeof start === "string" || typeof end === "string") {
          return true;
        }
        return options.stringify === true;
      }, "stringify");
      var pad = /* @__PURE__ */ __name((input, maxLength, toNumber) => {
        if (maxLength > 0) {
          let dash = input[0] === "-" ? "-" : "";
          if (dash) input = input.slice(1);
          input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
        }
        if (toNumber === false) {
          return String(input);
        }
        return input;
      }, "pad");
      var toMaxLen = /* @__PURE__ */ __name((input, maxLength) => {
        let negative = input[0] === "-" ? "-" : "";
        if (negative) {
          input = input.slice(1);
          maxLength--;
        }
        while (input.length < maxLength) input = "0" + input;
        return negative ? "-" + input : input;
      }, "toMaxLen");
      var toSequence = /* @__PURE__ */ __name((parts, options, maxLen) => {
        parts.negatives.sort((a, b) => (a < b ? -1 : a > b ? 1 : 0));
        parts.positives.sort((a, b) => (a < b ? -1 : a > b ? 1 : 0));
        let prefix2 = options.capture ? "" : "?:";
        let positives = "";
        let negatives = "";
        let result;
        if (parts.positives.length) {
          positives = parts.positives
            .map((v) => toMaxLen(String(v), maxLen))
            .join("|");
        }
        if (parts.negatives.length) {
          negatives = `-(${prefix2}${parts.negatives.map((v) => toMaxLen(String(v), maxLen)).join("|")})`;
        }
        if (positives && negatives) {
          result = `${positives}|${negatives}`;
        } else {
          result = positives || negatives;
        }
        if (options.wrap) {
          return `(${prefix2}${result})`;
        }
        return result;
      }, "toSequence");
      var toRange = /* @__PURE__ */ __name((a, b, isNumbers, options) => {
        if (isNumbers) {
          return toRegexRange(a, b, { wrap: false, ...options });
        }
        let start = String.fromCharCode(a);
        if (a === b) return start;
        let stop = String.fromCharCode(b);
        return `[${start}-${stop}]`;
      }, "toRange");
      var toRegex = /* @__PURE__ */ __name((start, end, options) => {
        if (Array.isArray(start)) {
          let wrap2 = options.wrap === true;
          let prefix2 = options.capture ? "" : "?:";
          return wrap2 ? `(${prefix2}${start.join("|")})` : start.join("|");
        }
        return toRegexRange(start, end, options);
      }, "toRegex");
      var rangeError = /* @__PURE__ */ __name((...args) => {
        return new RangeError(
          "Invalid range arguments: " + util2.inspect(...args),
        );
      }, "rangeError");
      var invalidRange = /* @__PURE__ */ __name((start, end, options) => {
        if (options.strictRanges === true) throw rangeError([start, end]);
        return [];
      }, "invalidRange");
      var invalidStep = /* @__PURE__ */ __name((step, options) => {
        if (options.strictRanges === true) {
          throw new TypeError(`Expected step "${step}" to be a number`);
        }
        return [];
      }, "invalidStep");
      var fillNumbers = /* @__PURE__ */ __name(
        (start, end, step = 1, options = {}) => {
          let a = Number(start);
          let b = Number(end);
          if (!Number.isInteger(a) || !Number.isInteger(b)) {
            if (options.strictRanges === true) throw rangeError([start, end]);
            return [];
          }
          if (a === 0) a = 0;
          if (b === 0) b = 0;
          let descending = a > b;
          let startString = String(start);
          let endString = String(end);
          let stepString = String(step);
          step = Math.max(Math.abs(step), 1);
          let padded =
            zeros(startString) || zeros(endString) || zeros(stepString);
          let maxLen = padded
            ? Math.max(startString.length, endString.length, stepString.length)
            : 0;
          let toNumber =
            padded === false && stringify2(start, end, options) === false;
          let format2 = options.transform || transform(toNumber);
          if (options.toRegex && step === 1) {
            return toRange(
              toMaxLen(start, maxLen),
              toMaxLen(end, maxLen),
              true,
              options,
            );
          }
          let parts = { negatives: [], positives: [] };
          let push3 = /* @__PURE__ */ __name(
            (num) =>
              parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num)),
            "push",
          );
          let range = [];
          let index2 = 0;
          while (descending ? a >= b : a <= b) {
            if (options.toRegex === true && step > 1) {
              push3(a);
            } else {
              range.push(pad(format2(a, index2), maxLen, toNumber));
            }
            a = descending ? a - step : a + step;
            index2++;
          }
          if (options.toRegex === true) {
            return step > 1
              ? toSequence(parts, options, maxLen)
              : toRegex(range, null, { wrap: false, ...options });
          }
          return range;
        },
        "fillNumbers",
      );
      var fillLetters = /* @__PURE__ */ __name(
        (start, end, step = 1, options = {}) => {
          if (
            (!isNumber(start) && start.length > 1) ||
            (!isNumber(end) && end.length > 1)
          ) {
            return invalidRange(start, end, options);
          }
          let format2 =
            options.transform || ((val) => String.fromCharCode(val));
          let a = `${start}`.charCodeAt(0);
          let b = `${end}`.charCodeAt(0);
          let descending = a > b;
          let min = Math.min(a, b);
          let max = Math.max(a, b);
          if (options.toRegex && step === 1) {
            return toRange(min, max, false, options);
          }
          let range = [];
          let index2 = 0;
          while (descending ? a >= b : a <= b) {
            range.push(format2(a, index2));
            a = descending ? a - step : a + step;
            index2++;
          }
          if (options.toRegex === true) {
            return toRegex(range, null, { wrap: false, options });
          }
          return range;
        },
        "fillLetters",
      );
      var fill = /* @__PURE__ */ __name((start, end, step, options = {}) => {
        if (end == null && isValidValue(start)) {
          return [start];
        }
        if (!isValidValue(start) || !isValidValue(end)) {
          return invalidRange(start, end, options);
        }
        if (typeof step === "function") {
          return fill(start, end, 1, { transform: step });
        }
        if (isObject(step)) {
          return fill(start, end, 0, step);
        }
        let opts = { ...options };
        if (opts.capture === true) opts.wrap = true;
        step = step || opts.step || 1;
        if (!isNumber(step)) {
          if (step != null && !isObject(step)) return invalidStep(step, opts);
          return fill(start, end, 1, step);
        }
        if (isNumber(start) && isNumber(end)) {
          return fillNumbers(start, end, step, opts);
        }
        return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
      }, "fill");
      module.exports = fill;
    },
  });

  // node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/compile.js
  var require_compile = __commonJS({
    "node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/compile.js"(
      exports,
      module,
    ) {
      "use strict";
      var fill = require_fill_range();
      var utils = require_utils7();
      var compile = /* @__PURE__ */ __name((ast, options = {}) => {
        const walk = /* @__PURE__ */ __name((node2, parent = {}) => {
          const invalidBlock = utils.isInvalidBrace(parent);
          const invalidNode =
            node2.invalid === true && options.escapeInvalid === true;
          const invalid2 = invalidBlock === true || invalidNode === true;
          const prefix2 = options.escapeInvalid === true ? "\\" : "";
          let output = "";
          if (node2.isOpen === true) {
            return prefix2 + node2.value;
          }
          if (node2.isClose === true) {
            console.log("node.isClose", prefix2, node2.value);
            return prefix2 + node2.value;
          }
          if (node2.type === "open") {
            return invalid2 ? prefix2 + node2.value : "(";
          }
          if (node2.type === "close") {
            return invalid2 ? prefix2 + node2.value : ")";
          }
          if (node2.type === "comma") {
            return node2.prev.type === "comma"
              ? ""
              : invalid2
                ? node2.value
                : "|";
          }
          if (node2.value) {
            return node2.value;
          }
          if (node2.nodes && node2.ranges > 0) {
            const args = utils.reduce(node2.nodes);
            const range = fill(...args, {
              ...options,
              wrap: false,
              toRegex: true,
              strictZeros: true,
            });
            if (range.length !== 0) {
              return args.length > 1 && range.length > 1 ? `(${range})` : range;
            }
          }
          if (node2.nodes) {
            for (const child of node2.nodes) {
              output += walk(child, node2);
            }
          }
          return output;
        }, "walk");
        return walk(ast);
      }, "compile");
      module.exports = compile;
    },
  });

  // node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/expand.js
  var require_expand = __commonJS({
    "node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/expand.js"(
      exports,
      module,
    ) {
      "use strict";
      var fill = require_fill_range();
      var stringify2 = require_stringify();
      var utils = require_utils7();
      var append = /* @__PURE__ */ __name(
        (queue = "", stash = "", enclose = false) => {
          const result = [];
          queue = [].concat(queue);
          stash = [].concat(stash);
          if (!stash.length) return queue;
          if (!queue.length) {
            return enclose
              ? utils.flatten(stash).map((ele) => `{${ele}}`)
              : stash;
          }
          for (const item of queue) {
            if (Array.isArray(item)) {
              for (const value of item) {
                result.push(append(value, stash, enclose));
              }
            } else {
              for (let ele of stash) {
                if (enclose === true && typeof ele === "string")
                  ele = `{${ele}}`;
                result.push(
                  Array.isArray(ele) ? append(item, ele, enclose) : item + ele,
                );
              }
            }
          }
          return utils.flatten(result);
        },
        "append",
      );
      var expand = /* @__PURE__ */ __name((ast, options = {}) => {
        const rangeLimit =
          options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
        const walk = /* @__PURE__ */ __name((node2, parent = {}) => {
          node2.queue = [];
          let p = parent;
          let q = parent.queue;
          while (p.type !== "brace" && p.type !== "root" && p.parent) {
            p = p.parent;
            q = p.queue;
          }
          if (node2.invalid || node2.dollar) {
            q.push(append(q.pop(), stringify2(node2, options)));
            return;
          }
          if (
            node2.type === "brace" &&
            node2.invalid !== true &&
            node2.nodes.length === 2
          ) {
            q.push(append(q.pop(), ["{}"]));
            return;
          }
          if (node2.nodes && node2.ranges > 0) {
            const args = utils.reduce(node2.nodes);
            if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
              throw new RangeError(
                "expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.",
              );
            }
            let range = fill(...args, options);
            if (range.length === 0) {
              range = stringify2(node2, options);
            }
            q.push(append(q.pop(), range));
            node2.nodes = [];
            return;
          }
          const enclose = utils.encloseBrace(node2);
          let queue = node2.queue;
          let block = node2;
          while (
            block.type !== "brace" &&
            block.type !== "root" &&
            block.parent
          ) {
            block = block.parent;
            queue = block.queue;
          }
          for (let i = 0; i < node2.nodes.length; i++) {
            const child = node2.nodes[i];
            if (child.type === "comma" && node2.type === "brace") {
              if (i === 1) queue.push("");
              queue.push("");
              continue;
            }
            if (child.type === "close") {
              q.push(append(q.pop(), queue, enclose));
              continue;
            }
            if (child.value && child.type !== "open") {
              queue.push(append(queue.pop(), child.value));
              continue;
            }
            if (child.nodes) {
              walk(child, node2);
            }
          }
          return queue;
        }, "walk");
        return utils.flatten(walk(ast));
      }, "expand");
      module.exports = expand;
    },
  });

  // node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/constants.js
  var require_constants6 = __commonJS({
    "node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/constants.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = {
        MAX_LENGTH: 1e4,
        // Digits
        CHAR_0: "0",
        /* 0 */
        CHAR_9: "9",
        /* 9 */
        // Alphabet chars.
        CHAR_UPPERCASE_A: "A",
        /* A */
        CHAR_LOWERCASE_A: "a",
        /* a */
        CHAR_UPPERCASE_Z: "Z",
        /* Z */
        CHAR_LOWERCASE_Z: "z",
        /* z */
        CHAR_LEFT_PARENTHESES: "(",
        /* ( */
        CHAR_RIGHT_PARENTHESES: ")",
        /* ) */
        CHAR_ASTERISK: "*",
        /* * */
        // Non-alphabetic chars.
        CHAR_AMPERSAND: "&",
        /* & */
        CHAR_AT: "@",
        /* @ */
        CHAR_BACKSLASH: "\\",
        /* \ */
        CHAR_BACKTICK: "`",
        /* ` */
        CHAR_CARRIAGE_RETURN: "\r",
        /* \r */
        CHAR_CIRCUMFLEX_ACCENT: "^",
        /* ^ */
        CHAR_COLON: ":",
        /* : */
        CHAR_COMMA: ",",
        /* , */
        CHAR_DOLLAR: "$",
        /* . */
        CHAR_DOT: ".",
        /* . */
        CHAR_DOUBLE_QUOTE: '"',
        /* " */
        CHAR_EQUAL: "=",
        /* = */
        CHAR_EXCLAMATION_MARK: "!",
        /* ! */
        CHAR_FORM_FEED: "\f",
        /* \f */
        CHAR_FORWARD_SLASH: "/",
        /* / */
        CHAR_HASH: "#",
        /* # */
        CHAR_HYPHEN_MINUS: "-",
        /* - */
        CHAR_LEFT_ANGLE_BRACKET: "<",
        /* < */
        CHAR_LEFT_CURLY_BRACE: "{",
        /* { */
        CHAR_LEFT_SQUARE_BRACKET: "[",
        /* [ */
        CHAR_LINE_FEED: "\n",
        /* \n */
        CHAR_NO_BREAK_SPACE: "\xA0",
        /* \u00A0 */
        CHAR_PERCENT: "%",
        /* % */
        CHAR_PLUS: "+",
        /* + */
        CHAR_QUESTION_MARK: "?",
        /* ? */
        CHAR_RIGHT_ANGLE_BRACKET: ">",
        /* > */
        CHAR_RIGHT_CURLY_BRACE: "}",
        /* } */
        CHAR_RIGHT_SQUARE_BRACKET: "]",
        /* ] */
        CHAR_SEMICOLON: ";",
        /* ; */
        CHAR_SINGLE_QUOTE: "'",
        /* ' */
        CHAR_SPACE: " ",
        /*   */
        CHAR_TAB: "	",
        /* \t */
        CHAR_UNDERSCORE: "_",
        /* _ */
        CHAR_VERTICAL_LINE: "|",
        /* | */
        CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF",
        /* \uFEFF */
      };
    },
  });

  // node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/parse.js
  var require_parse2 = __commonJS({
    "node_modules/.pnpm/braces@3.0.3/node_modules/braces/lib/parse.js"(
      exports,
      module,
    ) {
      "use strict";
      var stringify2 = require_stringify();
      var {
        MAX_LENGTH,
        CHAR_BACKSLASH,
        /* \ */
        CHAR_BACKTICK,
        /* ` */
        CHAR_COMMA,
        /* , */
        CHAR_DOT,
        /* . */
        CHAR_LEFT_PARENTHESES,
        /* ( */
        CHAR_RIGHT_PARENTHESES,
        /* ) */
        CHAR_LEFT_CURLY_BRACE,
        /* { */
        CHAR_RIGHT_CURLY_BRACE,
        /* } */
        CHAR_LEFT_SQUARE_BRACKET,
        /* [ */
        CHAR_RIGHT_SQUARE_BRACKET,
        /* ] */
        CHAR_DOUBLE_QUOTE,
        /* " */
        CHAR_SINGLE_QUOTE,
        /* ' */
        CHAR_NO_BREAK_SPACE,
        CHAR_ZERO_WIDTH_NOBREAK_SPACE,
      } = require_constants6();
      var parse3 = /* @__PURE__ */ __name((input, options = {}) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected a string");
        }
        const opts = options || {};
        const max =
          typeof opts.maxLength === "number"
            ? Math.min(MAX_LENGTH, opts.maxLength)
            : MAX_LENGTH;
        if (input.length > max) {
          throw new SyntaxError(
            `Input length (${input.length}), exceeds max characters (${max})`,
          );
        }
        const ast = { type: "root", input, nodes: [] };
        const stack = [ast];
        let block = ast;
        let prev = ast;
        let brackets = 0;
        const length = input.length;
        let index2 = 0;
        let depth = 0;
        let value;
        const advance = /* @__PURE__ */ __name(
          () => input[index2++],
          "advance",
        );
        const push3 = /* @__PURE__ */ __name((node2) => {
          if (node2.type === "text" && prev.type === "dot") {
            prev.type = "text";
          }
          if (prev && prev.type === "text" && node2.type === "text") {
            prev.value += node2.value;
            return;
          }
          block.nodes.push(node2);
          node2.parent = block;
          node2.prev = prev;
          prev = node2;
          return node2;
        }, "push");
        push3({ type: "bos" });
        while (index2 < length) {
          block = stack[stack.length - 1];
          value = advance();
          if (
            value === CHAR_ZERO_WIDTH_NOBREAK_SPACE ||
            value === CHAR_NO_BREAK_SPACE
          ) {
            continue;
          }
          if (value === CHAR_BACKSLASH) {
            push3({
              type: "text",
              value: (options.keepEscaping ? value : "") + advance(),
            });
            continue;
          }
          if (value === CHAR_RIGHT_SQUARE_BRACKET) {
            push3({ type: "text", value: "\\" + value });
            continue;
          }
          if (value === CHAR_LEFT_SQUARE_BRACKET) {
            brackets++;
            let next;
            while (index2 < length && (next = advance())) {
              value += next;
              if (next === CHAR_LEFT_SQUARE_BRACKET) {
                brackets++;
                continue;
              }
              if (next === CHAR_BACKSLASH) {
                value += advance();
                continue;
              }
              if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                brackets--;
                if (brackets === 0) {
                  break;
                }
              }
            }
            push3({ type: "text", value });
            continue;
          }
          if (value === CHAR_LEFT_PARENTHESES) {
            block = push3({ type: "paren", nodes: [] });
            stack.push(block);
            push3({ type: "text", value });
            continue;
          }
          if (value === CHAR_RIGHT_PARENTHESES) {
            if (block.type !== "paren") {
              push3({ type: "text", value });
              continue;
            }
            block = stack.pop();
            push3({ type: "text", value });
            block = stack[stack.length - 1];
            continue;
          }
          if (
            value === CHAR_DOUBLE_QUOTE ||
            value === CHAR_SINGLE_QUOTE ||
            value === CHAR_BACKTICK
          ) {
            const open = value;
            let next;
            if (options.keepQuotes !== true) {
              value = "";
            }
            while (index2 < length && (next = advance())) {
              if (next === CHAR_BACKSLASH) {
                value += next + advance();
                continue;
              }
              if (next === open) {
                if (options.keepQuotes === true) value += next;
                break;
              }
              value += next;
            }
            push3({ type: "text", value });
            continue;
          }
          if (value === CHAR_LEFT_CURLY_BRACE) {
            depth++;
            const dollar =
              (prev.value && prev.value.slice(-1) === "$") ||
              block.dollar === true;
            const brace = {
              type: "brace",
              open: true,
              close: false,
              dollar,
              depth,
              commas: 0,
              ranges: 0,
              nodes: [],
            };
            block = push3(brace);
            stack.push(block);
            push3({ type: "open", value });
            continue;
          }
          if (value === CHAR_RIGHT_CURLY_BRACE) {
            if (block.type !== "brace") {
              push3({ type: "text", value });
              continue;
            }
            const type = "close";
            block = stack.pop();
            block.close = true;
            push3({ type, value });
            depth--;
            block = stack[stack.length - 1];
            continue;
          }
          if (value === CHAR_COMMA && depth > 0) {
            if (block.ranges > 0) {
              block.ranges = 0;
              const open = block.nodes.shift();
              block.nodes = [open, { type: "text", value: stringify2(block) }];
            }
            push3({ type: "comma", value });
            block.commas++;
            continue;
          }
          if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
            const siblings = block.nodes;
            if (depth === 0 || siblings.length === 0) {
              push3({ type: "text", value });
              continue;
            }
            if (prev.type === "dot") {
              block.range = [];
              prev.value += value;
              prev.type = "range";
              if (block.nodes.length !== 3 && block.nodes.length !== 5) {
                block.invalid = true;
                block.ranges = 0;
                prev.type = "text";
                continue;
              }
              block.ranges++;
              block.args = [];
              continue;
            }
            if (prev.type === "range") {
              siblings.pop();
              const before = siblings[siblings.length - 1];
              before.value += prev.value + value;
              prev = before;
              block.ranges--;
              continue;
            }
            push3({ type: "dot", value });
            continue;
          }
          push3({ type: "text", value });
        }
        do {
          block = stack.pop();
          if (block.type !== "root") {
            block.nodes.forEach((node2) => {
              if (!node2.nodes) {
                if (node2.type === "open") node2.isOpen = true;
                if (node2.type === "close") node2.isClose = true;
                if (!node2.nodes) node2.type = "text";
                node2.invalid = true;
              }
            });
            const parent = stack[stack.length - 1];
            const index3 = parent.nodes.indexOf(block);
            parent.nodes.splice(index3, 1, ...block.nodes);
          }
        } while (stack.length > 0);
        push3({ type: "eos" });
        return ast;
      }, "parse");
      module.exports = parse3;
    },
  });

  // node_modules/.pnpm/braces@3.0.3/node_modules/braces/index.js
  var require_braces = __commonJS({
    "node_modules/.pnpm/braces@3.0.3/node_modules/braces/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var stringify2 = require_stringify();
      var compile = require_compile();
      var expand = require_expand();
      var parse3 = require_parse2();
      var braces = /* @__PURE__ */ __name((input, options = {}) => {
        let output = [];
        if (Array.isArray(input)) {
          for (const pattern of input) {
            const result = braces.create(pattern, options);
            if (Array.isArray(result)) {
              output.push(...result);
            } else {
              output.push(result);
            }
          }
        } else {
          output = [].concat(braces.create(input, options));
        }
        if (options && options.expand === true && options.nodupes === true) {
          output = [...new Set(output)];
        }
        return output;
      }, "braces");
      braces.parse = (input, options = {}) => parse3(input, options);
      braces.stringify = (input, options = {}) => {
        if (typeof input === "string") {
          return stringify2(braces.parse(input, options), options);
        }
        return stringify2(input, options);
      };
      braces.compile = (input, options = {}) => {
        if (typeof input === "string") {
          input = braces.parse(input, options);
        }
        return compile(input, options);
      };
      braces.expand = (input, options = {}) => {
        if (typeof input === "string") {
          input = braces.parse(input, options);
        }
        let result = expand(input, options);
        if (options.noempty === true) {
          result = result.filter(Boolean);
        }
        if (options.nodupes === true) {
          result = [...new Set(result)];
        }
        return result;
      };
      braces.create = (input, options = {}) => {
        if (input === "" || input.length < 3) {
          return [input];
        }
        return options.expand !== true
          ? braces.compile(input, options)
          : braces.expand(input, options);
      };
      module.exports = braces;
    },
  });

  // node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js
  var require_constants7 = __commonJS({
    "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var WIN_SLASH = "\\\\/";
      var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
      var DOT_LITERAL = "\\.";
      var PLUS_LITERAL = "\\+";
      var QMARK_LITERAL = "\\?";
      var SLASH_LITERAL = "\\/";
      var ONE_CHAR = "(?=.)";
      var QMARK = "[^/]";
      var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
      var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
      var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
      var NO_DOT = `(?!${DOT_LITERAL})`;
      var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
      var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
      var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
      var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
      var STAR = `${QMARK}*?`;
      var POSIX_CHARS = {
        DOT_LITERAL,
        PLUS_LITERAL,
        QMARK_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        QMARK,
        END_ANCHOR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK_NO_DOT,
        STAR,
        START_ANCHOR,
      };
      var WINDOWS_CHARS = {
        ...POSIX_CHARS,
        SLASH_LITERAL: `[${WIN_SLASH}]`,
        QMARK: WIN_NO_SLASH,
        STAR: `${WIN_NO_SLASH}*?`,
        DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
        NO_DOT: `(?!${DOT_LITERAL})`,
        NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
        NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
        NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
        QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
        START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
        END_ANCHOR: `(?:[${WIN_SLASH}]|$)`,
      };
      var POSIX_REGEX_SOURCE = {
        alnum: "a-zA-Z0-9",
        alpha: "a-zA-Z",
        ascii: "\\x00-\\x7F",
        blank: " \\t",
        cntrl: "\\x00-\\x1F\\x7F",
        digit: "0-9",
        graph: "\\x21-\\x7E",
        lower: "a-z",
        print: "\\x20-\\x7E ",
        punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
        space: " \\t\\r\\n\\v\\f",
        upper: "A-Z",
        word: "A-Za-z0-9_",
        xdigit: "A-Fa-f0-9",
      };
      module.exports = {
        MAX_LENGTH: 1024 * 64,
        POSIX_REGEX_SOURCE,
        // regular expressions
        REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
        REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
        REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
        REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
        REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
        REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
        // Replace globs with equivalent patterns to reduce parsing time.
        REPLACEMENTS: {
          "***": "*",
          "**/**": "**",
          "**/**/**": "**",
        },
        // Digits
        CHAR_0: 48,
        /* 0 */
        CHAR_9: 57,
        /* 9 */
        // Alphabet chars.
        CHAR_UPPERCASE_A: 65,
        /* A */
        CHAR_LOWERCASE_A: 97,
        /* a */
        CHAR_UPPERCASE_Z: 90,
        /* Z */
        CHAR_LOWERCASE_Z: 122,
        /* z */
        CHAR_LEFT_PARENTHESES: 40,
        /* ( */
        CHAR_RIGHT_PARENTHESES: 41,
        /* ) */
        CHAR_ASTERISK: 42,
        /* * */
        // Non-alphabetic chars.
        CHAR_AMPERSAND: 38,
        /* & */
        CHAR_AT: 64,
        /* @ */
        CHAR_BACKWARD_SLASH: 92,
        /* \ */
        CHAR_CARRIAGE_RETURN: 13,
        /* \r */
        CHAR_CIRCUMFLEX_ACCENT: 94,
        /* ^ */
        CHAR_COLON: 58,
        /* : */
        CHAR_COMMA: 44,
        /* , */
        CHAR_DOT: 46,
        /* . */
        CHAR_DOUBLE_QUOTE: 34,
        /* " */
        CHAR_EQUAL: 61,
        /* = */
        CHAR_EXCLAMATION_MARK: 33,
        /* ! */
        CHAR_FORM_FEED: 12,
        /* \f */
        CHAR_FORWARD_SLASH: 47,
        /* / */
        CHAR_GRAVE_ACCENT: 96,
        /* ` */
        CHAR_HASH: 35,
        /* # */
        CHAR_HYPHEN_MINUS: 45,
        /* - */
        CHAR_LEFT_ANGLE_BRACKET: 60,
        /* < */
        CHAR_LEFT_CURLY_BRACE: 123,
        /* { */
        CHAR_LEFT_SQUARE_BRACKET: 91,
        /* [ */
        CHAR_LINE_FEED: 10,
        /* \n */
        CHAR_NO_BREAK_SPACE: 160,
        /* \u00A0 */
        CHAR_PERCENT: 37,
        /* % */
        CHAR_PLUS: 43,
        /* + */
        CHAR_QUESTION_MARK: 63,
        /* ? */
        CHAR_RIGHT_ANGLE_BRACKET: 62,
        /* > */
        CHAR_RIGHT_CURLY_BRACE: 125,
        /* } */
        CHAR_RIGHT_SQUARE_BRACKET: 93,
        /* ] */
        CHAR_SEMICOLON: 59,
        /* ; */
        CHAR_SINGLE_QUOTE: 39,
        /* ' */
        CHAR_SPACE: 32,
        /*   */
        CHAR_TAB: 9,
        /* \t */
        CHAR_UNDERSCORE: 95,
        /* _ */
        CHAR_VERTICAL_LINE: 124,
        /* | */
        CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
        /* \uFEFF */
        SEP: path4.sep,
        /**
         * Create EXTGLOB_CHARS
         */
        extglobChars(chars) {
          return {
            "!": {
              type: "negate",
              open: "(?:(?!(?:",
              close: `))${chars.STAR})`,
            },
            "?": { type: "qmark", open: "(?:", close: ")?" },
            "+": { type: "plus", open: "(?:", close: ")+" },
            "*": { type: "star", open: "(?:", close: ")*" },
            "@": { type: "at", open: "(?:", close: ")" },
          };
        },
        /**
         * Create GLOB_CHARS
         */
        globChars(win32) {
          return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
        },
      };
    },
  });

  // node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js
  var require_utils8 = __commonJS({
    "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js"(
      exports,
    ) {
      "use strict";
      var path4 = __require("path");
      var win32 = process.platform === "win32";
      var {
        REGEX_BACKSLASH,
        REGEX_REMOVE_BACKSLASH,
        REGEX_SPECIAL_CHARS,
        REGEX_SPECIAL_CHARS_GLOBAL,
      } = require_constants7();
      exports.isObject = (val) =>
        val !== null && typeof val === "object" && !Array.isArray(val);
      exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
      exports.isRegexChar = (str) =>
        str.length === 1 && exports.hasRegexChars(str);
      exports.escapeRegex = (str) =>
        str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
      exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
      exports.removeBackslashes = (str) => {
        return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
          return match === "\\" ? "" : match;
        });
      };
      exports.supportsLookbehinds = () => {
        const segs = process.version.slice(1).split(".").map(Number);
        if (
          (segs.length === 3 && segs[0] >= 9) ||
          (segs[0] === 8 && segs[1] >= 10)
        ) {
          return true;
        }
        return false;
      };
      exports.isWindows = (options) => {
        if (options && typeof options.windows === "boolean") {
          return options.windows;
        }
        return win32 === true || path4.sep === "\\";
      };
      exports.escapeLast = (input, char, lastIdx) => {
        const idx = input.lastIndexOf(char, lastIdx);
        if (idx === -1) return input;
        if (input[idx - 1] === "\\")
          return exports.escapeLast(input, char, idx - 1);
        return `${input.slice(0, idx)}\\${input.slice(idx)}`;
      };
      exports.removePrefix = (input, state = {}) => {
        let output = input;
        if (output.startsWith("./")) {
          output = output.slice(2);
          state.prefix = "./";
        }
        return output;
      };
      exports.wrapOutput = (input, state = {}, options = {}) => {
        const prepend = options.contains ? "" : "^";
        const append = options.contains ? "" : "$";
        let output = `${prepend}(?:${input})${append}`;
        if (state.negated === true) {
          output = `(?:^(?!${output}).*$)`;
        }
        return output;
      };
    },
  });

  // node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js
  var require_scan = __commonJS({
    "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js"(
      exports,
      module,
    ) {
      "use strict";
      var utils = require_utils8();
      var {
        CHAR_ASTERISK,
        /* * */
        CHAR_AT,
        /* @ */
        CHAR_BACKWARD_SLASH,
        /* \ */
        CHAR_COMMA,
        /* , */
        CHAR_DOT,
        /* . */
        CHAR_EXCLAMATION_MARK,
        /* ! */
        CHAR_FORWARD_SLASH,
        /* / */
        CHAR_LEFT_CURLY_BRACE,
        /* { */
        CHAR_LEFT_PARENTHESES,
        /* ( */
        CHAR_LEFT_SQUARE_BRACKET,
        /* [ */
        CHAR_PLUS,
        /* + */
        CHAR_QUESTION_MARK,
        /* ? */
        CHAR_RIGHT_CURLY_BRACE,
        /* } */
        CHAR_RIGHT_PARENTHESES,
        /* ) */
        CHAR_RIGHT_SQUARE_BRACKET,
        /* ] */
      } = require_constants7();
      var isPathSeparator = /* @__PURE__ */ __name((code2) => {
        return code2 === CHAR_FORWARD_SLASH || code2 === CHAR_BACKWARD_SLASH;
      }, "isPathSeparator");
      var depth = /* @__PURE__ */ __name((token) => {
        if (token.isPrefix !== true) {
          token.depth = token.isGlobstar ? Infinity : 1;
        }
      }, "depth");
      var scan = /* @__PURE__ */ __name((input, options) => {
        const opts = options || {};
        const length = input.length - 1;
        const scanToEnd = opts.parts === true || opts.scanToEnd === true;
        const slashes = [];
        const tokens = [];
        const parts = [];
        let str = input;
        let index2 = -1;
        let start = 0;
        let lastIndex = 0;
        let isBrace = false;
        let isBracket = false;
        let isGlob = false;
        let isExtglob = false;
        let isGlobstar = false;
        let braceEscaped = false;
        let backslashes = false;
        let negated = false;
        let negatedExtglob = false;
        let finished = false;
        let braces = 0;
        let prev;
        let code2;
        let token = { value: "", depth: 0, isGlob: false };
        const eos = /* @__PURE__ */ __name(() => index2 >= length, "eos");
        const peek = /* @__PURE__ */ __name(
          () => str.charCodeAt(index2 + 1),
          "peek",
        );
        const advance = /* @__PURE__ */ __name(() => {
          prev = code2;
          return str.charCodeAt(++index2);
        }, "advance");
        while (index2 < length) {
          code2 = advance();
          let next;
          if (code2 === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            code2 = advance();
            if (code2 === CHAR_LEFT_CURLY_BRACE) {
              braceEscaped = true;
            }
            continue;
          }
          if (braceEscaped === true || code2 === CHAR_LEFT_CURLY_BRACE) {
            braces++;
            while (eos() !== true && (code2 = advance())) {
              if (code2 === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true;
                advance();
                continue;
              }
              if (code2 === CHAR_LEFT_CURLY_BRACE) {
                braces++;
                continue;
              }
              if (
                braceEscaped !== true &&
                code2 === CHAR_DOT &&
                (code2 = advance()) === CHAR_DOT
              ) {
                isBrace = token.isBrace = true;
                isGlob = token.isGlob = true;
                finished = true;
                if (scanToEnd === true) {
                  continue;
                }
                break;
              }
              if (braceEscaped !== true && code2 === CHAR_COMMA) {
                isBrace = token.isBrace = true;
                isGlob = token.isGlob = true;
                finished = true;
                if (scanToEnd === true) {
                  continue;
                }
                break;
              }
              if (code2 === CHAR_RIGHT_CURLY_BRACE) {
                braces--;
                if (braces === 0) {
                  braceEscaped = false;
                  isBrace = token.isBrace = true;
                  finished = true;
                  break;
                }
              }
            }
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code2 === CHAR_FORWARD_SLASH) {
            slashes.push(index2);
            tokens.push(token);
            token = { value: "", depth: 0, isGlob: false };
            if (finished === true) continue;
            if (prev === CHAR_DOT && index2 === start + 1) {
              start += 2;
              continue;
            }
            lastIndex = index2 + 1;
            continue;
          }
          if (opts.noext !== true) {
            const isExtglobChar =
              code2 === CHAR_PLUS ||
              code2 === CHAR_AT ||
              code2 === CHAR_ASTERISK ||
              code2 === CHAR_QUESTION_MARK ||
              code2 === CHAR_EXCLAMATION_MARK;
            if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
              isGlob = token.isGlob = true;
              isExtglob = token.isExtglob = true;
              finished = true;
              if (code2 === CHAR_EXCLAMATION_MARK && index2 === start) {
                negatedExtglob = true;
              }
              if (scanToEnd === true) {
                while (eos() !== true && (code2 = advance())) {
                  if (code2 === CHAR_BACKWARD_SLASH) {
                    backslashes = token.backslashes = true;
                    code2 = advance();
                    continue;
                  }
                  if (code2 === CHAR_RIGHT_PARENTHESES) {
                    isGlob = token.isGlob = true;
                    finished = true;
                    break;
                  }
                }
                continue;
              }
              break;
            }
          }
          if (code2 === CHAR_ASTERISK) {
            if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code2 === CHAR_QUESTION_MARK) {
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code2 === CHAR_LEFT_SQUARE_BRACKET) {
            while (eos() !== true && (next = advance())) {
              if (next === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true;
                advance();
                continue;
              }
              if (next === CHAR_RIGHT_SQUARE_BRACKET) {
                isBracket = token.isBracket = true;
                isGlob = token.isGlob = true;
                finished = true;
                break;
              }
            }
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (
            opts.nonegate !== true &&
            code2 === CHAR_EXCLAMATION_MARK &&
            index2 === start
          ) {
            negated = token.negated = true;
            start++;
            continue;
          }
          if (opts.noparen !== true && code2 === CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true;
            if (scanToEnd === true) {
              while (eos() !== true && (code2 = advance())) {
                if (code2 === CHAR_LEFT_PARENTHESES) {
                  backslashes = token.backslashes = true;
                  code2 = advance();
                  continue;
                }
                if (code2 === CHAR_RIGHT_PARENTHESES) {
                  finished = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
          if (isGlob === true) {
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
        }
        if (opts.noext === true) {
          isExtglob = false;
          isGlob = false;
        }
        let base = str;
        let prefix2 = "";
        let glob = "";
        if (start > 0) {
          prefix2 = str.slice(0, start);
          str = str.slice(start);
          lastIndex -= start;
        }
        if (base && isGlob === true && lastIndex > 0) {
          base = str.slice(0, lastIndex);
          glob = str.slice(lastIndex);
        } else if (isGlob === true) {
          base = "";
          glob = str;
        } else {
          base = str;
        }
        if (base && base !== "" && base !== "/" && base !== str) {
          if (isPathSeparator(base.charCodeAt(base.length - 1))) {
            base = base.slice(0, -1);
          }
        }
        if (opts.unescape === true) {
          if (glob) glob = utils.removeBackslashes(glob);
          if (base && backslashes === true) {
            base = utils.removeBackslashes(base);
          }
        }
        const state = {
          prefix: prefix2,
          input,
          start,
          base,
          glob,
          isBrace,
          isBracket,
          isGlob,
          isExtglob,
          isGlobstar,
          negated,
          negatedExtglob,
        };
        if (opts.tokens === true) {
          state.maxDepth = 0;
          if (!isPathSeparator(code2)) {
            tokens.push(token);
          }
          state.tokens = tokens;
        }
        if (opts.parts === true || opts.tokens === true) {
          let prevIndex;
          for (let idx = 0; idx < slashes.length; idx++) {
            const n = prevIndex ? prevIndex + 1 : start;
            const i = slashes[idx];
            const value = input.slice(n, i);
            if (opts.tokens) {
              if (idx === 0 && start !== 0) {
                tokens[idx].isPrefix = true;
                tokens[idx].value = prefix2;
              } else {
                tokens[idx].value = value;
              }
              depth(tokens[idx]);
              state.maxDepth += tokens[idx].depth;
            }
            if (idx !== 0 || value !== "") {
              parts.push(value);
            }
            prevIndex = i;
          }
          if (prevIndex && prevIndex + 1 < input.length) {
            const value = input.slice(prevIndex + 1);
            parts.push(value);
            if (opts.tokens) {
              tokens[tokens.length - 1].value = value;
              depth(tokens[tokens.length - 1]);
              state.maxDepth += tokens[tokens.length - 1].depth;
            }
          }
          state.slashes = slashes;
          state.parts = parts;
        }
        return state;
      }, "scan");
      module.exports = scan;
    },
  });

  // node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js
  var require_parse3 = __commonJS({
    "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js"(
      exports,
      module,
    ) {
      "use strict";
      var constants = require_constants7();
      var utils = require_utils8();
      var {
        MAX_LENGTH,
        POSIX_REGEX_SOURCE,
        REGEX_NON_SPECIAL_CHARS,
        REGEX_SPECIAL_CHARS_BACKREF,
        REPLACEMENTS,
      } = constants;
      var expandRange = /* @__PURE__ */ __name((args, options) => {
        if (typeof options.expandRange === "function") {
          return options.expandRange(...args, options);
        }
        args.sort();
        const value = `[${args.join("-")}]`;
        try {
          new RegExp(value);
        } catch (ex) {
          return args.map((v) => utils.escapeRegex(v)).join("..");
        }
        return value;
      }, "expandRange");
      var syntaxError = /* @__PURE__ */ __name((type, char) => {
        return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
      }, "syntaxError");
      var parse3 = /* @__PURE__ */ __name((input, options) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected a string");
        }
        input = REPLACEMENTS[input] || input;
        const opts = { ...options };
        const max =
          typeof opts.maxLength === "number"
            ? Math.min(MAX_LENGTH, opts.maxLength)
            : MAX_LENGTH;
        let len = input.length;
        if (len > max) {
          throw new SyntaxError(
            `Input length: ${len}, exceeds maximum allowed length: ${max}`,
          );
        }
        const bos = { type: "bos", value: "", output: opts.prepend || "" };
        const tokens = [bos];
        const capture = opts.capture ? "" : "?:";
        const win32 = utils.isWindows(options);
        const PLATFORM_CHARS = constants.globChars(win32);
        const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
        const {
          DOT_LITERAL,
          PLUS_LITERAL,
          SLASH_LITERAL,
          ONE_CHAR,
          DOTS_SLASH,
          NO_DOT,
          NO_DOT_SLASH,
          NO_DOTS_SLASH,
          QMARK,
          QMARK_NO_DOT,
          STAR,
          START_ANCHOR,
        } = PLATFORM_CHARS;
        const globstar = /* @__PURE__ */ __name((opts2) => {
          return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
        }, "globstar");
        const nodot = opts.dot ? "" : NO_DOT;
        const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
        let star = opts.bash === true ? globstar(opts) : STAR;
        if (opts.capture) {
          star = `(${star})`;
        }
        if (typeof opts.noext === "boolean") {
          opts.noextglob = opts.noext;
        }
        const state = {
          input,
          index: -1,
          start: 0,
          dot: opts.dot === true,
          consumed: "",
          output: "",
          prefix: "",
          backtrack: false,
          negated: false,
          brackets: 0,
          braces: 0,
          parens: 0,
          quotes: 0,
          globstar: false,
          tokens,
        };
        input = utils.removePrefix(input, state);
        len = input.length;
        const extglobs = [];
        const braces = [];
        const stack = [];
        let prev = bos;
        let value;
        const eos = /* @__PURE__ */ __name(
          () => state.index === len - 1,
          "eos",
        );
        const peek = (state.peek = (n = 1) => input[state.index + n]);
        const advance = (state.advance = () => input[++state.index] || "");
        const remaining = /* @__PURE__ */ __name(
          () => input.slice(state.index + 1),
          "remaining",
        );
        const consume = /* @__PURE__ */ __name((value2 = "", num = 0) => {
          state.consumed += value2;
          state.index += num;
        }, "consume");
        const append = /* @__PURE__ */ __name((token) => {
          state.output += token.output != null ? token.output : token.value;
          consume(token.value);
        }, "append");
        const negate = /* @__PURE__ */ __name(() => {
          let count = 1;
          while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
            advance();
            state.start++;
            count++;
          }
          if (count % 2 === 0) {
            return false;
          }
          state.negated = true;
          state.start++;
          return true;
        }, "negate");
        const increment = /* @__PURE__ */ __name((type) => {
          state[type]++;
          stack.push(type);
        }, "increment");
        const decrement = /* @__PURE__ */ __name((type) => {
          state[type]--;
          stack.pop();
        }, "decrement");
        const push3 = /* @__PURE__ */ __name((tok) => {
          if (prev.type === "globstar") {
            const isBrace =
              state.braces > 0 &&
              (tok.type === "comma" || tok.type === "brace");
            const isExtglob =
              tok.extglob === true ||
              (extglobs.length &&
                (tok.type === "pipe" || tok.type === "paren"));
            if (
              tok.type !== "slash" &&
              tok.type !== "paren" &&
              !isBrace &&
              !isExtglob
            ) {
              state.output = state.output.slice(0, -prev.output.length);
              prev.type = "star";
              prev.value = "*";
              prev.output = star;
              state.output += prev.output;
            }
          }
          if (extglobs.length && tok.type !== "paren") {
            extglobs[extglobs.length - 1].inner += tok.value;
          }
          if (tok.value || tok.output) append(tok);
          if (prev && prev.type === "text" && tok.type === "text") {
            prev.value += tok.value;
            prev.output = (prev.output || "") + tok.value;
            return;
          }
          tok.prev = prev;
          tokens.push(tok);
          prev = tok;
        }, "push");
        const extglobOpen = /* @__PURE__ */ __name((type, value2) => {
          const token = { ...EXTGLOB_CHARS[value2], conditions: 1, inner: "" };
          token.prev = prev;
          token.parens = state.parens;
          token.output = state.output;
          const output = (opts.capture ? "(" : "") + token.open;
          increment("parens");
          push3({ type, value: value2, output: state.output ? "" : ONE_CHAR });
          push3({ type: "paren", extglob: true, value: advance(), output });
          extglobs.push(token);
        }, "extglobOpen");
        const extglobClose = /* @__PURE__ */ __name((token) => {
          let output = token.close + (opts.capture ? ")" : "");
          let rest;
          if (token.type === "negate") {
            let extglobStar = star;
            if (
              token.inner &&
              token.inner.length > 1 &&
              token.inner.includes("/")
            ) {
              extglobStar = globstar(opts);
            }
            if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
              output = token.close = `)$))${extglobStar}`;
            }
            if (
              token.inner.includes("*") &&
              (rest = remaining()) &&
              /^\.[^\\/.]+$/.test(rest)
            ) {
              const expression = parse3(rest, {
                ...options,
                fastpaths: false,
              }).output;
              output = token.close = `)${expression})${extglobStar})`;
            }
            if (token.prev.type === "bos") {
              state.negatedExtglob = true;
            }
          }
          push3({ type: "paren", extglob: true, value, output });
          decrement("parens");
        }, "extglobClose");
        if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
          let backslashes = false;
          let output = input.replace(
            REGEX_SPECIAL_CHARS_BACKREF,
            (m, esc, chars, first, rest, index2) => {
              if (first === "\\") {
                backslashes = true;
                return m;
              }
              if (first === "?") {
                if (esc) {
                  return esc + first + (rest ? QMARK.repeat(rest.length) : "");
                }
                if (index2 === 0) {
                  return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
                }
                return QMARK.repeat(chars.length);
              }
              if (first === ".") {
                return DOT_LITERAL.repeat(chars.length);
              }
              if (first === "*") {
                if (esc) {
                  return esc + first + (rest ? star : "");
                }
                return star;
              }
              return esc ? m : `\\${m}`;
            },
          );
          if (backslashes === true) {
            if (opts.unescape === true) {
              output = output.replace(/\\/g, "");
            } else {
              output = output.replace(/\\+/g, (m) => {
                return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
              });
            }
          }
          if (output === input && opts.contains === true) {
            state.output = input;
            return state;
          }
          state.output = utils.wrapOutput(output, state, options);
          return state;
        }
        while (!eos()) {
          value = advance();
          if (value === "\0") {
            continue;
          }
          if (value === "\\") {
            const next = peek();
            if (next === "/" && opts.bash !== true) {
              continue;
            }
            if (next === "." || next === ";") {
              continue;
            }
            if (!next) {
              value += "\\";
              push3({ type: "text", value });
              continue;
            }
            const match = /^\\+/.exec(remaining());
            let slashes = 0;
            if (match && match[0].length > 2) {
              slashes = match[0].length;
              state.index += slashes;
              if (slashes % 2 !== 0) {
                value += "\\";
              }
            }
            if (opts.unescape === true) {
              value = advance();
            } else {
              value += advance();
            }
            if (state.brackets === 0) {
              push3({ type: "text", value });
              continue;
            }
          }
          if (
            state.brackets > 0 &&
            (value !== "]" || prev.value === "[" || prev.value === "[^")
          ) {
            if (opts.posix !== false && value === ":") {
              const inner = prev.value.slice(1);
              if (inner.includes("[")) {
                prev.posix = true;
                if (inner.includes(":")) {
                  const idx = prev.value.lastIndexOf("[");
                  const pre = prev.value.slice(0, idx);
                  const rest2 = prev.value.slice(idx + 2);
                  const posix = POSIX_REGEX_SOURCE[rest2];
                  if (posix) {
                    prev.value = pre + posix;
                    state.backtrack = true;
                    advance();
                    if (!bos.output && tokens.indexOf(prev) === 1) {
                      bos.output = ONE_CHAR;
                    }
                    continue;
                  }
                }
              }
            }
            if (
              (value === "[" && peek() !== ":") ||
              (value === "-" && peek() === "]")
            ) {
              value = `\\${value}`;
            }
            if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
              value = `\\${value}`;
            }
            if (opts.posix === true && value === "!" && prev.value === "[") {
              value = "^";
            }
            prev.value += value;
            append({ value });
            continue;
          }
          if (state.quotes === 1 && value !== '"') {
            value = utils.escapeRegex(value);
            prev.value += value;
            append({ value });
            continue;
          }
          if (value === '"') {
            state.quotes = state.quotes === 1 ? 0 : 1;
            if (opts.keepQuotes === true) {
              push3({ type: "text", value });
            }
            continue;
          }
          if (value === "(") {
            increment("parens");
            push3({ type: "paren", value });
            continue;
          }
          if (value === ")") {
            if (state.parens === 0 && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "("));
            }
            const extglob = extglobs[extglobs.length - 1];
            if (extglob && state.parens === extglob.parens + 1) {
              extglobClose(extglobs.pop());
              continue;
            }
            push3({ type: "paren", value, output: state.parens ? ")" : "\\)" });
            decrement("parens");
            continue;
          }
          if (value === "[") {
            if (opts.nobracket === true || !remaining().includes("]")) {
              if (opts.nobracket !== true && opts.strictBrackets === true) {
                throw new SyntaxError(syntaxError("closing", "]"));
              }
              value = `\\${value}`;
            } else {
              increment("brackets");
            }
            push3({ type: "bracket", value });
            continue;
          }
          if (value === "]") {
            if (
              opts.nobracket === true ||
              (prev && prev.type === "bracket" && prev.value.length === 1)
            ) {
              push3({ type: "text", value, output: `\\${value}` });
              continue;
            }
            if (state.brackets === 0) {
              if (opts.strictBrackets === true) {
                throw new SyntaxError(syntaxError("opening", "["));
              }
              push3({ type: "text", value, output: `\\${value}` });
              continue;
            }
            decrement("brackets");
            const prevValue = prev.value.slice(1);
            if (
              prev.posix !== true &&
              prevValue[0] === "^" &&
              !prevValue.includes("/")
            ) {
              value = `/${value}`;
            }
            prev.value += value;
            append({ value });
            if (
              opts.literalBrackets === false ||
              utils.hasRegexChars(prevValue)
            ) {
              continue;
            }
            const escaped = utils.escapeRegex(prev.value);
            state.output = state.output.slice(0, -prev.value.length);
            if (opts.literalBrackets === true) {
              state.output += escaped;
              prev.value = escaped;
              continue;
            }
            prev.value = `(${capture}${escaped}|${prev.value})`;
            state.output += prev.value;
            continue;
          }
          if (value === "{" && opts.nobrace !== true) {
            increment("braces");
            const open = {
              type: "brace",
              value,
              output: "(",
              outputIndex: state.output.length,
              tokensIndex: state.tokens.length,
            };
            braces.push(open);
            push3(open);
            continue;
          }
          if (value === "}") {
            const brace = braces[braces.length - 1];
            if (opts.nobrace === true || !brace) {
              push3({ type: "text", value, output: value });
              continue;
            }
            let output = ")";
            if (brace.dots === true) {
              const arr = tokens.slice();
              const range = [];
              for (let i = arr.length - 1; i >= 0; i--) {
                tokens.pop();
                if (arr[i].type === "brace") {
                  break;
                }
                if (arr[i].type !== "dots") {
                  range.unshift(arr[i].value);
                }
              }
              output = expandRange(range, opts);
              state.backtrack = true;
            }
            if (brace.comma !== true && brace.dots !== true) {
              const out = state.output.slice(0, brace.outputIndex);
              const toks = state.tokens.slice(brace.tokensIndex);
              brace.value = brace.output = "\\{";
              value = output = "\\}";
              state.output = out;
              for (const t of toks) {
                state.output += t.output || t.value;
              }
            }
            push3({ type: "brace", value, output });
            decrement("braces");
            braces.pop();
            continue;
          }
          if (value === "|") {
            if (extglobs.length > 0) {
              extglobs[extglobs.length - 1].conditions++;
            }
            push3({ type: "text", value });
            continue;
          }
          if (value === ",") {
            let output = value;
            const brace = braces[braces.length - 1];
            if (brace && stack[stack.length - 1] === "braces") {
              brace.comma = true;
              output = "|";
            }
            push3({ type: "comma", value, output });
            continue;
          }
          if (value === "/") {
            if (prev.type === "dot" && state.index === state.start + 1) {
              state.start = state.index + 1;
              state.consumed = "";
              state.output = "";
              tokens.pop();
              prev = bos;
              continue;
            }
            push3({ type: "slash", value, output: SLASH_LITERAL });
            continue;
          }
          if (value === ".") {
            if (state.braces > 0 && prev.type === "dot") {
              if (prev.value === ".") prev.output = DOT_LITERAL;
              const brace = braces[braces.length - 1];
              prev.type = "dots";
              prev.output += value;
              prev.value += value;
              brace.dots = true;
              continue;
            }
            if (
              state.braces + state.parens === 0 &&
              prev.type !== "bos" &&
              prev.type !== "slash"
            ) {
              push3({ type: "text", value, output: DOT_LITERAL });
              continue;
            }
            push3({ type: "dot", value, output: DOT_LITERAL });
            continue;
          }
          if (value === "?") {
            const isGroup = prev && prev.value === "(";
            if (
              !isGroup &&
              opts.noextglob !== true &&
              peek() === "(" &&
              peek(2) !== "?"
            ) {
              extglobOpen("qmark", value);
              continue;
            }
            if (prev && prev.type === "paren") {
              const next = peek();
              let output = value;
              if (next === "<" && !utils.supportsLookbehinds()) {
                throw new Error(
                  "Node.js v10 or higher is required for regex lookbehinds",
                );
              }
              if (
                (prev.value === "(" && !/[!=<:]/.test(next)) ||
                (next === "<" && !/<([!=]|\w+>)/.test(remaining()))
              ) {
                output = `\\${value}`;
              }
              push3({ type: "text", value, output });
              continue;
            }
            if (
              opts.dot !== true &&
              (prev.type === "slash" || prev.type === "bos")
            ) {
              push3({ type: "qmark", value, output: QMARK_NO_DOT });
              continue;
            }
            push3({ type: "qmark", value, output: QMARK });
            continue;
          }
          if (value === "!") {
            if (opts.noextglob !== true && peek() === "(") {
              if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
                extglobOpen("negate", value);
                continue;
              }
            }
            if (opts.nonegate !== true && state.index === 0) {
              negate();
              continue;
            }
          }
          if (value === "+") {
            if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
              extglobOpen("plus", value);
              continue;
            }
            if ((prev && prev.value === "(") || opts.regex === false) {
              push3({ type: "plus", value, output: PLUS_LITERAL });
              continue;
            }
            if (
              (prev &&
                (prev.type === "bracket" ||
                  prev.type === "paren" ||
                  prev.type === "brace")) ||
              state.parens > 0
            ) {
              push3({ type: "plus", value });
              continue;
            }
            push3({ type: "plus", value: PLUS_LITERAL });
            continue;
          }
          if (value === "@") {
            if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
              push3({ type: "at", extglob: true, value, output: "" });
              continue;
            }
            push3({ type: "text", value });
            continue;
          }
          if (value !== "*") {
            if (value === "$" || value === "^") {
              value = `\\${value}`;
            }
            const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
            if (match) {
              value += match[0];
              state.index += match[0].length;
            }
            push3({ type: "text", value });
            continue;
          }
          if (prev && (prev.type === "globstar" || prev.star === true)) {
            prev.type = "star";
            prev.star = true;
            prev.value += value;
            prev.output = star;
            state.backtrack = true;
            state.globstar = true;
            consume(value);
            continue;
          }
          let rest = remaining();
          if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
            extglobOpen("star", value);
            continue;
          }
          if (prev.type === "star") {
            if (opts.noglobstar === true) {
              consume(value);
              continue;
            }
            const prior = prev.prev;
            const before = prior.prev;
            const isStart = prior.type === "slash" || prior.type === "bos";
            const afterStar =
              before && (before.type === "star" || before.type === "globstar");
            if (
              opts.bash === true &&
              (!isStart || (rest[0] && rest[0] !== "/"))
            ) {
              push3({ type: "star", value, output: "" });
              continue;
            }
            const isBrace =
              state.braces > 0 &&
              (prior.type === "comma" || prior.type === "brace");
            const isExtglob =
              extglobs.length &&
              (prior.type === "pipe" || prior.type === "paren");
            if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
              push3({ type: "star", value, output: "" });
              continue;
            }
            while (rest.slice(0, 3) === "/**") {
              const after = input[state.index + 4];
              if (after && after !== "/") {
                break;
              }
              rest = rest.slice(3);
              consume("/**", 3);
            }
            if (prior.type === "bos" && eos()) {
              prev.type = "globstar";
              prev.value += value;
              prev.output = globstar(opts);
              state.output = prev.output;
              state.globstar = true;
              consume(value);
              continue;
            }
            if (
              prior.type === "slash" &&
              prior.prev.type !== "bos" &&
              !afterStar &&
              eos()
            ) {
              state.output = state.output.slice(
                0,
                -(prior.output + prev.output).length,
              );
              prior.output = `(?:${prior.output}`;
              prev.type = "globstar";
              prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
              prev.value += value;
              state.globstar = true;
              state.output += prior.output + prev.output;
              consume(value);
              continue;
            }
            if (
              prior.type === "slash" &&
              prior.prev.type !== "bos" &&
              rest[0] === "/"
            ) {
              const end = rest[1] !== void 0 ? "|$" : "";
              state.output = state.output.slice(
                0,
                -(prior.output + prev.output).length,
              );
              prior.output = `(?:${prior.output}`;
              prev.type = "globstar";
              prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
              prev.value += value;
              state.output += prior.output + prev.output;
              state.globstar = true;
              consume(value + advance());
              push3({ type: "slash", value: "/", output: "" });
              continue;
            }
            if (prior.type === "bos" && rest[0] === "/") {
              prev.type = "globstar";
              prev.value += value;
              prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
              state.output = prev.output;
              state.globstar = true;
              consume(value + advance());
              push3({ type: "slash", value: "/", output: "" });
              continue;
            }
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "globstar";
            prev.output = globstar(opts);
            prev.value += value;
            state.output += prev.output;
            state.globstar = true;
            consume(value);
            continue;
          }
          const token = { type: "star", value, output: star };
          if (opts.bash === true) {
            token.output = ".*?";
            if (prev.type === "bos" || prev.type === "slash") {
              token.output = nodot + token.output;
            }
            push3(token);
            continue;
          }
          if (
            prev &&
            (prev.type === "bracket" || prev.type === "paren") &&
            opts.regex === true
          ) {
            token.output = value;
            push3(token);
            continue;
          }
          if (
            state.index === state.start ||
            prev.type === "slash" ||
            prev.type === "dot"
          ) {
            if (prev.type === "dot") {
              state.output += NO_DOT_SLASH;
              prev.output += NO_DOT_SLASH;
            } else if (opts.dot === true) {
              state.output += NO_DOTS_SLASH;
              prev.output += NO_DOTS_SLASH;
            } else {
              state.output += nodot;
              prev.output += nodot;
            }
            if (peek() !== "*") {
              state.output += ONE_CHAR;
              prev.output += ONE_CHAR;
            }
          }
          push3(token);
        }
        while (state.brackets > 0) {
          if (opts.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", "]"));
          state.output = utils.escapeLast(state.output, "[");
          decrement("brackets");
        }
        while (state.parens > 0) {
          if (opts.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", ")"));
          state.output = utils.escapeLast(state.output, "(");
          decrement("parens");
        }
        while (state.braces > 0) {
          if (opts.strictBrackets === true)
            throw new SyntaxError(syntaxError("closing", "}"));
          state.output = utils.escapeLast(state.output, "{");
          decrement("braces");
        }
        if (
          opts.strictSlashes !== true &&
          (prev.type === "star" || prev.type === "bracket")
        ) {
          push3({
            type: "maybe_slash",
            value: "",
            output: `${SLASH_LITERAL}?`,
          });
        }
        if (state.backtrack === true) {
          state.output = "";
          for (const token of state.tokens) {
            state.output += token.output != null ? token.output : token.value;
            if (token.suffix) {
              state.output += token.suffix;
            }
          }
        }
        return state;
      }, "parse");
      parse3.fastpaths = (input, options) => {
        const opts = { ...options };
        const max =
          typeof opts.maxLength === "number"
            ? Math.min(MAX_LENGTH, opts.maxLength)
            : MAX_LENGTH;
        const len = input.length;
        if (len > max) {
          throw new SyntaxError(
            `Input length: ${len}, exceeds maximum allowed length: ${max}`,
          );
        }
        input = REPLACEMENTS[input] || input;
        const win32 = utils.isWindows(options);
        const {
          DOT_LITERAL,
          SLASH_LITERAL,
          ONE_CHAR,
          DOTS_SLASH,
          NO_DOT,
          NO_DOTS,
          NO_DOTS_SLASH,
          STAR,
          START_ANCHOR,
        } = constants.globChars(win32);
        const nodot = opts.dot ? NO_DOTS : NO_DOT;
        const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
        const capture = opts.capture ? "" : "?:";
        const state = { negated: false, prefix: "" };
        let star = opts.bash === true ? ".*?" : STAR;
        if (opts.capture) {
          star = `(${star})`;
        }
        const globstar = /* @__PURE__ */ __name((opts2) => {
          if (opts2.noglobstar === true) return star;
          return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
        }, "globstar");
        const create = /* @__PURE__ */ __name((str) => {
          switch (str) {
            case "*":
              return `${nodot}${ONE_CHAR}${star}`;
            case ".*":
              return `${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "*.*":
              return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "*/*":
              return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
            case "**":
              return nodot + globstar(opts);
            case "**/*":
              return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
            case "**/*.*":
              return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "**/.*":
              return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
            default: {
              const match = /^(.*?)\.(\w+)$/.exec(str);
              if (!match) return;
              const source2 = create(match[1]);
              if (!source2) return;
              return source2 + DOT_LITERAL + match[2];
            }
          }
        }, "create");
        const output = utils.removePrefix(input, state);
        let source = create(output);
        if (source && opts.strictSlashes !== true) {
          source += `${SLASH_LITERAL}?`;
        }
        return source;
      };
      module.exports = parse3;
    },
  });

  // node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js
  var require_picomatch = __commonJS({
    "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var scan = require_scan();
      var parse3 = require_parse3();
      var utils = require_utils8();
      var constants = require_constants7();
      var isObject = /* @__PURE__ */ __name(
        (val) => val && typeof val === "object" && !Array.isArray(val),
        "isObject",
      );
      var picomatch = /* @__PURE__ */ __name(
        (glob, options, returnState = false) => {
          if (Array.isArray(glob)) {
            const fns = glob.map((input) =>
              picomatch(input, options, returnState),
            );
            const arrayMatcher = /* @__PURE__ */ __name((str) => {
              for (const isMatch of fns) {
                const state2 = isMatch(str);
                if (state2) return state2;
              }
              return false;
            }, "arrayMatcher");
            return arrayMatcher;
          }
          const isState = isObject(glob) && glob.tokens && glob.input;
          if (glob === "" || (typeof glob !== "string" && !isState)) {
            throw new TypeError("Expected pattern to be a non-empty string");
          }
          const opts = options || {};
          const posix = utils.isWindows(options);
          const regex2 = isState
            ? picomatch.compileRe(glob, options)
            : picomatch.makeRe(glob, options, false, true);
          const state = regex2.state;
          delete regex2.state;
          let isIgnored = /* @__PURE__ */ __name(() => false, "isIgnored");
          if (opts.ignore) {
            const ignoreOpts = {
              ...options,
              ignore: null,
              onMatch: null,
              onResult: null,
            };
            isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
          }
          const matcher = /* @__PURE__ */ __name(
            (input, returnObject = false) => {
              const { isMatch, match, output } = picomatch.test(
                input,
                regex2,
                options,
                { glob, posix },
              );
              const result = {
                glob,
                state,
                regex: regex2,
                posix,
                input,
                output,
                match,
                isMatch,
              };
              if (typeof opts.onResult === "function") {
                opts.onResult(result);
              }
              if (isMatch === false) {
                result.isMatch = false;
                return returnObject ? result : false;
              }
              if (isIgnored(input)) {
                if (typeof opts.onIgnore === "function") {
                  opts.onIgnore(result);
                }
                result.isMatch = false;
                return returnObject ? result : false;
              }
              if (typeof opts.onMatch === "function") {
                opts.onMatch(result);
              }
              return returnObject ? result : true;
            },
            "matcher",
          );
          if (returnState) {
            matcher.state = state;
          }
          return matcher;
        },
        "picomatch",
      );
      picomatch.test = (input, regex2, options, { glob, posix } = {}) => {
        if (typeof input !== "string") {
          throw new TypeError("Expected input to be a string");
        }
        if (input === "") {
          return { isMatch: false, output: "" };
        }
        const opts = options || {};
        const format2 = opts.format || (posix ? utils.toPosixSlashes : null);
        let match = input === glob;
        let output = match && format2 ? format2(input) : input;
        if (match === false) {
          output = format2 ? format2(input) : input;
          match = output === glob;
        }
        if (match === false || opts.capture === true) {
          if (opts.matchBase === true || opts.basename === true) {
            match = picomatch.matchBase(input, regex2, options, posix);
          } else {
            match = regex2.exec(output);
          }
        }
        return { isMatch: Boolean(match), match, output };
      };
      picomatch.matchBase = (
        input,
        glob,
        options,
        posix = utils.isWindows(options),
      ) => {
        const regex2 =
          glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
        return regex2.test(path4.basename(input));
      };
      picomatch.isMatch = (str, patterns, options) =>
        picomatch(patterns, options)(str);
      picomatch.parse = (pattern, options) => {
        if (Array.isArray(pattern))
          return pattern.map((p) => picomatch.parse(p, options));
        return parse3(pattern, { ...options, fastpaths: false });
      };
      picomatch.scan = (input, options) => scan(input, options);
      picomatch.compileRe = (
        state,
        options,
        returnOutput = false,
        returnState = false,
      ) => {
        if (returnOutput === true) {
          return state.output;
        }
        const opts = options || {};
        const prepend = opts.contains ? "" : "^";
        const append = opts.contains ? "" : "$";
        let source = `${prepend}(?:${state.output})${append}`;
        if (state && state.negated === true) {
          source = `^(?!${source}).*$`;
        }
        const regex2 = picomatch.toRegex(source, options);
        if (returnState === true) {
          regex2.state = state;
        }
        return regex2;
      };
      picomatch.makeRe = (
        input,
        options = {},
        returnOutput = false,
        returnState = false,
      ) => {
        if (!input || typeof input !== "string") {
          throw new TypeError("Expected a non-empty string");
        }
        let parsed = { negated: false, fastpaths: true };
        if (
          options.fastpaths !== false &&
          (input[0] === "." || input[0] === "*")
        ) {
          parsed.output = parse3.fastpaths(input, options);
        }
        if (!parsed.output) {
          parsed = parse3(input, options);
        }
        return picomatch.compileRe(parsed, options, returnOutput, returnState);
      };
      picomatch.toRegex = (source, options) => {
        try {
          const opts = options || {};
          return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
        } catch (err) {
          if (options && options.debug === true) throw err;
          return /$^/;
        }
      };
      picomatch.constants = constants;
      module.exports = picomatch;
    },
  });

  // node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js
  var require_picomatch2 = __commonJS({
    "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = require_picomatch();
    },
  });

  // node_modules/.pnpm/micromatch@4.0.8/node_modules/micromatch/index.js
  var require_micromatch = __commonJS({
    "node_modules/.pnpm/micromatch@4.0.8/node_modules/micromatch/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var util2 = __require("util");
      var braces = require_braces();
      var picomatch = require_picomatch2();
      var utils = require_utils8();
      var isEmptyString = /* @__PURE__ */ __name(
        (v) => v === "" || v === "./",
        "isEmptyString",
      );
      var hasBraces = /* @__PURE__ */ __name((v) => {
        const index2 = v.indexOf("{");
        return index2 > -1 && v.indexOf("}", index2) > -1;
      }, "hasBraces");
      var micromatch2 = /* @__PURE__ */ __name((list4, patterns, options) => {
        patterns = [].concat(patterns);
        list4 = [].concat(list4);
        let omit = /* @__PURE__ */ new Set();
        let keep = /* @__PURE__ */ new Set();
        let items = /* @__PURE__ */ new Set();
        let negatives = 0;
        let onResult = /* @__PURE__ */ __name((state) => {
          items.add(state.output);
          if (options && options.onResult) {
            options.onResult(state);
          }
        }, "onResult");
        for (let i = 0; i < patterns.length; i++) {
          let isMatch = picomatch(
            String(patterns[i]),
            { ...options, onResult },
            true,
          );
          let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
          if (negated) negatives++;
          for (let item of list4) {
            let matched = isMatch(item, true);
            let match = negated ? !matched.isMatch : matched.isMatch;
            if (!match) continue;
            if (negated) {
              omit.add(matched.output);
            } else {
              omit.delete(matched.output);
              keep.add(matched.output);
            }
          }
        }
        let result = negatives === patterns.length ? [...items] : [...keep];
        let matches = result.filter((item) => !omit.has(item));
        if (options && matches.length === 0) {
          if (options.failglob === true) {
            throw new Error(`No matches found for "${patterns.join(", ")}"`);
          }
          if (options.nonull === true || options.nullglob === true) {
            return options.unescape
              ? patterns.map((p) => p.replace(/\\/g, ""))
              : patterns;
          }
        }
        return matches;
      }, "micromatch");
      micromatch2.match = micromatch2;
      micromatch2.matcher = (pattern, options) => picomatch(pattern, options);
      micromatch2.isMatch = (str, patterns, options) =>
        picomatch(patterns, options)(str);
      micromatch2.any = micromatch2.isMatch;
      micromatch2.not = (list4, patterns, options = {}) => {
        patterns = [].concat(patterns).map(String);
        let result = /* @__PURE__ */ new Set();
        let items = [];
        let onResult = /* @__PURE__ */ __name((state) => {
          if (options.onResult) options.onResult(state);
          items.push(state.output);
        }, "onResult");
        let matches = new Set(
          micromatch2(list4, patterns, { ...options, onResult }),
        );
        for (let item of items) {
          if (!matches.has(item)) {
            result.add(item);
          }
        }
        return [...result];
      };
      micromatch2.contains = (str, pattern, options) => {
        if (typeof str !== "string") {
          throw new TypeError(`Expected a string: "${util2.inspect(str)}"`);
        }
        if (Array.isArray(pattern)) {
          return pattern.some((p) => micromatch2.contains(str, p, options));
        }
        if (typeof pattern === "string") {
          if (isEmptyString(str) || isEmptyString(pattern)) {
            return false;
          }
          if (
            str.includes(pattern) ||
            (str.startsWith("./") && str.slice(2).includes(pattern))
          ) {
            return true;
          }
        }
        return micromatch2.isMatch(str, pattern, {
          ...options,
          contains: true,
        });
      };
      micromatch2.matchKeys = (obj, patterns, options) => {
        if (!utils.isObject(obj)) {
          throw new TypeError("Expected the first argument to be an object");
        }
        let keys = micromatch2(Object.keys(obj), patterns, options);
        let res = {};
        for (let key of keys) res[key] = obj[key];
        return res;
      };
      micromatch2.some = (list4, patterns, options) => {
        let items = [].concat(list4);
        for (let pattern of [].concat(patterns)) {
          let isMatch = picomatch(String(pattern), options);
          if (items.some((item) => isMatch(item))) {
            return true;
          }
        }
        return false;
      };
      micromatch2.every = (list4, patterns, options) => {
        let items = [].concat(list4);
        for (let pattern of [].concat(patterns)) {
          let isMatch = picomatch(String(pattern), options);
          if (!items.every((item) => isMatch(item))) {
            return false;
          }
        }
        return true;
      };
      micromatch2.all = (str, patterns, options) => {
        if (typeof str !== "string") {
          throw new TypeError(`Expected a string: "${util2.inspect(str)}"`);
        }
        return [].concat(patterns).every((p) => picomatch(p, options)(str));
      };
      micromatch2.capture = (glob, input, options) => {
        let posix = utils.isWindows(options);
        let regex2 = picomatch.makeRe(String(glob), {
          ...options,
          capture: true,
        });
        let match = regex2.exec(posix ? utils.toPosixSlashes(input) : input);
        if (match) {
          return match.slice(1).map((v) => (v === void 0 ? "" : v));
        }
      };
      micromatch2.makeRe = (...args) => picomatch.makeRe(...args);
      micromatch2.scan = (...args) => picomatch.scan(...args);
      micromatch2.parse = (patterns, options) => {
        let res = [];
        for (let pattern of [].concat(patterns || [])) {
          for (let str of braces(String(pattern), options)) {
            res.push(picomatch.parse(str, options));
          }
        }
        return res;
      };
      micromatch2.braces = (pattern, options) => {
        if (typeof pattern !== "string")
          throw new TypeError("Expected a string");
        if ((options && options.nobrace === true) || !hasBraces(pattern)) {
          return [pattern];
        }
        return braces(pattern, options);
      };
      micromatch2.braceExpand = (pattern, options) => {
        if (typeof pattern !== "string")
          throw new TypeError("Expected a string");
        return micromatch2.braces(pattern, { ...options, expand: true });
      };
      micromatch2.hasBraces = hasBraces;
      module.exports = micromatch2;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/pattern.js
  var require_pattern = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/pattern.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.removeDuplicateSlashes =
        exports.matchAny =
        exports.convertPatternsToRe =
        exports.makeRe =
        exports.getPatternParts =
        exports.expandBraceExpansion =
        exports.expandPatternsWithBraceExpansion =
        exports.isAffectDepthOfReadingPattern =
        exports.endsWithSlashGlobStar =
        exports.hasGlobStar =
        exports.getBaseDirectory =
        exports.isPatternRelatedToParentDirectory =
        exports.getPatternsOutsideCurrentDirectory =
        exports.getPatternsInsideCurrentDirectory =
        exports.getPositivePatterns =
        exports.getNegativePatterns =
        exports.isPositivePattern =
        exports.isNegativePattern =
        exports.convertToNegativePattern =
        exports.convertToPositivePattern =
        exports.isDynamicPattern =
        exports.isStaticPattern =
          void 0;
      var path4 = __require("path");
      var globParent = require_glob_parent();
      var micromatch2 = require_micromatch();
      var GLOBSTAR = "**";
      var ESCAPE_SYMBOL = "\\";
      var COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
      var REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
      var REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
      var GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
      var BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
      var DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
      function isStaticPattern(pattern, options = {}) {
        return !isDynamicPattern(pattern, options);
      }
      __name(isStaticPattern, "isStaticPattern");
      exports.isStaticPattern = isStaticPattern;
      function isDynamicPattern(pattern, options = {}) {
        if (pattern === "") {
          return false;
        }
        if (
          options.caseSensitiveMatch === false ||
          pattern.includes(ESCAPE_SYMBOL)
        ) {
          return true;
        }
        if (
          COMMON_GLOB_SYMBOLS_RE.test(pattern) ||
          REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) ||
          REGEX_GROUP_SYMBOLS_RE.test(pattern)
        ) {
          return true;
        }
        if (
          options.extglob !== false &&
          GLOB_EXTENSION_SYMBOLS_RE.test(pattern)
        ) {
          return true;
        }
        if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {
          return true;
        }
        return false;
      }
      __name(isDynamicPattern, "isDynamicPattern");
      exports.isDynamicPattern = isDynamicPattern;
      function hasBraceExpansion(pattern) {
        const openingBraceIndex = pattern.indexOf("{");
        if (openingBraceIndex === -1) {
          return false;
        }
        const closingBraceIndex = pattern.indexOf("}", openingBraceIndex + 1);
        if (closingBraceIndex === -1) {
          return false;
        }
        const braceContent = pattern.slice(
          openingBraceIndex,
          closingBraceIndex,
        );
        return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
      }
      __name(hasBraceExpansion, "hasBraceExpansion");
      function convertToPositivePattern(pattern) {
        return isNegativePattern(pattern) ? pattern.slice(1) : pattern;
      }
      __name(convertToPositivePattern, "convertToPositivePattern");
      exports.convertToPositivePattern = convertToPositivePattern;
      function convertToNegativePattern(pattern) {
        return "!" + pattern;
      }
      __name(convertToNegativePattern, "convertToNegativePattern");
      exports.convertToNegativePattern = convertToNegativePattern;
      function isNegativePattern(pattern) {
        return pattern.startsWith("!") && pattern[1] !== "(";
      }
      __name(isNegativePattern, "isNegativePattern");
      exports.isNegativePattern = isNegativePattern;
      function isPositivePattern(pattern) {
        return !isNegativePattern(pattern);
      }
      __name(isPositivePattern, "isPositivePattern");
      exports.isPositivePattern = isPositivePattern;
      function getNegativePatterns(patterns) {
        return patterns.filter(isNegativePattern);
      }
      __name(getNegativePatterns, "getNegativePatterns");
      exports.getNegativePatterns = getNegativePatterns;
      function getPositivePatterns(patterns) {
        return patterns.filter(isPositivePattern);
      }
      __name(getPositivePatterns, "getPositivePatterns");
      exports.getPositivePatterns = getPositivePatterns;
      function getPatternsInsideCurrentDirectory(patterns) {
        return patterns.filter(
          (pattern) => !isPatternRelatedToParentDirectory(pattern),
        );
      }
      __name(
        getPatternsInsideCurrentDirectory,
        "getPatternsInsideCurrentDirectory",
      );
      exports.getPatternsInsideCurrentDirectory =
        getPatternsInsideCurrentDirectory;
      function getPatternsOutsideCurrentDirectory(patterns) {
        return patterns.filter(isPatternRelatedToParentDirectory);
      }
      __name(
        getPatternsOutsideCurrentDirectory,
        "getPatternsOutsideCurrentDirectory",
      );
      exports.getPatternsOutsideCurrentDirectory =
        getPatternsOutsideCurrentDirectory;
      function isPatternRelatedToParentDirectory(pattern) {
        return pattern.startsWith("..") || pattern.startsWith("./..");
      }
      __name(
        isPatternRelatedToParentDirectory,
        "isPatternRelatedToParentDirectory",
      );
      exports.isPatternRelatedToParentDirectory =
        isPatternRelatedToParentDirectory;
      function getBaseDirectory(pattern) {
        return globParent(pattern, { flipBackslashes: false });
      }
      __name(getBaseDirectory, "getBaseDirectory");
      exports.getBaseDirectory = getBaseDirectory;
      function hasGlobStar(pattern) {
        return pattern.includes(GLOBSTAR);
      }
      __name(hasGlobStar, "hasGlobStar");
      exports.hasGlobStar = hasGlobStar;
      function endsWithSlashGlobStar(pattern) {
        return pattern.endsWith("/" + GLOBSTAR);
      }
      __name(endsWithSlashGlobStar, "endsWithSlashGlobStar");
      exports.endsWithSlashGlobStar = endsWithSlashGlobStar;
      function isAffectDepthOfReadingPattern(pattern) {
        const basename = path4.basename(pattern);
        return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
      }
      __name(isAffectDepthOfReadingPattern, "isAffectDepthOfReadingPattern");
      exports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
      function expandPatternsWithBraceExpansion(patterns) {
        return patterns.reduce((collection, pattern) => {
          return collection.concat(expandBraceExpansion(pattern));
        }, []);
      }
      __name(
        expandPatternsWithBraceExpansion,
        "expandPatternsWithBraceExpansion",
      );
      exports.expandPatternsWithBraceExpansion =
        expandPatternsWithBraceExpansion;
      function expandBraceExpansion(pattern) {
        const patterns = micromatch2.braces(pattern, {
          expand: true,
          nodupes: true,
          keepEscaping: true,
        });
        patterns.sort((a, b) => a.length - b.length);
        return patterns.filter((pattern2) => pattern2 !== "");
      }
      __name(expandBraceExpansion, "expandBraceExpansion");
      exports.expandBraceExpansion = expandBraceExpansion;
      function getPatternParts(pattern, options) {
        let { parts } = micromatch2.scan(
          pattern,
          Object.assign(Object.assign({}, options), { parts: true }),
        );
        if (parts.length === 0) {
          parts = [pattern];
        }
        if (parts[0].startsWith("/")) {
          parts[0] = parts[0].slice(1);
          parts.unshift("");
        }
        return parts;
      }
      __name(getPatternParts, "getPatternParts");
      exports.getPatternParts = getPatternParts;
      function makeRe(pattern, options) {
        return micromatch2.makeRe(pattern, options);
      }
      __name(makeRe, "makeRe");
      exports.makeRe = makeRe;
      function convertPatternsToRe(patterns, options) {
        return patterns.map((pattern) => makeRe(pattern, options));
      }
      __name(convertPatternsToRe, "convertPatternsToRe");
      exports.convertPatternsToRe = convertPatternsToRe;
      function matchAny(entry, patternsRe) {
        return patternsRe.some((patternRe) => patternRe.test(entry));
      }
      __name(matchAny, "matchAny");
      exports.matchAny = matchAny;
      function removeDuplicateSlashes(pattern) {
        return pattern.replace(DOUBLE_SLASH_RE, "/");
      }
      __name(removeDuplicateSlashes, "removeDuplicateSlashes");
      exports.removeDuplicateSlashes = removeDuplicateSlashes;
    },
  });

  // node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js
  var require_merge2 = __commonJS({
    "node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var Stream = __require("stream");
      var PassThrough = Stream.PassThrough;
      var slice = Array.prototype.slice;
      module.exports = merge2;
      function merge2() {
        const streamsQueue = [];
        const args = slice.call(arguments);
        let merging = false;
        let options = args[args.length - 1];
        if (options && !Array.isArray(options) && options.pipe == null) {
          args.pop();
        } else {
          options = {};
        }
        const doEnd = options.end !== false;
        const doPipeError = options.pipeError === true;
        if (options.objectMode == null) {
          options.objectMode = true;
        }
        if (options.highWaterMark == null) {
          options.highWaterMark = 64 * 1024;
        }
        const mergedStream = PassThrough(options);
        function addStream() {
          for (let i = 0, len = arguments.length; i < len; i++) {
            streamsQueue.push(pauseStreams(arguments[i], options));
          }
          mergeStream();
          return this;
        }
        __name(addStream, "addStream");
        function mergeStream() {
          if (merging) {
            return;
          }
          merging = true;
          let streams = streamsQueue.shift();
          if (!streams) {
            process.nextTick(endStream);
            return;
          }
          if (!Array.isArray(streams)) {
            streams = [streams];
          }
          let pipesCount = streams.length + 1;
          function next() {
            if (--pipesCount > 0) {
              return;
            }
            merging = false;
            mergeStream();
          }
          __name(next, "next");
          function pipe(stream) {
            function onend() {
              stream.removeListener("merge2UnpipeEnd", onend);
              stream.removeListener("end", onend);
              if (doPipeError) {
                stream.removeListener("error", onerror);
              }
              next();
            }
            __name(onend, "onend");
            function onerror(err) {
              mergedStream.emit("error", err);
            }
            __name(onerror, "onerror");
            if (stream._readableState.endEmitted) {
              return next();
            }
            stream.on("merge2UnpipeEnd", onend);
            stream.on("end", onend);
            if (doPipeError) {
              stream.on("error", onerror);
            }
            stream.pipe(mergedStream, { end: false });
            stream.resume();
          }
          __name(pipe, "pipe");
          for (let i = 0; i < streams.length; i++) {
            pipe(streams[i]);
          }
          next();
        }
        __name(mergeStream, "mergeStream");
        function endStream() {
          merging = false;
          mergedStream.emit("queueDrain");
          if (doEnd) {
            mergedStream.end();
          }
        }
        __name(endStream, "endStream");
        mergedStream.setMaxListeners(0);
        mergedStream.add = addStream;
        mergedStream.on("unpipe", function (stream) {
          stream.emit("merge2UnpipeEnd");
        });
        if (args.length) {
          addStream.apply(null, args);
        }
        return mergedStream;
      }
      __name(merge2, "merge2");
      function pauseStreams(streams, options) {
        if (!Array.isArray(streams)) {
          if (!streams._readableState && streams.pipe) {
            streams = streams.pipe(PassThrough(options));
          }
          if (!streams._readableState || !streams.pause || !streams.pipe) {
            throw new Error("Only readable stream can be merged.");
          }
          streams.pause();
        } else {
          for (let i = 0, len = streams.length; i < len; i++) {
            streams[i] = pauseStreams(streams[i], options);
          }
        }
        return streams;
      }
      __name(pauseStreams, "pauseStreams");
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/stream.js
  var require_stream = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/stream.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.merge = void 0;
      var merge2 = require_merge2();
      function merge(streams) {
        const mergedStream = merge2(streams);
        streams.forEach((stream) => {
          stream.once("error", (error) => mergedStream.emit("error", error));
        });
        mergedStream.once("close", () => propagateCloseEventToSources(streams));
        mergedStream.once("end", () => propagateCloseEventToSources(streams));
        return mergedStream;
      }
      __name(merge, "merge");
      exports.merge = merge;
      function propagateCloseEventToSources(streams) {
        streams.forEach((stream) => stream.emit("close"));
      }
      __name(propagateCloseEventToSources, "propagateCloseEventToSources");
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/string.js
  var require_string = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/string.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isEmpty = exports.isString = void 0;
      function isString(input) {
        return typeof input === "string";
      }
      __name(isString, "isString");
      exports.isString = isString;
      function isEmpty(input) {
        return input === "";
      }
      __name(isEmpty, "isEmpty");
      exports.isEmpty = isEmpty;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/index.js
  var require_utils9 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/utils/index.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.string =
        exports.stream =
        exports.pattern =
        exports.path =
        exports.fs =
        exports.errno =
        exports.array =
          void 0;
      var array = require_array();
      exports.array = array;
      var errno = require_errno();
      exports.errno = errno;
      var fs6 = require_fs2();
      exports.fs = fs6;
      var path4 = require_path();
      exports.path = path4;
      var pattern = require_pattern();
      exports.pattern = pattern;
      var stream = require_stream();
      exports.stream = stream;
      var string3 = require_string();
      exports.string = string3;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/managers/tasks.js
  var require_tasks = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/managers/tasks.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.convertPatternGroupToTask =
        exports.convertPatternGroupsToTasks =
        exports.groupPatternsByBaseDirectory =
        exports.getNegativePatternsAsPositive =
        exports.getPositivePatterns =
        exports.convertPatternsToTasks =
        exports.generate =
          void 0;
      var utils = require_utils9();
      function generate(input, settings) {
        const patterns = processPatterns(input, settings);
        const ignore = processPatterns(settings.ignore, settings);
        const positivePatterns = getPositivePatterns(patterns);
        const negativePatterns = getNegativePatternsAsPositive(
          patterns,
          ignore,
        );
        const staticPatterns = positivePatterns.filter((pattern) =>
          utils.pattern.isStaticPattern(pattern, settings),
        );
        const dynamicPatterns = positivePatterns.filter((pattern) =>
          utils.pattern.isDynamicPattern(pattern, settings),
        );
        const staticTasks = convertPatternsToTasks(
          staticPatterns,
          negativePatterns,
          /* dynamic */
          false,
        );
        const dynamicTasks = convertPatternsToTasks(
          dynamicPatterns,
          negativePatterns,
          /* dynamic */
          true,
        );
        return staticTasks.concat(dynamicTasks);
      }
      __name(generate, "generate");
      exports.generate = generate;
      function processPatterns(input, settings) {
        let patterns = input;
        if (settings.braceExpansion) {
          patterns = utils.pattern.expandPatternsWithBraceExpansion(patterns);
        }
        if (settings.baseNameMatch) {
          patterns = patterns.map((pattern) =>
            pattern.includes("/") ? pattern : `**/${pattern}`,
          );
        }
        return patterns.map((pattern) =>
          utils.pattern.removeDuplicateSlashes(pattern),
        );
      }
      __name(processPatterns, "processPatterns");
      function convertPatternsToTasks(positive, negative, dynamic) {
        const tasks = [];
        const patternsOutsideCurrentDirectory =
          utils.pattern.getPatternsOutsideCurrentDirectory(positive);
        const patternsInsideCurrentDirectory =
          utils.pattern.getPatternsInsideCurrentDirectory(positive);
        const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(
          patternsOutsideCurrentDirectory,
        );
        const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(
          patternsInsideCurrentDirectory,
        );
        tasks.push(
          ...convertPatternGroupsToTasks(
            outsideCurrentDirectoryGroup,
            negative,
            dynamic,
          ),
        );
        if ("." in insideCurrentDirectoryGroup) {
          tasks.push(
            convertPatternGroupToTask(
              ".",
              patternsInsideCurrentDirectory,
              negative,
              dynamic,
            ),
          );
        } else {
          tasks.push(
            ...convertPatternGroupsToTasks(
              insideCurrentDirectoryGroup,
              negative,
              dynamic,
            ),
          );
        }
        return tasks;
      }
      __name(convertPatternsToTasks, "convertPatternsToTasks");
      exports.convertPatternsToTasks = convertPatternsToTasks;
      function getPositivePatterns(patterns) {
        return utils.pattern.getPositivePatterns(patterns);
      }
      __name(getPositivePatterns, "getPositivePatterns");
      exports.getPositivePatterns = getPositivePatterns;
      function getNegativePatternsAsPositive(patterns, ignore) {
        const negative = utils.pattern
          .getNegativePatterns(patterns)
          .concat(ignore);
        const positive = negative.map(utils.pattern.convertToPositivePattern);
        return positive;
      }
      __name(getNegativePatternsAsPositive, "getNegativePatternsAsPositive");
      exports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
      function groupPatternsByBaseDirectory(patterns) {
        const group = {};
        return patterns.reduce((collection, pattern) => {
          const base = utils.pattern.getBaseDirectory(pattern);
          if (base in collection) {
            collection[base].push(pattern);
          } else {
            collection[base] = [pattern];
          }
          return collection;
        }, group);
      }
      __name(groupPatternsByBaseDirectory, "groupPatternsByBaseDirectory");
      exports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
      function convertPatternGroupsToTasks(positive, negative, dynamic) {
        return Object.keys(positive).map((base) => {
          return convertPatternGroupToTask(
            base,
            positive[base],
            negative,
            dynamic,
          );
        });
      }
      __name(convertPatternGroupsToTasks, "convertPatternGroupsToTasks");
      exports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
      function convertPatternGroupToTask(base, positive, negative, dynamic) {
        return {
          dynamic,
          positive,
          negative,
          base,
          patterns: [].concat(
            positive,
            negative.map(utils.pattern.convertToNegativePattern),
          ),
        };
      }
      __name(convertPatternGroupToTask, "convertPatternGroupToTask");
      exports.convertPatternGroupToTask = convertPatternGroupToTask;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js
  var require_async = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.read = void 0;
      function read(path4, settings, callback) {
        settings.fs.lstat(path4, (lstatError, lstat2) => {
          if (lstatError !== null) {
            callFailureCallback(callback, lstatError);
            return;
          }
          if (!lstat2.isSymbolicLink() || !settings.followSymbolicLink) {
            callSuccessCallback(callback, lstat2);
            return;
          }
          settings.fs.stat(path4, (statError, stat) => {
            if (statError !== null) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                callFailureCallback(callback, statError);
                return;
              }
              callSuccessCallback(callback, lstat2);
              return;
            }
            if (settings.markSymbolicLink) {
              stat.isSymbolicLink = () => true;
            }
            callSuccessCallback(callback, stat);
          });
        });
      }
      __name(read, "read");
      exports.read = read;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      __name(callFailureCallback, "callFailureCallback");
      function callSuccessCallback(callback, result) {
        callback(null, result);
      }
      __name(callSuccessCallback, "callSuccessCallback");
    },
  });

  // node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js
  var require_sync = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.read = void 0;
      function read(path4, settings) {
        const lstat2 = settings.fs.lstatSync(path4);
        if (!lstat2.isSymbolicLink() || !settings.followSymbolicLink) {
          return lstat2;
        }
        try {
          const stat = settings.fs.statSync(path4);
          if (settings.markSymbolicLink) {
            stat.isSymbolicLink = () => true;
          }
          return stat;
        } catch (error) {
          if (!settings.throwErrorOnBrokenSymbolicLink) {
            return lstat2;
          }
          throw error;
        }
      }
      __name(read, "read");
      exports.read = read;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js
  var require_fs3 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
      var fs6 = __require("fs");
      exports.FILE_SYSTEM_ADAPTER = {
        lstat: fs6.lstat,
        stat: fs6.stat,
        lstatSync: fs6.lstatSync,
        statSync: fs6.statSync,
      };
      function createFileSystemAdapter(fsMethods) {
        if (fsMethods === void 0) {
          return exports.FILE_SYSTEM_ADAPTER;
        }
        return Object.assign(
          Object.assign({}, exports.FILE_SYSTEM_ADAPTER),
          fsMethods,
        );
      }
      __name(createFileSystemAdapter, "createFileSystemAdapter");
      exports.createFileSystemAdapter = createFileSystemAdapter;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js
  var require_settings = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var fs6 = require_fs3();
      var Settings = class {
        static {
          __name(this, "Settings");
        }
        constructor(_options = {}) {
          this._options = _options;
          this.followSymbolicLink = this._getValue(
            this._options.followSymbolicLink,
            true,
          );
          this.fs = fs6.createFileSystemAdapter(this._options.fs);
          this.markSymbolicLink = this._getValue(
            this._options.markSymbolicLink,
            false,
          );
          this.throwErrorOnBrokenSymbolicLink = this._getValue(
            this._options.throwErrorOnBrokenSymbolicLink,
            true,
          );
        }
        _getValue(option, value) {
          return option !== null && option !== void 0 ? option : value;
        }
      };
      exports.default = Settings;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js
  var require_out = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.statSync = exports.stat = exports.Settings = void 0;
      var async = require_async();
      var sync = require_sync();
      var settings_1 = require_settings();
      exports.Settings = settings_1.default;
      function stat(path4, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          async.read(path4, getSettings(), optionsOrSettingsOrCallback);
          return;
        }
        async.read(path4, getSettings(optionsOrSettingsOrCallback), callback);
      }
      __name(stat, "stat");
      exports.stat = stat;
      function statSync(path4, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        return sync.read(path4, settings);
      }
      __name(statSync, "statSync");
      exports.statSync = statSync;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
      __name(getSettings, "getSettings");
    },
  });

  // node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js
  var require_queue_microtask = __commonJS({
    "node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js"(
      exports,
      module,
    ) {
      var promise;
      module.exports =
        typeof queueMicrotask === "function"
          ? queueMicrotask.bind(typeof window !== "undefined" ? window : global)
          : (cb) =>
              (promise || (promise = Promise.resolve())).then(cb).catch((err) =>
                setTimeout(() => {
                  throw err;
                }, 0),
              );
    },
  });

  // node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js
  var require_run_parallel = __commonJS({
    "node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js"(
      exports,
      module,
    ) {
      module.exports = runParallel;
      var queueMicrotask2 = require_queue_microtask();
      function runParallel(tasks, cb) {
        let results, pending, keys;
        let isSync = true;
        if (Array.isArray(tasks)) {
          results = [];
          pending = tasks.length;
        } else {
          keys = Object.keys(tasks);
          results = {};
          pending = keys.length;
        }
        function done(err) {
          function end() {
            if (cb) cb(err, results);
            cb = null;
          }
          __name(end, "end");
          if (isSync) queueMicrotask2(end);
          else end();
        }
        __name(done, "done");
        function each(i, err, result) {
          results[i] = result;
          if (--pending === 0 || err) {
            done(err);
          }
        }
        __name(each, "each");
        if (!pending) {
          done(null);
        } else if (keys) {
          keys.forEach(function (key) {
            tasks[key](function (err, result) {
              each(key, err, result);
            });
          });
        } else {
          tasks.forEach(function (task, i) {
            task(function (err, result) {
              each(i, err, result);
            });
          });
        }
        isSync = false;
      }
      __name(runParallel, "runParallel");
    },
  });

  // node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js
  var require_constants8 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
      var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
      if (
        NODE_PROCESS_VERSION_PARTS[0] === void 0 ||
        NODE_PROCESS_VERSION_PARTS[1] === void 0
      ) {
        throw new Error(
          `Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`,
        );
      }
      var MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
      var MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
      var SUPPORTED_MAJOR_VERSION = 10;
      var SUPPORTED_MINOR_VERSION = 10;
      var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
      var IS_MATCHED_BY_MAJOR_AND_MINOR =
        MAJOR_VERSION === SUPPORTED_MAJOR_VERSION &&
        MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
      exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES =
        IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js
  var require_fs4 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createDirentFromStats = void 0;
      var DirentFromStats = class {
        static {
          __name(this, "DirentFromStats");
        }
        constructor(name, stats) {
          this.name = name;
          this.isBlockDevice = stats.isBlockDevice.bind(stats);
          this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
          this.isDirectory = stats.isDirectory.bind(stats);
          this.isFIFO = stats.isFIFO.bind(stats);
          this.isFile = stats.isFile.bind(stats);
          this.isSocket = stats.isSocket.bind(stats);
          this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
        }
      };
      function createDirentFromStats(name, stats) {
        return new DirentFromStats(name, stats);
      }
      __name(createDirentFromStats, "createDirentFromStats");
      exports.createDirentFromStats = createDirentFromStats;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js
  var require_utils10 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.fs = void 0;
      var fs6 = require_fs4();
      exports.fs = fs6;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js
  var require_common = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.joinPathSegments = void 0;
      function joinPathSegments(a, b, separator) {
        if (a.endsWith(separator)) {
          return a + b;
        }
        return a + separator + b;
      }
      __name(joinPathSegments, "joinPathSegments");
      exports.joinPathSegments = joinPathSegments;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js
  var require_async2 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
      var fsStat = require_out();
      var rpl = require_run_parallel();
      var constants_1 = require_constants8();
      var utils = require_utils10();
      var common = require_common();
      function read(directory, settings, callback) {
        if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
          readdirWithFileTypes(directory, settings, callback);
          return;
        }
        readdir(directory, settings, callback);
      }
      __name(read, "read");
      exports.read = read;
      function readdirWithFileTypes(directory, settings, callback) {
        settings.fs.readdir(
          directory,
          { withFileTypes: true },
          (readdirError, dirents) => {
            if (readdirError !== null) {
              callFailureCallback(callback, readdirError);
              return;
            }
            const entries = dirents.map((dirent) => ({
              dirent,
              name: dirent.name,
              path: common.joinPathSegments(
                directory,
                dirent.name,
                settings.pathSegmentSeparator,
              ),
            }));
            if (!settings.followSymbolicLinks) {
              callSuccessCallback(callback, entries);
              return;
            }
            const tasks = entries.map((entry) =>
              makeRplTaskEntry(entry, settings),
            );
            rpl(tasks, (rplError, rplEntries) => {
              if (rplError !== null) {
                callFailureCallback(callback, rplError);
                return;
              }
              callSuccessCallback(callback, rplEntries);
            });
          },
        );
      }
      __name(readdirWithFileTypes, "readdirWithFileTypes");
      exports.readdirWithFileTypes = readdirWithFileTypes;
      function makeRplTaskEntry(entry, settings) {
        return (done) => {
          if (!entry.dirent.isSymbolicLink()) {
            done(null, entry);
            return;
          }
          settings.fs.stat(entry.path, (statError, stats) => {
            if (statError !== null) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                done(statError);
                return;
              }
              done(null, entry);
              return;
            }
            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            done(null, entry);
          });
        };
      }
      __name(makeRplTaskEntry, "makeRplTaskEntry");
      function readdir(directory, settings, callback) {
        settings.fs.readdir(directory, (readdirError, names) => {
          if (readdirError !== null) {
            callFailureCallback(callback, readdirError);
            return;
          }
          const tasks = names.map((name) => {
            const path4 = common.joinPathSegments(
              directory,
              name,
              settings.pathSegmentSeparator,
            );
            return (done) => {
              fsStat.stat(path4, settings.fsStatSettings, (error, stats) => {
                if (error !== null) {
                  done(error);
                  return;
                }
                const entry = {
                  name,
                  path: path4,
                  dirent: utils.fs.createDirentFromStats(name, stats),
                };
                if (settings.stats) {
                  entry.stats = stats;
                }
                done(null, entry);
              });
            };
          });
          rpl(tasks, (rplError, entries) => {
            if (rplError !== null) {
              callFailureCallback(callback, rplError);
              return;
            }
            callSuccessCallback(callback, entries);
          });
        });
      }
      __name(readdir, "readdir");
      exports.readdir = readdir;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      __name(callFailureCallback, "callFailureCallback");
      function callSuccessCallback(callback, result) {
        callback(null, result);
      }
      __name(callSuccessCallback, "callSuccessCallback");
    },
  });

  // node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js
  var require_sync2 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
      var fsStat = require_out();
      var constants_1 = require_constants8();
      var utils = require_utils10();
      var common = require_common();
      function read(directory, settings) {
        if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
          return readdirWithFileTypes(directory, settings);
        }
        return readdir(directory, settings);
      }
      __name(read, "read");
      exports.read = read;
      function readdirWithFileTypes(directory, settings) {
        const dirents = settings.fs.readdirSync(directory, {
          withFileTypes: true,
        });
        return dirents.map((dirent) => {
          const entry = {
            dirent,
            name: dirent.name,
            path: common.joinPathSegments(
              directory,
              dirent.name,
              settings.pathSegmentSeparator,
            ),
          };
          if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
            try {
              const stats = settings.fs.statSync(entry.path);
              entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            } catch (error) {
              if (settings.throwErrorOnBrokenSymbolicLink) {
                throw error;
              }
            }
          }
          return entry;
        });
      }
      __name(readdirWithFileTypes, "readdirWithFileTypes");
      exports.readdirWithFileTypes = readdirWithFileTypes;
      function readdir(directory, settings) {
        const names = settings.fs.readdirSync(directory);
        return names.map((name) => {
          const entryPath = common.joinPathSegments(
            directory,
            name,
            settings.pathSegmentSeparator,
          );
          const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
          const entry = {
            name,
            path: entryPath,
            dirent: utils.fs.createDirentFromStats(name, stats),
          };
          if (settings.stats) {
            entry.stats = stats;
          }
          return entry;
        });
      }
      __name(readdir, "readdir");
      exports.readdir = readdir;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js
  var require_fs5 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
      var fs6 = __require("fs");
      exports.FILE_SYSTEM_ADAPTER = {
        lstat: fs6.lstat,
        stat: fs6.stat,
        lstatSync: fs6.lstatSync,
        statSync: fs6.statSync,
        readdir: fs6.readdir,
        readdirSync: fs6.readdirSync,
      };
      function createFileSystemAdapter(fsMethods) {
        if (fsMethods === void 0) {
          return exports.FILE_SYSTEM_ADAPTER;
        }
        return Object.assign(
          Object.assign({}, exports.FILE_SYSTEM_ADAPTER),
          fsMethods,
        );
      }
      __name(createFileSystemAdapter, "createFileSystemAdapter");
      exports.createFileSystemAdapter = createFileSystemAdapter;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js
  var require_settings2 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path4 = __require("path");
      var fsStat = require_out();
      var fs6 = require_fs5();
      var Settings = class {
        static {
          __name(this, "Settings");
        }
        constructor(_options = {}) {
          this._options = _options;
          this.followSymbolicLinks = this._getValue(
            this._options.followSymbolicLinks,
            false,
          );
          this.fs = fs6.createFileSystemAdapter(this._options.fs);
          this.pathSegmentSeparator = this._getValue(
            this._options.pathSegmentSeparator,
            path4.sep,
          );
          this.stats = this._getValue(this._options.stats, false);
          this.throwErrorOnBrokenSymbolicLink = this._getValue(
            this._options.throwErrorOnBrokenSymbolicLink,
            true,
          );
          this.fsStatSettings = new fsStat.Settings({
            followSymbolicLink: this.followSymbolicLinks,
            fs: this.fs,
            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink,
          });
        }
        _getValue(option, value) {
          return option !== null && option !== void 0 ? option : value;
        }
      };
      exports.default = Settings;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js
  var require_out2 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Settings = exports.scandirSync = exports.scandir = void 0;
      var async = require_async2();
      var sync = require_sync2();
      var settings_1 = require_settings2();
      exports.Settings = settings_1.default;
      function scandir(path4, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          async.read(path4, getSettings(), optionsOrSettingsOrCallback);
          return;
        }
        async.read(path4, getSettings(optionsOrSettingsOrCallback), callback);
      }
      __name(scandir, "scandir");
      exports.scandir = scandir;
      function scandirSync(path4, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        return sync.read(path4, settings);
      }
      __name(scandirSync, "scandirSync");
      exports.scandirSync = scandirSync;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
      __name(getSettings, "getSettings");
    },
  });

  // node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js
  var require_reusify = __commonJS({
    "node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js"(
      exports,
      module,
    ) {
      "use strict";
      function reusify(Constructor) {
        var head = new Constructor();
        var tail = head;
        function get() {
          var current = head;
          if (current.next) {
            head = current.next;
          } else {
            head = new Constructor();
            tail = head;
          }
          current.next = null;
          return current;
        }
        __name(get, "get");
        function release(obj) {
          tail.next = obj;
          tail = obj;
        }
        __name(release, "release");
        return {
          get,
          release,
        };
      }
      __name(reusify, "reusify");
      module.exports = reusify;
    },
  });

  // node_modules/.pnpm/fastq@1.17.1/node_modules/fastq/queue.js
  var require_queue = __commonJS({
    "node_modules/.pnpm/fastq@1.17.1/node_modules/fastq/queue.js"(
      exports,
      module,
    ) {
      "use strict";
      var reusify = require_reusify();
      function fastqueue(context2, worker, _concurrency) {
        if (typeof context2 === "function") {
          _concurrency = worker;
          worker = context2;
          context2 = null;
        }
        if (!(_concurrency >= 1)) {
          throw new Error(
            "fastqueue concurrency must be equal to or greater than 1",
          );
        }
        var cache = reusify(Task);
        var queueHead = null;
        var queueTail = null;
        var _running = 0;
        var errorHandler = null;
        var self2 = {
          push: push3,
          drain: noop2,
          saturated: noop2,
          pause,
          paused: false,
          get concurrency() {
            return _concurrency;
          },
          set concurrency(value) {
            if (!(value >= 1)) {
              throw new Error(
                "fastqueue concurrency must be equal to or greater than 1",
              );
            }
            _concurrency = value;
            if (self2.paused) return;
            for (; queueHead && _running < _concurrency; ) {
              _running++;
              release();
            }
          },
          running,
          resume,
          idle,
          length,
          getQueue,
          unshift,
          empty: noop2,
          kill,
          killAndDrain,
          error,
        };
        return self2;
        function running() {
          return _running;
        }
        __name(running, "running");
        function pause() {
          self2.paused = true;
        }
        __name(pause, "pause");
        function length() {
          var current = queueHead;
          var counter = 0;
          while (current) {
            current = current.next;
            counter++;
          }
          return counter;
        }
        __name(length, "length");
        function getQueue() {
          var current = queueHead;
          var tasks = [];
          while (current) {
            tasks.push(current.value);
            current = current.next;
          }
          return tasks;
        }
        __name(getQueue, "getQueue");
        function resume() {
          if (!self2.paused) return;
          self2.paused = false;
          if (queueHead === null) {
            _running++;
            release();
            return;
          }
          for (; queueHead && _running < _concurrency; ) {
            _running++;
            release();
          }
        }
        __name(resume, "resume");
        function idle() {
          return _running === 0 && self2.length() === 0;
        }
        __name(idle, "idle");
        function push3(value, done) {
          var current = cache.get();
          current.context = context2;
          current.release = release;
          current.value = value;
          current.callback = done || noop2;
          current.errorHandler = errorHandler;
          if (_running >= _concurrency || self2.paused) {
            if (queueTail) {
              queueTail.next = current;
              queueTail = current;
            } else {
              queueHead = current;
              queueTail = current;
              self2.saturated();
            }
          } else {
            _running++;
            worker.call(context2, current.value, current.worked);
          }
        }
        __name(push3, "push");
        function unshift(value, done) {
          var current = cache.get();
          current.context = context2;
          current.release = release;
          current.value = value;
          current.callback = done || noop2;
          current.errorHandler = errorHandler;
          if (_running >= _concurrency || self2.paused) {
            if (queueHead) {
              current.next = queueHead;
              queueHead = current;
            } else {
              queueHead = current;
              queueTail = current;
              self2.saturated();
            }
          } else {
            _running++;
            worker.call(context2, current.value, current.worked);
          }
        }
        __name(unshift, "unshift");
        function release(holder) {
          if (holder) {
            cache.release(holder);
          }
          var next = queueHead;
          if (next && _running <= _concurrency) {
            if (!self2.paused) {
              if (queueTail === queueHead) {
                queueTail = null;
              }
              queueHead = next.next;
              next.next = null;
              worker.call(context2, next.value, next.worked);
              if (queueTail === null) {
                self2.empty();
              }
            } else {
              _running--;
            }
          } else if (--_running === 0) {
            self2.drain();
          }
        }
        __name(release, "release");
        function kill() {
          queueHead = null;
          queueTail = null;
          self2.drain = noop2;
        }
        __name(kill, "kill");
        function killAndDrain() {
          queueHead = null;
          queueTail = null;
          self2.drain();
          self2.drain = noop2;
        }
        __name(killAndDrain, "killAndDrain");
        function error(handler) {
          errorHandler = handler;
        }
        __name(error, "error");
      }
      __name(fastqueue, "fastqueue");
      function noop2() {}
      __name(noop2, "noop");
      function Task() {
        this.value = null;
        this.callback = noop2;
        this.next = null;
        this.release = noop2;
        this.context = null;
        this.errorHandler = null;
        var self2 = this;
        this.worked = /* @__PURE__ */ __name(function worked(err, result) {
          var callback = self2.callback;
          var errorHandler = self2.errorHandler;
          var val = self2.value;
          self2.value = null;
          self2.callback = noop2;
          if (self2.errorHandler) {
            errorHandler(err, val);
          }
          callback.call(self2.context, err, result);
          self2.release(self2);
        }, "worked");
      }
      __name(Task, "Task");
      function queueAsPromised(context2, worker, _concurrency) {
        if (typeof context2 === "function") {
          _concurrency = worker;
          worker = context2;
          context2 = null;
        }
        function asyncWrapper(arg, cb) {
          worker.call(this, arg).then(function (res) {
            cb(null, res);
          }, cb);
        }
        __name(asyncWrapper, "asyncWrapper");
        var queue = fastqueue(context2, asyncWrapper, _concurrency);
        var pushCb = queue.push;
        var unshiftCb = queue.unshift;
        queue.push = push3;
        queue.unshift = unshift;
        queue.drained = drained;
        return queue;
        function push3(value) {
          var p = new Promise(function (resolve, reject) {
            pushCb(value, function (err, result) {
              if (err) {
                reject(err);
                return;
              }
              resolve(result);
            });
          });
          p.catch(noop2);
          return p;
        }
        __name(push3, "push");
        function unshift(value) {
          var p = new Promise(function (resolve, reject) {
            unshiftCb(value, function (err, result) {
              if (err) {
                reject(err);
                return;
              }
              resolve(result);
            });
          });
          p.catch(noop2);
          return p;
        }
        __name(unshift, "unshift");
        function drained() {
          if (queue.idle()) {
            return new Promise(function (resolve) {
              resolve();
            });
          }
          var previousDrain = queue.drain;
          var p = new Promise(function (resolve) {
            queue.drain = function () {
              previousDrain();
              resolve();
            };
          });
          return p;
        }
        __name(drained, "drained");
      }
      __name(queueAsPromised, "queueAsPromised");
      module.exports = fastqueue;
      module.exports.promise = queueAsPromised;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js
  var require_common2 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.joinPathSegments =
        exports.replacePathSegmentSeparator =
        exports.isAppliedFilter =
        exports.isFatalError =
          void 0;
      function isFatalError(settings, error) {
        if (settings.errorFilter === null) {
          return true;
        }
        return !settings.errorFilter(error);
      }
      __name(isFatalError, "isFatalError");
      exports.isFatalError = isFatalError;
      function isAppliedFilter(filter, value) {
        return filter === null || filter(value);
      }
      __name(isAppliedFilter, "isAppliedFilter");
      exports.isAppliedFilter = isAppliedFilter;
      function replacePathSegmentSeparator(filepath, separator) {
        return filepath.split(/[/\\]/).join(separator);
      }
      __name(replacePathSegmentSeparator, "replacePathSegmentSeparator");
      exports.replacePathSegmentSeparator = replacePathSegmentSeparator;
      function joinPathSegments(a, b, separator) {
        if (a === "") {
          return b;
        }
        if (a.endsWith(separator)) {
          return a + b;
        }
        return a + separator + b;
      }
      __name(joinPathSegments, "joinPathSegments");
      exports.joinPathSegments = joinPathSegments;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js
  var require_reader = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var common = require_common2();
      var Reader = class {
        static {
          __name(this, "Reader");
        }
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._root = common.replacePathSegmentSeparator(
            _root,
            _settings.pathSegmentSeparator,
          );
        }
      };
      exports.default = Reader;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js
  var require_async3 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var events_1 = __require("events");
      var fsScandir = require_out2();
      var fastq = require_queue();
      var common = require_common2();
      var reader_1 = require_reader();
      var AsyncReader = class extends reader_1.default {
        static {
          __name(this, "AsyncReader");
        }
        constructor(_root, _settings) {
          super(_root, _settings);
          this._settings = _settings;
          this._scandir = fsScandir.scandir;
          this._emitter = new events_1.EventEmitter();
          this._queue = fastq(
            this._worker.bind(this),
            this._settings.concurrency,
          );
          this._isFatalError = false;
          this._isDestroyed = false;
          this._queue.drain = () => {
            if (!this._isFatalError) {
              this._emitter.emit("end");
            }
          };
        }
        read() {
          this._isFatalError = false;
          this._isDestroyed = false;
          setImmediate(() => {
            this._pushToQueue(this._root, this._settings.basePath);
          });
          return this._emitter;
        }
        get isDestroyed() {
          return this._isDestroyed;
        }
        destroy() {
          if (this._isDestroyed) {
            throw new Error("The reader is already destroyed");
          }
          this._isDestroyed = true;
          this._queue.killAndDrain();
        }
        onEntry(callback) {
          this._emitter.on("entry", callback);
        }
        onError(callback) {
          this._emitter.once("error", callback);
        }
        onEnd(callback) {
          this._emitter.once("end", callback);
        }
        _pushToQueue(directory, base) {
          const queueItem = { directory, base };
          this._queue.push(queueItem, (error) => {
            if (error !== null) {
              this._handleError(error);
            }
          });
        }
        _worker(item, done) {
          this._scandir(
            item.directory,
            this._settings.fsScandirSettings,
            (error, entries) => {
              if (error !== null) {
                done(error, void 0);
                return;
              }
              for (const entry of entries) {
                this._handleEntry(entry, item.base);
              }
              done(null, void 0);
            },
          );
        }
        _handleError(error) {
          if (
            this._isDestroyed ||
            !common.isFatalError(this._settings, error)
          ) {
            return;
          }
          this._isFatalError = true;
          this._isDestroyed = true;
          this._emitter.emit("error", error);
        }
        _handleEntry(entry, base) {
          if (this._isDestroyed || this._isFatalError) {
            return;
          }
          const fullpath = entry.path;
          if (base !== void 0) {
            entry.path = common.joinPathSegments(
              base,
              entry.name,
              this._settings.pathSegmentSeparator,
            );
          }
          if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._emitEntry(entry);
          }
          if (
            entry.dirent.isDirectory() &&
            common.isAppliedFilter(this._settings.deepFilter, entry)
          ) {
            this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
          }
        }
        _emitEntry(entry) {
          this._emitter.emit("entry", entry);
        }
      };
      exports.default = AsyncReader;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js
  var require_async4 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var async_1 = require_async3();
      var AsyncProvider = class {
        static {
          __name(this, "AsyncProvider");
        }
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new async_1.default(this._root, this._settings);
          this._storage = [];
        }
        read(callback) {
          this._reader.onError((error) => {
            callFailureCallback(callback, error);
          });
          this._reader.onEntry((entry) => {
            this._storage.push(entry);
          });
          this._reader.onEnd(() => {
            callSuccessCallback(callback, this._storage);
          });
          this._reader.read();
        }
      };
      exports.default = AsyncProvider;
      function callFailureCallback(callback, error) {
        callback(error);
      }
      __name(callFailureCallback, "callFailureCallback");
      function callSuccessCallback(callback, entries) {
        callback(null, entries);
      }
      __name(callSuccessCallback, "callSuccessCallback");
    },
  });

  // node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js
  var require_stream2 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var stream_1 = __require("stream");
      var async_1 = require_async3();
      var StreamProvider = class {
        static {
          __name(this, "StreamProvider");
        }
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new async_1.default(this._root, this._settings);
          this._stream = new stream_1.Readable({
            objectMode: true,
            read: /* @__PURE__ */ __name(() => {}, "read"),
            destroy: /* @__PURE__ */ __name(() => {
              if (!this._reader.isDestroyed) {
                this._reader.destroy();
              }
            }, "destroy"),
          });
        }
        read() {
          this._reader.onError((error) => {
            this._stream.emit("error", error);
          });
          this._reader.onEntry((entry) => {
            this._stream.push(entry);
          });
          this._reader.onEnd(() => {
            this._stream.push(null);
          });
          this._reader.read();
          return this._stream;
        }
      };
      exports.default = StreamProvider;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js
  var require_sync3 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var fsScandir = require_out2();
      var common = require_common2();
      var reader_1 = require_reader();
      var SyncReader = class extends reader_1.default {
        static {
          __name(this, "SyncReader");
        }
        constructor() {
          super(...arguments);
          this._scandir = fsScandir.scandirSync;
          this._storage = [];
          this._queue = /* @__PURE__ */ new Set();
        }
        read() {
          this._pushToQueue(this._root, this._settings.basePath);
          this._handleQueue();
          return this._storage;
        }
        _pushToQueue(directory, base) {
          this._queue.add({ directory, base });
        }
        _handleQueue() {
          for (const item of this._queue.values()) {
            this._handleDirectory(item.directory, item.base);
          }
        }
        _handleDirectory(directory, base) {
          try {
            const entries = this._scandir(
              directory,
              this._settings.fsScandirSettings,
            );
            for (const entry of entries) {
              this._handleEntry(entry, base);
            }
          } catch (error) {
            this._handleError(error);
          }
        }
        _handleError(error) {
          if (!common.isFatalError(this._settings, error)) {
            return;
          }
          throw error;
        }
        _handleEntry(entry, base) {
          const fullpath = entry.path;
          if (base !== void 0) {
            entry.path = common.joinPathSegments(
              base,
              entry.name,
              this._settings.pathSegmentSeparator,
            );
          }
          if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._pushToStorage(entry);
          }
          if (
            entry.dirent.isDirectory() &&
            common.isAppliedFilter(this._settings.deepFilter, entry)
          ) {
            this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
          }
        }
        _pushToStorage(entry) {
          this._storage.push(entry);
        }
      };
      exports.default = SyncReader;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js
  var require_sync4 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var sync_1 = require_sync3();
      var SyncProvider = class {
        static {
          __name(this, "SyncProvider");
        }
        constructor(_root, _settings) {
          this._root = _root;
          this._settings = _settings;
          this._reader = new sync_1.default(this._root, this._settings);
        }
        read() {
          return this._reader.read();
        }
      };
      exports.default = SyncProvider;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js
  var require_settings3 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path4 = __require("path");
      var fsScandir = require_out2();
      var Settings = class {
        static {
          __name(this, "Settings");
        }
        constructor(_options = {}) {
          this._options = _options;
          this.basePath = this._getValue(this._options.basePath, void 0);
          this.concurrency = this._getValue(
            this._options.concurrency,
            Number.POSITIVE_INFINITY,
          );
          this.deepFilter = this._getValue(this._options.deepFilter, null);
          this.entryFilter = this._getValue(this._options.entryFilter, null);
          this.errorFilter = this._getValue(this._options.errorFilter, null);
          this.pathSegmentSeparator = this._getValue(
            this._options.pathSegmentSeparator,
            path4.sep,
          );
          this.fsScandirSettings = new fsScandir.Settings({
            followSymbolicLinks: this._options.followSymbolicLinks,
            fs: this._options.fs,
            pathSegmentSeparator: this._options.pathSegmentSeparator,
            stats: this._options.stats,
            throwErrorOnBrokenSymbolicLink:
              this._options.throwErrorOnBrokenSymbolicLink,
          });
        }
        _getValue(option, value) {
          return option !== null && option !== void 0 ? option : value;
        }
      };
      exports.default = Settings;
    },
  });

  // node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js
  var require_out3 = __commonJS({
    "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Settings =
        exports.walkStream =
        exports.walkSync =
        exports.walk =
          void 0;
      var async_1 = require_async4();
      var stream_1 = require_stream2();
      var sync_1 = require_sync4();
      var settings_1 = require_settings3();
      exports.Settings = settings_1.default;
      function walk(directory, optionsOrSettingsOrCallback, callback) {
        if (typeof optionsOrSettingsOrCallback === "function") {
          new async_1.default(directory, getSettings()).read(
            optionsOrSettingsOrCallback,
          );
          return;
        }
        new async_1.default(
          directory,
          getSettings(optionsOrSettingsOrCallback),
        ).read(callback);
      }
      __name(walk, "walk");
      exports.walk = walk;
      function walkSync(directory, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        const provider = new sync_1.default(directory, settings);
        return provider.read();
      }
      __name(walkSync, "walkSync");
      exports.walkSync = walkSync;
      function walkStream(directory, optionsOrSettings) {
        const settings = getSettings(optionsOrSettings);
        const provider = new stream_1.default(directory, settings);
        return provider.read();
      }
      __name(walkStream, "walkStream");
      exports.walkStream = walkStream;
      function getSettings(settingsOrOptions = {}) {
        if (settingsOrOptions instanceof settings_1.default) {
          return settingsOrOptions;
        }
        return new settings_1.default(settingsOrOptions);
      }
      __name(getSettings, "getSettings");
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/reader.js
  var require_reader2 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/reader.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path4 = __require("path");
      var fsStat = require_out();
      var utils = require_utils9();
      var Reader = class {
        static {
          __name(this, "Reader");
        }
        constructor(_settings) {
          this._settings = _settings;
          this._fsStatSettings = new fsStat.Settings({
            followSymbolicLink: this._settings.followSymbolicLinks,
            fs: this._settings.fs,
            throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks,
          });
        }
        _getFullEntryPath(filepath) {
          return path4.resolve(this._settings.cwd, filepath);
        }
        _makeEntry(stats, pattern) {
          const entry = {
            name: pattern,
            path: pattern,
            dirent: utils.fs.createDirentFromStats(pattern, stats),
          };
          if (this._settings.stats) {
            entry.stats = stats;
          }
          return entry;
        }
        _isFatalError(error) {
          return (
            !utils.errno.isEnoentCodeError(error) &&
            !this._settings.suppressErrors
          );
        }
      };
      exports.default = Reader;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/stream.js
  var require_stream3 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/stream.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var stream_1 = __require("stream");
      var fsStat = require_out();
      var fsWalk = require_out3();
      var reader_1 = require_reader2();
      var ReaderStream = class extends reader_1.default {
        static {
          __name(this, "ReaderStream");
        }
        constructor() {
          super(...arguments);
          this._walkStream = fsWalk.walkStream;
          this._stat = fsStat.stat;
        }
        dynamic(root2, options) {
          return this._walkStream(root2, options);
        }
        static(patterns, options) {
          const filepaths = patterns.map(this._getFullEntryPath, this);
          const stream = new stream_1.PassThrough({ objectMode: true });
          stream._write = (index2, _enc, done) => {
            return this._getEntry(filepaths[index2], patterns[index2], options)
              .then((entry) => {
                if (entry !== null && options.entryFilter(entry)) {
                  stream.push(entry);
                }
                if (index2 === filepaths.length - 1) {
                  stream.end();
                }
                done();
              })
              .catch(done);
          };
          for (let i = 0; i < filepaths.length; i++) {
            stream.write(i);
          }
          return stream;
        }
        _getEntry(filepath, pattern, options) {
          return this._getStat(filepath)
            .then((stats) => this._makeEntry(stats, pattern))
            .catch((error) => {
              if (options.errorFilter(error)) {
                return null;
              }
              throw error;
            });
        }
        _getStat(filepath) {
          return new Promise((resolve, reject) => {
            this._stat(filepath, this._fsStatSettings, (error, stats) => {
              return error === null ? resolve(stats) : reject(error);
            });
          });
        }
      };
      exports.default = ReaderStream;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/async.js
  var require_async5 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/async.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var fsWalk = require_out3();
      var reader_1 = require_reader2();
      var stream_1 = require_stream3();
      var ReaderAsync = class extends reader_1.default {
        static {
          __name(this, "ReaderAsync");
        }
        constructor() {
          super(...arguments);
          this._walkAsync = fsWalk.walk;
          this._readerStream = new stream_1.default(this._settings);
        }
        dynamic(root2, options) {
          return new Promise((resolve, reject) => {
            this._walkAsync(root2, options, (error, entries) => {
              if (error === null) {
                resolve(entries);
              } else {
                reject(error);
              }
            });
          });
        }
        async static(patterns, options) {
          const entries = [];
          const stream = this._readerStream.static(patterns, options);
          return new Promise((resolve, reject) => {
            stream.once("error", reject);
            stream.on("data", (entry) => entries.push(entry));
            stream.once("end", () => resolve(entries));
          });
        }
      };
      exports.default = ReaderAsync;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/matcher.js
  var require_matcher = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/matcher.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils = require_utils9();
      var Matcher = class {
        static {
          __name(this, "Matcher");
        }
        constructor(_patterns, _settings, _micromatchOptions) {
          this._patterns = _patterns;
          this._settings = _settings;
          this._micromatchOptions = _micromatchOptions;
          this._storage = [];
          this._fillStorage();
        }
        _fillStorage() {
          for (const pattern of this._patterns) {
            const segments = this._getPatternSegments(pattern);
            const sections = this._splitSegmentsIntoSections(segments);
            this._storage.push({
              complete: sections.length <= 1,
              pattern,
              segments,
              sections,
            });
          }
        }
        _getPatternSegments(pattern) {
          const parts = utils.pattern.getPatternParts(
            pattern,
            this._micromatchOptions,
          );
          return parts.map((part) => {
            const dynamic = utils.pattern.isDynamicPattern(
              part,
              this._settings,
            );
            if (!dynamic) {
              return {
                dynamic: false,
                pattern: part,
              };
            }
            return {
              dynamic: true,
              pattern: part,
              patternRe: utils.pattern.makeRe(part, this._micromatchOptions),
            };
          });
        }
        _splitSegmentsIntoSections(segments) {
          return utils.array.splitWhen(
            segments,
            (segment) =>
              segment.dynamic && utils.pattern.hasGlobStar(segment.pattern),
          );
        }
      };
      exports.default = Matcher;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/partial.js
  var require_partial = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/matchers/partial.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var matcher_1 = require_matcher();
      var PartialMatcher = class extends matcher_1.default {
        static {
          __name(this, "PartialMatcher");
        }
        match(filepath) {
          const parts = filepath.split("/");
          const levels = parts.length;
          const patterns = this._storage.filter(
            (info2) => !info2.complete || info2.segments.length > levels,
          );
          for (const pattern of patterns) {
            const section = pattern.sections[0];
            if (!pattern.complete && levels > section.length) {
              return true;
            }
            const match = parts.every((part, index2) => {
              const segment = pattern.segments[index2];
              if (segment.dynamic && segment.patternRe.test(part)) {
                return true;
              }
              if (!segment.dynamic && segment.pattern === part) {
                return true;
              }
              return false;
            });
            if (match) {
              return true;
            }
          }
          return false;
        }
      };
      exports.default = PartialMatcher;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/deep.js
  var require_deep = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/deep.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils = require_utils9();
      var partial_1 = require_partial();
      var DeepFilter = class {
        static {
          __name(this, "DeepFilter");
        }
        constructor(_settings, _micromatchOptions) {
          this._settings = _settings;
          this._micromatchOptions = _micromatchOptions;
        }
        getFilter(basePath, positive, negative) {
          const matcher = this._getMatcher(positive);
          const negativeRe = this._getNegativePatternsRe(negative);
          return (entry) => this._filter(basePath, entry, matcher, negativeRe);
        }
        _getMatcher(patterns) {
          return new partial_1.default(
            patterns,
            this._settings,
            this._micromatchOptions,
          );
        }
        _getNegativePatternsRe(patterns) {
          const affectDepthOfReadingPatterns = patterns.filter(
            utils.pattern.isAffectDepthOfReadingPattern,
          );
          return utils.pattern.convertPatternsToRe(
            affectDepthOfReadingPatterns,
            this._micromatchOptions,
          );
        }
        _filter(basePath, entry, matcher, negativeRe) {
          if (this._isSkippedByDeep(basePath, entry.path)) {
            return false;
          }
          if (this._isSkippedSymbolicLink(entry)) {
            return false;
          }
          const filepath = utils.path.removeLeadingDotSegment(entry.path);
          if (this._isSkippedByPositivePatterns(filepath, matcher)) {
            return false;
          }
          return this._isSkippedByNegativePatterns(filepath, negativeRe);
        }
        _isSkippedByDeep(basePath, entryPath) {
          if (this._settings.deep === Infinity) {
            return false;
          }
          return (
            this._getEntryLevel(basePath, entryPath) >= this._settings.deep
          );
        }
        _getEntryLevel(basePath, entryPath) {
          const entryPathDepth = entryPath.split("/").length;
          if (basePath === "") {
            return entryPathDepth;
          }
          const basePathDepth = basePath.split("/").length;
          return entryPathDepth - basePathDepth;
        }
        _isSkippedSymbolicLink(entry) {
          return (
            !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink()
          );
        }
        _isSkippedByPositivePatterns(entryPath, matcher) {
          return !this._settings.baseNameMatch && !matcher.match(entryPath);
        }
        _isSkippedByNegativePatterns(entryPath, patternsRe) {
          return !utils.pattern.matchAny(entryPath, patternsRe);
        }
      };
      exports.default = DeepFilter;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/entry.js
  var require_entry = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/entry.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils = require_utils9();
      var EntryFilter = class {
        static {
          __name(this, "EntryFilter");
        }
        constructor(_settings, _micromatchOptions) {
          this._settings = _settings;
          this._micromatchOptions = _micromatchOptions;
          this.index = /* @__PURE__ */ new Map();
        }
        getFilter(positive, negative) {
          const positiveRe = utils.pattern.convertPatternsToRe(
            positive,
            this._micromatchOptions,
          );
          const negativeRe = utils.pattern.convertPatternsToRe(
            negative,
            Object.assign(Object.assign({}, this._micromatchOptions), {
              dot: true,
            }),
          );
          return (entry) => this._filter(entry, positiveRe, negativeRe);
        }
        _filter(entry, positiveRe, negativeRe) {
          const filepath = utils.path.removeLeadingDotSegment(entry.path);
          if (this._settings.unique && this._isDuplicateEntry(filepath)) {
            return false;
          }
          if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
            return false;
          }
          if (this._isSkippedByAbsoluteNegativePatterns(filepath, negativeRe)) {
            return false;
          }
          const isDirectory = entry.dirent.isDirectory();
          const isMatched =
            this._isMatchToPatterns(filepath, positiveRe, isDirectory) &&
            !this._isMatchToPatterns(filepath, negativeRe, isDirectory);
          if (this._settings.unique && isMatched) {
            this._createIndexRecord(filepath);
          }
          return isMatched;
        }
        _isDuplicateEntry(filepath) {
          return this.index.has(filepath);
        }
        _createIndexRecord(filepath) {
          this.index.set(filepath, void 0);
        }
        _onlyFileFilter(entry) {
          return this._settings.onlyFiles && !entry.dirent.isFile();
        }
        _onlyDirectoryFilter(entry) {
          return this._settings.onlyDirectories && !entry.dirent.isDirectory();
        }
        _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
          if (!this._settings.absolute) {
            return false;
          }
          const fullpath = utils.path.makeAbsolute(
            this._settings.cwd,
            entryPath,
          );
          return utils.pattern.matchAny(fullpath, patternsRe);
        }
        _isMatchToPatterns(filepath, patternsRe, isDirectory) {
          const isMatched = utils.pattern.matchAny(filepath, patternsRe);
          if (!isMatched && isDirectory) {
            return utils.pattern.matchAny(filepath + "/", patternsRe);
          }
          return isMatched;
        }
      };
      exports.default = EntryFilter;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/error.js
  var require_error = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/filters/error.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils = require_utils9();
      var ErrorFilter = class {
        static {
          __name(this, "ErrorFilter");
        }
        constructor(_settings) {
          this._settings = _settings;
        }
        getFilter() {
          return (error) => this._isNonFatalError(error);
        }
        _isNonFatalError(error) {
          return (
            utils.errno.isEnoentCodeError(error) ||
            this._settings.suppressErrors
          );
        }
      };
      exports.default = ErrorFilter;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/transformers/entry.js
  var require_entry2 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/transformers/entry.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var utils = require_utils9();
      var EntryTransformer = class {
        static {
          __name(this, "EntryTransformer");
        }
        constructor(_settings) {
          this._settings = _settings;
        }
        getTransformer() {
          return (entry) => this._transform(entry);
        }
        _transform(entry) {
          let filepath = entry.path;
          if (this._settings.absolute) {
            filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
            filepath = utils.path.unixify(filepath);
          }
          if (this._settings.markDirectories && entry.dirent.isDirectory()) {
            filepath += "/";
          }
          if (!this._settings.objectMode) {
            return filepath;
          }
          return Object.assign(Object.assign({}, entry), { path: filepath });
        }
      };
      exports.default = EntryTransformer;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/provider.js
  var require_provider = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/provider.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path4 = __require("path");
      var deep_1 = require_deep();
      var entry_1 = require_entry();
      var error_1 = require_error();
      var entry_2 = require_entry2();
      var Provider = class {
        static {
          __name(this, "Provider");
        }
        constructor(_settings) {
          this._settings = _settings;
          this.errorFilter = new error_1.default(this._settings);
          this.entryFilter = new entry_1.default(
            this._settings,
            this._getMicromatchOptions(),
          );
          this.deepFilter = new deep_1.default(
            this._settings,
            this._getMicromatchOptions(),
          );
          this.entryTransformer = new entry_2.default(this._settings);
        }
        _getRootDirectory(task) {
          return path4.resolve(this._settings.cwd, task.base);
        }
        _getReaderOptions(task) {
          const basePath = task.base === "." ? "" : task.base;
          return {
            basePath,
            pathSegmentSeparator: "/",
            concurrency: this._settings.concurrency,
            deepFilter: this.deepFilter.getFilter(
              basePath,
              task.positive,
              task.negative,
            ),
            entryFilter: this.entryFilter.getFilter(
              task.positive,
              task.negative,
            ),
            errorFilter: this.errorFilter.getFilter(),
            followSymbolicLinks: this._settings.followSymbolicLinks,
            fs: this._settings.fs,
            stats: this._settings.stats,
            throwErrorOnBrokenSymbolicLink:
              this._settings.throwErrorOnBrokenSymbolicLink,
            transform: this.entryTransformer.getTransformer(),
          };
        }
        _getMicromatchOptions() {
          return {
            dot: this._settings.dot,
            matchBase: this._settings.baseNameMatch,
            nobrace: !this._settings.braceExpansion,
            nocase: !this._settings.caseSensitiveMatch,
            noext: !this._settings.extglob,
            noglobstar: !this._settings.globstar,
            posix: true,
            strictSlashes: false,
          };
        }
      };
      exports.default = Provider;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/async.js
  var require_async6 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/async.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var async_1 = require_async5();
      var provider_1 = require_provider();
      var ProviderAsync = class extends provider_1.default {
        static {
          __name(this, "ProviderAsync");
        }
        constructor() {
          super(...arguments);
          this._reader = new async_1.default(this._settings);
        }
        async read(task) {
          const root2 = this._getRootDirectory(task);
          const options = this._getReaderOptions(task);
          const entries = await this.api(root2, task, options);
          return entries.map((entry) => options.transform(entry));
        }
        api(root2, task, options) {
          if (task.dynamic) {
            return this._reader.dynamic(root2, options);
          }
          return this._reader.static(task.patterns, options);
        }
      };
      exports.default = ProviderAsync;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/stream.js
  var require_stream4 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/stream.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var stream_1 = __require("stream");
      var stream_2 = require_stream3();
      var provider_1 = require_provider();
      var ProviderStream = class extends provider_1.default {
        static {
          __name(this, "ProviderStream");
        }
        constructor() {
          super(...arguments);
          this._reader = new stream_2.default(this._settings);
        }
        read(task) {
          const root2 = this._getRootDirectory(task);
          const options = this._getReaderOptions(task);
          const source = this.api(root2, task, options);
          const destination = new stream_1.Readable({
            objectMode: true,
            read: /* @__PURE__ */ __name(() => {}, "read"),
          });
          source
            .once("error", (error) => destination.emit("error", error))
            .on("data", (entry) =>
              destination.emit("data", options.transform(entry)),
            )
            .once("end", () => destination.emit("end"));
          destination.once("close", () => source.destroy());
          return destination;
        }
        api(root2, task, options) {
          if (task.dynamic) {
            return this._reader.dynamic(root2, options);
          }
          return this._reader.static(task.patterns, options);
        }
      };
      exports.default = ProviderStream;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/sync.js
  var require_sync5 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/readers/sync.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var fsStat = require_out();
      var fsWalk = require_out3();
      var reader_1 = require_reader2();
      var ReaderSync = class extends reader_1.default {
        static {
          __name(this, "ReaderSync");
        }
        constructor() {
          super(...arguments);
          this._walkSync = fsWalk.walkSync;
          this._statSync = fsStat.statSync;
        }
        dynamic(root2, options) {
          return this._walkSync(root2, options);
        }
        static(patterns, options) {
          const entries = [];
          for (const pattern of patterns) {
            const filepath = this._getFullEntryPath(pattern);
            const entry = this._getEntry(filepath, pattern, options);
            if (entry === null || !options.entryFilter(entry)) {
              continue;
            }
            entries.push(entry);
          }
          return entries;
        }
        _getEntry(filepath, pattern, options) {
          try {
            const stats = this._getStat(filepath);
            return this._makeEntry(stats, pattern);
          } catch (error) {
            if (options.errorFilter(error)) {
              return null;
            }
            throw error;
          }
        }
        _getStat(filepath) {
          return this._statSync(filepath, this._fsStatSettings);
        }
      };
      exports.default = ReaderSync;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/sync.js
  var require_sync6 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/providers/sync.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var sync_1 = require_sync5();
      var provider_1 = require_provider();
      var ProviderSync = class extends provider_1.default {
        static {
          __name(this, "ProviderSync");
        }
        constructor() {
          super(...arguments);
          this._reader = new sync_1.default(this._settings);
        }
        read(task) {
          const root2 = this._getRootDirectory(task);
          const options = this._getReaderOptions(task);
          const entries = this.api(root2, task, options);
          return entries.map(options.transform);
        }
        api(root2, task, options) {
          if (task.dynamic) {
            return this._reader.dynamic(root2, options);
          }
          return this._reader.static(task.patterns, options);
        }
      };
      exports.default = ProviderSync;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/settings.js
  var require_settings4 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/settings.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
      var fs6 = __require("fs");
      var os = __require("os");
      var CPU_COUNT = Math.max(os.cpus().length, 1);
      exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
        lstat: fs6.lstat,
        lstatSync: fs6.lstatSync,
        stat: fs6.stat,
        statSync: fs6.statSync,
        readdir: fs6.readdir,
        readdirSync: fs6.readdirSync,
      };
      var Settings = class {
        static {
          __name(this, "Settings");
        }
        constructor(_options = {}) {
          this._options = _options;
          this.absolute = this._getValue(this._options.absolute, false);
          this.baseNameMatch = this._getValue(
            this._options.baseNameMatch,
            false,
          );
          this.braceExpansion = this._getValue(
            this._options.braceExpansion,
            true,
          );
          this.caseSensitiveMatch = this._getValue(
            this._options.caseSensitiveMatch,
            true,
          );
          this.concurrency = this._getValue(
            this._options.concurrency,
            CPU_COUNT,
          );
          this.cwd = this._getValue(this._options.cwd, process.cwd());
          this.deep = this._getValue(this._options.deep, Infinity);
          this.dot = this._getValue(this._options.dot, false);
          this.extglob = this._getValue(this._options.extglob, true);
          this.followSymbolicLinks = this._getValue(
            this._options.followSymbolicLinks,
            true,
          );
          this.fs = this._getFileSystemMethods(this._options.fs);
          this.globstar = this._getValue(this._options.globstar, true);
          this.ignore = this._getValue(this._options.ignore, []);
          this.markDirectories = this._getValue(
            this._options.markDirectories,
            false,
          );
          this.objectMode = this._getValue(this._options.objectMode, false);
          this.onlyDirectories = this._getValue(
            this._options.onlyDirectories,
            false,
          );
          this.onlyFiles = this._getValue(this._options.onlyFiles, true);
          this.stats = this._getValue(this._options.stats, false);
          this.suppressErrors = this._getValue(
            this._options.suppressErrors,
            false,
          );
          this.throwErrorOnBrokenSymbolicLink = this._getValue(
            this._options.throwErrorOnBrokenSymbolicLink,
            false,
          );
          this.unique = this._getValue(this._options.unique, true);
          if (this.onlyDirectories) {
            this.onlyFiles = false;
          }
          if (this.stats) {
            this.objectMode = true;
          }
          this.ignore = [].concat(this.ignore);
        }
        _getValue(option, value) {
          return option === void 0 ? value : option;
        }
        _getFileSystemMethods(methods = {}) {
          return Object.assign(
            Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER),
            methods,
          );
        }
      };
      exports.default = Settings;
    },
  });

  // node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/index.js
  var require_out4 = __commonJS({
    "node_modules/.pnpm/fast-glob@3.3.2/node_modules/fast-glob/out/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var taskManager = require_tasks();
      var async_1 = require_async6();
      var stream_1 = require_stream4();
      var sync_1 = require_sync6();
      var settings_1 = require_settings4();
      var utils = require_utils9();
      async function FastGlob(source, options) {
        assertPatternsInput(source);
        const works = getWorks(source, async_1.default, options);
        const result = await Promise.all(works);
        return utils.array.flatten(result);
      }
      __name(FastGlob, "FastGlob");
      (function (FastGlob2) {
        FastGlob2.glob = FastGlob2;
        FastGlob2.globSync = sync;
        FastGlob2.globStream = stream;
        FastGlob2.async = FastGlob2;
        function sync(source, options) {
          assertPatternsInput(source);
          const works = getWorks(source, sync_1.default, options);
          return utils.array.flatten(works);
        }
        __name(sync, "sync");
        FastGlob2.sync = sync;
        function stream(source, options) {
          assertPatternsInput(source);
          const works = getWorks(source, stream_1.default, options);
          return utils.stream.merge(works);
        }
        __name(stream, "stream");
        FastGlob2.stream = stream;
        function generateTasks(source, options) {
          assertPatternsInput(source);
          const patterns = [].concat(source);
          const settings = new settings_1.default(options);
          return taskManager.generate(patterns, settings);
        }
        __name(generateTasks, "generateTasks");
        FastGlob2.generateTasks = generateTasks;
        function isDynamicPattern(source, options) {
          assertPatternsInput(source);
          const settings = new settings_1.default(options);
          return utils.pattern.isDynamicPattern(source, settings);
        }
        __name(isDynamicPattern, "isDynamicPattern");
        FastGlob2.isDynamicPattern = isDynamicPattern;
        function escapePath(source) {
          assertPatternsInput(source);
          return utils.path.escape(source);
        }
        __name(escapePath, "escapePath");
        FastGlob2.escapePath = escapePath;
        function convertPathToPattern(source) {
          assertPatternsInput(source);
          return utils.path.convertPathToPattern(source);
        }
        __name(convertPathToPattern, "convertPathToPattern");
        FastGlob2.convertPathToPattern = convertPathToPattern;
        let posix;
        (function (posix2) {
          function escapePath2(source) {
            assertPatternsInput(source);
            return utils.path.escapePosixPath(source);
          }
          __name(escapePath2, "escapePath");
          posix2.escapePath = escapePath2;
          function convertPathToPattern2(source) {
            assertPatternsInput(source);
            return utils.path.convertPosixPathToPattern(source);
          }
          __name(convertPathToPattern2, "convertPathToPattern");
          posix2.convertPathToPattern = convertPathToPattern2;
        })((posix = FastGlob2.posix || (FastGlob2.posix = {})));
        let win32;
        (function (win322) {
          function escapePath2(source) {
            assertPatternsInput(source);
            return utils.path.escapeWindowsPath(source);
          }
          __name(escapePath2, "escapePath");
          win322.escapePath = escapePath2;
          function convertPathToPattern2(source) {
            assertPatternsInput(source);
            return utils.path.convertWindowsPathToPattern(source);
          }
          __name(convertPathToPattern2, "convertPathToPattern");
          win322.convertPathToPattern = convertPathToPattern2;
        })((win32 = FastGlob2.win32 || (FastGlob2.win32 = {})));
      })(FastGlob || (FastGlob = {}));
      function getWorks(source, _Provider, options) {
        const patterns = [].concat(source);
        const settings = new settings_1.default(options);
        const tasks = taskManager.generate(patterns, settings);
        const provider = new _Provider(settings);
        return tasks.map(provider.read, provider);
      }
      __name(getWorks, "getWorks");
      function assertPatternsInput(input) {
        const source = [].concat(input);
        const isValidSource = source.every(
          (item) => utils.string.isString(item) && !utils.string.isEmpty(item),
        );
        if (!isValidSource) {
          throw new TypeError(
            "Patterns must be a string (non empty) or an array of strings",
          );
        }
      }
      __name(assertPatternsInput, "assertPatternsInput");
      module.exports = FastGlob;
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/common.js
  var require_common3 = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/common.js"(
      exports,
      module,
    ) {
      "use strict";
      function isNothing(subject) {
        return typeof subject === "undefined" || subject === null;
      }
      __name(isNothing, "isNothing");
      function isObject(subject) {
        return typeof subject === "object" && subject !== null;
      }
      __name(isObject, "isObject");
      function toArray(sequence) {
        if (Array.isArray(sequence)) return sequence;
        else if (isNothing(sequence)) return [];
        return [sequence];
      }
      __name(toArray, "toArray");
      function extend2(target, source) {
        var index2, length, key, sourceKeys;
        if (source) {
          sourceKeys = Object.keys(source);
          for (
            index2 = 0, length = sourceKeys.length;
            index2 < length;
            index2 += 1
          ) {
            key = sourceKeys[index2];
            target[key] = source[key];
          }
        }
        return target;
      }
      __name(extend2, "extend");
      function repeat(string3, count) {
        var result = "",
          cycle;
        for (cycle = 0; cycle < count; cycle += 1) {
          result += string3;
        }
        return result;
      }
      __name(repeat, "repeat");
      function isNegativeZero(number) {
        return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
      }
      __name(isNegativeZero, "isNegativeZero");
      module.exports.isNothing = isNothing;
      module.exports.isObject = isObject;
      module.exports.toArray = toArray;
      module.exports.repeat = repeat;
      module.exports.isNegativeZero = isNegativeZero;
      module.exports.extend = extend2;
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/exception.js
  var require_exception = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/exception.js"(
      exports,
      module,
    ) {
      "use strict";
      function formatError(exception, compact) {
        var where = "",
          message = exception.reason || "(unknown reason)";
        if (!exception.mark) return message;
        if (exception.mark.name) {
          where += 'in "' + exception.mark.name + '" ';
        }
        where +=
          "(" +
          (exception.mark.line + 1) +
          ":" +
          (exception.mark.column + 1) +
          ")";
        if (!compact && exception.mark.snippet) {
          where += "\n\n" + exception.mark.snippet;
        }
        return message + " " + where;
      }
      __name(formatError, "formatError");
      function YAMLException(reason, mark) {
        Error.call(this);
        this.name = "YAMLException";
        this.reason = reason;
        this.mark = mark;
        this.message = formatError(this, false);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        } else {
          this.stack = new Error().stack || "";
        }
      }
      __name(YAMLException, "YAMLException");
      YAMLException.prototype = Object.create(Error.prototype);
      YAMLException.prototype.constructor = YAMLException;
      YAMLException.prototype.toString = /* @__PURE__ */ __name(
        function toString2(compact) {
          return this.name + ": " + formatError(this, compact);
        },
        "toString",
      );
      module.exports = YAMLException;
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/snippet.js
  var require_snippet = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/snippet.js"(
      exports,
      module,
    ) {
      "use strict";
      var common = require_common3();
      function getLine(buffer, lineStart, lineEnd, position2, maxLineLength) {
        var head = "";
        var tail = "";
        var maxHalfLength = Math.floor(maxLineLength / 2) - 1;
        if (position2 - lineStart > maxHalfLength) {
          head = " ... ";
          lineStart = position2 - maxHalfLength + head.length;
        }
        if (lineEnd - position2 > maxHalfLength) {
          tail = " ...";
          lineEnd = position2 + maxHalfLength - tail.length;
        }
        return {
          str:
            head +
            buffer.slice(lineStart, lineEnd).replace(/\t/g, "\u2192") +
            tail,
          pos: position2 - lineStart + head.length,
          // relative position
        };
      }
      __name(getLine, "getLine");
      function padStart(string3, max) {
        return common.repeat(" ", max - string3.length) + string3;
      }
      __name(padStart, "padStart");
      function makeSnippet(mark, options) {
        options = Object.create(options || null);
        if (!mark.buffer) return null;
        if (!options.maxLength) options.maxLength = 79;
        if (typeof options.indent !== "number") options.indent = 1;
        if (typeof options.linesBefore !== "number") options.linesBefore = 3;
        if (typeof options.linesAfter !== "number") options.linesAfter = 2;
        var re = /\r?\n|\r|\0/g;
        var lineStarts = [0];
        var lineEnds = [];
        var match;
        var foundLineNo = -1;
        while ((match = re.exec(mark.buffer))) {
          lineEnds.push(match.index);
          lineStarts.push(match.index + match[0].length);
          if (mark.position <= match.index && foundLineNo < 0) {
            foundLineNo = lineStarts.length - 2;
          }
        }
        if (foundLineNo < 0) foundLineNo = lineStarts.length - 1;
        var result = "",
          i,
          line;
        var lineNoLength = Math.min(
          mark.line + options.linesAfter,
          lineEnds.length,
        ).toString().length;
        var maxLineLength =
          options.maxLength - (options.indent + lineNoLength + 3);
        for (i = 1; i <= options.linesBefore; i++) {
          if (foundLineNo - i < 0) break;
          line = getLine(
            mark.buffer,
            lineStarts[foundLineNo - i],
            lineEnds[foundLineNo - i],
            mark.position -
              (lineStarts[foundLineNo] - lineStarts[foundLineNo - i]),
            maxLineLength,
          );
          result =
            common.repeat(" ", options.indent) +
            padStart((mark.line - i + 1).toString(), lineNoLength) +
            " | " +
            line.str +
            "\n" +
            result;
        }
        line = getLine(
          mark.buffer,
          lineStarts[foundLineNo],
          lineEnds[foundLineNo],
          mark.position,
          maxLineLength,
        );
        result +=
          common.repeat(" ", options.indent) +
          padStart((mark.line + 1).toString(), lineNoLength) +
          " | " +
          line.str +
          "\n";
        result +=
          common.repeat("-", options.indent + lineNoLength + 3 + line.pos) +
          "^\n";
        for (i = 1; i <= options.linesAfter; i++) {
          if (foundLineNo + i >= lineEnds.length) break;
          line = getLine(
            mark.buffer,
            lineStarts[foundLineNo + i],
            lineEnds[foundLineNo + i],
            mark.position -
              (lineStarts[foundLineNo] - lineStarts[foundLineNo + i]),
            maxLineLength,
          );
          result +=
            common.repeat(" ", options.indent) +
            padStart((mark.line + i + 1).toString(), lineNoLength) +
            " | " +
            line.str +
            "\n";
        }
        return result.replace(/\n$/, "");
      }
      __name(makeSnippet, "makeSnippet");
      module.exports = makeSnippet;
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js
  var require_type = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type.js"(
      exports,
      module,
    ) {
      "use strict";
      var YAMLException = require_exception();
      var TYPE_CONSTRUCTOR_OPTIONS = [
        "kind",
        "multi",
        "resolve",
        "construct",
        "instanceOf",
        "predicate",
        "represent",
        "representName",
        "defaultStyle",
        "styleAliases",
      ];
      var YAML_NODE_KINDS = ["scalar", "sequence", "mapping"];
      function compileStyleAliases(map4) {
        var result = {};
        if (map4 !== null) {
          Object.keys(map4).forEach(function (style) {
            map4[style].forEach(function (alias) {
              result[String(alias)] = style;
            });
          });
        }
        return result;
      }
      __name(compileStyleAliases, "compileStyleAliases");
      function Type(tag, options) {
        options = options || {};
        Object.keys(options).forEach(function (name) {
          if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
            throw new YAMLException(
              'Unknown option "' +
                name +
                '" is met in definition of "' +
                tag +
                '" YAML type.',
            );
          }
        });
        this.options = options;
        this.tag = tag;
        this.kind = options["kind"] || null;
        this.resolve =
          options["resolve"] ||
          function () {
            return true;
          };
        this.construct =
          options["construct"] ||
          function (data) {
            return data;
          };
        this.instanceOf = options["instanceOf"] || null;
        this.predicate = options["predicate"] || null;
        this.represent = options["represent"] || null;
        this.representName = options["representName"] || null;
        this.defaultStyle = options["defaultStyle"] || null;
        this.multi = options["multi"] || false;
        this.styleAliases = compileStyleAliases(
          options["styleAliases"] || null,
        );
        if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
          throw new YAMLException(
            'Unknown kind "' +
              this.kind +
              '" is specified for "' +
              tag +
              '" YAML type.',
          );
        }
      }
      __name(Type, "Type");
      module.exports = Type;
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema.js
  var require_schema = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema.js"(
      exports,
      module,
    ) {
      "use strict";
      var YAMLException = require_exception();
      var Type = require_type();
      function compileList(schema, name) {
        var result = [];
        schema[name].forEach(function (currentType) {
          var newIndex = result.length;
          result.forEach(function (previousType, previousIndex) {
            if (
              previousType.tag === currentType.tag &&
              previousType.kind === currentType.kind &&
              previousType.multi === currentType.multi
            ) {
              newIndex = previousIndex;
            }
          });
          result[newIndex] = currentType;
        });
        return result;
      }
      __name(compileList, "compileList");
      function compileMap() {
        var result = {
            scalar: {},
            sequence: {},
            mapping: {},
            fallback: {},
            multi: {
              scalar: [],
              sequence: [],
              mapping: [],
              fallback: [],
            },
          },
          index2,
          length;
        function collectType(type) {
          if (type.multi) {
            result.multi[type.kind].push(type);
            result.multi["fallback"].push(type);
          } else {
            result[type.kind][type.tag] = result["fallback"][type.tag] = type;
          }
        }
        __name(collectType, "collectType");
        for (
          index2 = 0, length = arguments.length;
          index2 < length;
          index2 += 1
        ) {
          arguments[index2].forEach(collectType);
        }
        return result;
      }
      __name(compileMap, "compileMap");
      function Schema(definition3) {
        return this.extend(definition3);
      }
      __name(Schema, "Schema");
      Schema.prototype.extend = /* @__PURE__ */ __name(function extend2(
        definition3,
      ) {
        var implicit = [];
        var explicit = [];
        if (definition3 instanceof Type) {
          explicit.push(definition3);
        } else if (Array.isArray(definition3)) {
          explicit = explicit.concat(definition3);
        } else if (
          definition3 &&
          (Array.isArray(definition3.implicit) ||
            Array.isArray(definition3.explicit))
        ) {
          if (definition3.implicit)
            implicit = implicit.concat(definition3.implicit);
          if (definition3.explicit)
            explicit = explicit.concat(definition3.explicit);
        } else {
          throw new YAMLException(
            "Schema.extend argument should be a Type, [ Type ], or a schema definition ({ implicit: [...], explicit: [...] })",
          );
        }
        implicit.forEach(function (type) {
          if (!(type instanceof Type)) {
            throw new YAMLException(
              "Specified list of YAML types (or a single Type object) contains a non-Type object.",
            );
          }
          if (type.loadKind && type.loadKind !== "scalar") {
            throw new YAMLException(
              "There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.",
            );
          }
          if (type.multi) {
            throw new YAMLException(
              "There is a multi type in the implicit list of a schema. Multi tags can only be listed as explicit.",
            );
          }
        });
        explicit.forEach(function (type) {
          if (!(type instanceof Type)) {
            throw new YAMLException(
              "Specified list of YAML types (or a single Type object) contains a non-Type object.",
            );
          }
        });
        var result = Object.create(Schema.prototype);
        result.implicit = (this.implicit || []).concat(implicit);
        result.explicit = (this.explicit || []).concat(explicit);
        result.compiledImplicit = compileList(result, "implicit");
        result.compiledExplicit = compileList(result, "explicit");
        result.compiledTypeMap = compileMap(
          result.compiledImplicit,
          result.compiledExplicit,
        );
        return result;
      }, "extend");
      module.exports = Schema;
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/str.js
  var require_str = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/str.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type();
      module.exports = new Type("tag:yaml.org,2002:str", {
        kind: "scalar",
        construct: /* @__PURE__ */ __name(function (data) {
          return data !== null ? data : "";
        }, "construct"),
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/seq.js
  var require_seq = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/seq.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type();
      module.exports = new Type("tag:yaml.org,2002:seq", {
        kind: "sequence",
        construct: /* @__PURE__ */ __name(function (data) {
          return data !== null ? data : [];
        }, "construct"),
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/map.js
  var require_map = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/map.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type();
      module.exports = new Type("tag:yaml.org,2002:map", {
        kind: "mapping",
        construct: /* @__PURE__ */ __name(function (data) {
          return data !== null ? data : {};
        }, "construct"),
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/failsafe.js
  var require_failsafe = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/failsafe.js"(
      exports,
      module,
    ) {
      "use strict";
      var Schema = require_schema();
      module.exports = new Schema({
        explicit: [require_str(), require_seq(), require_map()],
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/null.js
  var require_null = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/null.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type();
      function resolveYamlNull(data) {
        if (data === null) return true;
        var max = data.length;
        return (
          (max === 1 && data === "~") ||
          (max === 4 && (data === "null" || data === "Null" || data === "NULL"))
        );
      }
      __name(resolveYamlNull, "resolveYamlNull");
      function constructYamlNull() {
        return null;
      }
      __name(constructYamlNull, "constructYamlNull");
      function isNull(object) {
        return object === null;
      }
      __name(isNull, "isNull");
      module.exports = new Type("tag:yaml.org,2002:null", {
        kind: "scalar",
        resolve: resolveYamlNull,
        construct: constructYamlNull,
        predicate: isNull,
        represent: {
          canonical: /* @__PURE__ */ __name(function () {
            return "~";
          }, "canonical"),
          lowercase: /* @__PURE__ */ __name(function () {
            return "null";
          }, "lowercase"),
          uppercase: /* @__PURE__ */ __name(function () {
            return "NULL";
          }, "uppercase"),
          camelcase: /* @__PURE__ */ __name(function () {
            return "Null";
          }, "camelcase"),
          empty: /* @__PURE__ */ __name(function () {
            return "";
          }, "empty"),
        },
        defaultStyle: "lowercase",
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/bool.js
  var require_bool = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/bool.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type();
      function resolveYamlBoolean(data) {
        if (data === null) return false;
        var max = data.length;
        return (
          (max === 4 &&
            (data === "true" || data === "True" || data === "TRUE")) ||
          (max === 5 &&
            (data === "false" || data === "False" || data === "FALSE"))
        );
      }
      __name(resolveYamlBoolean, "resolveYamlBoolean");
      function constructYamlBoolean(data) {
        return data === "true" || data === "True" || data === "TRUE";
      }
      __name(constructYamlBoolean, "constructYamlBoolean");
      function isBoolean(object) {
        return Object.prototype.toString.call(object) === "[object Boolean]";
      }
      __name(isBoolean, "isBoolean");
      module.exports = new Type("tag:yaml.org,2002:bool", {
        kind: "scalar",
        resolve: resolveYamlBoolean,
        construct: constructYamlBoolean,
        predicate: isBoolean,
        represent: {
          lowercase: /* @__PURE__ */ __name(function (object) {
            return object ? "true" : "false";
          }, "lowercase"),
          uppercase: /* @__PURE__ */ __name(function (object) {
            return object ? "TRUE" : "FALSE";
          }, "uppercase"),
          camelcase: /* @__PURE__ */ __name(function (object) {
            return object ? "True" : "False";
          }, "camelcase"),
        },
        defaultStyle: "lowercase",
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/int.js
  var require_int = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/int.js"(
      exports,
      module,
    ) {
      "use strict";
      var common = require_common3();
      var Type = require_type();
      function isHexCode(c) {
        return (
          (48 <= c && c <= 57) || (65 <= c && c <= 70) || (97 <= c && c <= 102)
        );
      }
      __name(isHexCode, "isHexCode");
      function isOctCode(c) {
        return 48 <= c && c <= 55;
      }
      __name(isOctCode, "isOctCode");
      function isDecCode(c) {
        return 48 <= c && c <= 57;
      }
      __name(isDecCode, "isDecCode");
      function resolveYamlInteger(data) {
        if (data === null) return false;
        var max = data.length,
          index2 = 0,
          hasDigits = false,
          ch;
        if (!max) return false;
        ch = data[index2];
        if (ch === "-" || ch === "+") {
          ch = data[++index2];
        }
        if (ch === "0") {
          if (index2 + 1 === max) return true;
          ch = data[++index2];
          if (ch === "b") {
            index2++;
            for (; index2 < max; index2++) {
              ch = data[index2];
              if (ch === "_") continue;
              if (ch !== "0" && ch !== "1") return false;
              hasDigits = true;
            }
            return hasDigits && ch !== "_";
          }
          if (ch === "x") {
            index2++;
            for (; index2 < max; index2++) {
              ch = data[index2];
              if (ch === "_") continue;
              if (!isHexCode(data.charCodeAt(index2))) return false;
              hasDigits = true;
            }
            return hasDigits && ch !== "_";
          }
          if (ch === "o") {
            index2++;
            for (; index2 < max; index2++) {
              ch = data[index2];
              if (ch === "_") continue;
              if (!isOctCode(data.charCodeAt(index2))) return false;
              hasDigits = true;
            }
            return hasDigits && ch !== "_";
          }
        }
        if (ch === "_") return false;
        for (; index2 < max; index2++) {
          ch = data[index2];
          if (ch === "_") continue;
          if (!isDecCode(data.charCodeAt(index2))) {
            return false;
          }
          hasDigits = true;
        }
        if (!hasDigits || ch === "_") return false;
        return true;
      }
      __name(resolveYamlInteger, "resolveYamlInteger");
      function constructYamlInteger(data) {
        var value = data,
          sign = 1,
          ch;
        if (value.indexOf("_") !== -1) {
          value = value.replace(/_/g, "");
        }
        ch = value[0];
        if (ch === "-" || ch === "+") {
          if (ch === "-") sign = -1;
          value = value.slice(1);
          ch = value[0];
        }
        if (value === "0") return 0;
        if (ch === "0") {
          if (value[1] === "b") return sign * parseInt(value.slice(2), 2);
          if (value[1] === "x") return sign * parseInt(value.slice(2), 16);
          if (value[1] === "o") return sign * parseInt(value.slice(2), 8);
        }
        return sign * parseInt(value, 10);
      }
      __name(constructYamlInteger, "constructYamlInteger");
      function isInteger(object) {
        return (
          Object.prototype.toString.call(object) === "[object Number]" &&
          object % 1 === 0 &&
          !common.isNegativeZero(object)
        );
      }
      __name(isInteger, "isInteger");
      module.exports = new Type("tag:yaml.org,2002:int", {
        kind: "scalar",
        resolve: resolveYamlInteger,
        construct: constructYamlInteger,
        predicate: isInteger,
        represent: {
          binary: /* @__PURE__ */ __name(function (obj) {
            return obj >= 0
              ? "0b" + obj.toString(2)
              : "-0b" + obj.toString(2).slice(1);
          }, "binary"),
          octal: /* @__PURE__ */ __name(function (obj) {
            return obj >= 0
              ? "0o" + obj.toString(8)
              : "-0o" + obj.toString(8).slice(1);
          }, "octal"),
          decimal: /* @__PURE__ */ __name(function (obj) {
            return obj.toString(10);
          }, "decimal"),
          /* eslint-disable max-len */
          hexadecimal: /* @__PURE__ */ __name(function (obj) {
            return obj >= 0
              ? "0x" + obj.toString(16).toUpperCase()
              : "-0x" + obj.toString(16).toUpperCase().slice(1);
          }, "hexadecimal"),
        },
        defaultStyle: "decimal",
        styleAliases: {
          binary: [2, "bin"],
          octal: [8, "oct"],
          decimal: [10, "dec"],
          hexadecimal: [16, "hex"],
        },
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/float.js
  var require_float = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/float.js"(
      exports,
      module,
    ) {
      "use strict";
      var common = require_common3();
      var Type = require_type();
      var YAML_FLOAT_PATTERN = new RegExp(
        // 2.5e4, 2.5 and integers
        "^(?:[-+]?(?:[0-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$",
      );
      function resolveYamlFloat(data) {
        if (data === null) return false;
        if (
          !YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
          // Probably should update regexp & check speed
          data[data.length - 1] === "_"
        ) {
          return false;
        }
        return true;
      }
      __name(resolveYamlFloat, "resolveYamlFloat");
      function constructYamlFloat(data) {
        var value, sign;
        value = data.replace(/_/g, "").toLowerCase();
        sign = value[0] === "-" ? -1 : 1;
        if ("+-".indexOf(value[0]) >= 0) {
          value = value.slice(1);
        }
        if (value === ".inf") {
          return sign === 1
            ? Number.POSITIVE_INFINITY
            : Number.NEGATIVE_INFINITY;
        } else if (value === ".nan") {
          return NaN;
        }
        return sign * parseFloat(value, 10);
      }
      __name(constructYamlFloat, "constructYamlFloat");
      var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
      function representYamlFloat(object, style) {
        var res;
        if (isNaN(object)) {
          switch (style) {
            case "lowercase":
              return ".nan";
            case "uppercase":
              return ".NAN";
            case "camelcase":
              return ".NaN";
          }
        } else if (Number.POSITIVE_INFINITY === object) {
          switch (style) {
            case "lowercase":
              return ".inf";
            case "uppercase":
              return ".INF";
            case "camelcase":
              return ".Inf";
          }
        } else if (Number.NEGATIVE_INFINITY === object) {
          switch (style) {
            case "lowercase":
              return "-.inf";
            case "uppercase":
              return "-.INF";
            case "camelcase":
              return "-.Inf";
          }
        } else if (common.isNegativeZero(object)) {
          return "-0.0";
        }
        res = object.toString(10);
        return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
      }
      __name(representYamlFloat, "representYamlFloat");
      function isFloat(object) {
        return (
          Object.prototype.toString.call(object) === "[object Number]" &&
          (object % 1 !== 0 || common.isNegativeZero(object))
        );
      }
      __name(isFloat, "isFloat");
      module.exports = new Type("tag:yaml.org,2002:float", {
        kind: "scalar",
        resolve: resolveYamlFloat,
        construct: constructYamlFloat,
        predicate: isFloat,
        represent: representYamlFloat,
        defaultStyle: "lowercase",
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/json.js
  var require_json2 = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/json.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = require_failsafe().extend({
        implicit: [
          require_null(),
          require_bool(),
          require_int(),
          require_float(),
        ],
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/core.js
  var require_core2 = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/core.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = require_json2();
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/timestamp.js
  var require_timestamp = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/timestamp.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type();
      var YAML_DATE_REGEXP = new RegExp(
        "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$",
      );
      var YAML_TIMESTAMP_REGEXP = new RegExp(
        "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$",
      );
      function resolveYamlTimestamp(data) {
        if (data === null) return false;
        if (YAML_DATE_REGEXP.exec(data) !== null) return true;
        if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
        return false;
      }
      __name(resolveYamlTimestamp, "resolveYamlTimestamp");
      function constructYamlTimestamp(data) {
        var match,
          year,
          month,
          day,
          hour,
          minute,
          second,
          fraction = 0,
          delta = null,
          tz_hour,
          tz_minute,
          date;
        match = YAML_DATE_REGEXP.exec(data);
        if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
        if (match === null) throw new Error("Date resolve error");
        year = +match[1];
        month = +match[2] - 1;
        day = +match[3];
        if (!match[4]) {
          return new Date(Date.UTC(year, month, day));
        }
        hour = +match[4];
        minute = +match[5];
        second = +match[6];
        if (match[7]) {
          fraction = match[7].slice(0, 3);
          while (fraction.length < 3) {
            fraction += "0";
          }
          fraction = +fraction;
        }
        if (match[9]) {
          tz_hour = +match[10];
          tz_minute = +(match[11] || 0);
          delta = (tz_hour * 60 + tz_minute) * 6e4;
          if (match[9] === "-") delta = -delta;
        }
        date = new Date(
          Date.UTC(year, month, day, hour, minute, second, fraction),
        );
        if (delta) date.setTime(date.getTime() - delta);
        return date;
      }
      __name(constructYamlTimestamp, "constructYamlTimestamp");
      function representYamlTimestamp(object) {
        return object.toISOString();
      }
      __name(representYamlTimestamp, "representYamlTimestamp");
      module.exports = new Type("tag:yaml.org,2002:timestamp", {
        kind: "scalar",
        resolve: resolveYamlTimestamp,
        construct: constructYamlTimestamp,
        instanceOf: Date,
        represent: representYamlTimestamp,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/merge.js
  var require_merge = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/merge.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type();
      function resolveYamlMerge(data) {
        return data === "<<" || data === null;
      }
      __name(resolveYamlMerge, "resolveYamlMerge");
      module.exports = new Type("tag:yaml.org,2002:merge", {
        kind: "scalar",
        resolve: resolveYamlMerge,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/binary.js
  var require_binary = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/binary.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type();
      var BASE64_MAP =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
      function resolveYamlBinary(data) {
        if (data === null) return false;
        var code2,
          idx,
          bitlen = 0,
          max = data.length,
          map4 = BASE64_MAP;
        for (idx = 0; idx < max; idx++) {
          code2 = map4.indexOf(data.charAt(idx));
          if (code2 > 64) continue;
          if (code2 < 0) return false;
          bitlen += 6;
        }
        return bitlen % 8 === 0;
      }
      __name(resolveYamlBinary, "resolveYamlBinary");
      function constructYamlBinary(data) {
        var idx,
          tailbits,
          input = data.replace(/[\r\n=]/g, ""),
          max = input.length,
          map4 = BASE64_MAP,
          bits = 0,
          result = [];
        for (idx = 0; idx < max; idx++) {
          if (idx % 4 === 0 && idx) {
            result.push((bits >> 16) & 255);
            result.push((bits >> 8) & 255);
            result.push(bits & 255);
          }
          bits = (bits << 6) | map4.indexOf(input.charAt(idx));
        }
        tailbits = (max % 4) * 6;
        if (tailbits === 0) {
          result.push((bits >> 16) & 255);
          result.push((bits >> 8) & 255);
          result.push(bits & 255);
        } else if (tailbits === 18) {
          result.push((bits >> 10) & 255);
          result.push((bits >> 2) & 255);
        } else if (tailbits === 12) {
          result.push((bits >> 4) & 255);
        }
        return new Uint8Array(result);
      }
      __name(constructYamlBinary, "constructYamlBinary");
      function representYamlBinary(object) {
        var result = "",
          bits = 0,
          idx,
          tail,
          max = object.length,
          map4 = BASE64_MAP;
        for (idx = 0; idx < max; idx++) {
          if (idx % 3 === 0 && idx) {
            result += map4[(bits >> 18) & 63];
            result += map4[(bits >> 12) & 63];
            result += map4[(bits >> 6) & 63];
            result += map4[bits & 63];
          }
          bits = (bits << 8) + object[idx];
        }
        tail = max % 3;
        if (tail === 0) {
          result += map4[(bits >> 18) & 63];
          result += map4[(bits >> 12) & 63];
          result += map4[(bits >> 6) & 63];
          result += map4[bits & 63];
        } else if (tail === 2) {
          result += map4[(bits >> 10) & 63];
          result += map4[(bits >> 4) & 63];
          result += map4[(bits << 2) & 63];
          result += map4[64];
        } else if (tail === 1) {
          result += map4[(bits >> 2) & 63];
          result += map4[(bits << 4) & 63];
          result += map4[64];
          result += map4[64];
        }
        return result;
      }
      __name(representYamlBinary, "representYamlBinary");
      function isBinary(obj) {
        return Object.prototype.toString.call(obj) === "[object Uint8Array]";
      }
      __name(isBinary, "isBinary");
      module.exports = new Type("tag:yaml.org,2002:binary", {
        kind: "scalar",
        resolve: resolveYamlBinary,
        construct: constructYamlBinary,
        predicate: isBinary,
        represent: representYamlBinary,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/omap.js
  var require_omap = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/omap.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var _toString = Object.prototype.toString;
      function resolveYamlOmap(data) {
        if (data === null) return true;
        var objectKeys = [],
          index2,
          length,
          pair,
          pairKey,
          pairHasKey,
          object = data;
        for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
          pair = object[index2];
          pairHasKey = false;
          if (_toString.call(pair) !== "[object Object]") return false;
          for (pairKey in pair) {
            if (_hasOwnProperty.call(pair, pairKey)) {
              if (!pairHasKey) pairHasKey = true;
              else return false;
            }
          }
          if (!pairHasKey) return false;
          if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
          else return false;
        }
        return true;
      }
      __name(resolveYamlOmap, "resolveYamlOmap");
      function constructYamlOmap(data) {
        return data !== null ? data : [];
      }
      __name(constructYamlOmap, "constructYamlOmap");
      module.exports = new Type("tag:yaml.org,2002:omap", {
        kind: "sequence",
        resolve: resolveYamlOmap,
        construct: constructYamlOmap,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/pairs.js
  var require_pairs = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/pairs.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type();
      var _toString = Object.prototype.toString;
      function resolveYamlPairs(data) {
        if (data === null) return true;
        var index2,
          length,
          pair,
          keys,
          result,
          object = data;
        result = new Array(object.length);
        for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
          pair = object[index2];
          if (_toString.call(pair) !== "[object Object]") return false;
          keys = Object.keys(pair);
          if (keys.length !== 1) return false;
          result[index2] = [keys[0], pair[keys[0]]];
        }
        return true;
      }
      __name(resolveYamlPairs, "resolveYamlPairs");
      function constructYamlPairs(data) {
        if (data === null) return [];
        var index2,
          length,
          pair,
          keys,
          result,
          object = data;
        result = new Array(object.length);
        for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
          pair = object[index2];
          keys = Object.keys(pair);
          result[index2] = [keys[0], pair[keys[0]]];
        }
        return result;
      }
      __name(constructYamlPairs, "constructYamlPairs");
      module.exports = new Type("tag:yaml.org,2002:pairs", {
        kind: "sequence",
        resolve: resolveYamlPairs,
        construct: constructYamlPairs,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/set.js
  var require_set = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/type/set.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      function resolveYamlSet(data) {
        if (data === null) return true;
        var key,
          object = data;
        for (key in object) {
          if (_hasOwnProperty.call(object, key)) {
            if (object[key] !== null) return false;
          }
        }
        return true;
      }
      __name(resolveYamlSet, "resolveYamlSet");
      function constructYamlSet(data) {
        return data !== null ? data : {};
      }
      __name(constructYamlSet, "constructYamlSet");
      module.exports = new Type("tag:yaml.org,2002:set", {
        kind: "mapping",
        resolve: resolveYamlSet,
        construct: constructYamlSet,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/default.js
  var require_default = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/schema/default.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = require_core2().extend({
        implicit: [require_timestamp(), require_merge()],
        explicit: [
          require_binary(),
          require_omap(),
          require_pairs(),
          require_set(),
        ],
      });
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/loader.js
  var require_loader = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/loader.js"(
      exports,
      module,
    ) {
      "use strict";
      var common = require_common3();
      var YAMLException = require_exception();
      var makeSnippet = require_snippet();
      var DEFAULT_SCHEMA = require_default();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var CONTEXT_FLOW_IN = 1;
      var CONTEXT_FLOW_OUT = 2;
      var CONTEXT_BLOCK_IN = 3;
      var CONTEXT_BLOCK_OUT = 4;
      var CHOMPING_CLIP = 1;
      var CHOMPING_STRIP = 2;
      var CHOMPING_KEEP = 3;
      var PATTERN_NON_PRINTABLE =
        /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
      var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
      var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
      var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
      var PATTERN_TAG_URI =
        /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
      function _class(obj) {
        return Object.prototype.toString.call(obj);
      }
      __name(_class, "_class");
      function is_EOL(c) {
        return c === 10 || c === 13;
      }
      __name(is_EOL, "is_EOL");
      function is_WHITE_SPACE(c) {
        return c === 9 || c === 32;
      }
      __name(is_WHITE_SPACE, "is_WHITE_SPACE");
      function is_WS_OR_EOL(c) {
        return c === 9 || c === 32 || c === 10 || c === 13;
      }
      __name(is_WS_OR_EOL, "is_WS_OR_EOL");
      function is_FLOW_INDICATOR(c) {
        return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
      }
      __name(is_FLOW_INDICATOR, "is_FLOW_INDICATOR");
      function fromHexCode(c) {
        var lc;
        if (48 <= c && c <= 57) {
          return c - 48;
        }
        lc = c | 32;
        if (97 <= lc && lc <= 102) {
          return lc - 97 + 10;
        }
        return -1;
      }
      __name(fromHexCode, "fromHexCode");
      function escapedHexLen(c) {
        if (c === 120) {
          return 2;
        }
        if (c === 117) {
          return 4;
        }
        if (c === 85) {
          return 8;
        }
        return 0;
      }
      __name(escapedHexLen, "escapedHexLen");
      function fromDecimalCode(c) {
        if (48 <= c && c <= 57) {
          return c - 48;
        }
        return -1;
      }
      __name(fromDecimalCode, "fromDecimalCode");
      function simpleEscapeSequence(c) {
        return c === 48
          ? "\0"
          : c === 97
            ? "\x07"
            : c === 98
              ? "\b"
              : c === 116
                ? "	"
                : c === 9
                  ? "	"
                  : c === 110
                    ? "\n"
                    : c === 118
                      ? "\v"
                      : c === 102
                        ? "\f"
                        : c === 114
                          ? "\r"
                          : c === 101
                            ? "\x1B"
                            : c === 32
                              ? " "
                              : c === 34
                                ? '"'
                                : c === 47
                                  ? "/"
                                  : c === 92
                                    ? "\\"
                                    : c === 78
                                      ? "\x85"
                                      : c === 95
                                        ? "\xA0"
                                        : c === 76
                                          ? "\u2028"
                                          : c === 80
                                            ? "\u2029"
                                            : "";
      }
      __name(simpleEscapeSequence, "simpleEscapeSequence");
      function charFromCodepoint(c) {
        if (c <= 65535) {
          return String.fromCharCode(c);
        }
        return String.fromCharCode(
          ((c - 65536) >> 10) + 55296,
          ((c - 65536) & 1023) + 56320,
        );
      }
      __name(charFromCodepoint, "charFromCodepoint");
      var simpleEscapeCheck = new Array(256);
      var simpleEscapeMap = new Array(256);
      for (i = 0; i < 256; i++) {
        simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
        simpleEscapeMap[i] = simpleEscapeSequence(i);
      }
      var i;
      function State(input, options) {
        this.input = input;
        this.filename = options["filename"] || null;
        this.schema = options["schema"] || DEFAULT_SCHEMA;
        this.onWarning = options["onWarning"] || null;
        this.legacy = options["legacy"] || false;
        this.json = options["json"] || false;
        this.listener = options["listener"] || null;
        this.implicitTypes = this.schema.compiledImplicit;
        this.typeMap = this.schema.compiledTypeMap;
        this.length = input.length;
        this.position = 0;
        this.line = 0;
        this.lineStart = 0;
        this.lineIndent = 0;
        this.firstTabInLine = -1;
        this.documents = [];
      }
      __name(State, "State");
      function generateError(state, message) {
        var mark = {
          name: state.filename,
          buffer: state.input.slice(0, -1),
          // omit trailing \0
          position: state.position,
          line: state.line,
          column: state.position - state.lineStart,
        };
        mark.snippet = makeSnippet(mark);
        return new YAMLException(message, mark);
      }
      __name(generateError, "generateError");
      function throwError(state, message) {
        throw generateError(state, message);
      }
      __name(throwError, "throwError");
      function throwWarning(state, message) {
        if (state.onWarning) {
          state.onWarning.call(null, generateError(state, message));
        }
      }
      __name(throwWarning, "throwWarning");
      var directiveHandlers = {
        YAML: /* @__PURE__ */ __name(function handleYamlDirective(
          state,
          name,
          args,
        ) {
          var match, major, minor;
          if (state.version !== null) {
            throwError(state, "duplication of %YAML directive");
          }
          if (args.length !== 1) {
            throwError(state, "YAML directive accepts exactly one argument");
          }
          match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
          if (match === null) {
            throwError(state, "ill-formed argument of the YAML directive");
          }
          major = parseInt(match[1], 10);
          minor = parseInt(match[2], 10);
          if (major !== 1) {
            throwError(state, "unacceptable YAML version of the document");
          }
          state.version = args[0];
          state.checkLineBreaks = minor < 2;
          if (minor !== 1 && minor !== 2) {
            throwWarning(state, "unsupported YAML version of the document");
          }
        }, "handleYamlDirective"),
        TAG: /* @__PURE__ */ __name(function handleTagDirective(
          state,
          name,
          args,
        ) {
          var handle2, prefix2;
          if (args.length !== 2) {
            throwError(state, "TAG directive accepts exactly two arguments");
          }
          handle2 = args[0];
          prefix2 = args[1];
          if (!PATTERN_TAG_HANDLE.test(handle2)) {
            throwError(
              state,
              "ill-formed tag handle (first argument) of the TAG directive",
            );
          }
          if (_hasOwnProperty.call(state.tagMap, handle2)) {
            throwError(
              state,
              'there is a previously declared suffix for "' +
                handle2 +
                '" tag handle',
            );
          }
          if (!PATTERN_TAG_URI.test(prefix2)) {
            throwError(
              state,
              "ill-formed tag prefix (second argument) of the TAG directive",
            );
          }
          try {
            prefix2 = decodeURIComponent(prefix2);
          } catch (err) {
            throwError(state, "tag prefix is malformed: " + prefix2);
          }
          state.tagMap[handle2] = prefix2;
        }, "handleTagDirective"),
      };
      function captureSegment(state, start, end, checkJson) {
        var _position, _length, _character, _result;
        if (start < end) {
          _result = state.input.slice(start, end);
          if (checkJson) {
            for (
              _position = 0, _length = _result.length;
              _position < _length;
              _position += 1
            ) {
              _character = _result.charCodeAt(_position);
              if (
                !(
                  _character === 9 ||
                  (32 <= _character && _character <= 1114111)
                )
              ) {
                throwError(state, "expected valid JSON character");
              }
            }
          } else if (PATTERN_NON_PRINTABLE.test(_result)) {
            throwError(state, "the stream contains non-printable characters");
          }
          state.result += _result;
        }
      }
      __name(captureSegment, "captureSegment");
      function mergeMappings(state, destination, source, overridableKeys) {
        var sourceKeys, key, index2, quantity;
        if (!common.isObject(source)) {
          throwError(
            state,
            "cannot merge mappings; the provided source object is unacceptable",
          );
        }
        sourceKeys = Object.keys(source);
        for (
          index2 = 0, quantity = sourceKeys.length;
          index2 < quantity;
          index2 += 1
        ) {
          key = sourceKeys[index2];
          if (!_hasOwnProperty.call(destination, key)) {
            destination[key] = source[key];
            overridableKeys[key] = true;
          }
        }
      }
      __name(mergeMappings, "mergeMappings");
      function storeMappingPair(
        state,
        _result,
        overridableKeys,
        keyTag,
        keyNode,
        valueNode,
        startLine,
        startLineStart,
        startPos,
      ) {
        var index2, quantity;
        if (Array.isArray(keyNode)) {
          keyNode = Array.prototype.slice.call(keyNode);
          for (
            index2 = 0, quantity = keyNode.length;
            index2 < quantity;
            index2 += 1
          ) {
            if (Array.isArray(keyNode[index2])) {
              throwError(state, "nested arrays are not supported inside keys");
            }
            if (
              typeof keyNode === "object" &&
              _class(keyNode[index2]) === "[object Object]"
            ) {
              keyNode[index2] = "[object Object]";
            }
          }
        }
        if (
          typeof keyNode === "object" &&
          _class(keyNode) === "[object Object]"
        ) {
          keyNode = "[object Object]";
        }
        keyNode = String(keyNode);
        if (_result === null) {
          _result = {};
        }
        if (keyTag === "tag:yaml.org,2002:merge") {
          if (Array.isArray(valueNode)) {
            for (
              index2 = 0, quantity = valueNode.length;
              index2 < quantity;
              index2 += 1
            ) {
              mergeMappings(state, _result, valueNode[index2], overridableKeys);
            }
          } else {
            mergeMappings(state, _result, valueNode, overridableKeys);
          }
        } else {
          if (
            !state.json &&
            !_hasOwnProperty.call(overridableKeys, keyNode) &&
            _hasOwnProperty.call(_result, keyNode)
          ) {
            state.line = startLine || state.line;
            state.lineStart = startLineStart || state.lineStart;
            state.position = startPos || state.position;
            throwError(state, "duplicated mapping key");
          }
          if (keyNode === "__proto__") {
            Object.defineProperty(_result, keyNode, {
              configurable: true,
              enumerable: true,
              writable: true,
              value: valueNode,
            });
          } else {
            _result[keyNode] = valueNode;
          }
          delete overridableKeys[keyNode];
        }
        return _result;
      }
      __name(storeMappingPair, "storeMappingPair");
      function readLineBreak(state) {
        var ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 10) {
          state.position++;
        } else if (ch === 13) {
          state.position++;
          if (state.input.charCodeAt(state.position) === 10) {
            state.position++;
          }
        } else {
          throwError(state, "a line break is expected");
        }
        state.line += 1;
        state.lineStart = state.position;
        state.firstTabInLine = -1;
      }
      __name(readLineBreak, "readLineBreak");
      function skipSeparationSpace(state, allowComments, checkIndent) {
        var lineBreaks = 0,
          ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            if (ch === 9 && state.firstTabInLine === -1) {
              state.firstTabInLine = state.position;
            }
            ch = state.input.charCodeAt(++state.position);
          }
          if (allowComments && ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 10 && ch !== 13 && ch !== 0);
          }
          if (is_EOL(ch)) {
            readLineBreak(state);
            ch = state.input.charCodeAt(state.position);
            lineBreaks++;
            state.lineIndent = 0;
            while (ch === 32) {
              state.lineIndent++;
              ch = state.input.charCodeAt(++state.position);
            }
          } else {
            break;
          }
        }
        if (
          checkIndent !== -1 &&
          lineBreaks !== 0 &&
          state.lineIndent < checkIndent
        ) {
          throwWarning(state, "deficient indentation");
        }
        return lineBreaks;
      }
      __name(skipSeparationSpace, "skipSeparationSpace");
      function testDocumentSeparator(state) {
        var _position = state.position,
          ch;
        ch = state.input.charCodeAt(_position);
        if (
          (ch === 45 || ch === 46) &&
          ch === state.input.charCodeAt(_position + 1) &&
          ch === state.input.charCodeAt(_position + 2)
        ) {
          _position += 3;
          ch = state.input.charCodeAt(_position);
          if (ch === 0 || is_WS_OR_EOL(ch)) {
            return true;
          }
        }
        return false;
      }
      __name(testDocumentSeparator, "testDocumentSeparator");
      function writeFoldedLines(state, count) {
        if (count === 1) {
          state.result += " ";
        } else if (count > 1) {
          state.result += common.repeat("\n", count - 1);
        }
      }
      __name(writeFoldedLines, "writeFoldedLines");
      function readPlainScalar(state, nodeIndent, withinFlowCollection) {
        var preceding,
          following,
          captureStart,
          captureEnd,
          hasPendingContent,
          _line,
          _lineStart,
          _lineIndent,
          _kind = state.kind,
          _result = state.result,
          ch;
        ch = state.input.charCodeAt(state.position);
        if (
          is_WS_OR_EOL(ch) ||
          is_FLOW_INDICATOR(ch) ||
          ch === 35 ||
          ch === 38 ||
          ch === 42 ||
          ch === 33 ||
          ch === 124 ||
          ch === 62 ||
          ch === 39 ||
          ch === 34 ||
          ch === 37 ||
          ch === 64 ||
          ch === 96
        ) {
          return false;
        }
        if (ch === 63 || ch === 45) {
          following = state.input.charCodeAt(state.position + 1);
          if (
            is_WS_OR_EOL(following) ||
            (withinFlowCollection && is_FLOW_INDICATOR(following))
          ) {
            return false;
          }
        }
        state.kind = "scalar";
        state.result = "";
        captureStart = captureEnd = state.position;
        hasPendingContent = false;
        while (ch !== 0) {
          if (ch === 58) {
            following = state.input.charCodeAt(state.position + 1);
            if (
              is_WS_OR_EOL(following) ||
              (withinFlowCollection && is_FLOW_INDICATOR(following))
            ) {
              break;
            }
          } else if (ch === 35) {
            preceding = state.input.charCodeAt(state.position - 1);
            if (is_WS_OR_EOL(preceding)) {
              break;
            }
          } else if (
            (state.position === state.lineStart &&
              testDocumentSeparator(state)) ||
            (withinFlowCollection && is_FLOW_INDICATOR(ch))
          ) {
            break;
          } else if (is_EOL(ch)) {
            _line = state.line;
            _lineStart = state.lineStart;
            _lineIndent = state.lineIndent;
            skipSeparationSpace(state, false, -1);
            if (state.lineIndent >= nodeIndent) {
              hasPendingContent = true;
              ch = state.input.charCodeAt(state.position);
              continue;
            } else {
              state.position = captureEnd;
              state.line = _line;
              state.lineStart = _lineStart;
              state.lineIndent = _lineIndent;
              break;
            }
          }
          if (hasPendingContent) {
            captureSegment(state, captureStart, captureEnd, false);
            writeFoldedLines(state, state.line - _line);
            captureStart = captureEnd = state.position;
            hasPendingContent = false;
          }
          if (!is_WHITE_SPACE(ch)) {
            captureEnd = state.position + 1;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, captureEnd, false);
        if (state.result) {
          return true;
        }
        state.kind = _kind;
        state.result = _result;
        return false;
      }
      __name(readPlainScalar, "readPlainScalar");
      function readSingleQuotedScalar(state, nodeIndent) {
        var ch, captureStart, captureEnd;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 39) {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        state.position++;
        captureStart = captureEnd = state.position;
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          if (ch === 39) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (ch === 39) {
              captureStart = state.position;
              state.position++;
              captureEnd = state.position;
            } else {
              return true;
            }
          } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(
              state,
              skipSeparationSpace(state, false, nodeIndent),
            );
            captureStart = captureEnd = state.position;
          } else if (
            state.position === state.lineStart &&
            testDocumentSeparator(state)
          ) {
            throwError(
              state,
              "unexpected end of the document within a single quoted scalar",
            );
          } else {
            state.position++;
            captureEnd = state.position;
          }
        }
        throwError(
          state,
          "unexpected end of the stream within a single quoted scalar",
        );
      }
      __name(readSingleQuotedScalar, "readSingleQuotedScalar");
      function readDoubleQuotedScalar(state, nodeIndent) {
        var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 34) {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        state.position++;
        captureStart = captureEnd = state.position;
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          if (ch === 34) {
            captureSegment(state, captureStart, state.position, true);
            state.position++;
            return true;
          } else if (ch === 92) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (is_EOL(ch)) {
              skipSeparationSpace(state, false, nodeIndent);
            } else if (ch < 256 && simpleEscapeCheck[ch]) {
              state.result += simpleEscapeMap[ch];
              state.position++;
            } else if ((tmp = escapedHexLen(ch)) > 0) {
              hexLength = tmp;
              hexResult = 0;
              for (; hexLength > 0; hexLength--) {
                ch = state.input.charCodeAt(++state.position);
                if ((tmp = fromHexCode(ch)) >= 0) {
                  hexResult = (hexResult << 4) + tmp;
                } else {
                  throwError(state, "expected hexadecimal character");
                }
              }
              state.result += charFromCodepoint(hexResult);
              state.position++;
            } else {
              throwError(state, "unknown escape sequence");
            }
            captureStart = captureEnd = state.position;
          } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(
              state,
              skipSeparationSpace(state, false, nodeIndent),
            );
            captureStart = captureEnd = state.position;
          } else if (
            state.position === state.lineStart &&
            testDocumentSeparator(state)
          ) {
            throwError(
              state,
              "unexpected end of the document within a double quoted scalar",
            );
          } else {
            state.position++;
            captureEnd = state.position;
          }
        }
        throwError(
          state,
          "unexpected end of the stream within a double quoted scalar",
        );
      }
      __name(readDoubleQuotedScalar, "readDoubleQuotedScalar");
      function readFlowCollection(state, nodeIndent) {
        var readNext = true,
          _line,
          _lineStart,
          _pos,
          _tag = state.tag,
          _result,
          _anchor = state.anchor,
          following,
          terminator,
          isPair,
          isExplicitPair,
          isMapping,
          overridableKeys = /* @__PURE__ */ Object.create(null),
          keyNode,
          keyTag,
          valueNode,
          ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 91) {
          terminator = 93;
          isMapping = false;
          _result = [];
        } else if (ch === 123) {
          terminator = 125;
          isMapping = true;
          _result = {};
        } else {
          return false;
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(++state.position);
        while (ch !== 0) {
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if (ch === terminator) {
            state.position++;
            state.tag = _tag;
            state.anchor = _anchor;
            state.kind = isMapping ? "mapping" : "sequence";
            state.result = _result;
            return true;
          } else if (!readNext) {
            throwError(state, "missed comma between flow collection entries");
          } else if (ch === 44) {
            throwError(state, "expected the node content, but found ','");
          }
          keyTag = keyNode = valueNode = null;
          isPair = isExplicitPair = false;
          if (ch === 63) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following)) {
              isPair = isExplicitPair = true;
              state.position++;
              skipSeparationSpace(state, true, nodeIndent);
            }
          }
          _line = state.line;
          _lineStart = state.lineStart;
          _pos = state.position;
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          keyTag = state.tag;
          keyNode = state.result;
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if ((isExplicitPair || state.line === _line) && ch === 58) {
            isPair = true;
            ch = state.input.charCodeAt(++state.position);
            skipSeparationSpace(state, true, nodeIndent);
            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
            valueNode = state.result;
          }
          if (isMapping) {
            storeMappingPair(
              state,
              _result,
              overridableKeys,
              keyTag,
              keyNode,
              valueNode,
              _line,
              _lineStart,
              _pos,
            );
          } else if (isPair) {
            _result.push(
              storeMappingPair(
                state,
                null,
                overridableKeys,
                keyTag,
                keyNode,
                valueNode,
                _line,
                _lineStart,
                _pos,
              ),
            );
          } else {
            _result.push(keyNode);
          }
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if (ch === 44) {
            readNext = true;
            ch = state.input.charCodeAt(++state.position);
          } else {
            readNext = false;
          }
        }
        throwError(
          state,
          "unexpected end of the stream within a flow collection",
        );
      }
      __name(readFlowCollection, "readFlowCollection");
      function readBlockScalar(state, nodeIndent) {
        var captureStart,
          folding,
          chomping = CHOMPING_CLIP,
          didReadContent = false,
          detectedIndent = false,
          textIndent = nodeIndent,
          emptyLines = 0,
          atMoreIndented = false,
          tmp,
          ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 124) {
          folding = false;
        } else if (ch === 62) {
          folding = true;
        } else {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        while (ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
          if (ch === 43 || ch === 45) {
            if (CHOMPING_CLIP === chomping) {
              chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
            } else {
              throwError(state, "repeat of a chomping mode identifier");
            }
          } else if ((tmp = fromDecimalCode(ch)) >= 0) {
            if (tmp === 0) {
              throwError(
                state,
                "bad explicit indentation width of a block scalar; it cannot be less than one",
              );
            } else if (!detectedIndent) {
              textIndent = nodeIndent + tmp - 1;
              detectedIndent = true;
            } else {
              throwError(state, "repeat of an indentation width identifier");
            }
          } else {
            break;
          }
        }
        if (is_WHITE_SPACE(ch)) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (is_WHITE_SPACE(ch));
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (!is_EOL(ch) && ch !== 0);
          }
        }
        while (ch !== 0) {
          readLineBreak(state);
          state.lineIndent = 0;
          ch = state.input.charCodeAt(state.position);
          while (
            (!detectedIndent || state.lineIndent < textIndent) &&
            ch === 32
          ) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
          if (!detectedIndent && state.lineIndent > textIndent) {
            textIndent = state.lineIndent;
          }
          if (is_EOL(ch)) {
            emptyLines++;
            continue;
          }
          if (state.lineIndent < textIndent) {
            if (chomping === CHOMPING_KEEP) {
              state.result += common.repeat(
                "\n",
                didReadContent ? 1 + emptyLines : emptyLines,
              );
            } else if (chomping === CHOMPING_CLIP) {
              if (didReadContent) {
                state.result += "\n";
              }
            }
            break;
          }
          if (folding) {
            if (is_WHITE_SPACE(ch)) {
              atMoreIndented = true;
              state.result += common.repeat(
                "\n",
                didReadContent ? 1 + emptyLines : emptyLines,
              );
            } else if (atMoreIndented) {
              atMoreIndented = false;
              state.result += common.repeat("\n", emptyLines + 1);
            } else if (emptyLines === 0) {
              if (didReadContent) {
                state.result += " ";
              }
            } else {
              state.result += common.repeat("\n", emptyLines);
            }
          } else {
            state.result += common.repeat(
              "\n",
              didReadContent ? 1 + emptyLines : emptyLines,
            );
          }
          didReadContent = true;
          detectedIndent = true;
          emptyLines = 0;
          captureStart = state.position;
          while (!is_EOL(ch) && ch !== 0) {
            ch = state.input.charCodeAt(++state.position);
          }
          captureSegment(state, captureStart, state.position, false);
        }
        return true;
      }
      __name(readBlockScalar, "readBlockScalar");
      function readBlockSequence(state, nodeIndent) {
        var _line,
          _tag = state.tag,
          _anchor = state.anchor,
          _result = [],
          following,
          detected = false,
          ch;
        if (state.firstTabInLine !== -1) return false;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          if (state.firstTabInLine !== -1) {
            state.position = state.firstTabInLine;
            throwError(state, "tab characters must not be used in indentation");
          }
          if (ch !== 45) {
            break;
          }
          following = state.input.charCodeAt(state.position + 1);
          if (!is_WS_OR_EOL(following)) {
            break;
          }
          detected = true;
          state.position++;
          if (skipSeparationSpace(state, true, -1)) {
            if (state.lineIndent <= nodeIndent) {
              _result.push(null);
              ch = state.input.charCodeAt(state.position);
              continue;
            }
          }
          _line = state.line;
          composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
          _result.push(state.result);
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
          if (
            (state.line === _line || state.lineIndent > nodeIndent) &&
            ch !== 0
          ) {
            throwError(state, "bad indentation of a sequence entry");
          } else if (state.lineIndent < nodeIndent) {
            break;
          }
        }
        if (detected) {
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = "sequence";
          state.result = _result;
          return true;
        }
        return false;
      }
      __name(readBlockSequence, "readBlockSequence");
      function readBlockMapping(state, nodeIndent, flowIndent) {
        var following,
          allowCompact,
          _line,
          _keyLine,
          _keyLineStart,
          _keyPos,
          _tag = state.tag,
          _anchor = state.anchor,
          _result = {},
          overridableKeys = /* @__PURE__ */ Object.create(null),
          keyTag = null,
          keyNode = null,
          valueNode = null,
          atExplicitKey = false,
          detected = false,
          ch;
        if (state.firstTabInLine !== -1) return false;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          if (!atExplicitKey && state.firstTabInLine !== -1) {
            state.position = state.firstTabInLine;
            throwError(state, "tab characters must not be used in indentation");
          }
          following = state.input.charCodeAt(state.position + 1);
          _line = state.line;
          if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
            if (ch === 63) {
              if (atExplicitKey) {
                storeMappingPair(
                  state,
                  _result,
                  overridableKeys,
                  keyTag,
                  keyNode,
                  null,
                  _keyLine,
                  _keyLineStart,
                  _keyPos,
                );
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = true;
              allowCompact = true;
            } else if (atExplicitKey) {
              atExplicitKey = false;
              allowCompact = true;
            } else {
              throwError(
                state,
                "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line",
              );
            }
            state.position += 1;
            ch = following;
          } else {
            _keyLine = state.line;
            _keyLineStart = state.lineStart;
            _keyPos = state.position;
            if (
              !composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)
            ) {
              break;
            }
            if (state.line === _line) {
              ch = state.input.charCodeAt(state.position);
              while (is_WHITE_SPACE(ch)) {
                ch = state.input.charCodeAt(++state.position);
              }
              if (ch === 58) {
                ch = state.input.charCodeAt(++state.position);
                if (!is_WS_OR_EOL(ch)) {
                  throwError(
                    state,
                    "a whitespace character is expected after the key-value separator within a block mapping",
                  );
                }
                if (atExplicitKey) {
                  storeMappingPair(
                    state,
                    _result,
                    overridableKeys,
                    keyTag,
                    keyNode,
                    null,
                    _keyLine,
                    _keyLineStart,
                    _keyPos,
                  );
                  keyTag = keyNode = valueNode = null;
                }
                detected = true;
                atExplicitKey = false;
                allowCompact = false;
                keyTag = state.tag;
                keyNode = state.result;
              } else if (detected) {
                throwError(
                  state,
                  "can not read an implicit mapping pair; a colon is missed",
                );
              } else {
                state.tag = _tag;
                state.anchor = _anchor;
                return true;
              }
            } else if (detected) {
              throwError(
                state,
                "can not read a block mapping entry; a multiline key may not be an implicit key",
              );
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          }
          if (state.line === _line || state.lineIndent > nodeIndent) {
            if (atExplicitKey) {
              _keyLine = state.line;
              _keyLineStart = state.lineStart;
              _keyPos = state.position;
            }
            if (
              composeNode(
                state,
                nodeIndent,
                CONTEXT_BLOCK_OUT,
                true,
                allowCompact,
              )
            ) {
              if (atExplicitKey) {
                keyNode = state.result;
              } else {
                valueNode = state.result;
              }
            }
            if (!atExplicitKey) {
              storeMappingPair(
                state,
                _result,
                overridableKeys,
                keyTag,
                keyNode,
                valueNode,
                _keyLine,
                _keyLineStart,
                _keyPos,
              );
              keyTag = keyNode = valueNode = null;
            }
            skipSeparationSpace(state, true, -1);
            ch = state.input.charCodeAt(state.position);
          }
          if (
            (state.line === _line || state.lineIndent > nodeIndent) &&
            ch !== 0
          ) {
            throwError(state, "bad indentation of a mapping entry");
          } else if (state.lineIndent < nodeIndent) {
            break;
          }
        }
        if (atExplicitKey) {
          storeMappingPair(
            state,
            _result,
            overridableKeys,
            keyTag,
            keyNode,
            null,
            _keyLine,
            _keyLineStart,
            _keyPos,
          );
        }
        if (detected) {
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = "mapping";
          state.result = _result;
        }
        return detected;
      }
      __name(readBlockMapping, "readBlockMapping");
      function readTagProperty(state) {
        var _position,
          isVerbatim = false,
          isNamed = false,
          tagHandle,
          tagName,
          ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 33) return false;
        if (state.tag !== null) {
          throwError(state, "duplication of a tag property");
        }
        ch = state.input.charCodeAt(++state.position);
        if (ch === 60) {
          isVerbatim = true;
          ch = state.input.charCodeAt(++state.position);
        } else if (ch === 33) {
          isNamed = true;
          tagHandle = "!!";
          ch = state.input.charCodeAt(++state.position);
        } else {
          tagHandle = "!";
        }
        _position = state.position;
        if (isVerbatim) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 0 && ch !== 62);
          if (state.position < state.length) {
            tagName = state.input.slice(_position, state.position);
            ch = state.input.charCodeAt(++state.position);
          } else {
            throwError(
              state,
              "unexpected end of the stream within a verbatim tag",
            );
          }
        } else {
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            if (ch === 33) {
              if (!isNamed) {
                tagHandle = state.input.slice(
                  _position - 1,
                  state.position + 1,
                );
                if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                  throwError(
                    state,
                    "named tag handle cannot contain such characters",
                  );
                }
                isNamed = true;
                _position = state.position + 1;
              } else {
                throwError(
                  state,
                  "tag suffix cannot contain exclamation marks",
                );
              }
            }
            ch = state.input.charCodeAt(++state.position);
          }
          tagName = state.input.slice(_position, state.position);
          if (PATTERN_FLOW_INDICATORS.test(tagName)) {
            throwError(
              state,
              "tag suffix cannot contain flow indicator characters",
            );
          }
        }
        if (tagName && !PATTERN_TAG_URI.test(tagName)) {
          throwError(
            state,
            "tag name cannot contain such characters: " + tagName,
          );
        }
        try {
          tagName = decodeURIComponent(tagName);
        } catch (err) {
          throwError(state, "tag name is malformed: " + tagName);
        }
        if (isVerbatim) {
          state.tag = tagName;
        } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
          state.tag = state.tagMap[tagHandle] + tagName;
        } else if (tagHandle === "!") {
          state.tag = "!" + tagName;
        } else if (tagHandle === "!!") {
          state.tag = "tag:yaml.org,2002:" + tagName;
        } else {
          throwError(state, 'undeclared tag handle "' + tagHandle + '"');
        }
        return true;
      }
      __name(readTagProperty, "readTagProperty");
      function readAnchorProperty(state) {
        var _position, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 38) return false;
        if (state.anchor !== null) {
          throwError(state, "duplication of an anchor property");
        }
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (state.position === _position) {
          throwError(
            state,
            "name of an anchor node must contain at least one character",
          );
        }
        state.anchor = state.input.slice(_position, state.position);
        return true;
      }
      __name(readAnchorProperty, "readAnchorProperty");
      function readAlias(state) {
        var _position, alias, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 42) return false;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (state.position === _position) {
          throwError(
            state,
            "name of an alias node must contain at least one character",
          );
        }
        alias = state.input.slice(_position, state.position);
        if (!_hasOwnProperty.call(state.anchorMap, alias)) {
          throwError(state, 'unidentified alias "' + alias + '"');
        }
        state.result = state.anchorMap[alias];
        skipSeparationSpace(state, true, -1);
        return true;
      }
      __name(readAlias, "readAlias");
      function composeNode(
        state,
        parentIndent,
        nodeContext,
        allowToSeek,
        allowCompact,
      ) {
        var allowBlockStyles,
          allowBlockScalars,
          allowBlockCollections,
          indentStatus = 1,
          atNewLine = false,
          hasContent = false,
          typeIndex,
          typeQuantity,
          typeList,
          type,
          flowIndent,
          blockIndent;
        if (state.listener !== null) {
          state.listener("open", state);
        }
        state.tag = null;
        state.anchor = null;
        state.kind = null;
        state.result = null;
        allowBlockStyles =
          allowBlockScalars =
          allowBlockCollections =
            CONTEXT_BLOCK_OUT === nodeContext ||
            CONTEXT_BLOCK_IN === nodeContext;
        if (allowToSeek) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          }
        }
        if (indentStatus === 1) {
          while (readTagProperty(state) || readAnchorProperty(state)) {
            if (skipSeparationSpace(state, true, -1)) {
              atNewLine = true;
              allowBlockCollections = allowBlockStyles;
              if (state.lineIndent > parentIndent) {
                indentStatus = 1;
              } else if (state.lineIndent === parentIndent) {
                indentStatus = 0;
              } else if (state.lineIndent < parentIndent) {
                indentStatus = -1;
              }
            } else {
              allowBlockCollections = false;
            }
          }
        }
        if (allowBlockCollections) {
          allowBlockCollections = atNewLine || allowCompact;
        }
        if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
          if (
            CONTEXT_FLOW_IN === nodeContext ||
            CONTEXT_FLOW_OUT === nodeContext
          ) {
            flowIndent = parentIndent;
          } else {
            flowIndent = parentIndent + 1;
          }
          blockIndent = state.position - state.lineStart;
          if (indentStatus === 1) {
            if (
              (allowBlockCollections &&
                (readBlockSequence(state, blockIndent) ||
                  readBlockMapping(state, blockIndent, flowIndent))) ||
              readFlowCollection(state, flowIndent)
            ) {
              hasContent = true;
            } else {
              if (
                (allowBlockScalars && readBlockScalar(state, flowIndent)) ||
                readSingleQuotedScalar(state, flowIndent) ||
                readDoubleQuotedScalar(state, flowIndent)
              ) {
                hasContent = true;
              } else if (readAlias(state)) {
                hasContent = true;
                if (state.tag !== null || state.anchor !== null) {
                  throwError(
                    state,
                    "alias node should not have any properties",
                  );
                }
              } else if (
                readPlainScalar(
                  state,
                  flowIndent,
                  CONTEXT_FLOW_IN === nodeContext,
                )
              ) {
                hasContent = true;
                if (state.tag === null) {
                  state.tag = "?";
                }
              }
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
            }
          } else if (indentStatus === 0) {
            hasContent =
              allowBlockCollections && readBlockSequence(state, blockIndent);
          }
        }
        if (state.tag === null) {
          if (state.anchor !== null) {
            state.anchorMap[state.anchor] = state.result;
          }
        } else if (state.tag === "?") {
          if (state.result !== null && state.kind !== "scalar") {
            throwError(
              state,
              'unacceptable node kind for !<?> tag; it should be "scalar", not "' +
                state.kind +
                '"',
            );
          }
          for (
            typeIndex = 0, typeQuantity = state.implicitTypes.length;
            typeIndex < typeQuantity;
            typeIndex += 1
          ) {
            type = state.implicitTypes[typeIndex];
            if (type.resolve(state.result)) {
              state.result = type.construct(state.result);
              state.tag = type.tag;
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
              break;
            }
          }
        } else if (state.tag !== "!") {
          if (
            _hasOwnProperty.call(
              state.typeMap[state.kind || "fallback"],
              state.tag,
            )
          ) {
            type = state.typeMap[state.kind || "fallback"][state.tag];
          } else {
            type = null;
            typeList = state.typeMap.multi[state.kind || "fallback"];
            for (
              typeIndex = 0, typeQuantity = typeList.length;
              typeIndex < typeQuantity;
              typeIndex += 1
            ) {
              if (
                state.tag.slice(0, typeList[typeIndex].tag.length) ===
                typeList[typeIndex].tag
              ) {
                type = typeList[typeIndex];
                break;
              }
            }
          }
          if (!type) {
            throwError(state, "unknown tag !<" + state.tag + ">");
          }
          if (state.result !== null && type.kind !== state.kind) {
            throwError(
              state,
              "unacceptable node kind for !<" +
                state.tag +
                '> tag; it should be "' +
                type.kind +
                '", not "' +
                state.kind +
                '"',
            );
          }
          if (!type.resolve(state.result, state.tag)) {
            throwError(
              state,
              "cannot resolve a node with !<" + state.tag + "> explicit tag",
            );
          } else {
            state.result = type.construct(state.result, state.tag);
            if (state.anchor !== null) {
              state.anchorMap[state.anchor] = state.result;
            }
          }
        }
        if (state.listener !== null) {
          state.listener("close", state);
        }
        return state.tag !== null || state.anchor !== null || hasContent;
      }
      __name(composeNode, "composeNode");
      function readDocument(state) {
        var documentStart = state.position,
          _position,
          directiveName,
          directiveArgs,
          hasDirectives = false,
          ch;
        state.version = null;
        state.checkLineBreaks = state.legacy;
        state.tagMap = /* @__PURE__ */ Object.create(null);
        state.anchorMap = /* @__PURE__ */ Object.create(null);
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
          if (state.lineIndent > 0 || ch !== 37) {
            break;
          }
          hasDirectives = true;
          ch = state.input.charCodeAt(++state.position);
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveName = state.input.slice(_position, state.position);
          directiveArgs = [];
          if (directiveName.length < 1) {
            throwError(
              state,
              "directive name must not be less than one character in length",
            );
          }
          while (ch !== 0) {
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 35) {
              do {
                ch = state.input.charCodeAt(++state.position);
              } while (ch !== 0 && !is_EOL(ch));
              break;
            }
            if (is_EOL(ch)) break;
            _position = state.position;
            while (ch !== 0 && !is_WS_OR_EOL(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            directiveArgs.push(state.input.slice(_position, state.position));
          }
          if (ch !== 0) readLineBreak(state);
          if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
            directiveHandlers[directiveName](
              state,
              directiveName,
              directiveArgs,
            );
          } else {
            throwWarning(
              state,
              'unknown document directive "' + directiveName + '"',
            );
          }
        }
        skipSeparationSpace(state, true, -1);
        if (
          state.lineIndent === 0 &&
          state.input.charCodeAt(state.position) === 45 &&
          state.input.charCodeAt(state.position + 1) === 45 &&
          state.input.charCodeAt(state.position + 2) === 45
        ) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        } else if (hasDirectives) {
          throwError(state, "directives end mark is expected");
        }
        composeNode(
          state,
          state.lineIndent - 1,
          CONTEXT_BLOCK_OUT,
          false,
          true,
        );
        skipSeparationSpace(state, true, -1);
        if (
          state.checkLineBreaks &&
          PATTERN_NON_ASCII_LINE_BREAKS.test(
            state.input.slice(documentStart, state.position),
          )
        ) {
          throwWarning(
            state,
            "non-ASCII line breaks are interpreted as content",
          );
        }
        state.documents.push(state.result);
        if (
          state.position === state.lineStart &&
          testDocumentSeparator(state)
        ) {
          if (state.input.charCodeAt(state.position) === 46) {
            state.position += 3;
            skipSeparationSpace(state, true, -1);
          }
          return;
        }
        if (state.position < state.length - 1) {
          throwError(
            state,
            "end of the stream or a document separator is expected",
          );
        } else {
          return;
        }
      }
      __name(readDocument, "readDocument");
      function loadDocuments(input, options) {
        input = String(input);
        options = options || {};
        if (input.length !== 0) {
          if (
            input.charCodeAt(input.length - 1) !== 10 &&
            input.charCodeAt(input.length - 1) !== 13
          ) {
            input += "\n";
          }
          if (input.charCodeAt(0) === 65279) {
            input = input.slice(1);
          }
        }
        var state = new State(input, options);
        var nullpos = input.indexOf("\0");
        if (nullpos !== -1) {
          state.position = nullpos;
          throwError(state, "null byte is not allowed in input");
        }
        state.input += "\0";
        while (state.input.charCodeAt(state.position) === 32) {
          state.lineIndent += 1;
          state.position += 1;
        }
        while (state.position < state.length - 1) {
          readDocument(state);
        }
        return state.documents;
      }
      __name(loadDocuments, "loadDocuments");
      function loadAll(input, iterator, options) {
        if (
          iterator !== null &&
          typeof iterator === "object" &&
          typeof options === "undefined"
        ) {
          options = iterator;
          iterator = null;
        }
        var documents = loadDocuments(input, options);
        if (typeof iterator !== "function") {
          return documents;
        }
        for (
          var index2 = 0, length = documents.length;
          index2 < length;
          index2 += 1
        ) {
          iterator(documents[index2]);
        }
      }
      __name(loadAll, "loadAll");
      function load(input, options) {
        var documents = loadDocuments(input, options);
        if (documents.length === 0) {
          return void 0;
        } else if (documents.length === 1) {
          return documents[0];
        }
        throw new YAMLException(
          "expected a single document in the stream, but found more",
        );
      }
      __name(load, "load");
      module.exports.loadAll = loadAll;
      module.exports.load = load;
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/dumper.js
  var require_dumper = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/lib/dumper.js"(
      exports,
      module,
    ) {
      "use strict";
      var common = require_common3();
      var YAMLException = require_exception();
      var DEFAULT_SCHEMA = require_default();
      var _toString = Object.prototype.toString;
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var CHAR_BOM = 65279;
      var CHAR_TAB = 9;
      var CHAR_LINE_FEED = 10;
      var CHAR_CARRIAGE_RETURN = 13;
      var CHAR_SPACE = 32;
      var CHAR_EXCLAMATION = 33;
      var CHAR_DOUBLE_QUOTE = 34;
      var CHAR_SHARP = 35;
      var CHAR_PERCENT = 37;
      var CHAR_AMPERSAND = 38;
      var CHAR_SINGLE_QUOTE = 39;
      var CHAR_ASTERISK = 42;
      var CHAR_COMMA = 44;
      var CHAR_MINUS = 45;
      var CHAR_COLON = 58;
      var CHAR_EQUALS = 61;
      var CHAR_GREATER_THAN = 62;
      var CHAR_QUESTION = 63;
      var CHAR_COMMERCIAL_AT = 64;
      var CHAR_LEFT_SQUARE_BRACKET = 91;
      var CHAR_RIGHT_SQUARE_BRACKET = 93;
      var CHAR_GRAVE_ACCENT = 96;
      var CHAR_LEFT_CURLY_BRACKET = 123;
      var CHAR_VERTICAL_LINE = 124;
      var CHAR_RIGHT_CURLY_BRACKET = 125;
      var ESCAPE_SEQUENCES = {};
      ESCAPE_SEQUENCES[0] = "\\0";
      ESCAPE_SEQUENCES[7] = "\\a";
      ESCAPE_SEQUENCES[8] = "\\b";
      ESCAPE_SEQUENCES[9] = "\\t";
      ESCAPE_SEQUENCES[10] = "\\n";
      ESCAPE_SEQUENCES[11] = "\\v";
      ESCAPE_SEQUENCES[12] = "\\f";
      ESCAPE_SEQUENCES[13] = "\\r";
      ESCAPE_SEQUENCES[27] = "\\e";
      ESCAPE_SEQUENCES[34] = '\\"';
      ESCAPE_SEQUENCES[92] = "\\\\";
      ESCAPE_SEQUENCES[133] = "\\N";
      ESCAPE_SEQUENCES[160] = "\\_";
      ESCAPE_SEQUENCES[8232] = "\\L";
      ESCAPE_SEQUENCES[8233] = "\\P";
      var DEPRECATED_BOOLEANS_SYNTAX = [
        "y",
        "Y",
        "yes",
        "Yes",
        "YES",
        "on",
        "On",
        "ON",
        "n",
        "N",
        "no",
        "No",
        "NO",
        "off",
        "Off",
        "OFF",
      ];
      var DEPRECATED_BASE60_SYNTAX =
        /^[-+]?[0-9_]+(?::[0-9_]+)+(?:\.[0-9_]*)?$/;
      function compileStyleMap(schema, map4) {
        var result, keys, index2, length, tag, style, type;
        if (map4 === null) return {};
        result = {};
        keys = Object.keys(map4);
        for (index2 = 0, length = keys.length; index2 < length; index2 += 1) {
          tag = keys[index2];
          style = String(map4[tag]);
          if (tag.slice(0, 2) === "!!") {
            tag = "tag:yaml.org,2002:" + tag.slice(2);
          }
          type = schema.compiledTypeMap["fallback"][tag];
          if (type && _hasOwnProperty.call(type.styleAliases, style)) {
            style = type.styleAliases[style];
          }
          result[tag] = style;
        }
        return result;
      }
      __name(compileStyleMap, "compileStyleMap");
      function encodeHex(character) {
        var string3, handle2, length;
        string3 = character.toString(16).toUpperCase();
        if (character <= 255) {
          handle2 = "x";
          length = 2;
        } else if (character <= 65535) {
          handle2 = "u";
          length = 4;
        } else if (character <= 4294967295) {
          handle2 = "U";
          length = 8;
        } else {
          throw new YAMLException(
            "code point within a string may not be greater than 0xFFFFFFFF",
          );
        }
        return (
          "\\" + handle2 + common.repeat("0", length - string3.length) + string3
        );
      }
      __name(encodeHex, "encodeHex");
      var QUOTING_TYPE_SINGLE = 1;
      var QUOTING_TYPE_DOUBLE = 2;
      function State(options) {
        this.schema = options["schema"] || DEFAULT_SCHEMA;
        this.indent = Math.max(1, options["indent"] || 2);
        this.noArrayIndent = options["noArrayIndent"] || false;
        this.skipInvalid = options["skipInvalid"] || false;
        this.flowLevel = common.isNothing(options["flowLevel"])
          ? -1
          : options["flowLevel"];
        this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
        this.sortKeys = options["sortKeys"] || false;
        this.lineWidth = options["lineWidth"] || 80;
        this.noRefs = options["noRefs"] || false;
        this.noCompatMode = options["noCompatMode"] || false;
        this.condenseFlow = options["condenseFlow"] || false;
        this.quotingType =
          options["quotingType"] === '"'
            ? QUOTING_TYPE_DOUBLE
            : QUOTING_TYPE_SINGLE;
        this.forceQuotes = options["forceQuotes"] || false;
        this.replacer =
          typeof options["replacer"] === "function"
            ? options["replacer"]
            : null;
        this.implicitTypes = this.schema.compiledImplicit;
        this.explicitTypes = this.schema.compiledExplicit;
        this.tag = null;
        this.result = "";
        this.duplicates = [];
        this.usedDuplicates = null;
      }
      __name(State, "State");
      function indentString(string3, spaces) {
        var ind = common.repeat(" ", spaces),
          position2 = 0,
          next = -1,
          result = "",
          line,
          length = string3.length;
        while (position2 < length) {
          next = string3.indexOf("\n", position2);
          if (next === -1) {
            line = string3.slice(position2);
            position2 = length;
          } else {
            line = string3.slice(position2, next + 1);
            position2 = next + 1;
          }
          if (line.length && line !== "\n") result += ind;
          result += line;
        }
        return result;
      }
      __name(indentString, "indentString");
      function generateNextLine(state, level) {
        return "\n" + common.repeat(" ", state.indent * level);
      }
      __name(generateNextLine, "generateNextLine");
      function testImplicitResolving(state, str) {
        var index2, length, type;
        for (
          index2 = 0, length = state.implicitTypes.length;
          index2 < length;
          index2 += 1
        ) {
          type = state.implicitTypes[index2];
          if (type.resolve(str)) {
            return true;
          }
        }
        return false;
      }
      __name(testImplicitResolving, "testImplicitResolving");
      function isWhitespace(c) {
        return c === CHAR_SPACE || c === CHAR_TAB;
      }
      __name(isWhitespace, "isWhitespace");
      function isPrintable(c) {
        return (
          (32 <= c && c <= 126) ||
          (161 <= c && c <= 55295 && c !== 8232 && c !== 8233) ||
          (57344 <= c && c <= 65533 && c !== CHAR_BOM) ||
          (65536 <= c && c <= 1114111)
        );
      }
      __name(isPrintable, "isPrintable");
      function isNsCharOrWhitespace(c) {
        return (
          isPrintable(c) &&
          c !== CHAR_BOM &&
          c !== CHAR_CARRIAGE_RETURN &&
          c !== CHAR_LINE_FEED
        );
      }
      __name(isNsCharOrWhitespace, "isNsCharOrWhitespace");
      function isPlainSafe(c, prev, inblock) {
        var cIsNsCharOrWhitespace = isNsCharOrWhitespace(c);
        var cIsNsChar = cIsNsCharOrWhitespace && !isWhitespace(c);
        return (
          // ns-plain-safe
          ((inblock
            ? // c = flow-in
              cIsNsCharOrWhitespace
            : cIsNsCharOrWhitespace &&
              c !== CHAR_COMMA &&
              c !== CHAR_LEFT_SQUARE_BRACKET &&
              c !== CHAR_RIGHT_SQUARE_BRACKET &&
              c !== CHAR_LEFT_CURLY_BRACKET &&
              c !== CHAR_RIGHT_CURLY_BRACKET) &&
            c !== CHAR_SHARP &&
            !(prev === CHAR_COLON && !cIsNsChar)) ||
          (isNsCharOrWhitespace(prev) &&
            !isWhitespace(prev) &&
            c === CHAR_SHARP) ||
          (prev === CHAR_COLON && cIsNsChar)
        );
      }
      __name(isPlainSafe, "isPlainSafe");
      function isPlainSafeFirst(c) {
        return (
          isPrintable(c) &&
          c !== CHAR_BOM &&
          !isWhitespace(c) &&
          c !== CHAR_MINUS &&
          c !== CHAR_QUESTION &&
          c !== CHAR_COLON &&
          c !== CHAR_COMMA &&
          c !== CHAR_LEFT_SQUARE_BRACKET &&
          c !== CHAR_RIGHT_SQUARE_BRACKET &&
          c !== CHAR_LEFT_CURLY_BRACKET &&
          c !== CHAR_RIGHT_CURLY_BRACKET &&
          c !== CHAR_SHARP &&
          c !== CHAR_AMPERSAND &&
          c !== CHAR_ASTERISK &&
          c !== CHAR_EXCLAMATION &&
          c !== CHAR_VERTICAL_LINE &&
          c !== CHAR_EQUALS &&
          c !== CHAR_GREATER_THAN &&
          c !== CHAR_SINGLE_QUOTE &&
          c !== CHAR_DOUBLE_QUOTE &&
          c !== CHAR_PERCENT &&
          c !== CHAR_COMMERCIAL_AT &&
          c !== CHAR_GRAVE_ACCENT
        );
      }
      __name(isPlainSafeFirst, "isPlainSafeFirst");
      function isPlainSafeLast(c) {
        return !isWhitespace(c) && c !== CHAR_COLON;
      }
      __name(isPlainSafeLast, "isPlainSafeLast");
      function codePointAt(string3, pos) {
        var first = string3.charCodeAt(pos),
          second;
        if (first >= 55296 && first <= 56319 && pos + 1 < string3.length) {
          second = string3.charCodeAt(pos + 1);
          if (second >= 56320 && second <= 57343) {
            return (first - 55296) * 1024 + second - 56320 + 65536;
          }
        }
        return first;
      }
      __name(codePointAt, "codePointAt");
      function needIndentIndicator(string3) {
        var leadingSpaceRe = /^\n* /;
        return leadingSpaceRe.test(string3);
      }
      __name(needIndentIndicator, "needIndentIndicator");
      var STYLE_PLAIN = 1;
      var STYLE_SINGLE = 2;
      var STYLE_LITERAL = 3;
      var STYLE_FOLDED = 4;
      var STYLE_DOUBLE = 5;
      function chooseScalarStyle(
        string3,
        singleLineOnly,
        indentPerLevel,
        lineWidth,
        testAmbiguousType,
        quotingType,
        forceQuotes,
        inblock,
      ) {
        var i;
        var char = 0;
        var prevChar = null;
        var hasLineBreak = false;
        var hasFoldableLine = false;
        var shouldTrackWidth = lineWidth !== -1;
        var previousLineBreak = -1;
        var plain =
          isPlainSafeFirst(codePointAt(string3, 0)) &&
          isPlainSafeLast(codePointAt(string3, string3.length - 1));
        if (singleLineOnly || forceQuotes) {
          for (i = 0; i < string3.length; char >= 65536 ? (i += 2) : i++) {
            char = codePointAt(string3, i);
            if (!isPrintable(char)) {
              return STYLE_DOUBLE;
            }
            plain = plain && isPlainSafe(char, prevChar, inblock);
            prevChar = char;
          }
        } else {
          for (i = 0; i < string3.length; char >= 65536 ? (i += 2) : i++) {
            char = codePointAt(string3, i);
            if (char === CHAR_LINE_FEED) {
              hasLineBreak = true;
              if (shouldTrackWidth) {
                hasFoldableLine =
                  hasFoldableLine || // Foldable line = too long, and not more-indented.
                  (i - previousLineBreak - 1 > lineWidth &&
                    string3[previousLineBreak + 1] !== " ");
                previousLineBreak = i;
              }
            } else if (!isPrintable(char)) {
              return STYLE_DOUBLE;
            }
            plain = plain && isPlainSafe(char, prevChar, inblock);
            prevChar = char;
          }
          hasFoldableLine =
            hasFoldableLine ||
            (shouldTrackWidth &&
              i - previousLineBreak - 1 > lineWidth &&
              string3[previousLineBreak + 1] !== " ");
        }
        if (!hasLineBreak && !hasFoldableLine) {
          if (plain && !forceQuotes && !testAmbiguousType(string3)) {
            return STYLE_PLAIN;
          }
          return quotingType === QUOTING_TYPE_DOUBLE
            ? STYLE_DOUBLE
            : STYLE_SINGLE;
        }
        if (indentPerLevel > 9 && needIndentIndicator(string3)) {
          return STYLE_DOUBLE;
        }
        if (!forceQuotes) {
          return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
        }
        return quotingType === QUOTING_TYPE_DOUBLE
          ? STYLE_DOUBLE
          : STYLE_SINGLE;
      }
      __name(chooseScalarStyle, "chooseScalarStyle");
      function writeScalar(state, string3, level, iskey, inblock) {
        state.dump = (function () {
          if (string3.length === 0) {
            return state.quotingType === QUOTING_TYPE_DOUBLE ? '""' : "''";
          }
          if (!state.noCompatMode) {
            if (
              DEPRECATED_BOOLEANS_SYNTAX.indexOf(string3) !== -1 ||
              DEPRECATED_BASE60_SYNTAX.test(string3)
            ) {
              return state.quotingType === QUOTING_TYPE_DOUBLE
                ? '"' + string3 + '"'
                : "'" + string3 + "'";
            }
          }
          var indent = state.indent * Math.max(1, level);
          var lineWidth =
            state.lineWidth === -1
              ? -1
              : Math.max(
                  Math.min(state.lineWidth, 40),
                  state.lineWidth - indent,
                );
          var singleLineOnly =
            iskey || (state.flowLevel > -1 && level >= state.flowLevel);
          function testAmbiguity(string4) {
            return testImplicitResolving(state, string4);
          }
          __name(testAmbiguity, "testAmbiguity");
          switch (
            chooseScalarStyle(
              string3,
              singleLineOnly,
              state.indent,
              lineWidth,
              testAmbiguity,
              state.quotingType,
              state.forceQuotes && !iskey,
              inblock,
            )
          ) {
            case STYLE_PLAIN:
              return string3;
            case STYLE_SINGLE:
              return "'" + string3.replace(/'/g, "''") + "'";
            case STYLE_LITERAL:
              return (
                "|" +
                blockHeader(string3, state.indent) +
                dropEndingNewline(indentString(string3, indent))
              );
            case STYLE_FOLDED:
              return (
                ">" +
                blockHeader(string3, state.indent) +
                dropEndingNewline(
                  indentString(foldString(string3, lineWidth), indent),
                )
              );
            case STYLE_DOUBLE:
              return '"' + escapeString(string3, lineWidth) + '"';
            default:
              throw new YAMLException("impossible error: invalid scalar style");
          }
        })();
      }
      __name(writeScalar, "writeScalar");
      function blockHeader(string3, indentPerLevel) {
        var indentIndicator = needIndentIndicator(string3)
          ? String(indentPerLevel)
          : "";
        var clip = string3[string3.length - 1] === "\n";
        var keep =
          clip && (string3[string3.length - 2] === "\n" || string3 === "\n");
        var chomp = keep ? "+" : clip ? "" : "-";
        return indentIndicator + chomp + "\n";
      }
      __name(blockHeader, "blockHeader");
      function dropEndingNewline(string3) {
        return string3[string3.length - 1] === "\n"
          ? string3.slice(0, -1)
          : string3;
      }
      __name(dropEndingNewline, "dropEndingNewline");
      function foldString(string3, width) {
        var lineRe = /(\n+)([^\n]*)/g;
        var result = (function () {
          var nextLF = string3.indexOf("\n");
          nextLF = nextLF !== -1 ? nextLF : string3.length;
          lineRe.lastIndex = nextLF;
          return foldLine(string3.slice(0, nextLF), width);
        })();
        var prevMoreIndented = string3[0] === "\n" || string3[0] === " ";
        var moreIndented;
        var match;
        while ((match = lineRe.exec(string3))) {
          var prefix2 = match[1],
            line = match[2];
          moreIndented = line[0] === " ";
          result +=
            prefix2 +
            (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") +
            foldLine(line, width);
          prevMoreIndented = moreIndented;
        }
        return result;
      }
      __name(foldString, "foldString");
      function foldLine(line, width) {
        if (line === "" || line[0] === " ") return line;
        var breakRe = / [^ ]/g;
        var match;
        var start = 0,
          end,
          curr = 0,
          next = 0;
        var result = "";
        while ((match = breakRe.exec(line))) {
          next = match.index;
          if (next - start > width) {
            end = curr > start ? curr : next;
            result += "\n" + line.slice(start, end);
            start = end + 1;
          }
          curr = next;
        }
        result += "\n";
        if (line.length - start > width && curr > start) {
          result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
        } else {
          result += line.slice(start);
        }
        return result.slice(1);
      }
      __name(foldLine, "foldLine");
      function escapeString(string3) {
        var result = "";
        var char = 0;
        var escapeSeq;
        for (var i = 0; i < string3.length; char >= 65536 ? (i += 2) : i++) {
          char = codePointAt(string3, i);
          escapeSeq = ESCAPE_SEQUENCES[char];
          if (!escapeSeq && isPrintable(char)) {
            result += string3[i];
            if (char >= 65536) result += string3[i + 1];
          } else {
            result += escapeSeq || encodeHex(char);
          }
        }
        return result;
      }
      __name(escapeString, "escapeString");
      function writeFlowSequence(state, level, object) {
        var _result = "",
          _tag = state.tag,
          index2,
          length,
          value;
        for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
          value = object[index2];
          if (state.replacer) {
            value = state.replacer.call(object, String(index2), value);
          }
          if (
            writeNode(state, level, value, false, false) ||
            (typeof value === "undefined" &&
              writeNode(state, level, null, false, false))
          ) {
            if (_result !== "")
              _result += "," + (!state.condenseFlow ? " " : "");
            _result += state.dump;
          }
        }
        state.tag = _tag;
        state.dump = "[" + _result + "]";
      }
      __name(writeFlowSequence, "writeFlowSequence");
      function writeBlockSequence(state, level, object, compact) {
        var _result = "",
          _tag = state.tag,
          index2,
          length,
          value;
        for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
          value = object[index2];
          if (state.replacer) {
            value = state.replacer.call(object, String(index2), value);
          }
          if (
            writeNode(state, level + 1, value, true, true, false, true) ||
            (typeof value === "undefined" &&
              writeNode(state, level + 1, null, true, true, false, true))
          ) {
            if (!compact || _result !== "") {
              _result += generateNextLine(state, level);
            }
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
              _result += "-";
            } else {
              _result += "- ";
            }
            _result += state.dump;
          }
        }
        state.tag = _tag;
        state.dump = _result || "[]";
      }
      __name(writeBlockSequence, "writeBlockSequence");
      function writeFlowMapping(state, level, object) {
        var _result = "",
          _tag = state.tag,
          objectKeyList = Object.keys(object),
          index2,
          length,
          objectKey,
          objectValue,
          pairBuffer;
        for (
          index2 = 0, length = objectKeyList.length;
          index2 < length;
          index2 += 1
        ) {
          pairBuffer = "";
          if (_result !== "") pairBuffer += ", ";
          if (state.condenseFlow) pairBuffer += '"';
          objectKey = objectKeyList[index2];
          objectValue = object[objectKey];
          if (state.replacer) {
            objectValue = state.replacer.call(object, objectKey, objectValue);
          }
          if (!writeNode(state, level, objectKey, false, false)) {
            continue;
          }
          if (state.dump.length > 1024) pairBuffer += "? ";
          pairBuffer +=
            state.dump +
            (state.condenseFlow ? '"' : "") +
            ":" +
            (state.condenseFlow ? "" : " ");
          if (!writeNode(state, level, objectValue, false, false)) {
            continue;
          }
          pairBuffer += state.dump;
          _result += pairBuffer;
        }
        state.tag = _tag;
        state.dump = "{" + _result + "}";
      }
      __name(writeFlowMapping, "writeFlowMapping");
      function writeBlockMapping(state, level, object, compact) {
        var _result = "",
          _tag = state.tag,
          objectKeyList = Object.keys(object),
          index2,
          length,
          objectKey,
          objectValue,
          explicitPair,
          pairBuffer;
        if (state.sortKeys === true) {
          objectKeyList.sort();
        } else if (typeof state.sortKeys === "function") {
          objectKeyList.sort(state.sortKeys);
        } else if (state.sortKeys) {
          throw new YAMLException("sortKeys must be a boolean or a function");
        }
        for (
          index2 = 0, length = objectKeyList.length;
          index2 < length;
          index2 += 1
        ) {
          pairBuffer = "";
          if (!compact || _result !== "") {
            pairBuffer += generateNextLine(state, level);
          }
          objectKey = objectKeyList[index2];
          objectValue = object[objectKey];
          if (state.replacer) {
            objectValue = state.replacer.call(object, objectKey, objectValue);
          }
          if (!writeNode(state, level + 1, objectKey, true, true, true)) {
            continue;
          }
          explicitPair =
            (state.tag !== null && state.tag !== "?") ||
            (state.dump && state.dump.length > 1024);
          if (explicitPair) {
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
              pairBuffer += "?";
            } else {
              pairBuffer += "? ";
            }
          }
          pairBuffer += state.dump;
          if (explicitPair) {
            pairBuffer += generateNextLine(state, level);
          }
          if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
            continue;
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += ":";
          } else {
            pairBuffer += ": ";
          }
          pairBuffer += state.dump;
          _result += pairBuffer;
        }
        state.tag = _tag;
        state.dump = _result || "{}";
      }
      __name(writeBlockMapping, "writeBlockMapping");
      function detectType(state, object, explicit) {
        var _result, typeList, index2, length, type, style;
        typeList = explicit ? state.explicitTypes : state.implicitTypes;
        for (
          index2 = 0, length = typeList.length;
          index2 < length;
          index2 += 1
        ) {
          type = typeList[index2];
          if (
            (type.instanceOf || type.predicate) &&
            (!type.instanceOf ||
              (typeof object === "object" &&
                object instanceof type.instanceOf)) &&
            (!type.predicate || type.predicate(object))
          ) {
            if (explicit) {
              if (type.multi && type.representName) {
                state.tag = type.representName(object);
              } else {
                state.tag = type.tag;
              }
            } else {
              state.tag = "?";
            }
            if (type.represent) {
              style = state.styleMap[type.tag] || type.defaultStyle;
              if (_toString.call(type.represent) === "[object Function]") {
                _result = type.represent(object, style);
              } else if (_hasOwnProperty.call(type.represent, style)) {
                _result = type.represent[style](object, style);
              } else {
                throw new YAMLException(
                  "!<" +
                    type.tag +
                    '> tag resolver accepts not "' +
                    style +
                    '" style',
                );
              }
              state.dump = _result;
            }
            return true;
          }
        }
        return false;
      }
      __name(detectType, "detectType");
      function writeNode(
        state,
        level,
        object,
        block,
        compact,
        iskey,
        isblockseq,
      ) {
        state.tag = null;
        state.dump = object;
        if (!detectType(state, object, false)) {
          detectType(state, object, true);
        }
        var type = _toString.call(state.dump);
        var inblock = block;
        var tagStr;
        if (block) {
          block = state.flowLevel < 0 || state.flowLevel > level;
        }
        var objectOrArray =
            type === "[object Object]" || type === "[object Array]",
          duplicateIndex,
          duplicate;
        if (objectOrArray) {
          duplicateIndex = state.duplicates.indexOf(object);
          duplicate = duplicateIndex !== -1;
        }
        if (
          (state.tag !== null && state.tag !== "?") ||
          duplicate ||
          (state.indent !== 2 && level > 0)
        ) {
          compact = false;
        }
        if (duplicate && state.usedDuplicates[duplicateIndex]) {
          state.dump = "*ref_" + duplicateIndex;
        } else {
          if (
            objectOrArray &&
            duplicate &&
            !state.usedDuplicates[duplicateIndex]
          ) {
            state.usedDuplicates[duplicateIndex] = true;
          }
          if (type === "[object Object]") {
            if (block && Object.keys(state.dump).length !== 0) {
              writeBlockMapping(state, level, state.dump, compact);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + state.dump;
              }
            } else {
              writeFlowMapping(state, level, state.dump);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + " " + state.dump;
              }
            }
          } else if (type === "[object Array]") {
            if (block && state.dump.length !== 0) {
              if (state.noArrayIndent && !isblockseq && level > 0) {
                writeBlockSequence(state, level - 1, state.dump, compact);
              } else {
                writeBlockSequence(state, level, state.dump, compact);
              }
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + state.dump;
              }
            } else {
              writeFlowSequence(state, level, state.dump);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + " " + state.dump;
              }
            }
          } else if (type === "[object String]") {
            if (state.tag !== "?") {
              writeScalar(state, state.dump, level, iskey, inblock);
            }
          } else if (type === "[object Undefined]") {
            return false;
          } else {
            if (state.skipInvalid) return false;
            throw new YAMLException(
              "unacceptable kind of an object to dump " + type,
            );
          }
          if (state.tag !== null && state.tag !== "?") {
            tagStr = encodeURI(
              state.tag[0] === "!" ? state.tag.slice(1) : state.tag,
            ).replace(/!/g, "%21");
            if (state.tag[0] === "!") {
              tagStr = "!" + tagStr;
            } else if (tagStr.slice(0, 18) === "tag:yaml.org,2002:") {
              tagStr = "!!" + tagStr.slice(18);
            } else {
              tagStr = "!<" + tagStr + ">";
            }
            state.dump = tagStr + " " + state.dump;
          }
        }
        return true;
      }
      __name(writeNode, "writeNode");
      function getDuplicateReferences(object, state) {
        var objects = [],
          duplicatesIndexes = [],
          index2,
          length;
        inspectNode(object, objects, duplicatesIndexes);
        for (
          index2 = 0, length = duplicatesIndexes.length;
          index2 < length;
          index2 += 1
        ) {
          state.duplicates.push(objects[duplicatesIndexes[index2]]);
        }
        state.usedDuplicates = new Array(length);
      }
      __name(getDuplicateReferences, "getDuplicateReferences");
      function inspectNode(object, objects, duplicatesIndexes) {
        var objectKeyList, index2, length;
        if (object !== null && typeof object === "object") {
          index2 = objects.indexOf(object);
          if (index2 !== -1) {
            if (duplicatesIndexes.indexOf(index2) === -1) {
              duplicatesIndexes.push(index2);
            }
          } else {
            objects.push(object);
            if (Array.isArray(object)) {
              for (
                index2 = 0, length = object.length;
                index2 < length;
                index2 += 1
              ) {
                inspectNode(object[index2], objects, duplicatesIndexes);
              }
            } else {
              objectKeyList = Object.keys(object);
              for (
                index2 = 0, length = objectKeyList.length;
                index2 < length;
                index2 += 1
              ) {
                inspectNode(
                  object[objectKeyList[index2]],
                  objects,
                  duplicatesIndexes,
                );
              }
            }
          }
        }
      }
      __name(inspectNode, "inspectNode");
      function dump(input, options) {
        options = options || {};
        var state = new State(options);
        if (!state.noRefs) getDuplicateReferences(input, state);
        var value = input;
        if (state.replacer) {
          value = state.replacer.call({ "": value }, "", value);
        }
        if (writeNode(state, 0, value, true, true)) return state.dump + "\n";
        return "";
      }
      __name(dump, "dump");
      module.exports.dump = dump;
    },
  });

  // node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/index.js
  var require_js_yaml = __commonJS({
    "node_modules/.pnpm/js-yaml@4.1.0/node_modules/js-yaml/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var loader = require_loader();
      var dumper = require_dumper();
      function renamed(from, to) {
        return function () {
          throw new Error(
            "Function yaml." +
              from +
              " is removed in js-yaml 4. Use yaml." +
              to +
              " instead, which is now safe by default.",
          );
        };
      }
      __name(renamed, "renamed");
      module.exports.Type = require_type();
      module.exports.Schema = require_schema();
      module.exports.FAILSAFE_SCHEMA = require_failsafe();
      module.exports.JSON_SCHEMA = require_json2();
      module.exports.CORE_SCHEMA = require_core2();
      module.exports.DEFAULT_SCHEMA = require_default();
      module.exports.load = loader.load;
      module.exports.loadAll = loader.loadAll;
      module.exports.dump = dumper.dump;
      module.exports.YAMLException = require_exception();
      module.exports.types = {
        binary: require_binary(),
        float: require_float(),
        map: require_map(),
        null: require_null(),
        pairs: require_pairs(),
        set: require_set(),
        timestamp: require_timestamp(),
        bool: require_bool(),
        int: require_int(),
        merge: require_merge(),
        omap: require_omap(),
        seq: require_seq(),
        str: require_str(),
      };
      module.exports.safeLoad = renamed("safeLoad", "load");
      module.exports.safeLoadAll = renamed("safeLoadAll", "loadAll");
      module.exports.safeDump = renamed("safeDump", "dump");
    },
  });

  // node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/unicode.js
  var require_unicode = __commonJS({
    "node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/unicode.js"(
      exports,
      module,
    ) {
      var Uni = module.exports;
      module.exports.isWhiteSpace = /* @__PURE__ */ __name(
        function isWhiteSpace(x) {
          return (
            x === " " ||
            x === "\xA0" ||
            x === "\uFEFF" ||
            (x >= "	" && x <= "\r") ||
            x === "\u1680" ||
            (x >= "\u2000" && x <= "\u200A") ||
            x === "\u2028" ||
            x === "\u2029" ||
            x === "\u202F" ||
            x === "\u205F" ||
            x === "\u3000"
          );
        },
        "isWhiteSpace",
      );
      module.exports.isWhiteSpaceJSON = /* @__PURE__ */ __name(
        function isWhiteSpaceJSON(x) {
          return x === " " || x === "	" || x === "\n" || x === "\r";
        },
        "isWhiteSpaceJSON",
      );
      module.exports.isLineTerminator = /* @__PURE__ */ __name(
        function isLineTerminator(x) {
          return x === "\n" || x === "\r" || x === "\u2028" || x === "\u2029";
        },
        "isLineTerminator",
      );
      module.exports.isLineTerminatorJSON = /* @__PURE__ */ __name(
        function isLineTerminatorJSON(x) {
          return x === "\n" || x === "\r";
        },
        "isLineTerminatorJSON",
      );
      module.exports.isIdentifierStart = /* @__PURE__ */ __name(
        function isIdentifierStart(x) {
          return (
            x === "$" ||
            x === "_" ||
            (x >= "A" && x <= "Z") ||
            (x >= "a" && x <= "z") ||
            (x >= "\x80" && Uni.NonAsciiIdentifierStart.test(x))
          );
        },
        "isIdentifierStart",
      );
      module.exports.isIdentifierPart = /* @__PURE__ */ __name(
        function isIdentifierPart(x) {
          return (
            x === "$" ||
            x === "_" ||
            (x >= "A" && x <= "Z") ||
            (x >= "a" && x <= "z") ||
            (x >= "0" && x <= "9") ||
            (x >= "\x80" && Uni.NonAsciiIdentifierPart.test(x))
          );
        },
        "isIdentifierPart",
      );
      module.exports.NonAsciiIdentifierStart =
        /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
      module.exports.NonAsciiIdentifierPart =
        /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0\u08A2-\u08AC\u08E4-\u08FE\u0900-\u0963\u0966-\u096F\u0971-\u0977\u0979-\u097F\u0981-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C01-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C82\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D02\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F0\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191C\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1D00-\u1DE6\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA697\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7B\uAA80-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE26\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/;
    },
  });

  // node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/parse.js
  var require_parse4 = __commonJS({
    "node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/parse.js"(
      exports,
      module,
    ) {
      var Uni = require_unicode();
      function isHexDigit(x) {
        return (
          (x >= "0" && x <= "9") ||
          (x >= "A" && x <= "F") ||
          (x >= "a" && x <= "f")
        );
      }
      __name(isHexDigit, "isHexDigit");
      function isOctDigit(x) {
        return x >= "0" && x <= "7";
      }
      __name(isOctDigit, "isOctDigit");
      function isDecDigit(x) {
        return x >= "0" && x <= "9";
      }
      __name(isDecDigit, "isDecDigit");
      var unescapeMap = {
        "'": "'",
        '"': '"',
        "\\": "\\",
        b: "\b",
        f: "\f",
        n: "\n",
        r: "\r",
        t: "	",
        v: "\v",
        "/": "/",
      };
      function formatError(input, msg, position2, lineno, column, json5) {
        var result = msg + " at " + (lineno + 1) + ":" + (column + 1),
          tmppos = position2 - column - 1,
          srcline = "",
          underline = "";
        var isLineTerminator = json5
          ? Uni.isLineTerminator
          : Uni.isLineTerminatorJSON;
        if (tmppos < position2 - 70) {
          tmppos = position2 - 70;
        }
        while (1) {
          var chr = input[++tmppos];
          if (isLineTerminator(chr) || tmppos === input.length) {
            if (position2 >= tmppos) {
              underline += "^";
            }
            break;
          }
          srcline += chr;
          if (position2 === tmppos) {
            underline += "^";
          } else if (position2 > tmppos) {
            underline += input[tmppos] === "	" ? "	" : " ";
          }
          if (srcline.length > 78) break;
        }
        return result + "\n" + srcline + "\n" + underline;
      }
      __name(formatError, "formatError");
      function parse3(input, options) {
        var json5 = false;
        var cjson = false;
        if (options.legacy || options.mode === "json") {
        } else if (options.mode === "cjson") {
          cjson = true;
        } else if (options.mode === "json5") {
          json5 = true;
        } else {
          json5 = true;
        }
        var isLineTerminator = json5
          ? Uni.isLineTerminator
          : Uni.isLineTerminatorJSON;
        var isWhiteSpace = json5 ? Uni.isWhiteSpace : Uni.isWhiteSpaceJSON;
        var length = input.length,
          lineno = 0,
          linestart = 0,
          position2 = 0,
          stack = [];
        var tokenStart = /* @__PURE__ */ __name(function () {}, "tokenStart");
        var tokenEnd = /* @__PURE__ */ __name(function (v) {
          return v;
        }, "tokenEnd");
        if (options._tokenize) {
          (function () {
            var start = null;
            tokenStart = /* @__PURE__ */ __name(function () {
              if (start !== null) throw Error("internal error, token overlap");
              start = position2;
            }, "tokenStart");
            tokenEnd = /* @__PURE__ */ __name(function (v, type) {
              if (start != position2) {
                var hash = {
                  raw: input.substr(start, position2 - start),
                  type,
                  stack: stack.slice(0),
                };
                if (v !== void 0) hash.value = v;
                options._tokenize.call(null, hash);
              }
              start = null;
              return v;
            }, "tokenEnd");
          })();
        }
        function fail(msg) {
          var column = position2 - linestart;
          if (!msg) {
            if (position2 < length) {
              var token =
                "'" +
                JSON.stringify(input[position2])
                  .replace(/^"|"$/g, "")
                  .replace(/'/g, "\\'")
                  .replace(/\\"/g, '"') +
                "'";
              if (!msg) msg = "Unexpected token " + token;
            } else {
              if (!msg) msg = "Unexpected end of input";
            }
          }
          var error = SyntaxError(
            formatError(input, msg, position2, lineno, column, json5),
          );
          error.row = lineno + 1;
          error.column = column + 1;
          throw error;
        }
        __name(fail, "fail");
        function newline(chr) {
          if (chr === "\r" && input[position2] === "\n") position2++;
          linestart = position2;
          lineno++;
        }
        __name(newline, "newline");
        function parseGeneric() {
          var result;
          while (position2 < length) {
            tokenStart();
            var chr = input[position2++];
            if (chr === '"' || (chr === "'" && json5)) {
              return tokenEnd(parseString(chr), "literal");
            } else if (chr === "{") {
              tokenEnd(void 0, "separator");
              return parseObject();
            } else if (chr === "[") {
              tokenEnd(void 0, "separator");
              return parseArray();
            } else if (
              chr === "-" ||
              chr === "." ||
              isDecDigit(chr) ||
              (json5 && (chr === "+" || chr === "I" || chr === "N"))
            ) {
              return tokenEnd(parseNumber(), "literal");
            } else if (chr === "n") {
              parseKeyword("null");
              return tokenEnd(null, "literal");
            } else if (chr === "t") {
              parseKeyword("true");
              return tokenEnd(true, "literal");
            } else if (chr === "f") {
              parseKeyword("false");
              return tokenEnd(false, "literal");
            } else {
              position2--;
              return tokenEnd(void 0);
            }
          }
        }
        __name(parseGeneric, "parseGeneric");
        function parseKey() {
          var result;
          while (position2 < length) {
            tokenStart();
            var chr = input[position2++];
            if (chr === '"' || (chr === "'" && json5)) {
              return tokenEnd(parseString(chr), "key");
            } else if (chr === "{") {
              tokenEnd(void 0, "separator");
              return parseObject();
            } else if (chr === "[") {
              tokenEnd(void 0, "separator");
              return parseArray();
            } else if (chr === "." || isDecDigit(chr)) {
              return tokenEnd(parseNumber(true), "key");
            } else if (
              (json5 && Uni.isIdentifierStart(chr)) ||
              (chr === "\\" && input[position2] === "u")
            ) {
              var rollback = position2 - 1;
              var result = parseIdentifier();
              if (result === void 0) {
                position2 = rollback;
                return tokenEnd(void 0);
              } else {
                return tokenEnd(result, "key");
              }
            } else {
              position2--;
              return tokenEnd(void 0);
            }
          }
        }
        __name(parseKey, "parseKey");
        function skipWhiteSpace() {
          tokenStart();
          while (position2 < length) {
            var chr = input[position2++];
            if (isLineTerminator(chr)) {
              position2--;
              tokenEnd(void 0, "whitespace");
              tokenStart();
              position2++;
              newline(chr);
              tokenEnd(void 0, "newline");
              tokenStart();
            } else if (isWhiteSpace(chr)) {
            } else if (
              chr === "/" &&
              (json5 || cjson) &&
              (input[position2] === "/" || input[position2] === "*")
            ) {
              position2--;
              tokenEnd(void 0, "whitespace");
              tokenStart();
              position2++;
              skipComment(input[position2++] === "*");
              tokenEnd(void 0, "comment");
              tokenStart();
            } else {
              position2--;
              break;
            }
          }
          return tokenEnd(void 0, "whitespace");
        }
        __name(skipWhiteSpace, "skipWhiteSpace");
        function skipComment(multi) {
          while (position2 < length) {
            var chr = input[position2++];
            if (isLineTerminator(chr)) {
              if (!multi) {
                position2--;
                return;
              }
              newline(chr);
            } else if (chr === "*" && multi) {
              if (input[position2] === "/") {
                position2++;
                return;
              }
            } else {
            }
          }
          if (multi) {
            fail("Unclosed multiline comment");
          }
        }
        __name(skipComment, "skipComment");
        function parseKeyword(keyword) {
          var _pos = position2;
          var len = keyword.length;
          for (var i = 1; i < len; i++) {
            if (position2 >= length || keyword[i] != input[position2]) {
              position2 = _pos - 1;
              fail();
            }
            position2++;
          }
        }
        __name(parseKeyword, "parseKeyword");
        function parseObject() {
          var result = options.null_prototype
              ? /* @__PURE__ */ Object.create(null)
              : {},
            empty_object = {},
            is_non_empty = false;
          while (position2 < length) {
            skipWhiteSpace();
            var item1 = parseKey();
            skipWhiteSpace();
            tokenStart();
            var chr = input[position2++];
            tokenEnd(void 0, "separator");
            if (chr === "}" && item1 === void 0) {
              if (!json5 && is_non_empty) {
                position2--;
                fail("Trailing comma in object");
              }
              return result;
            } else if (chr === ":" && item1 !== void 0) {
              skipWhiteSpace();
              stack.push(item1);
              var item2 = parseGeneric();
              stack.pop();
              if (item2 === void 0) fail("No value found for key " + item1);
              if (typeof item1 !== "string") {
                if (!json5 || typeof item1 !== "number") {
                  fail("Wrong key type: " + item1);
                }
              }
              if (
                (item1 in empty_object || empty_object[item1] != null) &&
                options.reserved_keys !== "replace"
              ) {
                if (options.reserved_keys === "throw") {
                  fail("Reserved key: " + item1);
                } else {
                }
              } else {
                if (typeof options.reviver === "function") {
                  item2 = options.reviver.call(null, item1, item2);
                }
                if (item2 !== void 0) {
                  is_non_empty = true;
                  Object.defineProperty(result, item1, {
                    value: item2,
                    enumerable: true,
                    configurable: true,
                    writable: true,
                  });
                }
              }
              skipWhiteSpace();
              tokenStart();
              var chr = input[position2++];
              tokenEnd(void 0, "separator");
              if (chr === ",") {
                continue;
              } else if (chr === "}") {
                return result;
              } else {
                fail();
              }
            } else {
              position2--;
              fail();
            }
          }
          fail();
        }
        __name(parseObject, "parseObject");
        function parseArray() {
          var result = [];
          while (position2 < length) {
            skipWhiteSpace();
            stack.push(result.length);
            var item = parseGeneric();
            stack.pop();
            skipWhiteSpace();
            tokenStart();
            var chr = input[position2++];
            tokenEnd(void 0, "separator");
            if (item !== void 0) {
              if (typeof options.reviver === "function") {
                item = options.reviver.call(null, String(result.length), item);
              }
              if (item === void 0) {
                result.length++;
                item = true;
              } else {
                result.push(item);
              }
            }
            if (chr === ",") {
              if (item === void 0) {
                fail("Elisions are not supported");
              }
            } else if (chr === "]") {
              if (!json5 && item === void 0 && result.length) {
                position2--;
                fail("Trailing comma in array");
              }
              return result;
            } else {
              position2--;
              fail();
            }
          }
        }
        __name(parseArray, "parseArray");
        function parseNumber() {
          position2--;
          var start = position2,
            chr = input[position2++],
            t;
          var to_num = /* @__PURE__ */ __name(function (is_octal2) {
            var str = input.substr(start, position2 - start);
            if (is_octal2) {
              var result = parseInt(str.replace(/^0o?/, ""), 8);
            } else {
              var result = Number(str);
            }
            if (Number.isNaN(result)) {
              position2--;
              fail(
                'Bad numeric literal - "' +
                  input.substr(start, position2 - start + 1) +
                  '"',
              );
            } else if (
              !json5 &&
              !str.match(/^-?(0|[1-9][0-9]*)(\.[0-9]+)?(e[+-]?[0-9]+)?$/i)
            ) {
              position2--;
              fail(
                'Non-json numeric literal - "' +
                  input.substr(start, position2 - start + 1) +
                  '"',
              );
            } else {
              return result;
            }
          }, "to_num");
          if (chr === "-" || (chr === "+" && json5)) chr = input[position2++];
          if (chr === "N" && json5) {
            parseKeyword("NaN");
            return NaN;
          }
          if (chr === "I" && json5) {
            parseKeyword("Infinity");
            return to_num();
          }
          if (chr >= "1" && chr <= "9") {
            while (position2 < length && isDecDigit(input[position2]))
              position2++;
            chr = input[position2++];
          }
          if (chr === "0") {
            chr = input[position2++];
            var is_octal = chr === "o" || chr === "O" || isOctDigit(chr);
            var is_hex = chr === "x" || chr === "X";
            if (json5 && (is_octal || is_hex)) {
              while (
                position2 < length &&
                (is_hex ? isHexDigit : isOctDigit)(input[position2])
              )
                position2++;
              var sign = 1;
              if (input[start] === "-") {
                sign = -1;
                start++;
              } else if (input[start] === "+") {
                start++;
              }
              return sign * to_num(is_octal);
            }
          }
          if (chr === ".") {
            while (position2 < length && isDecDigit(input[position2]))
              position2++;
            chr = input[position2++];
          }
          if (chr === "e" || chr === "E") {
            chr = input[position2++];
            if (chr === "-" || chr === "+") position2++;
            while (position2 < length && isDecDigit(input[position2]))
              position2++;
            chr = input[position2++];
          }
          position2--;
          return to_num();
        }
        __name(parseNumber, "parseNumber");
        function parseIdentifier() {
          position2--;
          var result = "";
          while (position2 < length) {
            var chr = input[position2++];
            if (
              chr === "\\" &&
              input[position2] === "u" &&
              isHexDigit(input[position2 + 1]) &&
              isHexDigit(input[position2 + 2]) &&
              isHexDigit(input[position2 + 3]) &&
              isHexDigit(input[position2 + 4])
            ) {
              chr = String.fromCharCode(
                parseInt(input.substr(position2 + 1, 4), 16),
              );
              position2 += 5;
            }
            if (result.length) {
              if (Uni.isIdentifierPart(chr)) {
                result += chr;
              } else {
                position2--;
                return result;
              }
            } else {
              if (Uni.isIdentifierStart(chr)) {
                result += chr;
              } else {
                return void 0;
              }
            }
          }
          fail();
        }
        __name(parseIdentifier, "parseIdentifier");
        function parseString(endChar) {
          var result = "";
          while (position2 < length) {
            var chr = input[position2++];
            if (chr === endChar) {
              return result;
            } else if (chr === "\\") {
              if (position2 >= length) fail();
              chr = input[position2++];
              if (unescapeMap[chr] && (json5 || (chr != "v" && chr != "'"))) {
                result += unescapeMap[chr];
              } else if (json5 && isLineTerminator(chr)) {
                newline(chr);
              } else if (chr === "u" || (chr === "x" && json5)) {
                var off = chr === "u" ? 4 : 2;
                for (var i = 0; i < off; i++) {
                  if (position2 >= length) fail();
                  if (!isHexDigit(input[position2]))
                    fail("Bad escape sequence");
                  position2++;
                }
                result += String.fromCharCode(
                  parseInt(input.substr(position2 - off, off), 16),
                );
              } else if (json5 && isOctDigit(chr)) {
                if (
                  chr < "4" &&
                  isOctDigit(input[position2]) &&
                  isOctDigit(input[position2 + 1])
                ) {
                  var digits = 3;
                } else if (isOctDigit(input[position2])) {
                  var digits = 2;
                } else {
                  var digits = 1;
                }
                position2 += digits - 1;
                result += String.fromCharCode(
                  parseInt(input.substr(position2 - digits, digits), 8),
                );
              } else if (json5) {
                result += chr;
              } else {
                position2--;
                fail();
              }
            } else if (isLineTerminator(chr)) {
              fail();
            } else {
              if (!json5 && chr.charCodeAt(0) < 32) {
                position2--;
                fail("Unexpected control character");
              }
              result += chr;
            }
          }
          fail();
        }
        __name(parseString, "parseString");
        skipWhiteSpace();
        var return_value = parseGeneric();
        if (return_value !== void 0 || position2 < length) {
          skipWhiteSpace();
          if (position2 >= length) {
            if (typeof options.reviver === "function") {
              return_value = options.reviver.call(null, "", return_value);
            }
            return return_value;
          } else {
            fail();
          }
        } else {
          if (position2) {
            fail("No data, only a whitespace");
          } else {
            fail("No data, empty input");
          }
        }
      }
      __name(parse3, "parse");
      module.exports.parse = /* @__PURE__ */ __name(function parseJSON(
        input,
        options,
      ) {
        if (typeof options === "function") {
          options = {
            reviver: options,
          };
        }
        if (input === void 0) {
          return void 0;
        }
        if (typeof input !== "string") input = String(input);
        if (options == null) options = {};
        if (options.reserved_keys == null) options.reserved_keys = "ignore";
        if (
          options.reserved_keys === "throw" ||
          options.reserved_keys === "ignore"
        ) {
          if (options.null_prototype == null) {
            options.null_prototype = true;
          }
        }
        try {
          return parse3(input, options);
        } catch (err) {
          if (
            err instanceof SyntaxError &&
            err.row != null &&
            err.column != null
          ) {
            var old_err = err;
            err = SyntaxError(old_err.message);
            err.column = old_err.column;
            err.row = old_err.row;
          }
          throw err;
        }
      }, "parseJSON");
      module.exports.tokenize = /* @__PURE__ */ __name(function tokenizeJSON(
        input,
        options,
      ) {
        if (options == null) options = {};
        options._tokenize = function (smth) {
          if (options._addstack)
            smth.stack.unshift.apply(smth.stack, options._addstack);
          tokens.push(smth);
        };
        var tokens = [];
        tokens.data = module.exports.parse(input, options);
        return tokens;
      }, "tokenizeJSON");
    },
  });

  // node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/stringify.js
  var require_stringify2 = __commonJS({
    "node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/stringify.js"(
      exports,
      module,
    ) {
      var Uni = require_unicode();
      if (!/* @__PURE__ */ __name(function f() {}, "f").name) {
        Object.defineProperty(function () {}.constructor.prototype, "name", {
          get: /* @__PURE__ */ __name(function () {
            var name = this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];
            Object.defineProperty(this, "name", { value: name });
            return name;
          }, "get"),
        });
      }
      var special_chars = {
        0: "\\0",
        // this is not an octal literal
        8: "\\b",
        9: "\\t",
        10: "\\n",
        11: "\\v",
        12: "\\f",
        13: "\\r",
        92: "\\\\",
      };
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var escapable =
        /[\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/;
      function _stringify(object, options, recursiveLvl, currentKey) {
        var json5 = options.mode === "json5" || !options.mode;
        function indent(str2, add) {
          var prefix2 = options._prefix ? options._prefix : "";
          if (!options.indent) return prefix2 + str2;
          var result = "";
          var count = recursiveLvl + (add || 0);
          for (var i = 0; i < count; i++) result += options.indent;
          return prefix2 + result + str2 + (add ? "\n" : "");
        }
        __name(indent, "indent");
        function _stringify_key(key) {
          if (options.quote_keys) return _stringify_str(key);
          if (String(Number(key)) == key && key[0] != "-") return key;
          if (key == "") return _stringify_str(key);
          var result = "";
          for (var i = 0; i < key.length; i++) {
            if (i > 0) {
              if (!Uni.isIdentifierPart(key[i])) return _stringify_str(key);
            } else {
              if (!Uni.isIdentifierStart(key[i])) return _stringify_str(key);
            }
            var chr = key.charCodeAt(i);
            if (options.ascii) {
              if (chr < 128) {
                result += key[i];
              } else {
                result += "\\u" + ("0000" + chr.toString(16)).slice(-4);
              }
            } else {
              if (escapable.exec(key[i])) {
                result += "\\u" + ("0000" + chr.toString(16)).slice(-4);
              } else {
                result += key[i];
              }
            }
          }
          return result;
        }
        __name(_stringify_key, "_stringify_key");
        function _stringify_str(key) {
          var quote = options.quote;
          var quoteChr = quote.charCodeAt(0);
          var result = "";
          for (var i = 0; i < key.length; i++) {
            var chr = key.charCodeAt(i);
            if (chr < 16) {
              if (chr === 0 && json5) {
                result += "\\0";
              } else if (chr >= 8 && chr <= 13 && (json5 || chr !== 11)) {
                result += special_chars[chr];
              } else if (json5) {
                result += "\\x0" + chr.toString(16);
              } else {
                result += "\\u000" + chr.toString(16);
              }
            } else if (chr < 32) {
              if (json5) {
                result += "\\x" + chr.toString(16);
              } else {
                result += "\\u00" + chr.toString(16);
              }
            } else if (chr >= 32 && chr < 128) {
              if (chr === 47 && i && key[i - 1] === "<") {
                result += "\\" + key[i];
              } else if (chr === 92) {
                result += "\\\\";
              } else if (chr === quoteChr) {
                result += "\\" + quote;
              } else {
                result += key[i];
              }
            } else if (
              options.ascii ||
              Uni.isLineTerminator(key[i]) ||
              escapable.exec(key[i])
            ) {
              if (chr < 256) {
                if (json5) {
                  result += "\\x" + chr.toString(16);
                } else {
                  result += "\\u00" + chr.toString(16);
                }
              } else if (chr < 4096) {
                result += "\\u0" + chr.toString(16);
              } else if (chr < 65536) {
                result += "\\u" + chr.toString(16);
              } else {
                throw Error("weird codepoint");
              }
            } else {
              result += key[i];
            }
          }
          return quote + result + quote;
        }
        __name(_stringify_str, "_stringify_str");
        function _stringify_object() {
          if (object === null) return "null";
          var result = [],
            len = 0,
            braces;
          if (Array.isArray(object)) {
            braces = "[]";
            for (var i = 0; i < object.length; i++) {
              var s = _stringify(
                object[i],
                options,
                recursiveLvl + 1,
                String(i),
              );
              if (s === void 0) s = "null";
              len += s.length + 2;
              result.push(s + ",");
            }
          } else {
            braces = "{}";
            var fn = /* @__PURE__ */ __name(function (key) {
              var t = _stringify(object[key], options, recursiveLvl + 1, key);
              if (t !== void 0) {
                t =
                  _stringify_key(key) +
                  ":" +
                  (options.indent ? " " : "") +
                  t +
                  ",";
                len += t.length + 1;
                result.push(t);
              }
            }, "fn");
            if (Array.isArray(options.replacer)) {
              for (var i = 0; i < options.replacer.length; i++)
                if (hasOwnProperty2.call(object, options.replacer[i]))
                  fn(options.replacer[i]);
            } else {
              var keys = Object.keys(object);
              if (options.sort_keys)
                keys = keys.sort(
                  typeof options.sort_keys === "function"
                    ? options.sort_keys
                    : void 0,
                );
              keys.forEach(fn);
            }
          }
          len -= 2;
          if (
            options.indent &&
            (len > options._splitMax - recursiveLvl * options.indent.length ||
              len > options._splitMin)
          ) {
            if (options.no_trailing_comma && result.length) {
              result[result.length - 1] = result[result.length - 1].substring(
                0,
                result[result.length - 1].length - 1,
              );
            }
            var innerStuff = result
              .map(function (x) {
                return indent(x, 1);
              })
              .join("");
            return (
              braces[0] +
              (options.indent ? "\n" : "") +
              innerStuff +
              indent(braces[1])
            );
          } else {
            if (result.length) {
              result[result.length - 1] = result[result.length - 1].substring(
                0,
                result[result.length - 1].length - 1,
              );
            }
            var innerStuff = result.join(options.indent ? " " : "");
            return braces[0] + innerStuff + braces[1];
          }
        }
        __name(_stringify_object, "_stringify_object");
        function _stringify_nonobject(object2) {
          if (typeof options.replacer === "function") {
            object2 = options.replacer.call(null, currentKey, object2);
          }
          switch (typeof object2) {
            case "string":
              return _stringify_str(object2);
            case "number":
              if (object2 === 0 && 1 / object2 < 0) {
                return "-0";
              }
              if (!json5 && !Number.isFinite(object2)) {
                return "null";
              }
              return object2.toString();
            case "boolean":
              return object2.toString();
            case "undefined":
              return void 0;
            case "function":
            //        return custom_type()
            default:
              return JSON.stringify(object2);
          }
        }
        __name(_stringify_nonobject, "_stringify_nonobject");
        if (options._stringify_key) {
          return _stringify_key(object);
        }
        if (typeof object === "object") {
          if (object === null) return "null";
          var str;
          if (
            typeof (str = object.toJSON5) === "function" &&
            options.mode !== "json"
          ) {
            object = str.call(object, currentKey);
          } else if (typeof (str = object.toJSON) === "function") {
            object = str.call(object, currentKey);
          }
          if (object === null) return "null";
          if (typeof object !== "object") return _stringify_nonobject(object);
          if (
            object.constructor === Number ||
            object.constructor === Boolean ||
            object.constructor === String
          ) {
            object = object.valueOf();
            return _stringify_nonobject(object);
          } else if (object.constructor === Date) {
            return _stringify_nonobject(object.toISOString());
          } else {
            if (typeof options.replacer === "function") {
              object = options.replacer.call(null, currentKey, object);
              if (typeof object !== "object")
                return _stringify_nonobject(object);
            }
            return _stringify_object(object);
          }
        } else {
          return _stringify_nonobject(object);
        }
      }
      __name(_stringify, "_stringify");
      module.exports.stringify = /* @__PURE__ */ __name(function stringifyJSON(
        object,
        options,
        _space,
      ) {
        if (typeof options === "function" || Array.isArray(options)) {
          options = {
            replacer: options,
          };
        } else if (typeof options === "object" && options !== null) {
        } else {
          options = {};
        }
        if (_space != null) options.indent = _space;
        if (options.indent == null) options.indent = "	";
        if (options.quote == null) options.quote = "'";
        if (options.ascii == null) options.ascii = false;
        if (options.mode == null) options.mode = "json5";
        if (options.mode === "json" || options.mode === "cjson") {
          options.quote = '"';
          options.no_trailing_comma = true;
          options.quote_keys = true;
        }
        if (typeof options.indent === "object") {
          if (
            options.indent.constructor === Number ||
            options.indent.constructor === Boolean ||
            options.indent.constructor === String
          )
            options.indent = options.indent.valueOf();
        }
        if (typeof options.indent === "number") {
          if (options.indent >= 0) {
            options.indent = Array(Math.min(~~options.indent, 10) + 1).join(
              " ",
            );
          } else {
            options.indent = false;
          }
        } else if (typeof options.indent === "string") {
          options.indent = options.indent.substr(0, 10);
        }
        if (options._splitMin == null) options._splitMin = 50;
        if (options._splitMax == null) options._splitMax = 70;
        return _stringify(object, options, 0, "");
      }, "stringifyJSON");
    },
  });

  // node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/analyze.js
  var require_analyze = __commonJS({
    "node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/analyze.js"(
      exports,
      module,
    ) {
      var tokenize = require_parse4().tokenize;
      module.exports.analyze = /* @__PURE__ */ __name(function analyzeJSON(
        input,
        options,
      ) {
        if (options == null) options = {};
        if (!Array.isArray(input)) {
          input = tokenize(input, options);
        }
        var result = {
          has_whitespace: false,
          has_comments: false,
          has_newlines: false,
          has_trailing_comma: false,
          indent: "",
          newline: "\n",
          quote: '"',
          quote_keys: true,
        };
        var stats = {
          indent: {},
          newline: {},
          quote: {},
        };
        for (var i = 0; i < input.length; i++) {
          if (input[i].type === "newline") {
            if (input[i + 1] && input[i + 1].type === "whitespace") {
              if (input[i + 1].raw[0] === "	") {
                stats.indent["	"] = (stats.indent["	"] || 0) + 1;
              }
              if (input[i + 1].raw.match(/^\x20+$/)) {
                var ws_len = input[i + 1].raw.length;
                var indent_len = input[i + 1].stack.length + 1;
                if (ws_len % indent_len === 0) {
                  var t = Array(ws_len / indent_len + 1).join(" ");
                  stats.indent[t] = (stats.indent[t] || 0) + 1;
                }
              }
            }
            stats.newline[input[i].raw] =
              (stats.newline[input[i].raw] || 0) + 1;
          }
          if (input[i].type === "newline") {
            result.has_newlines = true;
          }
          if (input[i].type === "whitespace") {
            result.has_whitespace = true;
          }
          if (input[i].type === "comment") {
            result.has_comments = true;
          }
          if (input[i].type === "key") {
            if (input[i].raw[0] !== '"' && input[i].raw[0] !== "'")
              result.quote_keys = false;
          }
          if (input[i].type === "key" || input[i].type === "literal") {
            if (input[i].raw[0] === '"' || input[i].raw[0] === "'") {
              stats.quote[input[i].raw[0]] =
                (stats.quote[input[i].raw[0]] || 0) + 1;
            }
          }
          if (input[i].type === "separator" && input[i].raw === ",") {
            for (var j = i + 1; j < input.length; j++) {
              if (input[j].type === "literal" || input[j].type === "key") break;
              if (input[j].type === "separator")
                result.has_trailing_comma = true;
            }
          }
        }
        for (var k in stats) {
          if (Object.keys(stats[k]).length) {
            result[k] = Object.keys(stats[k]).reduce(function (a, b) {
              return stats[k][a] > stats[k][b] ? a : b;
            });
          }
        }
        return result;
      }, "analyzeJSON");
    },
  });

  // node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/document.js
  var require_document = __commonJS({
    "node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/document.js"(
      exports,
      module,
    ) {
      var assert = __require("assert");
      var tokenize = require_parse4().tokenize;
      var stringify2 = require_stringify2().stringify;
      var analyze = require_analyze().analyze;
      function isObject(x) {
        return typeof x === "object" && x !== null;
      }
      __name(isObject, "isObject");
      function value_to_tokenlist(value, stack, options, is_key, indent) {
        options = Object.create(options);
        options._stringify_key = !!is_key;
        if (indent) {
          options._prefix = indent.prefix
            .map(function (x) {
              return x.raw;
            })
            .join("");
        }
        if (options._splitMin == null) options._splitMin = 0;
        if (options._splitMax == null) options._splitMax = 0;
        var stringified = stringify2(value, options);
        if (is_key) {
          return [{ raw: stringified, type: "key", stack, value }];
        }
        options._addstack = stack;
        var result = tokenize(stringified, {
          _addstack: stack,
        });
        result.data = null;
        return result;
      }
      __name(value_to_tokenlist, "value_to_tokenlist");
      function arg_to_path(path4) {
        if (typeof path4 === "number") path4 = String(path4);
        if (path4 === "") path4 = [];
        if (typeof path4 === "string") path4 = path4.split(".");
        if (!Array.isArray(path4))
          throw Error("Invalid path type, string or array expected");
        return path4;
      }
      __name(arg_to_path, "arg_to_path");
      function find_element_in_tokenlist(element, lvl, tokens, begin, end) {
        while (tokens[begin].stack[lvl] != element) {
          if (begin++ >= end) return false;
        }
        while (tokens[end].stack[lvl] != element) {
          if (end-- < begin) return false;
        }
        return [begin, end];
      }
      __name(find_element_in_tokenlist, "find_element_in_tokenlist");
      function is_whitespace(token_type) {
        return (
          token_type === "whitespace" ||
          token_type === "newline" ||
          token_type === "comment"
        );
      }
      __name(is_whitespace, "is_whitespace");
      function find_first_non_ws_token(tokens, begin, end) {
        while (is_whitespace(tokens[begin].type)) {
          if (begin++ >= end) return false;
        }
        return begin;
      }
      __name(find_first_non_ws_token, "find_first_non_ws_token");
      function find_last_non_ws_token(tokens, begin, end) {
        while (is_whitespace(tokens[end].type)) {
          if (end-- < begin) return false;
        }
        return end;
      }
      __name(find_last_non_ws_token, "find_last_non_ws_token");
      function detect_indent_style(tokens, is_array, begin, end, level) {
        var result = {
          sep1: [],
          sep2: [],
          suffix: [],
          prefix: [],
          newline: [],
        };
        if (
          tokens[end].type === "separator" &&
          tokens[end].stack.length !== level + 1 &&
          tokens[end].raw !== ","
        ) {
          return result;
        }
        if (tokens[end].type === "separator")
          end = find_last_non_ws_token(tokens, begin, end - 1);
        if (end === false) return result;
        while (tokens[end].stack.length > level) end--;
        if (!is_array) {
          while (is_whitespace(tokens[end].type)) {
            if (end < begin) return result;
            if (tokens[end].type === "whitespace") {
              result.sep2.unshift(tokens[end]);
            } else {
              return result;
            }
            end--;
          }
          assert.equal(tokens[end].type, "separator");
          assert.equal(tokens[end].raw, ":");
          while (is_whitespace(tokens[--end].type)) {
            if (end < begin) return result;
            if (tokens[end].type === "whitespace") {
              result.sep1.unshift(tokens[end]);
            } else {
              return result;
            }
          }
          assert.equal(tokens[end].type, "key");
          end--;
        }
        while (is_whitespace(tokens[end].type)) {
          if (end < begin) return result;
          if (tokens[end].type === "whitespace") {
            result.prefix.unshift(tokens[end]);
          } else if (tokens[end].type === "newline") {
            result.newline.unshift(tokens[end]);
            return result;
          } else {
            return result;
          }
          end--;
        }
        return result;
      }
      __name(detect_indent_style, "detect_indent_style");
      function Document(text4, options) {
        var self2 = Object.create(Document.prototype);
        if (options == null) options = {};
        var tokens = (self2._tokens = tokenize(text4, options));
        self2._data = tokens.data;
        tokens.data = null;
        self2._options = options;
        var stats = analyze(text4, options);
        if (options.indent == null) {
          options.indent = stats.indent;
        }
        if (options.quote == null) {
          options.quote = stats.quote;
        }
        if (options.quote_keys == null) {
          options.quote_keys = stats.quote_keys;
        }
        if (options.no_trailing_comma == null) {
          options.no_trailing_comma = !stats.has_trailing_comma;
        }
        return self2;
      }
      __name(Document, "Document");
      function check_if_can_be_placed(key, object, is_unset) {
        function error(add) {
          return Error(
            "You can't " +
              (is_unset ? "unset" : "set") +
              " key '" +
              key +
              "'" +
              add,
          );
        }
        __name(error, "error");
        if (!isObject(object)) {
          throw error(" of an non-object");
        }
        if (Array.isArray(object)) {
          if (String(key).match(/^\d+$/)) {
            key = Number(String(key));
            if (object.length < key || (is_unset && object.length === key)) {
              throw error(", out of bounds");
            } else if (is_unset && object.length !== key + 1) {
              throw error(" in the middle of an array");
            } else {
              return true;
            }
          } else {
            throw error(" of an array");
          }
        } else {
          return true;
        }
      }
      __name(check_if_can_be_placed, "check_if_can_be_placed");
      Document.prototype.set = function (path4, value) {
        path4 = arg_to_path(path4);
        if (path4.length === 0) {
          if (value === void 0) throw Error("can't remove root document");
          this._data = value;
          var new_key = false;
        } else {
          var data = this._data;
          for (var i = 0; i < path4.length - 1; i++) {
            check_if_can_be_placed(path4[i], data, false);
            data = data[path4[i]];
          }
          if (i === path4.length - 1) {
            check_if_can_be_placed(path4[i], data, value === void 0);
          }
          var new_key = !(path4[i] in data);
          if (value === void 0) {
            if (Array.isArray(data)) {
              data.pop();
            } else {
              delete data[path4[i]];
            }
          } else {
            data[path4[i]] = value;
          }
        }
        if (!this._tokens.length)
          this._tokens = [
            { raw: "", type: "literal", stack: [], value: void 0 },
          ];
        var position2 = [
          find_first_non_ws_token(this._tokens, 0, this._tokens.length - 1),
          find_last_non_ws_token(this._tokens, 0, this._tokens.length - 1),
        ];
        for (var i = 0; i < path4.length - 1; i++) {
          position2 = find_element_in_tokenlist(
            path4[i],
            i,
            this._tokens,
            position2[0],
            position2[1],
          );
          if (position2 == false)
            throw Error("internal error, please report this");
        }
        if (path4.length === 0) {
          var newtokens = value_to_tokenlist(value, path4, this._options);
        } else if (!new_key) {
          var pos_old = position2;
          position2 = find_element_in_tokenlist(
            path4[i],
            i,
            this._tokens,
            position2[0],
            position2[1],
          );
          if (value === void 0 && position2 !== false) {
            var newtokens = [];
            if (!Array.isArray(data)) {
              var pos2 = find_last_non_ws_token(
                this._tokens,
                pos_old[0],
                position2[0] - 1,
              );
              assert.equal(this._tokens[pos2].type, "separator");
              assert.equal(this._tokens[pos2].raw, ":");
              position2[0] = pos2;
              var pos2 = find_last_non_ws_token(
                this._tokens,
                pos_old[0],
                position2[0] - 1,
              );
              assert.equal(this._tokens[pos2].type, "key");
              assert.equal(this._tokens[pos2].value, path4[path4.length - 1]);
              position2[0] = pos2;
            }
            var pos2 = find_last_non_ws_token(
              this._tokens,
              pos_old[0],
              position2[0] - 1,
            );
            assert.equal(this._tokens[pos2].type, "separator");
            if (this._tokens[pos2].raw === ",") {
              position2[0] = pos2;
            } else {
              pos2 = find_first_non_ws_token(
                this._tokens,
                position2[1] + 1,
                pos_old[1],
              );
              assert.equal(this._tokens[pos2].type, "separator");
              if (this._tokens[pos2].raw === ",") {
                position2[1] = pos2;
              }
            }
          } else {
            var indent =
              pos2 !== false
                ? detect_indent_style(
                    this._tokens,
                    Array.isArray(data),
                    pos_old[0],
                    position2[1] - 1,
                    i,
                  )
                : {};
            var newtokens = value_to_tokenlist(
              value,
              path4,
              this._options,
              false,
              indent,
            );
          }
        } else {
          var path_1 = path4.slice(0, i);
          var pos2 = find_last_non_ws_token(
            this._tokens,
            position2[0] + 1,
            position2[1] - 1,
          );
          assert(pos2 !== false);
          var indent =
            pos2 !== false
              ? detect_indent_style(
                  this._tokens,
                  Array.isArray(data),
                  position2[0] + 1,
                  pos2,
                  i,
                )
              : {};
          var newtokens = value_to_tokenlist(
            value,
            path4,
            this._options,
            false,
            indent,
          );
          var prefix2 = [];
          if (indent.newline && indent.newline.length)
            prefix2 = prefix2.concat(indent.newline);
          if (indent.prefix && indent.prefix.length)
            prefix2 = prefix2.concat(indent.prefix);
          if (!Array.isArray(data)) {
            prefix2 = prefix2.concat(
              value_to_tokenlist(
                path4[path4.length - 1],
                path_1,
                this._options,
                true,
              ),
            );
            if (indent.sep1 && indent.sep1.length)
              prefix2 = prefix2.concat(indent.sep1);
            prefix2.push({ raw: ":", type: "separator", stack: path_1 });
            if (indent.sep2 && indent.sep2.length)
              prefix2 = prefix2.concat(indent.sep2);
          }
          newtokens.unshift.apply(newtokens, prefix2);
          if (
            this._tokens[pos2].type === "separator" &&
            this._tokens[pos2].stack.length === path4.length - 1
          ) {
            if (this._tokens[pos2].raw === ",") {
              newtokens.push({ raw: ",", type: "separator", stack: path_1 });
            }
          } else {
            newtokens.unshift({ raw: ",", type: "separator", stack: path_1 });
          }
          if (indent.suffix && indent.suffix.length)
            newtokens.push.apply(newtokens, indent.suffix);
          assert.equal(this._tokens[position2[1]].type, "separator");
          position2[0] = pos2 + 1;
          position2[1] = pos2;
        }
        newtokens.unshift(position2[1] - position2[0] + 1);
        newtokens.unshift(position2[0]);
        this._tokens.splice.apply(this._tokens, newtokens);
        return this;
      };
      Document.prototype.unset = function (path4) {
        return this.set(path4, void 0);
      };
      Document.prototype.get = function (path4) {
        path4 = arg_to_path(path4);
        var data = this._data;
        for (var i = 0; i < path4.length; i++) {
          if (!isObject(data)) return void 0;
          data = data[path4[i]];
        }
        return data;
      };
      Document.prototype.has = function (path4) {
        path4 = arg_to_path(path4);
        var data = this._data;
        for (var i = 0; i < path4.length; i++) {
          if (!isObject(data)) return false;
          data = data[path4[i]];
        }
        return data !== void 0;
      };
      Document.prototype.update = function (value) {
        var self2 = this;
        change([], self2._data, value);
        return self2;
        function change(path4, old_data, new_data) {
          if (!isObject(new_data) || !isObject(old_data)) {
            if (new_data !== old_data) self2.set(path4, new_data);
          } else if (Array.isArray(new_data) != Array.isArray(old_data)) {
            self2.set(path4, new_data);
          } else if (Array.isArray(new_data)) {
            if (new_data.length > old_data.length) {
              for (var i = 0; i < new_data.length; i++) {
                path4.push(String(i));
                change(path4, old_data[i], new_data[i]);
                path4.pop();
              }
            } else {
              for (var i = old_data.length - 1; i >= 0; i--) {
                path4.push(String(i));
                change(path4, old_data[i], new_data[i]);
                path4.pop();
              }
            }
          } else {
            for (var i in new_data) {
              path4.push(String(i));
              change(path4, old_data[i], new_data[i]);
              path4.pop();
            }
            for (var i in old_data) {
              if (i in new_data) continue;
              path4.push(String(i));
              change(path4, old_data[i], new_data[i]);
              path4.pop();
            }
          }
        }
        __name(change, "change");
      };
      Document.prototype.toString = function () {
        return this._tokens
          .map(function (x) {
            return x.raw;
          })
          .join("");
      };
      module.exports.Document = Document;
      module.exports.update = /* @__PURE__ */ __name(function updateJSON(
        source,
        new_value,
        options,
      ) {
        return Document(source, options).update(new_value).toString();
      }, "updateJSON");
    },
  });

  // node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/utils.js
  var require_utils11 = __commonJS({
    "node_modules/.pnpm/jju@1.4.0/node_modules/jju/lib/utils.js"(
      exports,
      module,
    ) {
      var FS = __require("fs");
      var jju = require_jju();
      module.exports.register = function () {
        var r = __require,
          e = "extensions";
        r[e][".json5"] = function (m, f) {
          m.exports = jju.parse(FS.readFileSync(f, "utf8"));
        };
      };
      module.exports.patch_JSON_parse = function () {
        var _parse = JSON.parse;
        JSON.parse = function (text4, rev) {
          try {
            return _parse(text4, rev);
          } catch (err) {
            require_jju().parse(text4, {
              mode: "json",
              legacy: true,
              reviver: rev,
              reserved_keys: "replace",
              null_prototype: false,
            });
            throw err;
          }
        };
      };
      module.exports.middleware = function () {
        return function (req, res, next) {
          throw Error("this function is removed, use express-json5 instead");
        };
      };
    },
  });

  // node_modules/.pnpm/jju@1.4.0/node_modules/jju/index.js
  var require_jju = __commonJS({
    "node_modules/.pnpm/jju@1.4.0/node_modules/jju/index.js"(exports, module) {
      module.exports.__defineGetter__("parse", function () {
        return require_parse4().parse;
      });
      module.exports.__defineGetter__("stringify", function () {
        return require_stringify2().stringify;
      });
      module.exports.__defineGetter__("tokenize", function () {
        return require_parse4().tokenize;
      });
      module.exports.__defineGetter__("update", function () {
        return require_document().update;
      });
      module.exports.__defineGetter__("analyze", function () {
        return require_analyze().analyze;
      });
      module.exports.__defineGetter__("utils", function () {
        return require_utils11();
      });
    },
  });

  // node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.prod.js
  var require_manypkg_tools_cjs_prod = __commonJS({
    "node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.prod.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path4 = __require("path");
      var fsp = __require("fs/promises");
      var glob = require_out4();
      var fs6 = __require("fs");
      var yaml2 = require_js_yaml();
      var jju = require_jju();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { default: e };
      }
      __name(_interopDefault, "_interopDefault");
      var path__default = /* @__PURE__ */ _interopDefault(path4);
      var fsp__default = /* @__PURE__ */ _interopDefault(fsp);
      var glob__default = /* @__PURE__ */ _interopDefault(glob);
      var fs__default2 = /* @__PURE__ */ _interopDefault(fs6);
      var yaml__default = /* @__PURE__ */ _interopDefault(yaml2);
      var jju__default = /* @__PURE__ */ _interopDefault(jju);
      var InvalidMonorepoError = class extends Error {
        static {
          __name(this, "InvalidMonorepoError");
        }
      };
      var readJson2 = /* @__PURE__ */ __name(
        async (directory, file) =>
          JSON.parse(
            await fsp__default["default"].readFile(
              path__default["default"].join(directory, file),
              "utf-8",
            ),
          ),
        "readJson",
      );
      var readJsonSync = /* @__PURE__ */ __name(
        (directory, file) =>
          JSON.parse(
            fs__default2["default"].readFileSync(
              path__default["default"].join(directory, file),
              "utf-8",
            ),
          ),
        "readJsonSync",
      );
      async function expandPackageGlobs(packageGlobs, directory) {
        const relativeDirectories = await glob__default["default"](
          packageGlobs,
          {
            cwd: directory,
            onlyDirectories: true,
            ignore: ["**/node_modules"],
          },
        );
        const directories = relativeDirectories
          .map((p) => path__default["default"].resolve(directory, p))
          .sort();
        const discoveredPackages = await Promise.all(
          directories.map((dir) =>
            fsp__default["default"]
              .readFile(
                path__default["default"].join(dir, "package.json"),
                "utf-8",
              )
              .catch((err) => {
                if (err && err.code === "ENOENT") {
                  return void 0;
                }
                throw err;
              })
              .then((result) => {
                if (result) {
                  return {
                    dir: path__default["default"].resolve(dir),
                    relativeDir: path__default["default"].relative(
                      directory,
                      dir,
                    ),
                    packageJson: JSON.parse(result),
                  };
                }
              }),
          ),
        );
        return discoveredPackages.filter((pkg) => pkg);
      }
      __name(expandPackageGlobs, "expandPackageGlobs");
      function expandPackageGlobsSync(packageGlobs, directory) {
        const relativeDirectories = glob__default["default"].sync(
          packageGlobs,
          {
            cwd: directory,
            onlyDirectories: true,
            ignore: ["**/node_modules"],
          },
        );
        const directories = relativeDirectories
          .map((p) => path__default["default"].resolve(directory, p))
          .sort();
        const discoveredPackages = directories.map((dir) => {
          try {
            const packageJson = readJsonSync(dir, "package.json");
            return {
              dir: path__default["default"].resolve(dir),
              relativeDir: path__default["default"].relative(directory, dir),
              packageJson,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return void 0;
            }
            throw err;
          }
        });
        return discoveredPackages.filter((pkg) => pkg);
      }
      __name(expandPackageGlobsSync, "expandPackageGlobsSync");
      var BoltTool = {
        type: "bolt",
        async isMonorepoRoot(directory) {
          try {
            const pkgJson = await readJson2(directory, "package.json");
            if (pkgJson.bolt && pkgJson.bolt.workspaces) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        isMonorepoRootSync(directory) {
          try {
            const pkgJson = readJsonSync(directory, "package.json");
            if (pkgJson.bolt && pkgJson.bolt.workspaces) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = await readJson2(rootDir, "package.json");
            if (!pkgJson.bolt || !pkgJson.bolt.workspaces) {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing bolt.workspaces entry`,
              );
            }
            const packageGlobs = pkgJson.bolt.workspaces;
            return {
              tool: BoltTool,
              packages: await expandPackageGlobs(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing package.json`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = readJsonSync(rootDir, "package.json");
            if (!pkgJson.bolt || !pkgJson.bolt.workspaces) {
              throw new InvalidMonorepoError(
                `Directory ${directory} is not a valid ${BoltTool.type} monorepo root: missing bolt.workspaces entry`,
              );
            }
            const packageGlobs = pkgJson.bolt.workspaces;
            return {
              tool: BoltTool,
              packages: expandPackageGlobsSync(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing package.json`,
              );
            }
            throw err;
          }
        },
      };
      var LernaTool = {
        type: "lerna",
        async isMonorepoRoot(directory) {
          try {
            const lernaJson = await readJson2(directory, "lerna.json");
            if (lernaJson.useWorkspaces !== true) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        isMonorepoRootSync(directory) {
          try {
            const lernaJson = readJsonSync(directory, "lerna.json");
            if (lernaJson.useWorkspaces !== true) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const lernaJson = await readJson2(rootDir, "lerna.json");
            const pkgJson = await readJson2(rootDir, "package.json");
            const packageGlobs = lernaJson.packages || ["packages/*"];
            return {
              tool: LernaTool,
              packages: await expandPackageGlobs(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${LernaTool.type} monorepo root: missing lerna.json and/or package.json`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const lernaJson = readJsonSync(rootDir, "lerna.json");
            const pkgJson = readJsonSync(rootDir, "package.json");
            const packageGlobs = lernaJson.packages || ["packages/*"];
            return {
              tool: LernaTool,
              packages: expandPackageGlobsSync(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${LernaTool.type} monorepo root: missing lerna.json and/or package.json`,
              );
            }
            throw err;
          }
        },
      };
      async function readYamlFile(path5) {
        return fsp__default["default"]
          .readFile(path5, "utf8")
          .then((data) => yaml__default["default"].load(data));
      }
      __name(readYamlFile, "readYamlFile");
      function readYamlFileSync(path5) {
        return yaml__default["default"].load(
          fs__default2["default"].readFileSync(path5, "utf8"),
        );
      }
      __name(readYamlFileSync, "readYamlFileSync");
      var PnpmTool = {
        type: "pnpm",
        async isMonorepoRoot(directory) {
          try {
            const manifest = await readYamlFile(
              path__default["default"].join(directory, "pnpm-workspace.yaml"),
            );
            if (manifest.packages) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        isMonorepoRootSync(directory) {
          try {
            const manifest = readYamlFileSync(
              path__default["default"].join(directory, "pnpm-workspace.yaml"),
            );
            if (manifest.packages) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const manifest = await readYamlFile(
              path__default["default"].join(rootDir, "pnpm-workspace.yaml"),
            );
            const pkgJson = await readJson2(rootDir, "package.json");
            const packageGlobs = manifest.packages;
            return {
              tool: PnpmTool,
              packages: await expandPackageGlobs(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${PnpmTool.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const manifest = readYamlFileSync(
              path__default["default"].join(rootDir, "pnpm-workspace.yaml"),
            );
            const pkgJson = readJsonSync(rootDir, "package.json");
            const packageGlobs = manifest.packages;
            return {
              tool: PnpmTool,
              packages: expandPackageGlobsSync(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${PnpmTool.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`,
              );
            }
            throw err;
          }
        },
      };
      var RootTool = {
        type: "root",
        async isMonorepoRoot(directory) {
          return false;
        },
        isMonorepoRootSync(directory) {
          return false;
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = await readJson2(rootDir, "package.json");
            const pkg = {
              dir: rootDir,
              relativeDir: ".",
              packageJson: pkgJson,
            };
            return {
              tool: RootTool,
              packages: [pkg],
              rootPackage: pkg,
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${RootTool.type} monorepo root`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = readJsonSync(rootDir, "package.json");
            const pkg = {
              dir: rootDir,
              relativeDir: ".",
              packageJson: pkgJson,
            };
            return {
              tool: RootTool,
              packages: [pkg],
              rootPackage: pkg,
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${RootTool.type} monorepo root`,
              );
            }
            throw err;
          }
        },
      };
      var RushTool = {
        type: "rush",
        async isMonorepoRoot(directory) {
          try {
            await fsp__default["default"].readFile(
              path__default["default"].join(directory, "rush.json"),
              "utf8",
            );
            return true;
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
        },
        isMonorepoRootSync(directory) {
          try {
            fs__default2["default"].readFileSync(
              path__default["default"].join(directory, "rush.json"),
              "utf8",
            );
            return true;
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const rushText = await fsp__default["default"].readFile(
              path__default["default"].join(rootDir, "rush.json"),
              "utf8",
            );
            const rushJson = jju__default["default"].parse(rushText);
            const directories = rushJson.projects.map((project) =>
              path__default["default"].resolve(rootDir, project.projectFolder),
            );
            const packages = await Promise.all(
              directories.map(async (dir) => {
                return {
                  dir,
                  relativeDir: path__default["default"].relative(
                    directory,
                    dir,
                  ),
                  packageJson: await readJson2(dir, "package.json"),
                };
              }),
            );
            return {
              tool: RushTool,
              packages,
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${RushTool.type} monorepo root: missing rush.json`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const rushText = fs__default2["default"].readFileSync(
              path__default["default"].join(rootDir, "rush.json"),
              "utf8",
            );
            const rushJson = jju__default["default"].parse(rushText);
            const directories = rushJson.projects.map((project) =>
              path__default["default"].resolve(rootDir, project.projectFolder),
            );
            const packages = directories.map((dir) => {
              const packageJson = readJsonSync(dir, "package.json");
              return {
                dir,
                relativeDir: path__default["default"].relative(directory, dir),
                packageJson,
              };
            });
            return {
              tool: RushTool,
              packages,
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${RushTool.type} monorepo root: missing rush.json`,
              );
            }
            throw err;
          }
        },
      };
      var YarnTool = {
        type: "yarn",
        async isMonorepoRoot(directory) {
          try {
            const pkgJson = await readJson2(directory, "package.json");
            if (pkgJson.workspaces) {
              if (
                Array.isArray(pkgJson.workspaces) ||
                Array.isArray(pkgJson.workspaces.packages)
              ) {
                return true;
              }
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        isMonorepoRootSync(directory) {
          try {
            const pkgJson = readJsonSync(directory, "package.json");
            if (pkgJson.workspaces) {
              if (
                Array.isArray(pkgJson.workspaces) ||
                Array.isArray(pkgJson.workspaces.packages)
              ) {
                return true;
              }
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = await readJson2(rootDir, "package.json");
            const packageGlobs = Array.isArray(pkgJson.workspaces)
              ? pkgJson.workspaces
              : pkgJson.workspaces.packages;
            return {
              tool: YarnTool,
              packages: await expandPackageGlobs(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${YarnTool.type} monorepo root`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = readJsonSync(rootDir, "package.json");
            const packageGlobs = Array.isArray(pkgJson.workspaces)
              ? pkgJson.workspaces
              : pkgJson.workspaces.packages;
            return {
              tool: YarnTool,
              packages: expandPackageGlobsSync(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${YarnTool.type} monorepo root`,
              );
            }
            throw err;
          }
        },
      };
      exports.BoltTool = BoltTool;
      exports.InvalidMonorepoError = InvalidMonorepoError;
      exports.LernaTool = LernaTool;
      exports.PnpmTool = PnpmTool;
      exports.RootTool = RootTool;
      exports.RushTool = RushTool;
      exports.YarnTool = YarnTool;
    },
  });

  // node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.dev.js
  var require_manypkg_tools_cjs_dev = __commonJS({
    "node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.dev.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path4 = __require("path");
      var fsp = __require("fs/promises");
      var glob = require_out4();
      var fs6 = __require("fs");
      var yaml2 = require_js_yaml();
      var jju = require_jju();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { default: e };
      }
      __name(_interopDefault, "_interopDefault");
      var path__default = /* @__PURE__ */ _interopDefault(path4);
      var fsp__default = /* @__PURE__ */ _interopDefault(fsp);
      var glob__default = /* @__PURE__ */ _interopDefault(glob);
      var fs__default2 = /* @__PURE__ */ _interopDefault(fs6);
      var yaml__default = /* @__PURE__ */ _interopDefault(yaml2);
      var jju__default = /* @__PURE__ */ _interopDefault(jju);
      var InvalidMonorepoError = class extends Error {
        static {
          __name(this, "InvalidMonorepoError");
        }
      };
      var readJson2 = /* @__PURE__ */ __name(
        async (directory, file) =>
          JSON.parse(
            await fsp__default["default"].readFile(
              path__default["default"].join(directory, file),
              "utf-8",
            ),
          ),
        "readJson",
      );
      var readJsonSync = /* @__PURE__ */ __name(
        (directory, file) =>
          JSON.parse(
            fs__default2["default"].readFileSync(
              path__default["default"].join(directory, file),
              "utf-8",
            ),
          ),
        "readJsonSync",
      );
      async function expandPackageGlobs(packageGlobs, directory) {
        const relativeDirectories = await glob__default["default"](
          packageGlobs,
          {
            cwd: directory,
            onlyDirectories: true,
            ignore: ["**/node_modules"],
          },
        );
        const directories = relativeDirectories
          .map((p) => path__default["default"].resolve(directory, p))
          .sort();
        const discoveredPackages = await Promise.all(
          directories.map((dir) =>
            fsp__default["default"]
              .readFile(
                path__default["default"].join(dir, "package.json"),
                "utf-8",
              )
              .catch((err) => {
                if (err && err.code === "ENOENT") {
                  return void 0;
                }
                throw err;
              })
              .then((result) => {
                if (result) {
                  return {
                    dir: path__default["default"].resolve(dir),
                    relativeDir: path__default["default"].relative(
                      directory,
                      dir,
                    ),
                    packageJson: JSON.parse(result),
                  };
                }
              }),
          ),
        );
        return discoveredPackages.filter((pkg) => pkg);
      }
      __name(expandPackageGlobs, "expandPackageGlobs");
      function expandPackageGlobsSync(packageGlobs, directory) {
        const relativeDirectories = glob__default["default"].sync(
          packageGlobs,
          {
            cwd: directory,
            onlyDirectories: true,
            ignore: ["**/node_modules"],
          },
        );
        const directories = relativeDirectories
          .map((p) => path__default["default"].resolve(directory, p))
          .sort();
        const discoveredPackages = directories.map((dir) => {
          try {
            const packageJson = readJsonSync(dir, "package.json");
            return {
              dir: path__default["default"].resolve(dir),
              relativeDir: path__default["default"].relative(directory, dir),
              packageJson,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return void 0;
            }
            throw err;
          }
        });
        return discoveredPackages.filter((pkg) => pkg);
      }
      __name(expandPackageGlobsSync, "expandPackageGlobsSync");
      var BoltTool = {
        type: "bolt",
        async isMonorepoRoot(directory) {
          try {
            const pkgJson = await readJson2(directory, "package.json");
            if (pkgJson.bolt && pkgJson.bolt.workspaces) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        isMonorepoRootSync(directory) {
          try {
            const pkgJson = readJsonSync(directory, "package.json");
            if (pkgJson.bolt && pkgJson.bolt.workspaces) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = await readJson2(rootDir, "package.json");
            if (!pkgJson.bolt || !pkgJson.bolt.workspaces) {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing bolt.workspaces entry`,
              );
            }
            const packageGlobs = pkgJson.bolt.workspaces;
            return {
              tool: BoltTool,
              packages: await expandPackageGlobs(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing package.json`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = readJsonSync(rootDir, "package.json");
            if (!pkgJson.bolt || !pkgJson.bolt.workspaces) {
              throw new InvalidMonorepoError(
                `Directory ${directory} is not a valid ${BoltTool.type} monorepo root: missing bolt.workspaces entry`,
              );
            }
            const packageGlobs = pkgJson.bolt.workspaces;
            return {
              tool: BoltTool,
              packages: expandPackageGlobsSync(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${BoltTool.type} monorepo root: missing package.json`,
              );
            }
            throw err;
          }
        },
      };
      var LernaTool = {
        type: "lerna",
        async isMonorepoRoot(directory) {
          try {
            const lernaJson = await readJson2(directory, "lerna.json");
            if (lernaJson.useWorkspaces !== true) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        isMonorepoRootSync(directory) {
          try {
            const lernaJson = readJsonSync(directory, "lerna.json");
            if (lernaJson.useWorkspaces !== true) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const lernaJson = await readJson2(rootDir, "lerna.json");
            const pkgJson = await readJson2(rootDir, "package.json");
            const packageGlobs = lernaJson.packages || ["packages/*"];
            return {
              tool: LernaTool,
              packages: await expandPackageGlobs(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${LernaTool.type} monorepo root: missing lerna.json and/or package.json`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const lernaJson = readJsonSync(rootDir, "lerna.json");
            const pkgJson = readJsonSync(rootDir, "package.json");
            const packageGlobs = lernaJson.packages || ["packages/*"];
            return {
              tool: LernaTool,
              packages: expandPackageGlobsSync(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${LernaTool.type} monorepo root: missing lerna.json and/or package.json`,
              );
            }
            throw err;
          }
        },
      };
      async function readYamlFile(path5) {
        return fsp__default["default"]
          .readFile(path5, "utf8")
          .then((data) => yaml__default["default"].load(data));
      }
      __name(readYamlFile, "readYamlFile");
      function readYamlFileSync(path5) {
        return yaml__default["default"].load(
          fs__default2["default"].readFileSync(path5, "utf8"),
        );
      }
      __name(readYamlFileSync, "readYamlFileSync");
      var PnpmTool = {
        type: "pnpm",
        async isMonorepoRoot(directory) {
          try {
            const manifest = await readYamlFile(
              path__default["default"].join(directory, "pnpm-workspace.yaml"),
            );
            if (manifest.packages) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        isMonorepoRootSync(directory) {
          try {
            const manifest = readYamlFileSync(
              path__default["default"].join(directory, "pnpm-workspace.yaml"),
            );
            if (manifest.packages) {
              return true;
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const manifest = await readYamlFile(
              path__default["default"].join(rootDir, "pnpm-workspace.yaml"),
            );
            const pkgJson = await readJson2(rootDir, "package.json");
            const packageGlobs = manifest.packages;
            return {
              tool: PnpmTool,
              packages: await expandPackageGlobs(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${PnpmTool.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const manifest = readYamlFileSync(
              path__default["default"].join(rootDir, "pnpm-workspace.yaml"),
            );
            const pkgJson = readJsonSync(rootDir, "package.json");
            const packageGlobs = manifest.packages;
            return {
              tool: PnpmTool,
              packages: expandPackageGlobsSync(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${PnpmTool.type} monorepo root: missing pnpm-workspace.yaml and/or package.json`,
              );
            }
            throw err;
          }
        },
      };
      var RootTool = {
        type: "root",
        async isMonorepoRoot(directory) {
          return false;
        },
        isMonorepoRootSync(directory) {
          return false;
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = await readJson2(rootDir, "package.json");
            const pkg = {
              dir: rootDir,
              relativeDir: ".",
              packageJson: pkgJson,
            };
            return {
              tool: RootTool,
              packages: [pkg],
              rootPackage: pkg,
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${RootTool.type} monorepo root`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = readJsonSync(rootDir, "package.json");
            const pkg = {
              dir: rootDir,
              relativeDir: ".",
              packageJson: pkgJson,
            };
            return {
              tool: RootTool,
              packages: [pkg],
              rootPackage: pkg,
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${RootTool.type} monorepo root`,
              );
            }
            throw err;
          }
        },
      };
      var RushTool = {
        type: "rush",
        async isMonorepoRoot(directory) {
          try {
            await fsp__default["default"].readFile(
              path__default["default"].join(directory, "rush.json"),
              "utf8",
            );
            return true;
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
        },
        isMonorepoRootSync(directory) {
          try {
            fs__default2["default"].readFileSync(
              path__default["default"].join(directory, "rush.json"),
              "utf8",
            );
            return true;
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const rushText = await fsp__default["default"].readFile(
              path__default["default"].join(rootDir, "rush.json"),
              "utf8",
            );
            const rushJson = jju__default["default"].parse(rushText);
            const directories = rushJson.projects.map((project) =>
              path__default["default"].resolve(rootDir, project.projectFolder),
            );
            const packages = await Promise.all(
              directories.map(async (dir) => {
                return {
                  dir,
                  relativeDir: path__default["default"].relative(
                    directory,
                    dir,
                  ),
                  packageJson: await readJson2(dir, "package.json"),
                };
              }),
            );
            return {
              tool: RushTool,
              packages,
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${RushTool.type} monorepo root: missing rush.json`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const rushText = fs__default2["default"].readFileSync(
              path__default["default"].join(rootDir, "rush.json"),
              "utf8",
            );
            const rushJson = jju__default["default"].parse(rushText);
            const directories = rushJson.projects.map((project) =>
              path__default["default"].resolve(rootDir, project.projectFolder),
            );
            const packages = directories.map((dir) => {
              const packageJson = readJsonSync(dir, "package.json");
              return {
                dir,
                relativeDir: path__default["default"].relative(directory, dir),
                packageJson,
              };
            });
            return {
              tool: RushTool,
              packages,
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${RushTool.type} monorepo root: missing rush.json`,
              );
            }
            throw err;
          }
        },
      };
      var YarnTool = {
        type: "yarn",
        async isMonorepoRoot(directory) {
          try {
            const pkgJson = await readJson2(directory, "package.json");
            if (pkgJson.workspaces) {
              if (
                Array.isArray(pkgJson.workspaces) ||
                Array.isArray(pkgJson.workspaces.packages)
              ) {
                return true;
              }
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        isMonorepoRootSync(directory) {
          try {
            const pkgJson = readJsonSync(directory, "package.json");
            if (pkgJson.workspaces) {
              if (
                Array.isArray(pkgJson.workspaces) ||
                Array.isArray(pkgJson.workspaces.packages)
              ) {
                return true;
              }
            }
          } catch (err) {
            if (err && err.code === "ENOENT") {
              return false;
            }
            throw err;
          }
          return false;
        },
        async getPackages(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = await readJson2(rootDir, "package.json");
            const packageGlobs = Array.isArray(pkgJson.workspaces)
              ? pkgJson.workspaces
              : pkgJson.workspaces.packages;
            return {
              tool: YarnTool,
              packages: await expandPackageGlobs(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${YarnTool.type} monorepo root`,
              );
            }
            throw err;
          }
        },
        getPackagesSync(directory) {
          const rootDir = path__default["default"].resolve(directory);
          try {
            const pkgJson = readJsonSync(rootDir, "package.json");
            const packageGlobs = Array.isArray(pkgJson.workspaces)
              ? pkgJson.workspaces
              : pkgJson.workspaces.packages;
            return {
              tool: YarnTool,
              packages: expandPackageGlobsSync(packageGlobs, rootDir),
              rootPackage: {
                dir: rootDir,
                relativeDir: ".",
                packageJson: pkgJson,
              },
              rootDir,
            };
          } catch (err) {
            if (err && err.code === "ENOENT") {
              throw new InvalidMonorepoError(
                `Directory ${rootDir} is not a valid ${YarnTool.type} monorepo root`,
              );
            }
            throw err;
          }
        },
      };
      exports.BoltTool = BoltTool;
      exports.InvalidMonorepoError = InvalidMonorepoError;
      exports.LernaTool = LernaTool;
      exports.PnpmTool = PnpmTool;
      exports.RootTool = RootTool;
      exports.RushTool = RushTool;
      exports.YarnTool = YarnTool;
    },
  });

  // node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.js
  var require_manypkg_tools_cjs = __commonJS({
    "node_modules/.pnpm/@manypkg+tools@1.1.2/node_modules/@manypkg/tools/dist/manypkg-tools.cjs.js"(
      exports,
      module,
    ) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_manypkg_tools_cjs_prod();
      } else {
        module.exports = require_manypkg_tools_cjs_dev();
      }
    },
  });

  // node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.prod.js
  var require_manypkg_find_root_cjs_prod = __commonJS({
    "node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.prod.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path4 = __require("path");
      var fs6 = __require("fs");
      var fsp = __require("fs/promises");
      var tools = require_manypkg_tools_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { default: e };
      }
      __name(_interopDefault, "_interopDefault");
      var path__default = /* @__PURE__ */ _interopDefault(path4);
      var fs__default2 = /* @__PURE__ */ _interopDefault(fs6);
      var fsp__default = /* @__PURE__ */ _interopDefault(fsp);
      var DEFAULT_TOOLS = [
        tools.YarnTool,
        tools.PnpmTool,
        tools.LernaTool,
        tools.RushTool,
        tools.BoltTool,
        tools.RootTool,
      ];
      var isNoEntryError = /* @__PURE__ */ __name(
        (err) =>
          !!err &&
          typeof err === "object" &&
          "code" in err &&
          err.code === "ENOENT",
        "isNoEntryError",
      );
      var NoPkgJsonFound = class extends Error {
        static {
          __name(this, "NoPkgJsonFound");
        }
        constructor(directory) {
          super(
            `No package.json could be found upwards from directory ${directory}`,
          );
          this.directory = directory;
        }
      };
      var NoMatchingMonorepoFound = class extends Error {
        static {
          __name(this, "NoMatchingMonorepoFound");
        }
        constructor(directory) {
          super(
            `No monorepo matching the list of supported monorepos could be found upwards from directory ${directory}`,
          );
          this.directory = directory;
        }
      };
      async function findRoot(cwd, options = {}) {
        let monorepoRoot;
        const tools$1 = options.tools || DEFAULT_TOOLS;
        await findUp(async (directory) => {
          return Promise.all(
            tools$1.map(async (tool) => {
              if (await tool.isMonorepoRoot(directory)) {
                return {
                  tool,
                  rootDir: directory,
                };
              }
            }),
          )
            .then((x) => x.find((value) => value))
            .then((result) => {
              if (result) {
                monorepoRoot = result;
                return directory;
              }
            });
        }, cwd);
        if (monorepoRoot) {
          return monorepoRoot;
        }
        if (!tools$1.includes(tools.RootTool)) {
          throw new NoMatchingMonorepoFound(cwd);
        }
        let rootDir = await findUp(async (directory) => {
          try {
            await fsp__default["default"].access(
              path__default["default"].join(directory, "package.json"),
            );
            return directory;
          } catch (err) {
            if (!isNoEntryError(err)) {
              throw err;
            }
          }
        }, cwd);
        if (!rootDir) {
          throw new NoPkgJsonFound(cwd);
        }
        return {
          tool: tools.RootTool,
          rootDir,
        };
      }
      __name(findRoot, "findRoot");
      function findRootSync(cwd, options = {}) {
        let monorepoRoot;
        const tools$1 = options.tools || DEFAULT_TOOLS;
        findUpSync((directory) => {
          for (const tool of tools$1) {
            if (tool.isMonorepoRootSync(directory)) {
              monorepoRoot = {
                tool,
                rootDir: directory,
              };
              return directory;
            }
          }
        }, cwd);
        if (monorepoRoot) {
          return monorepoRoot;
        }
        if (!tools$1.includes(tools.RootTool)) {
          throw new NoMatchingMonorepoFound(cwd);
        }
        const rootDir = findUpSync((directory) => {
          const exists = fs__default2["default"].existsSync(
            path__default["default"].join(directory, "package.json"),
          );
          return exists ? directory : void 0;
        }, cwd);
        if (!rootDir) {
          throw new NoPkgJsonFound(cwd);
        }
        return {
          tool: tools.RootTool,
          rootDir,
        };
      }
      __name(findRootSync, "findRootSync");
      async function findUp(matcher, cwd) {
        let directory = path__default["default"].resolve(cwd);
        const { root: root2 } = path__default["default"].parse(directory);
        while (directory && directory !== root2) {
          const filePath = await matcher(directory);
          if (filePath) {
            return path__default["default"].resolve(directory, filePath);
          }
          directory = path__default["default"].dirname(directory);
        }
      }
      __name(findUp, "findUp");
      function findUpSync(matcher, cwd) {
        let directory = path__default["default"].resolve(cwd);
        const { root: root2 } = path__default["default"].parse(directory);
        while (directory && directory !== root2) {
          const filePath = matcher(directory);
          if (filePath) {
            return path__default["default"].resolve(directory, filePath);
          }
          directory = path__default["default"].dirname(directory);
        }
      }
      __name(findUpSync, "findUpSync");
      exports.NoMatchingMonorepoFound = NoMatchingMonorepoFound;
      exports.NoPkgJsonFound = NoPkgJsonFound;
      exports.findRoot = findRoot;
      exports.findRootSync = findRootSync;
    },
  });

  // node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.dev.js
  var require_manypkg_find_root_cjs_dev = __commonJS({
    "node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.dev.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path4 = __require("path");
      var fs6 = __require("fs");
      var fsp = __require("fs/promises");
      var tools = require_manypkg_tools_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { default: e };
      }
      __name(_interopDefault, "_interopDefault");
      var path__default = /* @__PURE__ */ _interopDefault(path4);
      var fs__default2 = /* @__PURE__ */ _interopDefault(fs6);
      var fsp__default = /* @__PURE__ */ _interopDefault(fsp);
      var DEFAULT_TOOLS = [
        tools.YarnTool,
        tools.PnpmTool,
        tools.LernaTool,
        tools.RushTool,
        tools.BoltTool,
        tools.RootTool,
      ];
      var isNoEntryError = /* @__PURE__ */ __name(
        (err) =>
          !!err &&
          typeof err === "object" &&
          "code" in err &&
          err.code === "ENOENT",
        "isNoEntryError",
      );
      var NoPkgJsonFound = class extends Error {
        static {
          __name(this, "NoPkgJsonFound");
        }
        constructor(directory) {
          super(
            `No package.json could be found upwards from directory ${directory}`,
          );
          this.directory = directory;
        }
      };
      var NoMatchingMonorepoFound = class extends Error {
        static {
          __name(this, "NoMatchingMonorepoFound");
        }
        constructor(directory) {
          super(
            `No monorepo matching the list of supported monorepos could be found upwards from directory ${directory}`,
          );
          this.directory = directory;
        }
      };
      async function findRoot(cwd, options = {}) {
        let monorepoRoot;
        const tools$1 = options.tools || DEFAULT_TOOLS;
        await findUp(async (directory) => {
          return Promise.all(
            tools$1.map(async (tool) => {
              if (await tool.isMonorepoRoot(directory)) {
                return {
                  tool,
                  rootDir: directory,
                };
              }
            }),
          )
            .then((x) => x.find((value) => value))
            .then((result) => {
              if (result) {
                monorepoRoot = result;
                return directory;
              }
            });
        }, cwd);
        if (monorepoRoot) {
          return monorepoRoot;
        }
        if (!tools$1.includes(tools.RootTool)) {
          throw new NoMatchingMonorepoFound(cwd);
        }
        let rootDir = await findUp(async (directory) => {
          try {
            await fsp__default["default"].access(
              path__default["default"].join(directory, "package.json"),
            );
            return directory;
          } catch (err) {
            if (!isNoEntryError(err)) {
              throw err;
            }
          }
        }, cwd);
        if (!rootDir) {
          throw new NoPkgJsonFound(cwd);
        }
        return {
          tool: tools.RootTool,
          rootDir,
        };
      }
      __name(findRoot, "findRoot");
      function findRootSync(cwd, options = {}) {
        let monorepoRoot;
        const tools$1 = options.tools || DEFAULT_TOOLS;
        findUpSync((directory) => {
          for (const tool of tools$1) {
            if (tool.isMonorepoRootSync(directory)) {
              monorepoRoot = {
                tool,
                rootDir: directory,
              };
              return directory;
            }
          }
        }, cwd);
        if (monorepoRoot) {
          return monorepoRoot;
        }
        if (!tools$1.includes(tools.RootTool)) {
          throw new NoMatchingMonorepoFound(cwd);
        }
        const rootDir = findUpSync((directory) => {
          const exists = fs__default2["default"].existsSync(
            path__default["default"].join(directory, "package.json"),
          );
          return exists ? directory : void 0;
        }, cwd);
        if (!rootDir) {
          throw new NoPkgJsonFound(cwd);
        }
        return {
          tool: tools.RootTool,
          rootDir,
        };
      }
      __name(findRootSync, "findRootSync");
      async function findUp(matcher, cwd) {
        let directory = path__default["default"].resolve(cwd);
        const { root: root2 } = path__default["default"].parse(directory);
        while (directory && directory !== root2) {
          const filePath = await matcher(directory);
          if (filePath) {
            return path__default["default"].resolve(directory, filePath);
          }
          directory = path__default["default"].dirname(directory);
        }
      }
      __name(findUp, "findUp");
      function findUpSync(matcher, cwd) {
        let directory = path__default["default"].resolve(cwd);
        const { root: root2 } = path__default["default"].parse(directory);
        while (directory && directory !== root2) {
          const filePath = matcher(directory);
          if (filePath) {
            return path__default["default"].resolve(directory, filePath);
          }
          directory = path__default["default"].dirname(directory);
        }
      }
      __name(findUpSync, "findUpSync");
      exports.NoMatchingMonorepoFound = NoMatchingMonorepoFound;
      exports.NoPkgJsonFound = NoPkgJsonFound;
      exports.findRoot = findRoot;
      exports.findRootSync = findRootSync;
    },
  });

  // node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.js
  var require_manypkg_find_root_cjs = __commonJS({
    "node_modules/.pnpm/@manypkg+find-root@2.2.3/node_modules/@manypkg/find-root/dist/manypkg-find-root.cjs.js"(
      exports,
      module,
    ) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_manypkg_find_root_cjs_prod();
      } else {
        module.exports = require_manypkg_find_root_cjs_dev();
      }
    },
  });

  // node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.prod.js
  var require_manypkg_get_packages_cjs_prod = __commonJS({
    "node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.prod.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path4 = __require("path");
      var findRoot = require_manypkg_find_root_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { default: e };
      }
      __name(_interopDefault, "_interopDefault");
      var path__default = /* @__PURE__ */ _interopDefault(path4);
      var PackageJsonMissingNameError = class extends Error {
        static {
          __name(this, "PackageJsonMissingNameError");
        }
        constructor(directories) {
          super(`The following package.jsons are missing the "name" field:
${directories.join("\n")}`);
          this.directories = directories;
        }
      };
      async function getPackages5(dir, options) {
        const monorepoRoot = await findRoot.findRoot(dir, options);
        const packages = await monorepoRoot.tool.getPackages(
          monorepoRoot.rootDir,
        );
        validatePackages(packages);
        return packages;
      }
      __name(getPackages5, "getPackages");
      function getPackagesSync(dir, options) {
        const monorepoRoot = findRoot.findRootSync(dir, options);
        const packages = monorepoRoot.tool.getPackagesSync(
          monorepoRoot.rootDir,
        );
        validatePackages(packages);
        return packages;
      }
      __name(getPackagesSync, "getPackagesSync");
      function validatePackages(packages) {
        const pkgJsonsMissingNameField = [];
        for (const pkg of packages.packages) {
          if (!pkg.packageJson.name) {
            pkgJsonsMissingNameField.push(
              path__default["default"].join(pkg.relativeDir, "package.json"),
            );
          }
        }
        if (pkgJsonsMissingNameField.length > 0) {
          pkgJsonsMissingNameField.sort();
          throw new PackageJsonMissingNameError(pkgJsonsMissingNameField);
        }
      }
      __name(validatePackages, "validatePackages");
      exports.PackageJsonMissingNameError = PackageJsonMissingNameError;
      exports.getPackages = getPackages5;
      exports.getPackagesSync = getPackagesSync;
    },
  });

  // node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.dev.js
  var require_manypkg_get_packages_cjs_dev = __commonJS({
    "node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.dev.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var path4 = __require("path");
      var findRoot = require_manypkg_find_root_cjs();
      function _interopDefault(e) {
        return e && e.__esModule ? e : { default: e };
      }
      __name(_interopDefault, "_interopDefault");
      var path__default = /* @__PURE__ */ _interopDefault(path4);
      var PackageJsonMissingNameError = class extends Error {
        static {
          __name(this, "PackageJsonMissingNameError");
        }
        constructor(directories) {
          super(`The following package.jsons are missing the "name" field:
${directories.join("\n")}`);
          this.directories = directories;
        }
      };
      async function getPackages5(dir, options) {
        const monorepoRoot = await findRoot.findRoot(dir, options);
        const packages = await monorepoRoot.tool.getPackages(
          monorepoRoot.rootDir,
        );
        validatePackages(packages);
        return packages;
      }
      __name(getPackages5, "getPackages");
      function getPackagesSync(dir, options) {
        const monorepoRoot = findRoot.findRootSync(dir, options);
        const packages = monorepoRoot.tool.getPackagesSync(
          monorepoRoot.rootDir,
        );
        validatePackages(packages);
        return packages;
      }
      __name(getPackagesSync, "getPackagesSync");
      function validatePackages(packages) {
        const pkgJsonsMissingNameField = [];
        for (const pkg of packages.packages) {
          if (!pkg.packageJson.name) {
            pkgJsonsMissingNameField.push(
              path__default["default"].join(pkg.relativeDir, "package.json"),
            );
          }
        }
        if (pkgJsonsMissingNameField.length > 0) {
          pkgJsonsMissingNameField.sort();
          throw new PackageJsonMissingNameError(pkgJsonsMissingNameField);
        }
      }
      __name(validatePackages, "validatePackages");
      exports.PackageJsonMissingNameError = PackageJsonMissingNameError;
      exports.getPackages = getPackages5;
      exports.getPackagesSync = getPackagesSync;
    },
  });

  // node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.js
  var require_manypkg_get_packages_cjs = __commonJS({
    "node_modules/.pnpm/@manypkg+get-packages@2.2.2/node_modules/@manypkg/get-packages/dist/manypkg-get-packages.cjs.js"(
      exports,
      module,
    ) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_manypkg_get_packages_cjs_prod();
      } else {
        module.exports = require_manypkg_get_packages_cjs_dev();
      }
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/constants.js
  var require_constants9 = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/constants.js"(
      exports,
      module,
    ) {
      var SEMVER_SPEC_VERSION = "2.0.0";
      var MAX_LENGTH = 256;
      var MAX_SAFE_INTEGER =
        Number.MAX_SAFE_INTEGER /* istanbul ignore next */ || 9007199254740991;
      var MAX_SAFE_COMPONENT_LENGTH = 16;
      var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
      var RELEASE_TYPES = [
        "major",
        "premajor",
        "minor",
        "preminor",
        "patch",
        "prepatch",
        "prerelease",
      ];
      module.exports = {
        MAX_LENGTH,
        MAX_SAFE_COMPONENT_LENGTH,
        MAX_SAFE_BUILD_LENGTH,
        MAX_SAFE_INTEGER,
        RELEASE_TYPES,
        SEMVER_SPEC_VERSION,
        FLAG_INCLUDE_PRERELEASE: 1,
        FLAG_LOOSE: 2,
      };
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/debug.js
  var require_debug = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/debug.js"(
      exports,
      module,
    ) {
      var debug =
        typeof process === "object" &&
        process.env &&
        process.env.NODE_DEBUG &&
        /\bsemver\b/i.test(process.env.NODE_DEBUG)
          ? (...args) => console.error("SEMVER", ...args)
          : () => {};
      module.exports = debug;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/re.js
  var require_re = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/re.js"(
      exports,
      module,
    ) {
      var { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH } =
        require_constants9();
      var debug = require_debug();
      exports = module.exports = {};
      var re = (exports.re = []);
      var safeRe = (exports.safeRe = []);
      var src = (exports.src = []);
      var t = (exports.t = {});
      var R = 0;
      var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
      var safeRegexReplacements = [
        ["\\s", 1],
        ["\\d", MAX_LENGTH],
        [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],
      ];
      var makeSafeRegex = /* @__PURE__ */ __name((value) => {
        for (const [token, max] of safeRegexReplacements) {
          value = value
            .split(`${token}*`)
            .join(`${token}{0,${max}}`)
            .split(`${token}+`)
            .join(`${token}{1,${max}}`);
        }
        return value;
      }, "makeSafeRegex");
      var createToken = /* @__PURE__ */ __name((name, value, isGlobal) => {
        const safe2 = makeSafeRegex(value);
        const index2 = R++;
        debug(name, index2, value);
        t[name] = index2;
        src[index2] = value;
        re[index2] = new RegExp(value, isGlobal ? "g" : void 0);
        safeRe[index2] = new RegExp(safe2, isGlobal ? "g" : void 0);
      }, "createToken");
      createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
      createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
      createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
      createToken(
        "MAINVERSION",
        `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`,
      );
      createToken(
        "MAINVERSIONLOOSE",
        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`,
      );
      createToken(
        "PRERELEASEIDENTIFIER",
        `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`,
      );
      createToken(
        "PRERELEASEIDENTIFIERLOOSE",
        `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`,
      );
      createToken(
        "PRERELEASE",
        `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`,
      );
      createToken(
        "PRERELEASELOOSE",
        `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`,
      );
      createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
      createToken(
        "BUILD",
        `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`,
      );
      createToken(
        "FULLPLAIN",
        `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`,
      );
      createToken("FULL", `^${src[t.FULLPLAIN]}$`);
      createToken(
        "LOOSEPLAIN",
        `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`,
      );
      createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
      createToken("GTLT", "((?:<|>)?=?)");
      createToken(
        "XRANGEIDENTIFIERLOOSE",
        `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`,
      );
      createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
      createToken(
        "XRANGEPLAIN",
        `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`,
      );
      createToken(
        "XRANGEPLAINLOOSE",
        `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`,
      );
      createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
      createToken(
        "XRANGELOOSE",
        `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`,
      );
      createToken(
        "COERCEPLAIN",
        `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`,
      );
      createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
      createToken(
        "COERCEFULL",
        src[t.COERCEPLAIN] +
          `(?:${src[t.PRERELEASE]})?(?:${src[t.BUILD]})?(?:$|[^\\d])`,
      );
      createToken("COERCERTL", src[t.COERCE], true);
      createToken("COERCERTLFULL", src[t.COERCEFULL], true);
      createToken("LONETILDE", "(?:~>?)");
      createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
      exports.tildeTrimReplace = "$1~";
      createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
      createToken(
        "TILDELOOSE",
        `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`,
      );
      createToken("LONECARET", "(?:\\^)");
      createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
      exports.caretTrimReplace = "$1^";
      createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
      createToken(
        "CARETLOOSE",
        `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`,
      );
      createToken(
        "COMPARATORLOOSE",
        `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`,
      );
      createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
      createToken(
        "COMPARATORTRIM",
        `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`,
        true,
      );
      exports.comparatorTrimReplace = "$1$2$3";
      createToken(
        "HYPHENRANGE",
        `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`,
      );
      createToken(
        "HYPHENRANGELOOSE",
        `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`,
      );
      createToken("STAR", "(<|>)?=?\\s*\\*");
      createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
      createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/parse-options.js
  var require_parse_options = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/parse-options.js"(
      exports,
      module,
    ) {
      var looseOption = Object.freeze({ loose: true });
      var emptyOpts = Object.freeze({});
      var parseOptions = /* @__PURE__ */ __name((options) => {
        if (!options) {
          return emptyOpts;
        }
        if (typeof options !== "object") {
          return looseOption;
        }
        return options;
      }, "parseOptions");
      module.exports = parseOptions;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/identifiers.js
  var require_identifiers = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/identifiers.js"(
      exports,
      module,
    ) {
      var numeric = /^[0-9]+$/;
      var compareIdentifiers = /* @__PURE__ */ __name((a, b) => {
        const anum = numeric.test(a);
        const bnum = numeric.test(b);
        if (anum && bnum) {
          a = +a;
          b = +b;
        }
        return a === b
          ? 0
          : anum && !bnum
            ? -1
            : bnum && !anum
              ? 1
              : a < b
                ? -1
                : 1;
      }, "compareIdentifiers");
      var rcompareIdentifiers = /* @__PURE__ */ __name(
        (a, b) => compareIdentifiers(b, a),
        "rcompareIdentifiers",
      );
      module.exports = {
        compareIdentifiers,
        rcompareIdentifiers,
      };
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js
  var require_semver = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/semver.js"(
      exports,
      module,
    ) {
      var debug = require_debug();
      var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants9();
      var { safeRe: re, t } = require_re();
      var parseOptions = require_parse_options();
      var { compareIdentifiers } = require_identifiers();
      var SemVer = class _SemVer {
        static {
          __name(this, "SemVer");
        }
        constructor(version2, options) {
          options = parseOptions(options);
          if (version2 instanceof _SemVer) {
            if (
              version2.loose === !!options.loose &&
              version2.includePrerelease === !!options.includePrerelease
            ) {
              return version2;
            } else {
              version2 = version2.version;
            }
          } else if (typeof version2 !== "string") {
            throw new TypeError(
              `Invalid version. Must be a string. Got type "${typeof version2}".`,
            );
          }
          if (version2.length > MAX_LENGTH) {
            throw new TypeError(
              `version is longer than ${MAX_LENGTH} characters`,
            );
          }
          debug("SemVer", version2, options);
          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          const m = version2
            .trim()
            .match(options.loose ? re[t.LOOSE] : re[t.FULL]);
          if (!m) {
            throw new TypeError(`Invalid Version: ${version2}`);
          }
          this.raw = version2;
          this.major = +m[1];
          this.minor = +m[2];
          this.patch = +m[3];
          if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
            throw new TypeError("Invalid major version");
          }
          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
            throw new TypeError("Invalid minor version");
          }
          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
            throw new TypeError("Invalid patch version");
          }
          if (!m[4]) {
            this.prerelease = [];
          } else {
            this.prerelease = m[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER) {
                  return num;
                }
              }
              return id;
            });
          }
          this.build = m[5] ? m[5].split(".") : [];
          this.format();
        }
        format() {
          this.version = `${this.major}.${this.minor}.${this.patch}`;
          if (this.prerelease.length) {
            this.version += `-${this.prerelease.join(".")}`;
          }
          return this.version;
        }
        toString() {
          return this.version;
        }
        compare(other) {
          debug("SemVer.compare", this.version, this.options, other);
          if (!(other instanceof _SemVer)) {
            if (typeof other === "string" && other === this.version) {
              return 0;
            }
            other = new _SemVer(other, this.options);
          }
          if (other.version === this.version) {
            return 0;
          }
          return this.compareMain(other) || this.comparePre(other);
        }
        compareMain(other) {
          if (!(other instanceof _SemVer)) {
            other = new _SemVer(other, this.options);
          }
          return (
            compareIdentifiers(this.major, other.major) ||
            compareIdentifiers(this.minor, other.minor) ||
            compareIdentifiers(this.patch, other.patch)
          );
        }
        comparePre(other) {
          if (!(other instanceof _SemVer)) {
            other = new _SemVer(other, this.options);
          }
          if (this.prerelease.length && !other.prerelease.length) {
            return -1;
          } else if (!this.prerelease.length && other.prerelease.length) {
            return 1;
          } else if (!this.prerelease.length && !other.prerelease.length) {
            return 0;
          }
          let i = 0;
          do {
            const a = this.prerelease[i];
            const b = other.prerelease[i];
            debug("prerelease compare", i, a, b);
            if (a === void 0 && b === void 0) {
              return 0;
            } else if (b === void 0) {
              return 1;
            } else if (a === void 0) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        }
        compareBuild(other) {
          if (!(other instanceof _SemVer)) {
            other = new _SemVer(other, this.options);
          }
          let i = 0;
          do {
            const a = this.build[i];
            const b = other.build[i];
            debug("build compare", i, a, b);
            if (a === void 0 && b === void 0) {
              return 0;
            } else if (b === void 0) {
              return 1;
            } else if (a === void 0) {
              return -1;
            } else if (a === b) {
              continue;
            } else {
              return compareIdentifiers(a, b);
            }
          } while (++i);
        }
        // preminor will bump the version up to the next minor release, and immediately
        // down to pre-release. premajor and prepatch work the same way.
        inc(release, identifier, identifierBase) {
          switch (release) {
            case "premajor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor = 0;
              this.major++;
              this.inc("pre", identifier, identifierBase);
              break;
            case "preminor":
              this.prerelease.length = 0;
              this.patch = 0;
              this.minor++;
              this.inc("pre", identifier, identifierBase);
              break;
            case "prepatch":
              this.prerelease.length = 0;
              this.inc("patch", identifier, identifierBase);
              this.inc("pre", identifier, identifierBase);
              break;
            // If the input is a non-prerelease version, this acts the same as
            // prepatch.
            case "prerelease":
              if (this.prerelease.length === 0) {
                this.inc("patch", identifier, identifierBase);
              }
              this.inc("pre", identifier, identifierBase);
              break;
            case "major":
              if (
                this.minor !== 0 ||
                this.patch !== 0 ||
                this.prerelease.length === 0
              ) {
                this.major++;
              }
              this.minor = 0;
              this.patch = 0;
              this.prerelease = [];
              break;
            case "minor":
              if (this.patch !== 0 || this.prerelease.length === 0) {
                this.minor++;
              }
              this.patch = 0;
              this.prerelease = [];
              break;
            case "patch":
              if (this.prerelease.length === 0) {
                this.patch++;
              }
              this.prerelease = [];
              break;
            // This probably shouldn't be used publicly.
            // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
            case "pre": {
              const base = Number(identifierBase) ? 1 : 0;
              if (!identifier && identifierBase === false) {
                throw new Error(
                  "invalid increment argument: identifier is empty",
                );
              }
              if (this.prerelease.length === 0) {
                this.prerelease = [base];
              } else {
                let i = this.prerelease.length;
                while (--i >= 0) {
                  if (typeof this.prerelease[i] === "number") {
                    this.prerelease[i]++;
                    i = -2;
                  }
                }
                if (i === -1) {
                  if (
                    identifier === this.prerelease.join(".") &&
                    identifierBase === false
                  ) {
                    throw new Error(
                      "invalid increment argument: identifier already exists",
                    );
                  }
                  this.prerelease.push(base);
                }
              }
              if (identifier) {
                let prerelease = [identifier, base];
                if (identifierBase === false) {
                  prerelease = [identifier];
                }
                if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                  if (isNaN(this.prerelease[1])) {
                    this.prerelease = prerelease;
                  }
                } else {
                  this.prerelease = prerelease;
                }
              }
              break;
            }
            default:
              throw new Error(`invalid increment argument: ${release}`);
          }
          this.raw = this.format();
          if (this.build.length) {
            this.raw += `+${this.build.join(".")}`;
          }
          return this;
        }
      };
      module.exports = SemVer;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js
  var require_parse5 = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/parse.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var parse3 = /* @__PURE__ */ __name(
        (version2, options, throwErrors = false) => {
          if (version2 instanceof SemVer) {
            return version2;
          }
          try {
            return new SemVer(version2, options);
          } catch (er) {
            if (!throwErrors) {
              return null;
            }
            throw er;
          }
        },
        "parse",
      );
      module.exports = parse3;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/valid.js
  var require_valid = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/valid.js"(
      exports,
      module,
    ) {
      var parse3 = require_parse5();
      var valid = /* @__PURE__ */ __name((version2, options) => {
        const v = parse3(version2, options);
        return v ? v.version : null;
      }, "valid");
      module.exports = valid;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/clean.js
  var require_clean = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/clean.js"(
      exports,
      module,
    ) {
      var parse3 = require_parse5();
      var clean = /* @__PURE__ */ __name((version2, options) => {
        const s = parse3(version2.trim().replace(/^[=v]+/, ""), options);
        return s ? s.version : null;
      }, "clean");
      module.exports = clean;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/inc.js
  var require_inc = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/inc.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var inc = /* @__PURE__ */ __name(
        (version2, release, options, identifier, identifierBase) => {
          if (typeof options === "string") {
            identifierBase = identifier;
            identifier = options;
            options = void 0;
          }
          try {
            return new SemVer(
              version2 instanceof SemVer ? version2.version : version2,
              options,
            ).inc(release, identifier, identifierBase).version;
          } catch (er) {
            return null;
          }
        },
        "inc",
      );
      module.exports = inc;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/diff.js
  var require_diff = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/diff.js"(
      exports,
      module,
    ) {
      var parse3 = require_parse5();
      var diff = /* @__PURE__ */ __name((version1, version2) => {
        const v12 = parse3(version1, null, true);
        const v2 = parse3(version2, null, true);
        const comparison = v12.compare(v2);
        if (comparison === 0) {
          return null;
        }
        const v1Higher = comparison > 0;
        const highVersion = v1Higher ? v12 : v2;
        const lowVersion = v1Higher ? v2 : v12;
        const highHasPre = !!highVersion.prerelease.length;
        const lowHasPre = !!lowVersion.prerelease.length;
        if (lowHasPre && !highHasPre) {
          if (!lowVersion.patch && !lowVersion.minor) {
            return "major";
          }
          if (highVersion.patch) {
            return "patch";
          }
          if (highVersion.minor) {
            return "minor";
          }
          return "major";
        }
        const prefix2 = highHasPre ? "pre" : "";
        if (v12.major !== v2.major) {
          return prefix2 + "major";
        }
        if (v12.minor !== v2.minor) {
          return prefix2 + "minor";
        }
        if (v12.patch !== v2.patch) {
          return prefix2 + "patch";
        }
        return "prerelease";
      }, "diff");
      module.exports = diff;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/major.js
  var require_major = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/major.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var major = /* @__PURE__ */ __name(
        (a, loose) => new SemVer(a, loose).major,
        "major",
      );
      module.exports = major;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/minor.js
  var require_minor = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/minor.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var minor = /* @__PURE__ */ __name(
        (a, loose) => new SemVer(a, loose).minor,
        "minor",
      );
      module.exports = minor;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/patch.js
  var require_patch = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/patch.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var patch = /* @__PURE__ */ __name(
        (a, loose) => new SemVer(a, loose).patch,
        "patch",
      );
      module.exports = patch;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/prerelease.js
  var require_prerelease = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/prerelease.js"(
      exports,
      module,
    ) {
      var parse3 = require_parse5();
      var prerelease = /* @__PURE__ */ __name((version2, options) => {
        const parsed = parse3(version2, options);
        return parsed && parsed.prerelease.length ? parsed.prerelease : null;
      }, "prerelease");
      module.exports = prerelease;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js
  var require_compare = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var compare = /* @__PURE__ */ __name(
        (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose)),
        "compare",
      );
      module.exports = compare;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rcompare.js
  var require_rcompare = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rcompare.js"(
      exports,
      module,
    ) {
      var compare = require_compare();
      var rcompare = /* @__PURE__ */ __name(
        (a, b, loose) => compare(b, a, loose),
        "rcompare",
      );
      module.exports = rcompare;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-loose.js
  var require_compare_loose = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-loose.js"(
      exports,
      module,
    ) {
      var compare = require_compare();
      var compareLoose = /* @__PURE__ */ __name(
        (a, b) => compare(a, b, true),
        "compareLoose",
      );
      module.exports = compareLoose;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-build.js
  var require_compare_build = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/compare-build.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var compareBuild = /* @__PURE__ */ __name((a, b, loose) => {
        const versionA = new SemVer(a, loose);
        const versionB = new SemVer(b, loose);
        return versionA.compare(versionB) || versionA.compareBuild(versionB);
      }, "compareBuild");
      module.exports = compareBuild;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/sort.js
  var require_sort = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/sort.js"(
      exports,
      module,
    ) {
      var compareBuild = require_compare_build();
      var sort = /* @__PURE__ */ __name(
        (list4, loose) => list4.sort((a, b) => compareBuild(a, b, loose)),
        "sort",
      );
      module.exports = sort;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rsort.js
  var require_rsort = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/rsort.js"(
      exports,
      module,
    ) {
      var compareBuild = require_compare_build();
      var rsort = /* @__PURE__ */ __name(
        (list4, loose) => list4.sort((a, b) => compareBuild(b, a, loose)),
        "rsort",
      );
      module.exports = rsort;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gt.js
  var require_gt = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gt.js"(
      exports,
      module,
    ) {
      var compare = require_compare();
      var gt = /* @__PURE__ */ __name(
        (a, b, loose) => compare(a, b, loose) > 0,
        "gt",
      );
      module.exports = gt;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lt.js
  var require_lt = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lt.js"(
      exports,
      module,
    ) {
      var compare = require_compare();
      var lt2 = /* @__PURE__ */ __name(
        (a, b, loose) => compare(a, b, loose) < 0,
        "lt",
      );
      module.exports = lt2;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/eq.js
  var require_eq = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/eq.js"(
      exports,
      module,
    ) {
      var compare = require_compare();
      var eq = /* @__PURE__ */ __name(
        (a, b, loose) => compare(a, b, loose) === 0,
        "eq",
      );
      module.exports = eq;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/neq.js
  var require_neq = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/neq.js"(
      exports,
      module,
    ) {
      var compare = require_compare();
      var neq = /* @__PURE__ */ __name(
        (a, b, loose) => compare(a, b, loose) !== 0,
        "neq",
      );
      module.exports = neq;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gte.js
  var require_gte = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/gte.js"(
      exports,
      module,
    ) {
      var compare = require_compare();
      var gte = /* @__PURE__ */ __name(
        (a, b, loose) => compare(a, b, loose) >= 0,
        "gte",
      );
      module.exports = gte;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lte.js
  var require_lte = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/lte.js"(
      exports,
      module,
    ) {
      var compare = require_compare();
      var lte = /* @__PURE__ */ __name(
        (a, b, loose) => compare(a, b, loose) <= 0,
        "lte",
      );
      module.exports = lte;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/cmp.js
  var require_cmp = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/cmp.js"(
      exports,
      module,
    ) {
      var eq = require_eq();
      var neq = require_neq();
      var gt = require_gt();
      var gte = require_gte();
      var lt2 = require_lt();
      var lte = require_lte();
      var cmp = /* @__PURE__ */ __name((a, op, b, loose) => {
        switch (op) {
          case "===":
            if (typeof a === "object") {
              a = a.version;
            }
            if (typeof b === "object") {
              b = b.version;
            }
            return a === b;
          case "!==":
            if (typeof a === "object") {
              a = a.version;
            }
            if (typeof b === "object") {
              b = b.version;
            }
            return a !== b;
          case "":
          case "=":
          case "==":
            return eq(a, b, loose);
          case "!=":
            return neq(a, b, loose);
          case ">":
            return gt(a, b, loose);
          case ">=":
            return gte(a, b, loose);
          case "<":
            return lt2(a, b, loose);
          case "<=":
            return lte(a, b, loose);
          default:
            throw new TypeError(`Invalid operator: ${op}`);
        }
      }, "cmp");
      module.exports = cmp;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/coerce.js
  var require_coerce = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/coerce.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var parse3 = require_parse5();
      var { safeRe: re, t } = require_re();
      var coerce = /* @__PURE__ */ __name((version2, options) => {
        if (version2 instanceof SemVer) {
          return version2;
        }
        if (typeof version2 === "number") {
          version2 = String(version2);
        }
        if (typeof version2 !== "string") {
          return null;
        }
        options = options || {};
        let match = null;
        if (!options.rtl) {
          match = version2.match(
            options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE],
          );
        } else {
          const coerceRtlRegex = options.includePrerelease
            ? re[t.COERCERTLFULL]
            : re[t.COERCERTL];
          let next;
          while (
            (next = coerceRtlRegex.exec(version2)) &&
            (!match || match.index + match[0].length !== version2.length)
          ) {
            if (
              !match ||
              next.index + next[0].length !== match.index + match[0].length
            ) {
              match = next;
            }
            coerceRtlRegex.lastIndex =
              next.index + next[1].length + next[2].length;
          }
          coerceRtlRegex.lastIndex = -1;
        }
        if (match === null) {
          return null;
        }
        const major = match[2];
        const minor = match[3] || "0";
        const patch = match[4] || "0";
        const prerelease =
          options.includePrerelease && match[5] ? `-${match[5]}` : "";
        const build =
          options.includePrerelease && match[6] ? `+${match[6]}` : "";
        return parse3(
          `${major}.${minor}.${patch}${prerelease}${build}`,
          options,
        );
      }, "coerce");
      module.exports = coerce;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/lrucache.js
  var require_lrucache = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/internal/lrucache.js"(
      exports,
      module,
    ) {
      var LRUCache = class {
        static {
          __name(this, "LRUCache");
        }
        constructor() {
          this.max = 1e3;
          this.map = /* @__PURE__ */ new Map();
        }
        get(key) {
          const value = this.map.get(key);
          if (value === void 0) {
            return void 0;
          } else {
            this.map.delete(key);
            this.map.set(key, value);
            return value;
          }
        }
        delete(key) {
          return this.map.delete(key);
        }
        set(key, value) {
          const deleted = this.delete(key);
          if (!deleted && value !== void 0) {
            if (this.map.size >= this.max) {
              const firstKey = this.map.keys().next().value;
              this.delete(firstKey);
            }
            this.map.set(key, value);
          }
          return this;
        }
      };
      module.exports = LRUCache;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js
  var require_range = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/range.js"(
      exports,
      module,
    ) {
      var SPACE_CHARACTERS = /\s+/g;
      var Range = class _Range {
        static {
          __name(this, "Range");
        }
        constructor(range, options) {
          options = parseOptions(options);
          if (range instanceof _Range) {
            if (
              range.loose === !!options.loose &&
              range.includePrerelease === !!options.includePrerelease
            ) {
              return range;
            } else {
              return new _Range(range.raw, options);
            }
          }
          if (range instanceof Comparator) {
            this.raw = range.value;
            this.set = [[range]];
            this.formatted = void 0;
            return this;
          }
          this.options = options;
          this.loose = !!options.loose;
          this.includePrerelease = !!options.includePrerelease;
          this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
          this.set = this.raw
            .split("||")
            .map((r) => this.parseRange(r.trim()))
            .filter((c) => c.length);
          if (!this.set.length) {
            throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
          }
          if (this.set.length > 1) {
            const first = this.set[0];
            this.set = this.set.filter((c) => !isNullSet(c[0]));
            if (this.set.length === 0) {
              this.set = [first];
            } else if (this.set.length > 1) {
              for (const c of this.set) {
                if (c.length === 1 && isAny(c[0])) {
                  this.set = [c];
                  break;
                }
              }
            }
          }
          this.formatted = void 0;
        }
        get range() {
          if (this.formatted === void 0) {
            this.formatted = "";
            for (let i = 0; i < this.set.length; i++) {
              if (i > 0) {
                this.formatted += "||";
              }
              const comps = this.set[i];
              for (let k = 0; k < comps.length; k++) {
                if (k > 0) {
                  this.formatted += " ";
                }
                this.formatted += comps[k].toString().trim();
              }
            }
          }
          return this.formatted;
        }
        format() {
          return this.range;
        }
        toString() {
          return this.range;
        }
        parseRange(range) {
          const memoOpts =
            (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |
            (this.options.loose && FLAG_LOOSE);
          const memoKey = memoOpts + ":" + range;
          const cached = cache.get(memoKey);
          if (cached) {
            return cached;
          }
          const loose = this.options.loose;
          const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
          range = range.replace(
            hr,
            hyphenReplace(this.options.includePrerelease),
          );
          debug("hyphen replace", range);
          range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
          debug("comparator trim", range);
          range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
          debug("tilde trim", range);
          range = range.replace(re[t.CARETTRIM], caretTrimReplace);
          debug("caret trim", range);
          let rangeList = range
            .split(" ")
            .map((comp) => parseComparator(comp, this.options))
            .join(" ")
            .split(/\s+/)
            .map((comp) => replaceGTE0(comp, this.options));
          if (loose) {
            rangeList = rangeList.filter((comp) => {
              debug("loose invalid filter", comp, this.options);
              return !!comp.match(re[t.COMPARATORLOOSE]);
            });
          }
          debug("range list", rangeList);
          const rangeMap = /* @__PURE__ */ new Map();
          const comparators = rangeList.map(
            (comp) => new Comparator(comp, this.options),
          );
          for (const comp of comparators) {
            if (isNullSet(comp)) {
              return [comp];
            }
            rangeMap.set(comp.value, comp);
          }
          if (rangeMap.size > 1 && rangeMap.has("")) {
            rangeMap.delete("");
          }
          const result = [...rangeMap.values()];
          cache.set(memoKey, result);
          return result;
        }
        intersects(range, options) {
          if (!(range instanceof _Range)) {
            throw new TypeError("a Range is required");
          }
          return this.set.some((thisComparators) => {
            return (
              isSatisfiable(thisComparators, options) &&
              range.set.some((rangeComparators) => {
                return (
                  isSatisfiable(rangeComparators, options) &&
                  thisComparators.every((thisComparator) => {
                    return rangeComparators.every((rangeComparator) => {
                      return thisComparator.intersects(
                        rangeComparator,
                        options,
                      );
                    });
                  })
                );
              })
            );
          });
        }
        // if ANY of the sets match ALL of its comparators, then pass
        test(version2) {
          if (!version2) {
            return false;
          }
          if (typeof version2 === "string") {
            try {
              version2 = new SemVer(version2, this.options);
            } catch (er) {
              return false;
            }
          }
          for (let i = 0; i < this.set.length; i++) {
            if (testSet(this.set[i], version2, this.options)) {
              return true;
            }
          }
          return false;
        }
      };
      module.exports = Range;
      var LRU = require_lrucache();
      var cache = new LRU();
      var parseOptions = require_parse_options();
      var Comparator = require_comparator();
      var debug = require_debug();
      var SemVer = require_semver();
      var {
        safeRe: re,
        t,
        comparatorTrimReplace,
        tildeTrimReplace,
        caretTrimReplace,
      } = require_re();
      var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants9();
      var isNullSet = /* @__PURE__ */ __name(
        (c) => c.value === "<0.0.0-0",
        "isNullSet",
      );
      var isAny = /* @__PURE__ */ __name((c) => c.value === "", "isAny");
      var isSatisfiable = /* @__PURE__ */ __name((comparators, options) => {
        let result = true;
        const remainingComparators = comparators.slice();
        let testComparator = remainingComparators.pop();
        while (result && remainingComparators.length) {
          result = remainingComparators.every((otherComparator) => {
            return testComparator.intersects(otherComparator, options);
          });
          testComparator = remainingComparators.pop();
        }
        return result;
      }, "isSatisfiable");
      var parseComparator = /* @__PURE__ */ __name((comp, options) => {
        debug("comp", comp, options);
        comp = replaceCarets(comp, options);
        debug("caret", comp);
        comp = replaceTildes(comp, options);
        debug("tildes", comp);
        comp = replaceXRanges(comp, options);
        debug("xrange", comp);
        comp = replaceStars(comp, options);
        debug("stars", comp);
        return comp;
      }, "parseComparator");
      var isX = /* @__PURE__ */ __name(
        (id) => !id || id.toLowerCase() === "x" || id === "*",
        "isX",
      );
      var replaceTildes = /* @__PURE__ */ __name((comp, options) => {
        return comp
          .trim()
          .split(/\s+/)
          .map((c) => replaceTilde(c, options))
          .join(" ");
      }, "replaceTildes");
      var replaceTilde = /* @__PURE__ */ __name((comp, options) => {
        const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
        return comp.replace(r, (_, M, m, p, pr) => {
          debug("tilde", comp, _, M, m, p, pr);
          let ret;
          if (isX(M)) {
            ret = "";
          } else if (isX(m)) {
            ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
          } else if (isX(p)) {
            ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
          } else if (pr) {
            debug("replaceTilde pr", pr);
            ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
          }
          debug("tilde return", ret);
          return ret;
        });
      }, "replaceTilde");
      var replaceCarets = /* @__PURE__ */ __name((comp, options) => {
        return comp
          .trim()
          .split(/\s+/)
          .map((c) => replaceCaret(c, options))
          .join(" ");
      }, "replaceCarets");
      var replaceCaret = /* @__PURE__ */ __name((comp, options) => {
        debug("caret", comp, options);
        const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
        const z = options.includePrerelease ? "-0" : "";
        return comp.replace(r, (_, M, m, p, pr) => {
          debug("caret", comp, _, M, m, p, pr);
          let ret;
          if (isX(M)) {
            ret = "";
          } else if (isX(m)) {
            ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
          } else if (isX(p)) {
            if (M === "0") {
              ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
            } else {
              ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
            }
          } else if (pr) {
            debug("replaceCaret pr", pr);
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
              } else {
                ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
              }
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
            }
          } else {
            debug("no pr");
            if (M === "0") {
              if (m === "0") {
                ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
              } else {
                ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
              }
            } else {
              ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
            }
          }
          debug("caret return", ret);
          return ret;
        });
      }, "replaceCaret");
      var replaceXRanges = /* @__PURE__ */ __name((comp, options) => {
        debug("replaceXRanges", comp, options);
        return comp
          .split(/\s+/)
          .map((c) => replaceXRange(c, options))
          .join(" ");
      }, "replaceXRanges");
      var replaceXRange = /* @__PURE__ */ __name((comp, options) => {
        comp = comp.trim();
        const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
        return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
          debug("xRange", comp, ret, gtlt, M, m, p, pr);
          const xM = isX(M);
          const xm = xM || isX(m);
          const xp = xm || isX(p);
          const anyX = xp;
          if (gtlt === "=" && anyX) {
            gtlt = "";
          }
          pr = options.includePrerelease ? "-0" : "";
          if (xM) {
            if (gtlt === ">" || gtlt === "<") {
              ret = "<0.0.0-0";
            } else {
              ret = "*";
            }
          } else if (gtlt && anyX) {
            if (xm) {
              m = 0;
            }
            p = 0;
            if (gtlt === ">") {
              gtlt = ">=";
              if (xm) {
                M = +M + 1;
                m = 0;
                p = 0;
              } else {
                m = +m + 1;
                p = 0;
              }
            } else if (gtlt === "<=") {
              gtlt = "<";
              if (xm) {
                M = +M + 1;
              } else {
                m = +m + 1;
              }
            }
            if (gtlt === "<") {
              pr = "-0";
            }
            ret = `${gtlt + M}.${m}.${p}${pr}`;
          } else if (xm) {
            ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
          } else if (xp) {
            ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
          }
          debug("xRange return", ret);
          return ret;
        });
      }, "replaceXRange");
      var replaceStars = /* @__PURE__ */ __name((comp, options) => {
        debug("replaceStars", comp, options);
        return comp.trim().replace(re[t.STAR], "");
      }, "replaceStars");
      var replaceGTE0 = /* @__PURE__ */ __name((comp, options) => {
        debug("replaceGTE0", comp, options);
        return comp
          .trim()
          .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
      }, "replaceGTE0");
      var hyphenReplace = /* @__PURE__ */ __name(
        (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
          if (isX(fM)) {
            from = "";
          } else if (isX(fm)) {
            from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
          } else if (isX(fp)) {
            from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
          } else if (fpr) {
            from = `>=${from}`;
          } else {
            from = `>=${from}${incPr ? "-0" : ""}`;
          }
          if (isX(tM)) {
            to = "";
          } else if (isX(tm)) {
            to = `<${+tM + 1}.0.0-0`;
          } else if (isX(tp)) {
            to = `<${tM}.${+tm + 1}.0-0`;
          } else if (tpr) {
            to = `<=${tM}.${tm}.${tp}-${tpr}`;
          } else if (incPr) {
            to = `<${tM}.${tm}.${+tp + 1}-0`;
          } else {
            to = `<=${to}`;
          }
          return `${from} ${to}`.trim();
        },
        "hyphenReplace",
      );
      var testSet = /* @__PURE__ */ __name((set, version2, options) => {
        for (let i = 0; i < set.length; i++) {
          if (!set[i].test(version2)) {
            return false;
          }
        }
        if (version2.prerelease.length && !options.includePrerelease) {
          for (let i = 0; i < set.length; i++) {
            debug(set[i].semver);
            if (set[i].semver === Comparator.ANY) {
              continue;
            }
            if (set[i].semver.prerelease.length > 0) {
              const allowed = set[i].semver;
              if (
                allowed.major === version2.major &&
                allowed.minor === version2.minor &&
                allowed.patch === version2.patch
              ) {
                return true;
              }
            }
          }
          return false;
        }
        return true;
      }, "testSet");
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/comparator.js
  var require_comparator = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/classes/comparator.js"(
      exports,
      module,
    ) {
      var ANY = Symbol("SemVer ANY");
      var Comparator = class _Comparator {
        static {
          __name(this, "Comparator");
        }
        static get ANY() {
          return ANY;
        }
        constructor(comp, options) {
          options = parseOptions(options);
          if (comp instanceof _Comparator) {
            if (comp.loose === !!options.loose) {
              return comp;
            } else {
              comp = comp.value;
            }
          }
          comp = comp.trim().split(/\s+/).join(" ");
          debug("comparator", comp, options);
          this.options = options;
          this.loose = !!options.loose;
          this.parse(comp);
          if (this.semver === ANY) {
            this.value = "";
          } else {
            this.value = this.operator + this.semver.version;
          }
          debug("comp", this);
        }
        parse(comp) {
          const r = this.options.loose
            ? re[t.COMPARATORLOOSE]
            : re[t.COMPARATOR];
          const m = comp.match(r);
          if (!m) {
            throw new TypeError(`Invalid comparator: ${comp}`);
          }
          this.operator = m[1] !== void 0 ? m[1] : "";
          if (this.operator === "=") {
            this.operator = "";
          }
          if (!m[2]) {
            this.semver = ANY;
          } else {
            this.semver = new SemVer(m[2], this.options.loose);
          }
        }
        toString() {
          return this.value;
        }
        test(version2) {
          debug("Comparator.test", version2, this.options.loose);
          if (this.semver === ANY || version2 === ANY) {
            return true;
          }
          if (typeof version2 === "string") {
            try {
              version2 = new SemVer(version2, this.options);
            } catch (er) {
              return false;
            }
          }
          return cmp(version2, this.operator, this.semver, this.options);
        }
        intersects(comp, options) {
          if (!(comp instanceof _Comparator)) {
            throw new TypeError("a Comparator is required");
          }
          if (this.operator === "") {
            if (this.value === "") {
              return true;
            }
            return new Range(comp.value, options).test(this.value);
          } else if (comp.operator === "") {
            if (comp.value === "") {
              return true;
            }
            return new Range(this.value, options).test(comp.semver);
          }
          options = parseOptions(options);
          if (
            options.includePrerelease &&
            (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")
          ) {
            return false;
          }
          if (
            !options.includePrerelease &&
            (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))
          ) {
            return false;
          }
          if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
            return true;
          }
          if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
            return true;
          }
          if (
            this.semver.version === comp.semver.version &&
            this.operator.includes("=") &&
            comp.operator.includes("=")
          ) {
            return true;
          }
          if (
            cmp(this.semver, "<", comp.semver, options) &&
            this.operator.startsWith(">") &&
            comp.operator.startsWith("<")
          ) {
            return true;
          }
          if (
            cmp(this.semver, ">", comp.semver, options) &&
            this.operator.startsWith("<") &&
            comp.operator.startsWith(">")
          ) {
            return true;
          }
          return false;
        }
      };
      module.exports = Comparator;
      var parseOptions = require_parse_options();
      var { safeRe: re, t } = require_re();
      var cmp = require_cmp();
      var debug = require_debug();
      var SemVer = require_semver();
      var Range = require_range();
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/satisfies.js
  var require_satisfies = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/functions/satisfies.js"(
      exports,
      module,
    ) {
      var Range = require_range();
      var satisfies = /* @__PURE__ */ __name((version2, range, options) => {
        try {
          range = new Range(range, options);
        } catch (er) {
          return false;
        }
        return range.test(version2);
      }, "satisfies");
      module.exports = satisfies;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/to-comparators.js
  var require_to_comparators = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/to-comparators.js"(
      exports,
      module,
    ) {
      var Range = require_range();
      var toComparators = /* @__PURE__ */ __name(
        (range, options) =>
          new Range(range, options).set.map((comp) =>
            comp
              .map((c) => c.value)
              .join(" ")
              .trim()
              .split(" "),
          ),
        "toComparators",
      );
      module.exports = toComparators;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/max-satisfying.js
  var require_max_satisfying = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/max-satisfying.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var Range = require_range();
      var maxSatisfying = /* @__PURE__ */ __name((versions, range, options) => {
        let max = null;
        let maxSV = null;
        let rangeObj = null;
        try {
          rangeObj = new Range(range, options);
        } catch (er) {
          return null;
        }
        versions.forEach((v) => {
          if (rangeObj.test(v)) {
            if (!max || maxSV.compare(v) === -1) {
              max = v;
              maxSV = new SemVer(max, options);
            }
          }
        });
        return max;
      }, "maxSatisfying");
      module.exports = maxSatisfying;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-satisfying.js
  var require_min_satisfying = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-satisfying.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var Range = require_range();
      var minSatisfying = /* @__PURE__ */ __name((versions, range, options) => {
        let min = null;
        let minSV = null;
        let rangeObj = null;
        try {
          rangeObj = new Range(range, options);
        } catch (er) {
          return null;
        }
        versions.forEach((v) => {
          if (rangeObj.test(v)) {
            if (!min || minSV.compare(v) === 1) {
              min = v;
              minSV = new SemVer(min, options);
            }
          }
        });
        return min;
      }, "minSatisfying");
      module.exports = minSatisfying;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-version.js
  var require_min_version = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/min-version.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var Range = require_range();
      var gt = require_gt();
      var minVersion = /* @__PURE__ */ __name((range, loose) => {
        range = new Range(range, loose);
        let minver = new SemVer("0.0.0");
        if (range.test(minver)) {
          return minver;
        }
        minver = new SemVer("0.0.0-0");
        if (range.test(minver)) {
          return minver;
        }
        minver = null;
        for (let i = 0; i < range.set.length; ++i) {
          const comparators = range.set[i];
          let setMin = null;
          comparators.forEach((comparator) => {
            const compver = new SemVer(comparator.semver.version);
            switch (comparator.operator) {
              case ">":
                if (compver.prerelease.length === 0) {
                  compver.patch++;
                } else {
                  compver.prerelease.push(0);
                }
                compver.raw = compver.format();
              /* fallthrough */
              case "":
              case ">=":
                if (!setMin || gt(compver, setMin)) {
                  setMin = compver;
                }
                break;
              case "<":
              case "<=":
                break;
              /* istanbul ignore next */
              default:
                throw new Error(`Unexpected operation: ${comparator.operator}`);
            }
          });
          if (setMin && (!minver || gt(minver, setMin))) {
            minver = setMin;
          }
        }
        if (minver && range.test(minver)) {
          return minver;
        }
        return null;
      }, "minVersion");
      module.exports = minVersion;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/valid.js
  var require_valid2 = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/valid.js"(
      exports,
      module,
    ) {
      var Range = require_range();
      var validRange = /* @__PURE__ */ __name((range, options) => {
        try {
          return new Range(range, options).range || "*";
        } catch (er) {
          return null;
        }
      }, "validRange");
      module.exports = validRange;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/outside.js
  var require_outside = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/outside.js"(
      exports,
      module,
    ) {
      var SemVer = require_semver();
      var Comparator = require_comparator();
      var { ANY } = Comparator;
      var Range = require_range();
      var satisfies = require_satisfies();
      var gt = require_gt();
      var lt2 = require_lt();
      var lte = require_lte();
      var gte = require_gte();
      var outside = /* @__PURE__ */ __name((version2, range, hilo, options) => {
        version2 = new SemVer(version2, options);
        range = new Range(range, options);
        let gtfn, ltefn, ltfn, comp, ecomp;
        switch (hilo) {
          case ">":
            gtfn = gt;
            ltefn = lte;
            ltfn = lt2;
            comp = ">";
            ecomp = ">=";
            break;
          case "<":
            gtfn = lt2;
            ltefn = gte;
            ltfn = gt;
            comp = "<";
            ecomp = "<=";
            break;
          default:
            throw new TypeError('Must provide a hilo val of "<" or ">"');
        }
        if (satisfies(version2, range, options)) {
          return false;
        }
        for (let i = 0; i < range.set.length; ++i) {
          const comparators = range.set[i];
          let high = null;
          let low = null;
          comparators.forEach((comparator) => {
            if (comparator.semver === ANY) {
              comparator = new Comparator(">=0.0.0");
            }
            high = high || comparator;
            low = low || comparator;
            if (gtfn(comparator.semver, high.semver, options)) {
              high = comparator;
            } else if (ltfn(comparator.semver, low.semver, options)) {
              low = comparator;
            }
          });
          if (high.operator === comp || high.operator === ecomp) {
            return false;
          }
          if (
            (!low.operator || low.operator === comp) &&
            ltefn(version2, low.semver)
          ) {
            return false;
          } else if (low.operator === ecomp && ltfn(version2, low.semver)) {
            return false;
          }
        }
        return true;
      }, "outside");
      module.exports = outside;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/gtr.js
  var require_gtr = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/gtr.js"(
      exports,
      module,
    ) {
      var outside = require_outside();
      var gtr = /* @__PURE__ */ __name(
        (version2, range, options) => outside(version2, range, ">", options),
        "gtr",
      );
      module.exports = gtr;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/ltr.js
  var require_ltr = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/ltr.js"(
      exports,
      module,
    ) {
      var outside = require_outside();
      var ltr = /* @__PURE__ */ __name(
        (version2, range, options) => outside(version2, range, "<", options),
        "ltr",
      );
      module.exports = ltr;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/intersects.js
  var require_intersects = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/intersects.js"(
      exports,
      module,
    ) {
      var Range = require_range();
      var intersects = /* @__PURE__ */ __name((r1, r2, options) => {
        r1 = new Range(r1, options);
        r2 = new Range(r2, options);
        return r1.intersects(r2, options);
      }, "intersects");
      module.exports = intersects;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/simplify.js
  var require_simplify = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/simplify.js"(
      exports,
      module,
    ) {
      var satisfies = require_satisfies();
      var compare = require_compare();
      module.exports = (versions, range, options) => {
        const set = [];
        let first = null;
        let prev = null;
        const v = versions.sort((a, b) => compare(a, b, options));
        for (const version2 of v) {
          const included = satisfies(version2, range, options);
          if (included) {
            prev = version2;
            if (!first) {
              first = version2;
            }
          } else {
            if (prev) {
              set.push([first, prev]);
            }
            prev = null;
            first = null;
          }
        }
        if (first) {
          set.push([first, null]);
        }
        const ranges = [];
        for (const [min, max] of set) {
          if (min === max) {
            ranges.push(min);
          } else if (!max && min === v[0]) {
            ranges.push("*");
          } else if (!max) {
            ranges.push(`>=${min}`);
          } else if (min === v[0]) {
            ranges.push(`<=${max}`);
          } else {
            ranges.push(`${min} - ${max}`);
          }
        }
        const simplified = ranges.join(" || ");
        const original =
          typeof range.raw === "string" ? range.raw : String(range);
        return simplified.length < original.length ? simplified : range;
      };
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/subset.js
  var require_subset = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/ranges/subset.js"(
      exports,
      module,
    ) {
      var Range = require_range();
      var Comparator = require_comparator();
      var { ANY } = Comparator;
      var satisfies = require_satisfies();
      var compare = require_compare();
      var subset = /* @__PURE__ */ __name((sub, dom, options = {}) => {
        if (sub === dom) {
          return true;
        }
        sub = new Range(sub, options);
        dom = new Range(dom, options);
        let sawNonNull = false;
        OUTER: for (const simpleSub of sub.set) {
          for (const simpleDom of dom.set) {
            const isSub = simpleSubset(simpleSub, simpleDom, options);
            sawNonNull = sawNonNull || isSub !== null;
            if (isSub) {
              continue OUTER;
            }
          }
          if (sawNonNull) {
            return false;
          }
        }
        return true;
      }, "subset");
      var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
      var minimumVersion = [new Comparator(">=0.0.0")];
      var simpleSubset = /* @__PURE__ */ __name((sub, dom, options) => {
        if (sub === dom) {
          return true;
        }
        if (sub.length === 1 && sub[0].semver === ANY) {
          if (dom.length === 1 && dom[0].semver === ANY) {
            return true;
          } else if (options.includePrerelease) {
            sub = minimumVersionWithPreRelease;
          } else {
            sub = minimumVersion;
          }
        }
        if (dom.length === 1 && dom[0].semver === ANY) {
          if (options.includePrerelease) {
            return true;
          } else {
            dom = minimumVersion;
          }
        }
        const eqSet = /* @__PURE__ */ new Set();
        let gt, lt2;
        for (const c of sub) {
          if (c.operator === ">" || c.operator === ">=") {
            gt = higherGT(gt, c, options);
          } else if (c.operator === "<" || c.operator === "<=") {
            lt2 = lowerLT(lt2, c, options);
          } else {
            eqSet.add(c.semver);
          }
        }
        if (eqSet.size > 1) {
          return null;
        }
        let gtltComp;
        if (gt && lt2) {
          gtltComp = compare(gt.semver, lt2.semver, options);
          if (gtltComp > 0) {
            return null;
          } else if (
            gtltComp === 0 &&
            (gt.operator !== ">=" || lt2.operator !== "<=")
          ) {
            return null;
          }
        }
        for (const eq of eqSet) {
          if (gt && !satisfies(eq, String(gt), options)) {
            return null;
          }
          if (lt2 && !satisfies(eq, String(lt2), options)) {
            return null;
          }
          for (const c of dom) {
            if (!satisfies(eq, String(c), options)) {
              return false;
            }
          }
          return true;
        }
        let higher, lower;
        let hasDomLT, hasDomGT;
        let needDomLTPre =
          lt2 && !options.includePrerelease && lt2.semver.prerelease.length
            ? lt2.semver
            : false;
        let needDomGTPre =
          gt && !options.includePrerelease && gt.semver.prerelease.length
            ? gt.semver
            : false;
        if (
          needDomLTPre &&
          needDomLTPre.prerelease.length === 1 &&
          lt2.operator === "<" &&
          needDomLTPre.prerelease[0] === 0
        ) {
          needDomLTPre = false;
        }
        for (const c of dom) {
          hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
          hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
          if (gt) {
            if (needDomGTPre) {
              if (
                c.semver.prerelease &&
                c.semver.prerelease.length &&
                c.semver.major === needDomGTPre.major &&
                c.semver.minor === needDomGTPre.minor &&
                c.semver.patch === needDomGTPre.patch
              ) {
                needDomGTPre = false;
              }
            }
            if (c.operator === ">" || c.operator === ">=") {
              higher = higherGT(gt, c, options);
              if (higher === c && higher !== gt) {
                return false;
              }
            } else if (
              gt.operator === ">=" &&
              !satisfies(gt.semver, String(c), options)
            ) {
              return false;
            }
          }
          if (lt2) {
            if (needDomLTPre) {
              if (
                c.semver.prerelease &&
                c.semver.prerelease.length &&
                c.semver.major === needDomLTPre.major &&
                c.semver.minor === needDomLTPre.minor &&
                c.semver.patch === needDomLTPre.patch
              ) {
                needDomLTPre = false;
              }
            }
            if (c.operator === "<" || c.operator === "<=") {
              lower = lowerLT(lt2, c, options);
              if (lower === c && lower !== lt2) {
                return false;
              }
            } else if (
              lt2.operator === "<=" &&
              !satisfies(lt2.semver, String(c), options)
            ) {
              return false;
            }
          }
          if (!c.operator && (lt2 || gt) && gtltComp !== 0) {
            return false;
          }
        }
        if (gt && hasDomLT && !lt2 && gtltComp !== 0) {
          return false;
        }
        if (lt2 && hasDomGT && !gt && gtltComp !== 0) {
          return false;
        }
        if (needDomGTPre || needDomLTPre) {
          return false;
        }
        return true;
      }, "simpleSubset");
      var higherGT = /* @__PURE__ */ __name((a, b, options) => {
        if (!a) {
          return b;
        }
        const comp = compare(a.semver, b.semver, options);
        return comp > 0
          ? a
          : comp < 0
            ? b
            : b.operator === ">" && a.operator === ">="
              ? b
              : a;
      }, "higherGT");
      var lowerLT = /* @__PURE__ */ __name((a, b, options) => {
        if (!a) {
          return b;
        }
        const comp = compare(a.semver, b.semver, options);
        return comp < 0
          ? a
          : comp > 0
            ? b
            : b.operator === "<" && a.operator === "<="
              ? b
              : a;
      }, "lowerLT");
      module.exports = subset;
    },
  });

  // node_modules/.pnpm/semver@7.6.3/node_modules/semver/index.js
  var require_semver2 = __commonJS({
    "node_modules/.pnpm/semver@7.6.3/node_modules/semver/index.js"(
      exports,
      module,
    ) {
      var internalRe = require_re();
      var constants = require_constants9();
      var SemVer = require_semver();
      var identifiers = require_identifiers();
      var parse3 = require_parse5();
      var valid = require_valid();
      var clean = require_clean();
      var inc = require_inc();
      var diff = require_diff();
      var major = require_major();
      var minor = require_minor();
      var patch = require_patch();
      var prerelease = require_prerelease();
      var compare = require_compare();
      var rcompare = require_rcompare();
      var compareLoose = require_compare_loose();
      var compareBuild = require_compare_build();
      var sort = require_sort();
      var rsort = require_rsort();
      var gt = require_gt();
      var lt2 = require_lt();
      var eq = require_eq();
      var neq = require_neq();
      var gte = require_gte();
      var lte = require_lte();
      var cmp = require_cmp();
      var coerce = require_coerce();
      var Comparator = require_comparator();
      var Range = require_range();
      var satisfies = require_satisfies();
      var toComparators = require_to_comparators();
      var maxSatisfying = require_max_satisfying();
      var minSatisfying = require_min_satisfying();
      var minVersion = require_min_version();
      var validRange = require_valid2();
      var outside = require_outside();
      var gtr = require_gtr();
      var ltr = require_ltr();
      var intersects = require_intersects();
      var simplifyRange = require_simplify();
      var subset = require_subset();
      module.exports = {
        parse: parse3,
        valid,
        clean,
        inc,
        diff,
        major,
        minor,
        patch,
        prerelease,
        compare,
        rcompare,
        compareLoose,
        compareBuild,
        sort,
        rsort,
        gt,
        lt: lt2,
        eq,
        neq,
        gte,
        lte,
        cmp,
        coerce,
        Comparator,
        Range,
        satisfies,
        toComparators,
        maxSatisfying,
        minSatisfying,
        minVersion,
        validRange,
        outside,
        gtr,
        ltr,
        intersects,
        simplifyRange,
        subset,
        SemVer,
        re: internalRe.re,
        src: internalRe.src,
        tokens: internalRe.t,
        SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
        RELEASE_TYPES: constants.RELEASE_TYPES,
        compareIdentifiers: identifiers.compareIdentifiers,
        rcompareIdentifiers: identifiers.rcompareIdentifiers,
      };
    },
  });

  // node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js
  var require_extend = __commonJS({
    "node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var hasOwn = Object.prototype.hasOwnProperty;
      var toStr = Object.prototype.toString;
      var defineProperty = Object.defineProperty;
      var gOPD = Object.getOwnPropertyDescriptor;
      var isArray = /* @__PURE__ */ __name(function isArray2(arr) {
        if (typeof Array.isArray === "function") {
          return Array.isArray(arr);
        }
        return toStr.call(arr) === "[object Array]";
      }, "isArray");
      var isPlainObject2 = /* @__PURE__ */ __name(function isPlainObject3(obj) {
        if (!obj || toStr.call(obj) !== "[object Object]") {
          return false;
        }
        var hasOwnConstructor = hasOwn.call(obj, "constructor");
        var hasIsPrototypeOf =
          obj.constructor &&
          obj.constructor.prototype &&
          hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
        if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
          return false;
        }
        var key;
        for (key in obj) {
        }
        return typeof key === "undefined" || hasOwn.call(obj, key);
      }, "isPlainObject");
      var setProperty = /* @__PURE__ */ __name(function setProperty2(
        target,
        options,
      ) {
        if (defineProperty && options.name === "__proto__") {
          defineProperty(target, options.name, {
            enumerable: true,
            configurable: true,
            value: options.newValue,
            writable: true,
          });
        } else {
          target[options.name] = options.newValue;
        }
      }, "setProperty");
      var getProperty = /* @__PURE__ */ __name(function getProperty2(
        obj,
        name,
      ) {
        if (name === "__proto__") {
          if (!hasOwn.call(obj, name)) {
            return void 0;
          } else if (gOPD) {
            return gOPD(obj, name).value;
          }
        }
        return obj[name];
      }, "getProperty");
      module.exports = /* @__PURE__ */ __name(function extend2() {
        var options, name, src, copy, copyIsArray, clone;
        var target = arguments[0];
        var i = 1;
        var length = arguments.length;
        var deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[1] || {};
          i = 2;
        }
        if (
          target == null ||
          (typeof target !== "object" && typeof target !== "function")
        ) {
          target = {};
        }
        for (; i < length; ++i) {
          options = arguments[i];
          if (options != null) {
            for (name in options) {
              src = getProperty(target, name);
              copy = getProperty(options, name);
              if (target !== copy) {
                if (
                  deep &&
                  copy &&
                  (isPlainObject2(copy) || (copyIsArray = isArray(copy)))
                ) {
                  if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && isArray(src) ? src : [];
                  } else {
                    clone = src && isPlainObject2(src) ? src : {};
                  }
                  setProperty(target, {
                    name,
                    newValue: extend2(deep, clone, copy),
                  });
                } else if (typeof copy !== "undefined") {
                  setProperty(target, { name, newValue: copy });
                }
              }
            }
          }
        }
        return target;
      }, "extend");
    },
  });

  // node_modules/.pnpm/universalify@0.1.2/node_modules/universalify/index.js
  var require_universalify2 = __commonJS({
    "node_modules/.pnpm/universalify@0.1.2/node_modules/universalify/index.js"(
      exports,
    ) {
      "use strict";
      exports.fromCallback = function (fn) {
        return Object.defineProperty(
          function () {
            if (typeof arguments[arguments.length - 1] === "function")
              fn.apply(this, arguments);
            else {
              return new Promise((resolve, reject) => {
                arguments[arguments.length] = (err, res) => {
                  if (err) return reject(err);
                  resolve(res);
                };
                arguments.length++;
                fn.apply(this, arguments);
              });
            }
          },
          "name",
          { value: fn.name },
        );
      };
      exports.fromPromise = function (fn) {
        return Object.defineProperty(
          function () {
            const cb = arguments[arguments.length - 1];
            if (typeof cb !== "function") return fn.apply(this, arguments);
            else fn.apply(this, arguments).then((r) => cb(null, r), cb);
          },
          "name",
          { value: fn.name },
        );
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/fs/index.js
  var require_fs6 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/fs/index.js"(
      exports,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var fs6 = require_graceful_fs();
      var api = [
        "access",
        "appendFile",
        "chmod",
        "chown",
        "close",
        "copyFile",
        "fchmod",
        "fchown",
        "fdatasync",
        "fstat",
        "fsync",
        "ftruncate",
        "futimes",
        "lchown",
        "lchmod",
        "link",
        "lstat",
        "mkdir",
        "mkdtemp",
        "open",
        "readFile",
        "readdir",
        "readlink",
        "realpath",
        "rename",
        "rmdir",
        "stat",
        "symlink",
        "truncate",
        "unlink",
        "utimes",
        "writeFile",
      ].filter((key) => {
        return typeof fs6[key] === "function";
      });
      Object.keys(fs6).forEach((key) => {
        if (key === "promises") {
          return;
        }
        exports[key] = fs6[key];
      });
      api.forEach((method) => {
        exports[method] = u(fs6[method]);
      });
      exports.exists = function (filename, callback) {
        if (typeof callback === "function") {
          return fs6.exists(filename, callback);
        }
        return new Promise((resolve) => {
          return fs6.exists(filename, resolve);
        });
      };
      exports.read = function (
        fd,
        buffer,
        offset,
        length,
        position2,
        callback,
      ) {
        if (typeof callback === "function") {
          return fs6.read(fd, buffer, offset, length, position2, callback);
        }
        return new Promise((resolve, reject) => {
          fs6.read(
            fd,
            buffer,
            offset,
            length,
            position2,
            (err, bytesRead, buffer2) => {
              if (err) return reject(err);
              resolve({ bytesRead, buffer: buffer2 });
            },
          );
        });
      };
      exports.write = function (fd, buffer, ...args) {
        if (typeof args[args.length - 1] === "function") {
          return fs6.write(fd, buffer, ...args);
        }
        return new Promise((resolve, reject) => {
          fs6.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
            if (err) return reject(err);
            resolve({ bytesWritten, buffer: buffer2 });
          });
        });
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/win32.js
  var require_win32 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/win32.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      function getRootPath(p) {
        p = path4.normalize(path4.resolve(p)).split(path4.sep);
        if (p.length > 0) return p[0];
        return null;
      }
      __name(getRootPath, "getRootPath");
      var INVALID_PATH_CHARS = /[<>:"|?*]/;
      function invalidWin32Path(p) {
        const rp = getRootPath(p);
        p = p.replace(rp, "");
        return INVALID_PATH_CHARS.test(p);
      }
      __name(invalidWin32Path, "invalidWin32Path");
      module.exports = {
        getRootPath,
        invalidWin32Path,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/mkdirs.js
  var require_mkdirs2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/mkdirs.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var invalidWin32Path = require_win32().invalidWin32Path;
      var o777 = parseInt("0777", 8);
      function mkdirs(p, opts, callback, made) {
        if (typeof opts === "function") {
          callback = opts;
          opts = {};
        } else if (!opts || typeof opts !== "object") {
          opts = { mode: opts };
        }
        if (process.platform === "win32" && invalidWin32Path(p)) {
          const errInval = new Error(
            p + " contains invalid WIN32 path characters.",
          );
          errInval.code = "EINVAL";
          return callback(errInval);
        }
        let mode = opts.mode;
        const xfs = opts.fs || fs6;
        if (mode === void 0) {
          mode = o777 & ~process.umask();
        }
        if (!made) made = null;
        callback = callback || function () {};
        p = path4.resolve(p);
        xfs.mkdir(p, mode, (er) => {
          if (!er) {
            made = made || p;
            return callback(null, made);
          }
          switch (er.code) {
            case "ENOENT":
              if (path4.dirname(p) === p) return callback(er);
              mkdirs(path4.dirname(p), opts, (er2, made2) => {
                if (er2) callback(er2, made2);
                else mkdirs(p, opts, callback, made2);
              });
              break;
            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
              xfs.stat(p, (er2, stat) => {
                if (er2 || !stat.isDirectory()) callback(er, made);
                else callback(null, made);
              });
              break;
          }
        });
      }
      __name(mkdirs, "mkdirs");
      module.exports = mkdirs;
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/mkdirs-sync.js
  var require_mkdirs_sync = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/mkdirs-sync.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var invalidWin32Path = require_win32().invalidWin32Path;
      var o777 = parseInt("0777", 8);
      function mkdirsSync(p, opts, made) {
        if (!opts || typeof opts !== "object") {
          opts = { mode: opts };
        }
        let mode = opts.mode;
        const xfs = opts.fs || fs6;
        if (process.platform === "win32" && invalidWin32Path(p)) {
          const errInval = new Error(
            p + " contains invalid WIN32 path characters.",
          );
          errInval.code = "EINVAL";
          throw errInval;
        }
        if (mode === void 0) {
          mode = o777 & ~process.umask();
        }
        if (!made) made = null;
        p = path4.resolve(p);
        try {
          xfs.mkdirSync(p, mode);
          made = made || p;
        } catch (err0) {
          if (err0.code === "ENOENT") {
            if (path4.dirname(p) === p) throw err0;
            made = mkdirsSync(path4.dirname(p), opts, made);
            mkdirsSync(p, opts, made);
          } else {
            let stat;
            try {
              stat = xfs.statSync(p);
            } catch (err1) {
              throw err0;
            }
            if (!stat.isDirectory()) throw err0;
          }
        }
        return made;
      }
      __name(mkdirsSync, "mkdirsSync");
      module.exports = mkdirsSync;
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/index.js
  var require_mkdirs3 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/mkdirs/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var mkdirs = u(require_mkdirs2());
      var mkdirsSync = require_mkdirs_sync();
      module.exports = {
        mkdirs,
        mkdirsSync,
        // alias
        mkdirp: mkdirs,
        mkdirpSync: mkdirsSync,
        ensureDir: mkdirs,
        ensureDirSync: mkdirsSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/util/utimes.js
  var require_utimes2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/util/utimes.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var os = __require("os");
      var path4 = __require("path");
      function hasMillisResSync() {
        let tmpfile = path4.join(
          "millis-test-sync" +
            Date.now().toString() +
            Math.random().toString().slice(2),
        );
        tmpfile = path4.join(os.tmpdir(), tmpfile);
        const d = /* @__PURE__ */ new Date(1435410243862);
        fs6.writeFileSync(
          tmpfile,
          "https://github.com/jprichardson/node-fs-extra/pull/141",
        );
        const fd = fs6.openSync(tmpfile, "r+");
        fs6.futimesSync(fd, d, d);
        fs6.closeSync(fd);
        return fs6.statSync(tmpfile).mtime > 1435410243e3;
      }
      __name(hasMillisResSync, "hasMillisResSync");
      function hasMillisRes(callback) {
        let tmpfile = path4.join(
          "millis-test" +
            Date.now().toString() +
            Math.random().toString().slice(2),
        );
        tmpfile = path4.join(os.tmpdir(), tmpfile);
        const d = /* @__PURE__ */ new Date(1435410243862);
        fs6.writeFile(
          tmpfile,
          "https://github.com/jprichardson/node-fs-extra/pull/141",
          (err) => {
            if (err) return callback(err);
            fs6.open(tmpfile, "r+", (err2, fd) => {
              if (err2) return callback(err2);
              fs6.futimes(fd, d, d, (err3) => {
                if (err3) return callback(err3);
                fs6.close(fd, (err4) => {
                  if (err4) return callback(err4);
                  fs6.stat(tmpfile, (err5, stats) => {
                    if (err5) return callback(err5);
                    callback(null, stats.mtime > 1435410243e3);
                  });
                });
              });
            });
          },
        );
      }
      __name(hasMillisRes, "hasMillisRes");
      function timeRemoveMillis(timestamp) {
        if (typeof timestamp === "number") {
          return Math.floor(timestamp / 1e3) * 1e3;
        } else if (timestamp instanceof Date) {
          return new Date(Math.floor(timestamp.getTime() / 1e3) * 1e3);
        } else {
          throw new Error(
            "fs-extra: timeRemoveMillis() unknown parameter type",
          );
        }
      }
      __name(timeRemoveMillis, "timeRemoveMillis");
      function utimesMillis(path5, atime, mtime, callback) {
        fs6.open(path5, "r+", (err, fd) => {
          if (err) return callback(err);
          fs6.futimes(fd, atime, mtime, (futimesErr) => {
            fs6.close(fd, (closeErr) => {
              if (callback) callback(futimesErr || closeErr);
            });
          });
        });
      }
      __name(utimesMillis, "utimesMillis");
      function utimesMillisSync(path5, atime, mtime) {
        const fd = fs6.openSync(path5, "r+");
        fs6.futimesSync(fd, atime, mtime);
        return fs6.closeSync(fd);
      }
      __name(utimesMillisSync, "utimesMillisSync");
      module.exports = {
        hasMillisRes,
        hasMillisResSync,
        timeRemoveMillis,
        utimesMillis,
        utimesMillisSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/util/buffer.js
  var require_buffer = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/util/buffer.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = function (size) {
        if (typeof Buffer.allocUnsafe === "function") {
          try {
            return Buffer.allocUnsafe(size);
          } catch (e) {
            return new Buffer(size);
          }
        }
        return new Buffer(size);
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy-sync/copy-sync.js
  var require_copy_sync2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy-sync/copy-sync.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var mkdirpSync = require_mkdirs3().mkdirsSync;
      var utimesSync = require_utimes2().utimesMillisSync;
      var notExist = Symbol("notExist");
      function copySync(src, dest, opts) {
        if (typeof opts === "function") {
          opts = { filter: opts };
        }
        opts = opts || {};
        opts.clobber = "clobber" in opts ? !!opts.clobber : true;
        opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
        if (opts.preserveTimestamps && process.arch === "ia32") {
          console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
        }
        const destStat = checkPaths(src, dest);
        if (opts.filter && !opts.filter(src, dest)) return;
        const destParent = path4.dirname(dest);
        if (!fs6.existsSync(destParent)) mkdirpSync(destParent);
        return startCopy(destStat, src, dest, opts);
      }
      __name(copySync, "copySync");
      function startCopy(destStat, src, dest, opts) {
        if (opts.filter && !opts.filter(src, dest)) return;
        return getStats(destStat, src, dest, opts);
      }
      __name(startCopy, "startCopy");
      function getStats(destStat, src, dest, opts) {
        const statSync = opts.dereference ? fs6.statSync : fs6.lstatSync;
        const srcStat = statSync(src);
        if (srcStat.isDirectory())
          return onDir(srcStat, destStat, src, dest, opts);
        else if (
          srcStat.isFile() ||
          srcStat.isCharacterDevice() ||
          srcStat.isBlockDevice()
        )
          return onFile(srcStat, destStat, src, dest, opts);
        else if (srcStat.isSymbolicLink())
          return onLink(destStat, src, dest, opts);
      }
      __name(getStats, "getStats");
      function onFile(srcStat, destStat, src, dest, opts) {
        if (destStat === notExist) return copyFile(srcStat, src, dest, opts);
        return mayCopyFile(srcStat, src, dest, opts);
      }
      __name(onFile, "onFile");
      function mayCopyFile(srcStat, src, dest, opts) {
        if (opts.overwrite) {
          fs6.unlinkSync(dest);
          return copyFile(srcStat, src, dest, opts);
        } else if (opts.errorOnExist) {
          throw new Error(`'${dest}' already exists`);
        }
      }
      __name(mayCopyFile, "mayCopyFile");
      function copyFile(srcStat, src, dest, opts) {
        if (typeof fs6.copyFileSync === "function") {
          fs6.copyFileSync(src, dest);
          fs6.chmodSync(dest, srcStat.mode);
          if (opts.preserveTimestamps) {
            return utimesSync(dest, srcStat.atime, srcStat.mtime);
          }
          return;
        }
        return copyFileFallback(srcStat, src, dest, opts);
      }
      __name(copyFile, "copyFile");
      function copyFileFallback(srcStat, src, dest, opts) {
        const BUF_LENGTH = 64 * 1024;
        const _buff = require_buffer()(BUF_LENGTH);
        const fdr = fs6.openSync(src, "r");
        const fdw = fs6.openSync(dest, "w", srcStat.mode);
        let pos = 0;
        while (pos < srcStat.size) {
          const bytesRead = fs6.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
          fs6.writeSync(fdw, _buff, 0, bytesRead);
          pos += bytesRead;
        }
        if (opts.preserveTimestamps)
          fs6.futimesSync(fdw, srcStat.atime, srcStat.mtime);
        fs6.closeSync(fdr);
        fs6.closeSync(fdw);
      }
      __name(copyFileFallback, "copyFileFallback");
      function onDir(srcStat, destStat, src, dest, opts) {
        if (destStat === notExist)
          return mkDirAndCopy(srcStat, src, dest, opts);
        if (destStat && !destStat.isDirectory()) {
          throw new Error(
            `Cannot overwrite non-directory '${dest}' with directory '${src}'.`,
          );
        }
        return copyDir(src, dest, opts);
      }
      __name(onDir, "onDir");
      function mkDirAndCopy(srcStat, src, dest, opts) {
        fs6.mkdirSync(dest);
        copyDir(src, dest, opts);
        return fs6.chmodSync(dest, srcStat.mode);
      }
      __name(mkDirAndCopy, "mkDirAndCopy");
      function copyDir(src, dest, opts) {
        fs6
          .readdirSync(src)
          .forEach((item) => copyDirItem(item, src, dest, opts));
      }
      __name(copyDir, "copyDir");
      function copyDirItem(item, src, dest, opts) {
        const srcItem = path4.join(src, item);
        const destItem = path4.join(dest, item);
        const destStat = checkPaths(srcItem, destItem);
        return startCopy(destStat, srcItem, destItem, opts);
      }
      __name(copyDirItem, "copyDirItem");
      function onLink(destStat, src, dest, opts) {
        let resolvedSrc = fs6.readlinkSync(src);
        if (opts.dereference) {
          resolvedSrc = path4.resolve(process.cwd(), resolvedSrc);
        }
        if (destStat === notExist) {
          return fs6.symlinkSync(resolvedSrc, dest);
        } else {
          let resolvedDest;
          try {
            resolvedDest = fs6.readlinkSync(dest);
          } catch (err) {
            if (err.code === "EINVAL" || err.code === "UNKNOWN")
              return fs6.symlinkSync(resolvedSrc, dest);
            throw err;
          }
          if (opts.dereference) {
            resolvedDest = path4.resolve(process.cwd(), resolvedDest);
          }
          if (isSrcSubdir(resolvedSrc, resolvedDest)) {
            throw new Error(
              `Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`,
            );
          }
          if (
            fs6.statSync(dest).isDirectory() &&
            isSrcSubdir(resolvedDest, resolvedSrc)
          ) {
            throw new Error(
              `Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`,
            );
          }
          return copyLink(resolvedSrc, dest);
        }
      }
      __name(onLink, "onLink");
      function copyLink(resolvedSrc, dest) {
        fs6.unlinkSync(dest);
        return fs6.symlinkSync(resolvedSrc, dest);
      }
      __name(copyLink, "copyLink");
      function isSrcSubdir(src, dest) {
        const srcArray = path4.resolve(src).split(path4.sep);
        const destArray = path4.resolve(dest).split(path4.sep);
        return srcArray.reduce(
          (acc, current, i) => acc && destArray[i] === current,
          true,
        );
      }
      __name(isSrcSubdir, "isSrcSubdir");
      function checkStats(src, dest) {
        const srcStat = fs6.statSync(src);
        let destStat;
        try {
          destStat = fs6.statSync(dest);
        } catch (err) {
          if (err.code === "ENOENT") return { srcStat, destStat: notExist };
          throw err;
        }
        return { srcStat, destStat };
      }
      __name(checkStats, "checkStats");
      function checkPaths(src, dest) {
        const { srcStat, destStat } = checkStats(src, dest);
        if (destStat.ino && destStat.ino === srcStat.ino) {
          throw new Error("Source and destination must not be the same.");
        }
        if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
          throw new Error(
            `Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`,
          );
        }
        return destStat;
      }
      __name(checkPaths, "checkPaths");
      module.exports = copySync;
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy-sync/index.js
  var require_copy_sync3 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy-sync/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = {
        copySync: require_copy_sync2(),
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/path-exists/index.js
  var require_path_exists2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/path-exists/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromPromise;
      var fs6 = require_fs6();
      function pathExists(path4) {
        return fs6
          .access(path4)
          .then(() => true)
          .catch(() => false);
      }
      __name(pathExists, "pathExists");
      module.exports = {
        pathExists: u(pathExists),
        pathExistsSync: fs6.existsSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy/copy.js
  var require_copy3 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy/copy.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var mkdirp = require_mkdirs3().mkdirs;
      var pathExists = require_path_exists2().pathExists;
      var utimes = require_utimes2().utimesMillis;
      var notExist = Symbol("notExist");
      function copy(src, dest, opts, cb) {
        if (typeof opts === "function" && !cb) {
          cb = opts;
          opts = {};
        } else if (typeof opts === "function") {
          opts = { filter: opts };
        }
        cb = cb || function () {};
        opts = opts || {};
        opts.clobber = "clobber" in opts ? !!opts.clobber : true;
        opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
        if (opts.preserveTimestamps && process.arch === "ia32") {
          console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
        }
        checkPaths(src, dest, (err, destStat) => {
          if (err) return cb(err);
          if (opts.filter)
            return handleFilter(checkParentDir, destStat, src, dest, opts, cb);
          return checkParentDir(destStat, src, dest, opts, cb);
        });
      }
      __name(copy, "copy");
      function checkParentDir(destStat, src, dest, opts, cb) {
        const destParent = path4.dirname(dest);
        pathExists(destParent, (err, dirExists) => {
          if (err) return cb(err);
          if (dirExists) return startCopy(destStat, src, dest, opts, cb);
          mkdirp(destParent, (err2) => {
            if (err2) return cb(err2);
            return startCopy(destStat, src, dest, opts, cb);
          });
        });
      }
      __name(checkParentDir, "checkParentDir");
      function handleFilter(onInclude, destStat, src, dest, opts, cb) {
        Promise.resolve(opts.filter(src, dest)).then(
          (include) => {
            if (include) {
              if (destStat) return onInclude(destStat, src, dest, opts, cb);
              return onInclude(src, dest, opts, cb);
            }
            return cb();
          },
          (error) => cb(error),
        );
      }
      __name(handleFilter, "handleFilter");
      function startCopy(destStat, src, dest, opts, cb) {
        if (opts.filter)
          return handleFilter(getStats, destStat, src, dest, opts, cb);
        return getStats(destStat, src, dest, opts, cb);
      }
      __name(startCopy, "startCopy");
      function getStats(destStat, src, dest, opts, cb) {
        const stat = opts.dereference ? fs6.stat : fs6.lstat;
        stat(src, (err, srcStat) => {
          if (err) return cb(err);
          if (srcStat.isDirectory())
            return onDir(srcStat, destStat, src, dest, opts, cb);
          else if (
            srcStat.isFile() ||
            srcStat.isCharacterDevice() ||
            srcStat.isBlockDevice()
          )
            return onFile(srcStat, destStat, src, dest, opts, cb);
          else if (srcStat.isSymbolicLink())
            return onLink(destStat, src, dest, opts, cb);
        });
      }
      __name(getStats, "getStats");
      function onFile(srcStat, destStat, src, dest, opts, cb) {
        if (destStat === notExist)
          return copyFile(srcStat, src, dest, opts, cb);
        return mayCopyFile(srcStat, src, dest, opts, cb);
      }
      __name(onFile, "onFile");
      function mayCopyFile(srcStat, src, dest, opts, cb) {
        if (opts.overwrite) {
          fs6.unlink(dest, (err) => {
            if (err) return cb(err);
            return copyFile(srcStat, src, dest, opts, cb);
          });
        } else if (opts.errorOnExist) {
          return cb(new Error(`'${dest}' already exists`));
        } else return cb();
      }
      __name(mayCopyFile, "mayCopyFile");
      function copyFile(srcStat, src, dest, opts, cb) {
        if (typeof fs6.copyFile === "function") {
          return fs6.copyFile(src, dest, (err) => {
            if (err) return cb(err);
            return setDestModeAndTimestamps(srcStat, dest, opts, cb);
          });
        }
        return copyFileFallback(srcStat, src, dest, opts, cb);
      }
      __name(copyFile, "copyFile");
      function copyFileFallback(srcStat, src, dest, opts, cb) {
        const rs = fs6.createReadStream(src);
        rs.on("error", (err) => cb(err)).once("open", () => {
          const ws = fs6.createWriteStream(dest, { mode: srcStat.mode });
          ws.on("error", (err) => cb(err))
            .on("open", () => rs.pipe(ws))
            .once("close", () =>
              setDestModeAndTimestamps(srcStat, dest, opts, cb),
            );
        });
      }
      __name(copyFileFallback, "copyFileFallback");
      function setDestModeAndTimestamps(srcStat, dest, opts, cb) {
        fs6.chmod(dest, srcStat.mode, (err) => {
          if (err) return cb(err);
          if (opts.preserveTimestamps) {
            return utimes(dest, srcStat.atime, srcStat.mtime, cb);
          }
          return cb();
        });
      }
      __name(setDestModeAndTimestamps, "setDestModeAndTimestamps");
      function onDir(srcStat, destStat, src, dest, opts, cb) {
        if (destStat === notExist)
          return mkDirAndCopy(srcStat, src, dest, opts, cb);
        if (destStat && !destStat.isDirectory()) {
          return cb(
            new Error(
              `Cannot overwrite non-directory '${dest}' with directory '${src}'.`,
            ),
          );
        }
        return copyDir(src, dest, opts, cb);
      }
      __name(onDir, "onDir");
      function mkDirAndCopy(srcStat, src, dest, opts, cb) {
        fs6.mkdir(dest, (err) => {
          if (err) return cb(err);
          copyDir(src, dest, opts, (err2) => {
            if (err2) return cb(err2);
            return fs6.chmod(dest, srcStat.mode, cb);
          });
        });
      }
      __name(mkDirAndCopy, "mkDirAndCopy");
      function copyDir(src, dest, opts, cb) {
        fs6.readdir(src, (err, items) => {
          if (err) return cb(err);
          return copyDirItems(items, src, dest, opts, cb);
        });
      }
      __name(copyDir, "copyDir");
      function copyDirItems(items, src, dest, opts, cb) {
        const item = items.pop();
        if (!item) return cb();
        return copyDirItem(items, item, src, dest, opts, cb);
      }
      __name(copyDirItems, "copyDirItems");
      function copyDirItem(items, item, src, dest, opts, cb) {
        const srcItem = path4.join(src, item);
        const destItem = path4.join(dest, item);
        checkPaths(srcItem, destItem, (err, destStat) => {
          if (err) return cb(err);
          startCopy(destStat, srcItem, destItem, opts, (err2) => {
            if (err2) return cb(err2);
            return copyDirItems(items, src, dest, opts, cb);
          });
        });
      }
      __name(copyDirItem, "copyDirItem");
      function onLink(destStat, src, dest, opts, cb) {
        fs6.readlink(src, (err, resolvedSrc) => {
          if (err) return cb(err);
          if (opts.dereference) {
            resolvedSrc = path4.resolve(process.cwd(), resolvedSrc);
          }
          if (destStat === notExist) {
            return fs6.symlink(resolvedSrc, dest, cb);
          } else {
            fs6.readlink(dest, (err2, resolvedDest) => {
              if (err2) {
                if (err2.code === "EINVAL" || err2.code === "UNKNOWN")
                  return fs6.symlink(resolvedSrc, dest, cb);
                return cb(err2);
              }
              if (opts.dereference) {
                resolvedDest = path4.resolve(process.cwd(), resolvedDest);
              }
              if (isSrcSubdir(resolvedSrc, resolvedDest)) {
                return cb(
                  new Error(
                    `Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`,
                  ),
                );
              }
              if (
                destStat.isDirectory() &&
                isSrcSubdir(resolvedDest, resolvedSrc)
              ) {
                return cb(
                  new Error(
                    `Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`,
                  ),
                );
              }
              return copyLink(resolvedSrc, dest, cb);
            });
          }
        });
      }
      __name(onLink, "onLink");
      function copyLink(resolvedSrc, dest, cb) {
        fs6.unlink(dest, (err) => {
          if (err) return cb(err);
          return fs6.symlink(resolvedSrc, dest, cb);
        });
      }
      __name(copyLink, "copyLink");
      function isSrcSubdir(src, dest) {
        const srcArray = path4.resolve(src).split(path4.sep);
        const destArray = path4.resolve(dest).split(path4.sep);
        return srcArray.reduce(
          (acc, current, i) => acc && destArray[i] === current,
          true,
        );
      }
      __name(isSrcSubdir, "isSrcSubdir");
      function checkStats(src, dest, cb) {
        fs6.stat(src, (err, srcStat) => {
          if (err) return cb(err);
          fs6.stat(dest, (err2, destStat) => {
            if (err2) {
              if (err2.code === "ENOENT")
                return cb(null, { srcStat, destStat: notExist });
              return cb(err2);
            }
            return cb(null, { srcStat, destStat });
          });
        });
      }
      __name(checkStats, "checkStats");
      function checkPaths(src, dest, cb) {
        checkStats(src, dest, (err, stats) => {
          if (err) return cb(err);
          const { srcStat, destStat } = stats;
          if (destStat.ino && destStat.ino === srcStat.ino) {
            return cb(
              new Error("Source and destination must not be the same."),
            );
          }
          if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
            return cb(
              new Error(
                `Cannot copy '${src}' to a subdirectory of itself, '${dest}'.`,
              ),
            );
          }
          return cb(null, destStat);
        });
      }
      __name(checkPaths, "checkPaths");
      module.exports = copy;
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy/index.js
  var require_copy4 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/copy/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      module.exports = {
        copy: u(require_copy3()),
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/remove/rimraf.js
  var require_rimraf = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/remove/rimraf.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var assert = __require("assert");
      var isWindows = process.platform === "win32";
      function defaults(options) {
        const methods = [
          "unlink",
          "chmod",
          "stat",
          "lstat",
          "rmdir",
          "readdir",
        ];
        methods.forEach((m) => {
          options[m] = options[m] || fs6[m];
          m = m + "Sync";
          options[m] = options[m] || fs6[m];
        });
        options.maxBusyTries = options.maxBusyTries || 3;
      }
      __name(defaults, "defaults");
      function rimraf(p, options, cb) {
        let busyTries = 0;
        if (typeof options === "function") {
          cb = options;
          options = {};
        }
        assert(p, "rimraf: missing path");
        assert.strictEqual(
          typeof p,
          "string",
          "rimraf: path should be a string",
        );
        assert.strictEqual(
          typeof cb,
          "function",
          "rimraf: callback function required",
        );
        assert(options, "rimraf: invalid options argument provided");
        assert.strictEqual(
          typeof options,
          "object",
          "rimraf: options should be object",
        );
        defaults(options);
        rimraf_(
          p,
          options,
          /* @__PURE__ */ __name(function CB(er) {
            if (er) {
              if (
                (er.code === "EBUSY" ||
                  er.code === "ENOTEMPTY" ||
                  er.code === "EPERM") &&
                busyTries < options.maxBusyTries
              ) {
                busyTries++;
                const time = busyTries * 100;
                return setTimeout(() => rimraf_(p, options, CB), time);
              }
              if (er.code === "ENOENT") er = null;
            }
            cb(er);
          }, "CB"),
        );
      }
      __name(rimraf, "rimraf");
      function rimraf_(p, options, cb) {
        assert(p);
        assert(options);
        assert(typeof cb === "function");
        options.lstat(p, (er, st) => {
          if (er && er.code === "ENOENT") {
            return cb(null);
          }
          if (er && er.code === "EPERM" && isWindows) {
            return fixWinEPERM(p, options, er, cb);
          }
          if (st && st.isDirectory()) {
            return rmdir(p, options, er, cb);
          }
          options.unlink(p, (er2) => {
            if (er2) {
              if (er2.code === "ENOENT") {
                return cb(null);
              }
              if (er2.code === "EPERM") {
                return isWindows
                  ? fixWinEPERM(p, options, er2, cb)
                  : rmdir(p, options, er2, cb);
              }
              if (er2.code === "EISDIR") {
                return rmdir(p, options, er2, cb);
              }
            }
            return cb(er2);
          });
        });
      }
      __name(rimraf_, "rimraf_");
      function fixWinEPERM(p, options, er, cb) {
        assert(p);
        assert(options);
        assert(typeof cb === "function");
        if (er) {
          assert(er instanceof Error);
        }
        options.chmod(p, 438, (er2) => {
          if (er2) {
            cb(er2.code === "ENOENT" ? null : er);
          } else {
            options.stat(p, (er3, stats) => {
              if (er3) {
                cb(er3.code === "ENOENT" ? null : er);
              } else if (stats.isDirectory()) {
                rmdir(p, options, er, cb);
              } else {
                options.unlink(p, cb);
              }
            });
          }
        });
      }
      __name(fixWinEPERM, "fixWinEPERM");
      function fixWinEPERMSync(p, options, er) {
        let stats;
        assert(p);
        assert(options);
        if (er) {
          assert(er instanceof Error);
        }
        try {
          options.chmodSync(p, 438);
        } catch (er2) {
          if (er2.code === "ENOENT") {
            return;
          } else {
            throw er;
          }
        }
        try {
          stats = options.statSync(p);
        } catch (er3) {
          if (er3.code === "ENOENT") {
            return;
          } else {
            throw er;
          }
        }
        if (stats.isDirectory()) {
          rmdirSync(p, options, er);
        } else {
          options.unlinkSync(p);
        }
      }
      __name(fixWinEPERMSync, "fixWinEPERMSync");
      function rmdir(p, options, originalEr, cb) {
        assert(p);
        assert(options);
        if (originalEr) {
          assert(originalEr instanceof Error);
        }
        assert(typeof cb === "function");
        options.rmdir(p, (er) => {
          if (
            er &&
            (er.code === "ENOTEMPTY" ||
              er.code === "EEXIST" ||
              er.code === "EPERM")
          ) {
            rmkids(p, options, cb);
          } else if (er && er.code === "ENOTDIR") {
            cb(originalEr);
          } else {
            cb(er);
          }
        });
      }
      __name(rmdir, "rmdir");
      function rmkids(p, options, cb) {
        assert(p);
        assert(options);
        assert(typeof cb === "function");
        options.readdir(p, (er, files) => {
          if (er) return cb(er);
          let n = files.length;
          let errState;
          if (n === 0) return options.rmdir(p, cb);
          files.forEach((f) => {
            rimraf(path4.join(p, f), options, (er2) => {
              if (errState) {
                return;
              }
              if (er2) return cb((errState = er2));
              if (--n === 0) {
                options.rmdir(p, cb);
              }
            });
          });
        });
      }
      __name(rmkids, "rmkids");
      function rimrafSync(p, options) {
        let st;
        options = options || {};
        defaults(options);
        assert(p, "rimraf: missing path");
        assert.strictEqual(
          typeof p,
          "string",
          "rimraf: path should be a string",
        );
        assert(options, "rimraf: missing options");
        assert.strictEqual(
          typeof options,
          "object",
          "rimraf: options should be object",
        );
        try {
          st = options.lstatSync(p);
        } catch (er) {
          if (er.code === "ENOENT") {
            return;
          }
          if (er.code === "EPERM" && isWindows) {
            fixWinEPERMSync(p, options, er);
          }
        }
        try {
          if (st && st.isDirectory()) {
            rmdirSync(p, options, null);
          } else {
            options.unlinkSync(p);
          }
        } catch (er) {
          if (er.code === "ENOENT") {
            return;
          } else if (er.code === "EPERM") {
            return isWindows
              ? fixWinEPERMSync(p, options, er)
              : rmdirSync(p, options, er);
          } else if (er.code !== "EISDIR") {
            throw er;
          }
          rmdirSync(p, options, er);
        }
      }
      __name(rimrafSync, "rimrafSync");
      function rmdirSync(p, options, originalEr) {
        assert(p);
        assert(options);
        if (originalEr) {
          assert(originalEr instanceof Error);
        }
        try {
          options.rmdirSync(p);
        } catch (er) {
          if (er.code === "ENOTDIR") {
            throw originalEr;
          } else if (
            er.code === "ENOTEMPTY" ||
            er.code === "EEXIST" ||
            er.code === "EPERM"
          ) {
            rmkidsSync(p, options);
          } else if (er.code !== "ENOENT") {
            throw er;
          }
        }
      }
      __name(rmdirSync, "rmdirSync");
      function rmkidsSync(p, options) {
        assert(p);
        assert(options);
        options
          .readdirSync(p)
          .forEach((f) => rimrafSync(path4.join(p, f), options));
        if (isWindows) {
          const startTime = Date.now();
          do {
            try {
              const ret = options.rmdirSync(p, options);
              return ret;
            } catch (er) {}
          } while (Date.now() - startTime < 500);
        } else {
          const ret = options.rmdirSync(p, options);
          return ret;
        }
      }
      __name(rmkidsSync, "rmkidsSync");
      module.exports = rimraf;
      rimraf.sync = rimrafSync;
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/remove/index.js
  var require_remove3 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/remove/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var rimraf = require_rimraf();
      module.exports = {
        remove: u(rimraf),
        removeSync: rimraf.sync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/empty/index.js
  var require_empty2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/empty/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var fs6 = __require("fs");
      var path4 = __require("path");
      var mkdir = require_mkdirs3();
      var remove = require_remove3();
      var emptyDir = u(
        /* @__PURE__ */ __name(function emptyDir2(dir, callback) {
          callback = callback || function () {};
          fs6.readdir(dir, (err, items) => {
            if (err) return mkdir.mkdirs(dir, callback);
            items = items.map((item) => path4.join(dir, item));
            deleteItem();
            function deleteItem() {
              const item = items.pop();
              if (!item) return callback();
              remove.remove(item, (err2) => {
                if (err2) return callback(err2);
                deleteItem();
              });
            }
            __name(deleteItem, "deleteItem");
          });
        }, "emptyDir"),
      );
      function emptyDirSync(dir) {
        let items;
        try {
          items = fs6.readdirSync(dir);
        } catch (err) {
          return mkdir.mkdirsSync(dir);
        }
        items.forEach((item) => {
          item = path4.join(dir, item);
          remove.removeSync(item);
        });
      }
      __name(emptyDirSync, "emptyDirSync");
      module.exports = {
        emptyDirSync,
        emptydirSync: emptyDirSync,
        emptyDir,
        emptydir: emptyDir,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/file.js
  var require_file3 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/file.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var path4 = __require("path");
      var fs6 = require_graceful_fs();
      var mkdir = require_mkdirs3();
      var pathExists = require_path_exists2().pathExists;
      function createFile(file, callback) {
        function makeFile() {
          fs6.writeFile(file, "", (err) => {
            if (err) return callback(err);
            callback();
          });
        }
        __name(makeFile, "makeFile");
        fs6.stat(file, (err, stats) => {
          if (!err && stats.isFile()) return callback();
          const dir = path4.dirname(file);
          pathExists(dir, (err2, dirExists) => {
            if (err2) return callback(err2);
            if (dirExists) return makeFile();
            mkdir.mkdirs(dir, (err3) => {
              if (err3) return callback(err3);
              makeFile();
            });
          });
        });
      }
      __name(createFile, "createFile");
      function createFileSync(file) {
        let stats;
        try {
          stats = fs6.statSync(file);
        } catch (e) {}
        if (stats && stats.isFile()) return;
        const dir = path4.dirname(file);
        if (!fs6.existsSync(dir)) {
          mkdir.mkdirsSync(dir);
        }
        fs6.writeFileSync(file, "");
      }
      __name(createFileSync, "createFileSync");
      module.exports = {
        createFile: u(createFile),
        createFileSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/link.js
  var require_link2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/link.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var path4 = __require("path");
      var fs6 = require_graceful_fs();
      var mkdir = require_mkdirs3();
      var pathExists = require_path_exists2().pathExists;
      function createLink(srcpath, dstpath, callback) {
        function makeLink(srcpath2, dstpath2) {
          fs6.link(srcpath2, dstpath2, (err) => {
            if (err) return callback(err);
            callback(null);
          });
        }
        __name(makeLink, "makeLink");
        pathExists(dstpath, (err, destinationExists) => {
          if (err) return callback(err);
          if (destinationExists) return callback(null);
          fs6.lstat(srcpath, (err2) => {
            if (err2) {
              err2.message = err2.message.replace("lstat", "ensureLink");
              return callback(err2);
            }
            const dir = path4.dirname(dstpath);
            pathExists(dir, (err3, dirExists) => {
              if (err3) return callback(err3);
              if (dirExists) return makeLink(srcpath, dstpath);
              mkdir.mkdirs(dir, (err4) => {
                if (err4) return callback(err4);
                makeLink(srcpath, dstpath);
              });
            });
          });
        });
      }
      __name(createLink, "createLink");
      function createLinkSync(srcpath, dstpath) {
        const destinationExists = fs6.existsSync(dstpath);
        if (destinationExists) return void 0;
        try {
          fs6.lstatSync(srcpath);
        } catch (err) {
          err.message = err.message.replace("lstat", "ensureLink");
          throw err;
        }
        const dir = path4.dirname(dstpath);
        const dirExists = fs6.existsSync(dir);
        if (dirExists) return fs6.linkSync(srcpath, dstpath);
        mkdir.mkdirsSync(dir);
        return fs6.linkSync(srcpath, dstpath);
      }
      __name(createLinkSync, "createLinkSync");
      module.exports = {
        createLink: u(createLink),
        createLinkSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink-paths.js
  var require_symlink_paths2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink-paths.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var fs6 = require_graceful_fs();
      var pathExists = require_path_exists2().pathExists;
      function symlinkPaths(srcpath, dstpath, callback) {
        if (path4.isAbsolute(srcpath)) {
          return fs6.lstat(srcpath, (err) => {
            if (err) {
              err.message = err.message.replace("lstat", "ensureSymlink");
              return callback(err);
            }
            return callback(null, {
              toCwd: srcpath,
              toDst: srcpath,
            });
          });
        } else {
          const dstdir = path4.dirname(dstpath);
          const relativeToDst = path4.join(dstdir, srcpath);
          return pathExists(relativeToDst, (err, exists) => {
            if (err) return callback(err);
            if (exists) {
              return callback(null, {
                toCwd: relativeToDst,
                toDst: srcpath,
              });
            } else {
              return fs6.lstat(srcpath, (err2) => {
                if (err2) {
                  err2.message = err2.message.replace("lstat", "ensureSymlink");
                  return callback(err2);
                }
                return callback(null, {
                  toCwd: srcpath,
                  toDst: path4.relative(dstdir, srcpath),
                });
              });
            }
          });
        }
      }
      __name(symlinkPaths, "symlinkPaths");
      function symlinkPathsSync(srcpath, dstpath) {
        let exists;
        if (path4.isAbsolute(srcpath)) {
          exists = fs6.existsSync(srcpath);
          if (!exists) throw new Error("absolute srcpath does not exist");
          return {
            toCwd: srcpath,
            toDst: srcpath,
          };
        } else {
          const dstdir = path4.dirname(dstpath);
          const relativeToDst = path4.join(dstdir, srcpath);
          exists = fs6.existsSync(relativeToDst);
          if (exists) {
            return {
              toCwd: relativeToDst,
              toDst: srcpath,
            };
          } else {
            exists = fs6.existsSync(srcpath);
            if (!exists) throw new Error("relative srcpath does not exist");
            return {
              toCwd: srcpath,
              toDst: path4.relative(dstdir, srcpath),
            };
          }
        }
      }
      __name(symlinkPathsSync, "symlinkPathsSync");
      module.exports = {
        symlinkPaths,
        symlinkPathsSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink-type.js
  var require_symlink_type2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink-type.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      function symlinkType(srcpath, type, callback) {
        callback = typeof type === "function" ? type : callback;
        type = typeof type === "function" ? false : type;
        if (type) return callback(null, type);
        fs6.lstat(srcpath, (err, stats) => {
          if (err) return callback(null, "file");
          type = stats && stats.isDirectory() ? "dir" : "file";
          callback(null, type);
        });
      }
      __name(symlinkType, "symlinkType");
      function symlinkTypeSync(srcpath, type) {
        let stats;
        if (type) return type;
        try {
          stats = fs6.lstatSync(srcpath);
        } catch (e) {
          return "file";
        }
        return stats && stats.isDirectory() ? "dir" : "file";
      }
      __name(symlinkTypeSync, "symlinkTypeSync");
      module.exports = {
        symlinkType,
        symlinkTypeSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink.js
  var require_symlink2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/symlink.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var path4 = __require("path");
      var fs6 = require_graceful_fs();
      var _mkdirs = require_mkdirs3();
      var mkdirs = _mkdirs.mkdirs;
      var mkdirsSync = _mkdirs.mkdirsSync;
      var _symlinkPaths = require_symlink_paths2();
      var symlinkPaths = _symlinkPaths.symlinkPaths;
      var symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
      var _symlinkType = require_symlink_type2();
      var symlinkType = _symlinkType.symlinkType;
      var symlinkTypeSync = _symlinkType.symlinkTypeSync;
      var pathExists = require_path_exists2().pathExists;
      function createSymlink(srcpath, dstpath, type, callback) {
        callback = typeof type === "function" ? type : callback;
        type = typeof type === "function" ? false : type;
        pathExists(dstpath, (err, destinationExists) => {
          if (err) return callback(err);
          if (destinationExists) return callback(null);
          symlinkPaths(srcpath, dstpath, (err2, relative) => {
            if (err2) return callback(err2);
            srcpath = relative.toDst;
            symlinkType(relative.toCwd, type, (err3, type2) => {
              if (err3) return callback(err3);
              const dir = path4.dirname(dstpath);
              pathExists(dir, (err4, dirExists) => {
                if (err4) return callback(err4);
                if (dirExists)
                  return fs6.symlink(srcpath, dstpath, type2, callback);
                mkdirs(dir, (err5) => {
                  if (err5) return callback(err5);
                  fs6.symlink(srcpath, dstpath, type2, callback);
                });
              });
            });
          });
        });
      }
      __name(createSymlink, "createSymlink");
      function createSymlinkSync(srcpath, dstpath, type) {
        const destinationExists = fs6.existsSync(dstpath);
        if (destinationExists) return void 0;
        const relative = symlinkPathsSync(srcpath, dstpath);
        srcpath = relative.toDst;
        type = symlinkTypeSync(relative.toCwd, type);
        const dir = path4.dirname(dstpath);
        const exists = fs6.existsSync(dir);
        if (exists) return fs6.symlinkSync(srcpath, dstpath, type);
        mkdirsSync(dir);
        return fs6.symlinkSync(srcpath, dstpath, type);
      }
      __name(createSymlinkSync, "createSymlinkSync");
      module.exports = {
        createSymlink: u(createSymlink),
        createSymlinkSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/index.js
  var require_ensure2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/ensure/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var file = require_file3();
      var link2 = require_link2();
      var symlink = require_symlink2();
      module.exports = {
        // file
        createFile: file.createFile,
        createFileSync: file.createFileSync,
        ensureFile: file.createFile,
        ensureFileSync: file.createFileSync,
        // link
        createLink: link2.createLink,
        createLinkSync: link2.createLinkSync,
        ensureLink: link2.createLink,
        ensureLinkSync: link2.createLinkSync,
        // symlink
        createSymlink: symlink.createSymlink,
        createSymlinkSync: symlink.createSymlinkSync,
        ensureSymlink: symlink.createSymlink,
        ensureSymlinkSync: symlink.createSymlinkSync,
      };
    },
  });

  // node_modules/.pnpm/jsonfile@4.0.0/node_modules/jsonfile/index.js
  var require_jsonfile3 = __commonJS({
    "node_modules/.pnpm/jsonfile@4.0.0/node_modules/jsonfile/index.js"(
      exports,
      module,
    ) {
      var _fs;
      try {
        _fs = require_graceful_fs();
      } catch (_) {
        _fs = __require("fs");
      }
      function readFile3(file, options, callback) {
        if (callback == null) {
          callback = options;
          options = {};
        }
        if (typeof options === "string") {
          options = { encoding: options };
        }
        options = options || {};
        var fs6 = options.fs || _fs;
        var shouldThrow = true;
        if ("throws" in options) {
          shouldThrow = options.throws;
        }
        fs6.readFile(file, options, function (err, data) {
          if (err) return callback(err);
          data = stripBom(data);
          var obj;
          try {
            obj = JSON.parse(data, options ? options.reviver : null);
          } catch (err2) {
            if (shouldThrow) {
              err2.message = file + ": " + err2.message;
              return callback(err2);
            } else {
              return callback(null, null);
            }
          }
          callback(null, obj);
        });
      }
      __name(readFile3, "readFile");
      function readFileSync(file, options) {
        options = options || {};
        if (typeof options === "string") {
          options = { encoding: options };
        }
        var fs6 = options.fs || _fs;
        var shouldThrow = true;
        if ("throws" in options) {
          shouldThrow = options.throws;
        }
        try {
          var content3 = fs6.readFileSync(file, options);
          content3 = stripBom(content3);
          return JSON.parse(content3, options.reviver);
        } catch (err) {
          if (shouldThrow) {
            err.message = file + ": " + err.message;
            throw err;
          } else {
            return null;
          }
        }
      }
      __name(readFileSync, "readFileSync");
      function stringify2(obj, options) {
        var spaces;
        var EOL = "\n";
        if (typeof options === "object" && options !== null) {
          if (options.spaces) {
            spaces = options.spaces;
          }
          if (options.EOL) {
            EOL = options.EOL;
          }
        }
        var str = JSON.stringify(
          obj,
          options ? options.replacer : null,
          spaces,
        );
        return str.replace(/\n/g, EOL) + EOL;
      }
      __name(stringify2, "stringify");
      function writeFile(file, obj, options, callback) {
        if (callback == null) {
          callback = options;
          options = {};
        }
        options = options || {};
        var fs6 = options.fs || _fs;
        var str = "";
        try {
          str = stringify2(obj, options);
        } catch (err) {
          if (callback) callback(err, null);
          return;
        }
        fs6.writeFile(file, str, options, callback);
      }
      __name(writeFile, "writeFile");
      function writeFileSync(file, obj, options) {
        options = options || {};
        var fs6 = options.fs || _fs;
        var str = stringify2(obj, options);
        return fs6.writeFileSync(file, str, options);
      }
      __name(writeFileSync, "writeFileSync");
      function stripBom(content3) {
        if (Buffer.isBuffer(content3)) content3 = content3.toString("utf8");
        content3 = content3.replace(/^\uFEFF/, "");
        return content3;
      }
      __name(stripBom, "stripBom");
      var jsonfile = {
        readFile: readFile3,
        readFileSync,
        writeFile,
        writeFileSync,
      };
      module.exports = jsonfile;
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/jsonfile.js
  var require_jsonfile4 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/jsonfile.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var jsonFile = require_jsonfile3();
      module.exports = {
        // jsonfile exports
        readJson: u(jsonFile.readFile),
        readJsonSync: jsonFile.readFileSync,
        writeJson: u(jsonFile.writeFile),
        writeJsonSync: jsonFile.writeFileSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/output-json.js
  var require_output_json2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/output-json.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var mkdir = require_mkdirs3();
      var pathExists = require_path_exists2().pathExists;
      var jsonFile = require_jsonfile4();
      function outputJson(file, data, options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        const dir = path4.dirname(file);
        pathExists(dir, (err, itDoes) => {
          if (err) return callback(err);
          if (itDoes) return jsonFile.writeJson(file, data, options, callback);
          mkdir.mkdirs(dir, (err2) => {
            if (err2) return callback(err2);
            jsonFile.writeJson(file, data, options, callback);
          });
        });
      }
      __name(outputJson, "outputJson");
      module.exports = outputJson;
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/output-json-sync.js
  var require_output_json_sync2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/output-json-sync.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var mkdir = require_mkdirs3();
      var jsonFile = require_jsonfile4();
      function outputJsonSync(file, data, options) {
        const dir = path4.dirname(file);
        if (!fs6.existsSync(dir)) {
          mkdir.mkdirsSync(dir);
        }
        jsonFile.writeJsonSync(file, data, options);
      }
      __name(outputJsonSync, "outputJsonSync");
      module.exports = outputJsonSync;
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/index.js
  var require_json3 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/json/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var jsonFile = require_jsonfile4();
      jsonFile.outputJson = u(require_output_json2());
      jsonFile.outputJsonSync = require_output_json_sync2();
      jsonFile.outputJSON = jsonFile.outputJson;
      jsonFile.outputJSONSync = jsonFile.outputJsonSync;
      jsonFile.writeJSON = jsonFile.writeJson;
      jsonFile.writeJSONSync = jsonFile.writeJsonSync;
      jsonFile.readJSON = jsonFile.readJson;
      jsonFile.readJSONSync = jsonFile.readJsonSync;
      module.exports = jsonFile;
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/move-sync/index.js
  var require_move_sync2 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/move-sync/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var copySync = require_copy_sync3().copySync;
      var removeSync = require_remove3().removeSync;
      var mkdirpSync = require_mkdirs3().mkdirsSync;
      var buffer = require_buffer();
      function moveSync(src, dest, options) {
        options = options || {};
        const overwrite = options.overwrite || options.clobber || false;
        src = path4.resolve(src);
        dest = path4.resolve(dest);
        if (src === dest) return fs6.accessSync(src);
        if (isSrcSubdir(src, dest))
          throw new Error(`Cannot move '${src}' into itself '${dest}'.`);
        mkdirpSync(path4.dirname(dest));
        tryRenameSync();
        function tryRenameSync() {
          if (overwrite) {
            try {
              return fs6.renameSync(src, dest);
            } catch (err) {
              if (
                err.code === "ENOTEMPTY" ||
                err.code === "EEXIST" ||
                err.code === "EPERM"
              ) {
                removeSync(dest);
                options.overwrite = false;
                return moveSync(src, dest, options);
              }
              if (err.code !== "EXDEV") throw err;
              return moveSyncAcrossDevice(src, dest, overwrite);
            }
          } else {
            try {
              fs6.linkSync(src, dest);
              return fs6.unlinkSync(src);
            } catch (err) {
              if (
                err.code === "EXDEV" ||
                err.code === "EISDIR" ||
                err.code === "EPERM" ||
                err.code === "ENOTSUP"
              ) {
                return moveSyncAcrossDevice(src, dest, overwrite);
              }
              throw err;
            }
          }
        }
        __name(tryRenameSync, "tryRenameSync");
      }
      __name(moveSync, "moveSync");
      function moveSyncAcrossDevice(src, dest, overwrite) {
        const stat = fs6.statSync(src);
        if (stat.isDirectory()) {
          return moveDirSyncAcrossDevice(src, dest, overwrite);
        } else {
          return moveFileSyncAcrossDevice(src, dest, overwrite);
        }
      }
      __name(moveSyncAcrossDevice, "moveSyncAcrossDevice");
      function moveFileSyncAcrossDevice(src, dest, overwrite) {
        const BUF_LENGTH = 64 * 1024;
        const _buff = buffer(BUF_LENGTH);
        const flags = overwrite ? "w" : "wx";
        const fdr = fs6.openSync(src, "r");
        const stat = fs6.fstatSync(fdr);
        const fdw = fs6.openSync(dest, flags, stat.mode);
        let pos = 0;
        while (pos < stat.size) {
          const bytesRead = fs6.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
          fs6.writeSync(fdw, _buff, 0, bytesRead);
          pos += bytesRead;
        }
        fs6.closeSync(fdr);
        fs6.closeSync(fdw);
        return fs6.unlinkSync(src);
      }
      __name(moveFileSyncAcrossDevice, "moveFileSyncAcrossDevice");
      function moveDirSyncAcrossDevice(src, dest, overwrite) {
        const options = {
          overwrite: false,
        };
        if (overwrite) {
          removeSync(dest);
          tryCopySync();
        } else {
          tryCopySync();
        }
        function tryCopySync() {
          copySync(src, dest, options);
          return removeSync(src);
        }
        __name(tryCopySync, "tryCopySync");
      }
      __name(moveDirSyncAcrossDevice, "moveDirSyncAcrossDevice");
      function isSrcSubdir(src, dest) {
        try {
          return (
            fs6.statSync(src).isDirectory() &&
            src !== dest &&
            dest.indexOf(src) > -1 &&
            dest
              .split(path4.dirname(src) + path4.sep)[1]
              .split(path4.sep)[0] === path4.basename(src)
          );
        } catch (e) {
          return false;
        }
      }
      __name(isSrcSubdir, "isSrcSubdir");
      module.exports = {
        moveSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/move/index.js
  var require_move3 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/move/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var copy = require_copy4().copy;
      var remove = require_remove3().remove;
      var mkdirp = require_mkdirs3().mkdirp;
      var pathExists = require_path_exists2().pathExists;
      function move(src, dest, opts, cb) {
        if (typeof opts === "function") {
          cb = opts;
          opts = {};
        }
        const overwrite = opts.overwrite || opts.clobber || false;
        src = path4.resolve(src);
        dest = path4.resolve(dest);
        if (src === dest) return fs6.access(src, cb);
        fs6.stat(src, (err, st) => {
          if (err) return cb(err);
          if (st.isDirectory() && isSrcSubdir(src, dest)) {
            return cb(
              new Error(
                `Cannot move '${src}' to a subdirectory of itself, '${dest}'.`,
              ),
            );
          }
          mkdirp(path4.dirname(dest), (err2) => {
            if (err2) return cb(err2);
            return doRename(src, dest, overwrite, cb);
          });
        });
      }
      __name(move, "move");
      function doRename(src, dest, overwrite, cb) {
        if (overwrite) {
          return remove(dest, (err) => {
            if (err) return cb(err);
            return rename(src, dest, overwrite, cb);
          });
        }
        pathExists(dest, (err, destExists) => {
          if (err) return cb(err);
          if (destExists) return cb(new Error("dest already exists."));
          return rename(src, dest, overwrite, cb);
        });
      }
      __name(doRename, "doRename");
      function rename(src, dest, overwrite, cb) {
        fs6.rename(src, dest, (err) => {
          if (!err) return cb();
          if (err.code !== "EXDEV") return cb(err);
          return moveAcrossDevice(src, dest, overwrite, cb);
        });
      }
      __name(rename, "rename");
      function moveAcrossDevice(src, dest, overwrite, cb) {
        const opts = {
          overwrite,
          errorOnExist: true,
        };
        copy(src, dest, opts, (err) => {
          if (err) return cb(err);
          return remove(src, cb);
        });
      }
      __name(moveAcrossDevice, "moveAcrossDevice");
      function isSrcSubdir(src, dest) {
        const srcArray = src.split(path4.sep);
        const destArray = dest.split(path4.sep);
        return srcArray.reduce((acc, current, i) => {
          return acc && destArray[i] === current;
        }, true);
      }
      __name(isSrcSubdir, "isSrcSubdir");
      module.exports = {
        move: u(move),
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/output/index.js
  var require_output = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/output/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var mkdir = require_mkdirs3();
      var pathExists = require_path_exists2().pathExists;
      function outputFile2(file, data, encoding, callback) {
        if (typeof encoding === "function") {
          callback = encoding;
          encoding = "utf8";
        }
        const dir = path4.dirname(file);
        pathExists(dir, (err, itDoes) => {
          if (err) return callback(err);
          if (itDoes) return fs6.writeFile(file, data, encoding, callback);
          mkdir.mkdirs(dir, (err2) => {
            if (err2) return callback(err2);
            fs6.writeFile(file, data, encoding, callback);
          });
        });
      }
      __name(outputFile2, "outputFile");
      function outputFileSync(file, ...args) {
        const dir = path4.dirname(file);
        if (fs6.existsSync(dir)) {
          return fs6.writeFileSync(file, ...args);
        }
        mkdir.mkdirsSync(dir);
        fs6.writeFileSync(file, ...args);
      }
      __name(outputFileSync, "outputFileSync");
      module.exports = {
        outputFile: u(outputFile2),
        outputFileSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/index.js
  var require_lib3 = __commonJS({
    "node_modules/.pnpm/fs-extra@7.0.1/node_modules/fs-extra/lib/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = Object.assign(
        {},
        // Export promiseified graceful-fs:
        require_fs6(),
        // Export extra methods:
        require_copy_sync3(),
        require_copy4(),
        require_empty2(),
        require_ensure2(),
        require_json3(),
        require_mkdirs3(),
        require_move_sync2(),
        require_move3(),
        require_output(),
        require_path_exists2(),
        require_remove3(),
      );
      var fs6 = __require("fs");
      if (Object.getOwnPropertyDescriptor(fs6, "promises")) {
        Object.defineProperty(module.exports, "promises", {
          get() {
            return fs6.promises;
          },
        });
      }
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/typeof.js
  var require_typeof = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/typeof.js"(
      exports,
      module,
    ) {
      function _typeof(o) {
        "@babel/helpers - typeof";
        return (
          (module.exports = _typeof =
            "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
              ? function (o2) {
                  return typeof o2;
                }
              : function (o2) {
                  return o2 &&
                    "function" == typeof Symbol &&
                    o2.constructor === Symbol &&
                    o2 !== Symbol.prototype
                    ? "symbol"
                    : typeof o2;
                }),
          (module.exports.__esModule = true),
          (module.exports["default"] = module.exports),
          _typeof(o)
        );
      }
      __name(_typeof, "_typeof");
      (module.exports = _typeof),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/regeneratorRuntime.js
  var require_regeneratorRuntime = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(
      exports,
      module,
    ) {
      var _typeof = require_typeof()["default"];
      function _regeneratorRuntime() {
        "use strict";
        (module.exports = _regeneratorRuntime =
          /* @__PURE__ */ __name(function _regeneratorRuntime2() {
            return e;
          }, "_regeneratorRuntime")),
          (module.exports.__esModule = true),
          (module.exports["default"] = module.exports);
        var t,
          e = {},
          r = Object.prototype,
          n = r.hasOwnProperty,
          o =
            Object.defineProperty ||
            function (t2, e2, r2) {
              t2[e2] = r2.value;
            },
          i = "function" == typeof Symbol ? Symbol : {},
          a = i.iterator || "@@iterator",
          c = i.asyncIterator || "@@asyncIterator",
          u = i.toStringTag || "@@toStringTag";
        function define2(t2, e2, r2) {
          return (
            Object.defineProperty(t2, e2, {
              value: r2,
              enumerable: true,
              configurable: true,
              writable: true,
            }),
            t2[e2]
          );
        }
        __name(define2, "define");
        try {
          define2({}, "");
        } catch (t2) {
          define2 = /* @__PURE__ */ __name(function define3(t3, e2, r2) {
            return (t3[e2] = r2);
          }, "define");
        }
        function wrap2(t2, e2, r2, n2) {
          var i2 = e2 && e2.prototype instanceof Generator ? e2 : Generator,
            a2 = Object.create(i2.prototype),
            c2 = new Context(n2 || []);
          return (
            o(a2, "_invoke", {
              value: makeInvokeMethod(t2, r2, c2),
            }),
            a2
          );
        }
        __name(wrap2, "wrap");
        function tryCatch(t2, e2, r2) {
          try {
            return {
              type: "normal",
              arg: t2.call(e2, r2),
            };
          } catch (t3) {
            return {
              type: "throw",
              arg: t3,
            };
          }
        }
        __name(tryCatch, "tryCatch");
        e.wrap = wrap2;
        var h = "suspendedStart",
          l = "suspendedYield",
          f = "executing",
          s = "completed",
          y = {};
        function Generator() {}
        __name(Generator, "Generator");
        function GeneratorFunction() {}
        __name(GeneratorFunction, "GeneratorFunction");
        function GeneratorFunctionPrototype() {}
        __name(GeneratorFunctionPrototype, "GeneratorFunctionPrototype");
        var p = {};
        define2(p, a, function () {
          return this;
        });
        var d = Object.getPrototypeOf,
          v = d && d(d(values([])));
        v && v !== r && n.call(v, a) && (p = v);
        var g =
          (GeneratorFunctionPrototype.prototype =
          Generator.prototype =
            Object.create(p));
        function defineIteratorMethods(t2) {
          ["next", "throw", "return"].forEach(function (e2) {
            define2(t2, e2, function (t3) {
              return this._invoke(e2, t3);
            });
          });
        }
        __name(defineIteratorMethods, "defineIteratorMethods");
        function AsyncIterator(t2, e2) {
          function invoke(r3, o2, i2, a2) {
            var c2 = tryCatch(t2[r3], t2, o2);
            if ("throw" !== c2.type) {
              var u2 = c2.arg,
                h2 = u2.value;
              return h2 && "object" == _typeof(h2) && n.call(h2, "__await")
                ? e2.resolve(h2.__await).then(
                    function (t3) {
                      invoke("next", t3, i2, a2);
                    },
                    function (t3) {
                      invoke("throw", t3, i2, a2);
                    },
                  )
                : e2.resolve(h2).then(
                    function (t3) {
                      (u2.value = t3), i2(u2);
                    },
                    function (t3) {
                      return invoke("throw", t3, i2, a2);
                    },
                  );
            }
            a2(c2.arg);
          }
          __name(invoke, "invoke");
          var r2;
          o(this, "_invoke", {
            value: /* @__PURE__ */ __name(function value(t3, n2) {
              function callInvokeWithMethodAndArg() {
                return new e2(function (e3, r3) {
                  invoke(t3, n2, e3, r3);
                });
              }
              __name(callInvokeWithMethodAndArg, "callInvokeWithMethodAndArg");
              return (r2 = r2
                ? r2.then(
                    callInvokeWithMethodAndArg,
                    callInvokeWithMethodAndArg,
                  )
                : callInvokeWithMethodAndArg());
            }, "value"),
          });
        }
        __name(AsyncIterator, "AsyncIterator");
        function makeInvokeMethod(e2, r2, n2) {
          var o2 = h;
          return function (i2, a2) {
            if (o2 === f) throw Error("Generator is already running");
            if (o2 === s) {
              if ("throw" === i2) throw a2;
              return {
                value: t,
                done: true,
              };
            }
            for (n2.method = i2, n2.arg = a2; ; ) {
              var c2 = n2.delegate;
              if (c2) {
                var u2 = maybeInvokeDelegate(c2, n2);
                if (u2) {
                  if (u2 === y) continue;
                  return u2;
                }
              }
              if ("next" === n2.method) n2.sent = n2._sent = n2.arg;
              else if ("throw" === n2.method) {
                if (o2 === h) throw ((o2 = s), n2.arg);
                n2.dispatchException(n2.arg);
              } else "return" === n2.method && n2.abrupt("return", n2.arg);
              o2 = f;
              var p2 = tryCatch(e2, r2, n2);
              if ("normal" === p2.type) {
                if (((o2 = n2.done ? s : l), p2.arg === y)) continue;
                return {
                  value: p2.arg,
                  done: n2.done,
                };
              }
              "throw" === p2.type &&
                ((o2 = s), (n2.method = "throw"), (n2.arg = p2.arg));
            }
          };
        }
        __name(makeInvokeMethod, "makeInvokeMethod");
        function maybeInvokeDelegate(e2, r2) {
          var n2 = r2.method,
            o2 = e2.iterator[n2];
          if (o2 === t)
            return (
              (r2.delegate = null),
              ("throw" === n2 &&
                e2.iterator["return"] &&
                ((r2.method = "return"),
                (r2.arg = t),
                maybeInvokeDelegate(e2, r2),
                "throw" === r2.method)) ||
                ("return" !== n2 &&
                  ((r2.method = "throw"),
                  (r2.arg = new TypeError(
                    "The iterator does not provide a '" + n2 + "' method",
                  )))),
              y
            );
          var i2 = tryCatch(o2, e2.iterator, r2.arg);
          if ("throw" === i2.type)
            return (
              (r2.method = "throw"), (r2.arg = i2.arg), (r2.delegate = null), y
            );
          var a2 = i2.arg;
          return a2
            ? a2.done
              ? ((r2[e2.resultName] = a2.value),
                (r2.next = e2.nextLoc),
                "return" !== r2.method && ((r2.method = "next"), (r2.arg = t)),
                (r2.delegate = null),
                y)
              : a2
            : ((r2.method = "throw"),
              (r2.arg = new TypeError("iterator result is not an object")),
              (r2.delegate = null),
              y);
        }
        __name(maybeInvokeDelegate, "maybeInvokeDelegate");
        function pushTryEntry(t2) {
          var e2 = {
            tryLoc: t2[0],
          };
          1 in t2 && (e2.catchLoc = t2[1]),
            2 in t2 && ((e2.finallyLoc = t2[2]), (e2.afterLoc = t2[3])),
            this.tryEntries.push(e2);
        }
        __name(pushTryEntry, "pushTryEntry");
        function resetTryEntry(t2) {
          var e2 = t2.completion || {};
          (e2.type = "normal"), delete e2.arg, (t2.completion = e2);
        }
        __name(resetTryEntry, "resetTryEntry");
        function Context(t2) {
          (this.tryEntries = [
            {
              tryLoc: "root",
            },
          ]),
            t2.forEach(pushTryEntry, this),
            this.reset(true);
        }
        __name(Context, "Context");
        function values(e2) {
          if (e2 || "" === e2) {
            var r2 = e2[a];
            if (r2) return r2.call(e2);
            if ("function" == typeof e2.next) return e2;
            if (!isNaN(e2.length)) {
              var o2 = -1,
                i2 = /* @__PURE__ */ __name(function next() {
                  for (; ++o2 < e2.length; )
                    if (n.call(e2, o2))
                      return (next.value = e2[o2]), (next.done = false), next;
                  return (next.value = t), (next.done = true), next;
                }, "next");
              return (i2.next = i2);
            }
          }
          throw new TypeError(_typeof(e2) + " is not iterable");
        }
        __name(values, "values");
        return (
          (GeneratorFunction.prototype = GeneratorFunctionPrototype),
          o(g, "constructor", {
            value: GeneratorFunctionPrototype,
            configurable: true,
          }),
          o(GeneratorFunctionPrototype, "constructor", {
            value: GeneratorFunction,
            configurable: true,
          }),
          (GeneratorFunction.displayName = define2(
            GeneratorFunctionPrototype,
            u,
            "GeneratorFunction",
          )),
          (e.isGeneratorFunction = function (t2) {
            var e2 = "function" == typeof t2 && t2.constructor;
            return (
              !!e2 &&
              (e2 === GeneratorFunction ||
                "GeneratorFunction" === (e2.displayName || e2.name))
            );
          }),
          (e.mark = function (t2) {
            return (
              Object.setPrototypeOf
                ? Object.setPrototypeOf(t2, GeneratorFunctionPrototype)
                : ((t2.__proto__ = GeneratorFunctionPrototype),
                  define2(t2, u, "GeneratorFunction")),
              (t2.prototype = Object.create(g)),
              t2
            );
          }),
          (e.awrap = function (t2) {
            return {
              __await: t2,
            };
          }),
          defineIteratorMethods(AsyncIterator.prototype),
          define2(AsyncIterator.prototype, c, function () {
            return this;
          }),
          (e.AsyncIterator = AsyncIterator),
          (e.async = function (t2, r2, n2, o2, i2) {
            void 0 === i2 && (i2 = Promise);
            var a2 = new AsyncIterator(wrap2(t2, r2, n2, o2), i2);
            return e.isGeneratorFunction(r2)
              ? a2
              : a2.next().then(function (t3) {
                  return t3.done ? t3.value : a2.next();
                });
          }),
          defineIteratorMethods(g),
          define2(g, u, "Generator"),
          define2(g, a, function () {
            return this;
          }),
          define2(g, "toString", function () {
            return "[object Generator]";
          }),
          (e.keys = function (t2) {
            var e2 = Object(t2),
              r2 = [];
            for (var n2 in e2) r2.push(n2);
            return (
              r2.reverse(),
              /* @__PURE__ */ __name(function next() {
                for (; r2.length; ) {
                  var t3 = r2.pop();
                  if (t3 in e2)
                    return (next.value = t3), (next.done = false), next;
                }
                return (next.done = true), next;
              }, "next")
            );
          }),
          (e.values = values),
          (Context.prototype = {
            constructor: Context,
            reset: /* @__PURE__ */ __name(function reset2(e2) {
              if (
                ((this.prev = 0),
                (this.next = 0),
                (this.sent = this._sent = t),
                (this.done = false),
                (this.delegate = null),
                (this.method = "next"),
                (this.arg = t),
                this.tryEntries.forEach(resetTryEntry),
                !e2)
              )
                for (var r2 in this)
                  "t" === r2.charAt(0) &&
                    n.call(this, r2) &&
                    !isNaN(+r2.slice(1)) &&
                    (this[r2] = t);
            }, "reset"),
            stop: /* @__PURE__ */ __name(function stop() {
              this.done = true;
              var t2 = this.tryEntries[0].completion;
              if ("throw" === t2.type) throw t2.arg;
              return this.rval;
            }, "stop"),
            dispatchException: /* @__PURE__ */ __name(
              function dispatchException(e2) {
                if (this.done) throw e2;
                var r2 = this;
                function handle2(n2, o3) {
                  return (
                    (a2.type = "throw"),
                    (a2.arg = e2),
                    (r2.next = n2),
                    o3 && ((r2.method = "next"), (r2.arg = t)),
                    !!o3
                  );
                }
                __name(handle2, "handle");
                for (var o2 = this.tryEntries.length - 1; o2 >= 0; --o2) {
                  var i2 = this.tryEntries[o2],
                    a2 = i2.completion;
                  if ("root" === i2.tryLoc) return handle2("end");
                  if (i2.tryLoc <= this.prev) {
                    var c2 = n.call(i2, "catchLoc"),
                      u2 = n.call(i2, "finallyLoc");
                    if (c2 && u2) {
                      if (this.prev < i2.catchLoc)
                        return handle2(i2.catchLoc, true);
                      if (this.prev < i2.finallyLoc)
                        return handle2(i2.finallyLoc);
                    } else if (c2) {
                      if (this.prev < i2.catchLoc)
                        return handle2(i2.catchLoc, true);
                    } else {
                      if (!u2)
                        throw Error("try statement without catch or finally");
                      if (this.prev < i2.finallyLoc)
                        return handle2(i2.finallyLoc);
                    }
                  }
                }
              },
              "dispatchException",
            ),
            abrupt: /* @__PURE__ */ __name(function abrupt(t2, e2) {
              for (var r2 = this.tryEntries.length - 1; r2 >= 0; --r2) {
                var o2 = this.tryEntries[r2];
                if (
                  o2.tryLoc <= this.prev &&
                  n.call(o2, "finallyLoc") &&
                  this.prev < o2.finallyLoc
                ) {
                  var i2 = o2;
                  break;
                }
              }
              i2 &&
                ("break" === t2 || "continue" === t2) &&
                i2.tryLoc <= e2 &&
                e2 <= i2.finallyLoc &&
                (i2 = null);
              var a2 = i2 ? i2.completion : {};
              return (
                (a2.type = t2),
                (a2.arg = e2),
                i2
                  ? ((this.method = "next"), (this.next = i2.finallyLoc), y)
                  : this.complete(a2)
              );
            }, "abrupt"),
            complete: /* @__PURE__ */ __name(function complete(t2, e2) {
              if ("throw" === t2.type) throw t2.arg;
              return (
                "break" === t2.type || "continue" === t2.type
                  ? (this.next = t2.arg)
                  : "return" === t2.type
                    ? ((this.rval = this.arg = t2.arg),
                      (this.method = "return"),
                      (this.next = "end"))
                    : "normal" === t2.type && e2 && (this.next = e2),
                y
              );
            }, "complete"),
            finish: /* @__PURE__ */ __name(function finish(t2) {
              for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
                var r2 = this.tryEntries[e2];
                if (r2.finallyLoc === t2)
                  return (
                    this.complete(r2.completion, r2.afterLoc),
                    resetTryEntry(r2),
                    y
                  );
              }
            }, "finish"),
            catch: /* @__PURE__ */ __name(function _catch(t2) {
              for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
                var r2 = this.tryEntries[e2];
                if (r2.tryLoc === t2) {
                  var n2 = r2.completion;
                  if ("throw" === n2.type) {
                    var o2 = n2.arg;
                    resetTryEntry(r2);
                  }
                  return o2;
                }
              }
              throw Error("illegal catch attempt");
            }, "_catch"),
            delegateYield: /* @__PURE__ */ __name(function delegateYield(
              e2,
              r2,
              n2,
            ) {
              return (
                (this.delegate = {
                  iterator: values(e2),
                  resultName: r2,
                  nextLoc: n2,
                }),
                "next" === this.method && (this.arg = t),
                y
              );
            }, "delegateYield"),
          }),
          e
        );
      }
      __name(_regeneratorRuntime, "_regeneratorRuntime");
      (module.exports = _regeneratorRuntime),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/regenerator/index.js
  var require_regenerator = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/regenerator/index.js"(
      exports,
      module,
    ) {
      var runtime = require_regeneratorRuntime()();
      module.exports = runtime;
      try {
        regeneratorRuntime = runtime;
      } catch (accidentalStrictMode) {
        if (typeof globalThis === "object") {
          globalThis.regeneratorRuntime = runtime;
        } else {
          Function("r", "regeneratorRuntime = r")(runtime);
        }
      }
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/asyncToGenerator.js
  var require_asyncToGenerator = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/asyncToGenerator.js"(
      exports,
      module,
    ) {
      function asyncGeneratorStep(n, t, e, r, o, a, c) {
        try {
          var i = n[a](c),
            u = i.value;
        } catch (n2) {
          return void e(n2);
        }
        i.done ? t(u) : Promise.resolve(u).then(r, o);
      }
      __name(asyncGeneratorStep, "asyncGeneratorStep");
      function _asyncToGenerator(n) {
        return function () {
          var t = this,
            e = arguments;
          return new Promise(function (r, o) {
            var a = n.apply(t, e);
            function _next(n2) {
              asyncGeneratorStep(a, r, o, _next, _throw, "next", n2);
            }
            __name(_next, "_next");
            function _throw(n2) {
              asyncGeneratorStep(a, r, o, _next, _throw, "throw", n2);
            }
            __name(_throw, "_throw");
            _next(void 0);
          });
        };
      }
      __name(_asyncToGenerator, "_asyncToGenerator");
      (module.exports = _asyncToGenerator),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/classCallCheck.js
  var require_classCallCheck = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/classCallCheck.js"(
      exports,
      module,
    ) {
      function _classCallCheck(a, n) {
        if (!(a instanceof n))
          throw new TypeError("Cannot call a class as a function");
      }
      __name(_classCallCheck, "_classCallCheck");
      (module.exports = _classCallCheck),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/assertThisInitialized.js
  var require_assertThisInitialized = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/assertThisInitialized.js"(
      exports,
      module,
    ) {
      function _assertThisInitialized(e) {
        if (void 0 === e)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called",
          );
        return e;
      }
      __name(_assertThisInitialized, "_assertThisInitialized");
      (module.exports = _assertThisInitialized),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
  var require_possibleConstructorReturn = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js"(
      exports,
      module,
    ) {
      var _typeof = require_typeof()["default"];
      var assertThisInitialized = require_assertThisInitialized();
      function _possibleConstructorReturn(t, e) {
        if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
        if (void 0 !== e)
          throw new TypeError(
            "Derived constructors may only return object or undefined",
          );
        return assertThisInitialized(t);
      }
      __name(_possibleConstructorReturn, "_possibleConstructorReturn");
      (module.exports = _possibleConstructorReturn),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/getPrototypeOf.js
  var require_getPrototypeOf = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/getPrototypeOf.js"(
      exports,
      module,
    ) {
      function _getPrototypeOf(t) {
        return (
          (module.exports = _getPrototypeOf =
            Object.setPrototypeOf
              ? Object.getPrototypeOf.bind()
              : function (t2) {
                  return t2.__proto__ || Object.getPrototypeOf(t2);
                }),
          (module.exports.__esModule = true),
          (module.exports["default"] = module.exports),
          _getPrototypeOf(t)
        );
      }
      __name(_getPrototypeOf, "_getPrototypeOf");
      (module.exports = _getPrototypeOf),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/setPrototypeOf.js
  var require_setPrototypeOf = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/setPrototypeOf.js"(
      exports,
      module,
    ) {
      function _setPrototypeOf(t, e) {
        return (
          (module.exports = _setPrototypeOf =
            Object.setPrototypeOf
              ? Object.setPrototypeOf.bind()
              : function (t2, e2) {
                  return (t2.__proto__ = e2), t2;
                }),
          (module.exports.__esModule = true),
          (module.exports["default"] = module.exports),
          _setPrototypeOf(t, e)
        );
      }
      __name(_setPrototypeOf, "_setPrototypeOf");
      (module.exports = _setPrototypeOf),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/inherits.js
  var require_inherits = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/inherits.js"(
      exports,
      module,
    ) {
      var setPrototypeOf = require_setPrototypeOf();
      function _inherits(t, e) {
        if ("function" != typeof e && null !== e)
          throw new TypeError(
            "Super expression must either be null or a function",
          );
        (t.prototype = Object.create(e && e.prototype, {
          constructor: {
            value: t,
            writable: true,
            configurable: true,
          },
        })),
          Object.defineProperty(t, "prototype", {
            writable: false,
          }),
          e && setPrototypeOf(t, e);
      }
      __name(_inherits, "_inherits");
      (module.exports = _inherits),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/isNativeFunction.js
  var require_isNativeFunction = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/isNativeFunction.js"(
      exports,
      module,
    ) {
      function _isNativeFunction(t) {
        try {
          return -1 !== Function.toString.call(t).indexOf("[native code]");
        } catch (n) {
          return "function" == typeof t;
        }
      }
      __name(_isNativeFunction, "_isNativeFunction");
      (module.exports = _isNativeFunction),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js
  var require_isNativeReflectConstruct = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js"(
      exports,
      module,
    ) {
      function _isNativeReflectConstruct() {
        try {
          var t = !Boolean.prototype.valueOf.call(
            Reflect.construct(Boolean, [], function () {}),
          );
        } catch (t2) {}
        return ((module.exports = _isNativeReflectConstruct =
          /* @__PURE__ */ __name(function _isNativeReflectConstruct2() {
            return !!t;
          }, "_isNativeReflectConstruct")),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports))();
      }
      __name(_isNativeReflectConstruct, "_isNativeReflectConstruct");
      (module.exports = _isNativeReflectConstruct),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/construct.js
  var require_construct = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/construct.js"(
      exports,
      module,
    ) {
      var isNativeReflectConstruct = require_isNativeReflectConstruct();
      var setPrototypeOf = require_setPrototypeOf();
      function _construct(t, e, r) {
        if (isNativeReflectConstruct())
          return Reflect.construct.apply(null, arguments);
        var o = [null];
        o.push.apply(o, e);
        var p = new (t.bind.apply(t, o))();
        return r && setPrototypeOf(p, r.prototype), p;
      }
      __name(_construct, "_construct");
      (module.exports = _construct),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/wrapNativeSuper.js
  var require_wrapNativeSuper = __commonJS({
    "node_modules/.pnpm/@babel+runtime@7.25.6/node_modules/@babel/runtime/helpers/wrapNativeSuper.js"(
      exports,
      module,
    ) {
      var getPrototypeOf = require_getPrototypeOf();
      var setPrototypeOf = require_setPrototypeOf();
      var isNativeFunction = require_isNativeFunction();
      var construct = require_construct();
      function _wrapNativeSuper(t) {
        var r = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
        return (
          (module.exports = _wrapNativeSuper =
            /* @__PURE__ */ __name(function _wrapNativeSuper2(t2) {
              if (null === t2 || !isNativeFunction(t2)) return t2;
              if ("function" != typeof t2)
                throw new TypeError(
                  "Super expression must either be null or a function",
                );
              if (void 0 !== r) {
                if (r.has(t2)) return r.get(t2);
                r.set(t2, Wrapper);
              }
              function Wrapper() {
                return construct(
                  t2,
                  arguments,
                  getPrototypeOf(this).constructor,
                );
              }
              __name(Wrapper, "Wrapper");
              return (
                (Wrapper.prototype = Object.create(t2.prototype, {
                  constructor: {
                    value: Wrapper,
                    enumerable: false,
                    writable: true,
                    configurable: true,
                  },
                })),
                setPrototypeOf(Wrapper, t2)
              );
            }, "_wrapNativeSuper")),
          (module.exports.__esModule = true),
          (module.exports["default"] = module.exports),
          _wrapNativeSuper(t)
        );
      }
      __name(_wrapNativeSuper, "_wrapNativeSuper");
      (module.exports = _wrapNativeSuper),
        (module.exports.__esModule = true),
        (module.exports["default"] = module.exports);
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/fs/index.js
  var require_fs7 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/fs/index.js"(
      exports,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var fs6 = require_graceful_fs();
      var api = [
        "access",
        "appendFile",
        "chmod",
        "chown",
        "close",
        "copyFile",
        "fchmod",
        "fchown",
        "fdatasync",
        "fstat",
        "fsync",
        "ftruncate",
        "futimes",
        "lchown",
        "lchmod",
        "link",
        "lstat",
        "mkdir",
        "mkdtemp",
        "open",
        "readFile",
        "readdir",
        "readlink",
        "realpath",
        "rename",
        "rmdir",
        "stat",
        "symlink",
        "truncate",
        "unlink",
        "utimes",
        "writeFile",
      ].filter((key) => {
        return typeof fs6[key] === "function";
      });
      Object.keys(fs6).forEach((key) => {
        if (key === "promises") {
          return;
        }
        exports[key] = fs6[key];
      });
      api.forEach((method) => {
        exports[method] = u(fs6[method]);
      });
      exports.exists = function (filename, callback) {
        if (typeof callback === "function") {
          return fs6.exists(filename, callback);
        }
        return new Promise((resolve) => {
          return fs6.exists(filename, resolve);
        });
      };
      exports.read = function (
        fd,
        buffer,
        offset,
        length,
        position2,
        callback,
      ) {
        if (typeof callback === "function") {
          return fs6.read(fd, buffer, offset, length, position2, callback);
        }
        return new Promise((resolve, reject) => {
          fs6.read(
            fd,
            buffer,
            offset,
            length,
            position2,
            (err, bytesRead, buffer2) => {
              if (err) return reject(err);
              resolve({ bytesRead, buffer: buffer2 });
            },
          );
        });
      };
      exports.write = function (fd, buffer, ...args) {
        if (typeof args[args.length - 1] === "function") {
          return fs6.write(fd, buffer, ...args);
        }
        return new Promise((resolve, reject) => {
          fs6.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
            if (err) return reject(err);
            resolve({ bytesWritten, buffer: buffer2 });
          });
        });
      };
      if (typeof fs6.realpath.native === "function") {
        exports.realpath.native = u(fs6.realpath.native);
      }
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/win32.js
  var require_win322 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/win32.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      function getRootPath(p) {
        p = path4.normalize(path4.resolve(p)).split(path4.sep);
        if (p.length > 0) return p[0];
        return null;
      }
      __name(getRootPath, "getRootPath");
      var INVALID_PATH_CHARS = /[<>:"|?*]/;
      function invalidWin32Path(p) {
        const rp = getRootPath(p);
        p = p.replace(rp, "");
        return INVALID_PATH_CHARS.test(p);
      }
      __name(invalidWin32Path, "invalidWin32Path");
      module.exports = {
        getRootPath,
        invalidWin32Path,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/mkdirs.js
  var require_mkdirs4 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/mkdirs.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var invalidWin32Path = require_win322().invalidWin32Path;
      var o777 = parseInt("0777", 8);
      function mkdirs(p, opts, callback, made) {
        if (typeof opts === "function") {
          callback = opts;
          opts = {};
        } else if (!opts || typeof opts !== "object") {
          opts = { mode: opts };
        }
        if (process.platform === "win32" && invalidWin32Path(p)) {
          const errInval = new Error(
            p + " contains invalid WIN32 path characters.",
          );
          errInval.code = "EINVAL";
          return callback(errInval);
        }
        let mode = opts.mode;
        const xfs = opts.fs || fs6;
        if (mode === void 0) {
          mode = o777 & ~process.umask();
        }
        if (!made) made = null;
        callback = callback || function () {};
        p = path4.resolve(p);
        xfs.mkdir(p, mode, (er) => {
          if (!er) {
            made = made || p;
            return callback(null, made);
          }
          switch (er.code) {
            case "ENOENT":
              if (path4.dirname(p) === p) return callback(er);
              mkdirs(path4.dirname(p), opts, (er2, made2) => {
                if (er2) callback(er2, made2);
                else mkdirs(p, opts, callback, made2);
              });
              break;
            // In the case of any other error, just see if there's a dir
            // there already.  If so, then hooray!  If not, then something
            // is borked.
            default:
              xfs.stat(p, (er2, stat) => {
                if (er2 || !stat.isDirectory()) callback(er, made);
                else callback(null, made);
              });
              break;
          }
        });
      }
      __name(mkdirs, "mkdirs");
      module.exports = mkdirs;
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/mkdirs-sync.js
  var require_mkdirs_sync2 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/mkdirs-sync.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var invalidWin32Path = require_win322().invalidWin32Path;
      var o777 = parseInt("0777", 8);
      function mkdirsSync(p, opts, made) {
        if (!opts || typeof opts !== "object") {
          opts = { mode: opts };
        }
        let mode = opts.mode;
        const xfs = opts.fs || fs6;
        if (process.platform === "win32" && invalidWin32Path(p)) {
          const errInval = new Error(
            p + " contains invalid WIN32 path characters.",
          );
          errInval.code = "EINVAL";
          throw errInval;
        }
        if (mode === void 0) {
          mode = o777 & ~process.umask();
        }
        if (!made) made = null;
        p = path4.resolve(p);
        try {
          xfs.mkdirSync(p, mode);
          made = made || p;
        } catch (err0) {
          if (err0.code === "ENOENT") {
            if (path4.dirname(p) === p) throw err0;
            made = mkdirsSync(path4.dirname(p), opts, made);
            mkdirsSync(p, opts, made);
          } else {
            let stat;
            try {
              stat = xfs.statSync(p);
            } catch (err1) {
              throw err0;
            }
            if (!stat.isDirectory()) throw err0;
          }
        }
        return made;
      }
      __name(mkdirsSync, "mkdirsSync");
      module.exports = mkdirsSync;
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/index.js
  var require_mkdirs5 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/mkdirs/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var mkdirs = u(require_mkdirs4());
      var mkdirsSync = require_mkdirs_sync2();
      module.exports = {
        mkdirs,
        mkdirsSync,
        // alias
        mkdirp: mkdirs,
        mkdirpSync: mkdirsSync,
        ensureDir: mkdirs,
        ensureDirSync: mkdirsSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/utimes.js
  var require_utimes3 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/utimes.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var os = __require("os");
      var path4 = __require("path");
      function hasMillisResSync() {
        let tmpfile = path4.join(
          "millis-test-sync" +
            Date.now().toString() +
            Math.random().toString().slice(2),
        );
        tmpfile = path4.join(os.tmpdir(), tmpfile);
        const d = /* @__PURE__ */ new Date(1435410243862);
        fs6.writeFileSync(
          tmpfile,
          "https://github.com/jprichardson/node-fs-extra/pull/141",
        );
        const fd = fs6.openSync(tmpfile, "r+");
        fs6.futimesSync(fd, d, d);
        fs6.closeSync(fd);
        return fs6.statSync(tmpfile).mtime > 1435410243e3;
      }
      __name(hasMillisResSync, "hasMillisResSync");
      function hasMillisRes(callback) {
        let tmpfile = path4.join(
          "millis-test" +
            Date.now().toString() +
            Math.random().toString().slice(2),
        );
        tmpfile = path4.join(os.tmpdir(), tmpfile);
        const d = /* @__PURE__ */ new Date(1435410243862);
        fs6.writeFile(
          tmpfile,
          "https://github.com/jprichardson/node-fs-extra/pull/141",
          (err) => {
            if (err) return callback(err);
            fs6.open(tmpfile, "r+", (err2, fd) => {
              if (err2) return callback(err2);
              fs6.futimes(fd, d, d, (err3) => {
                if (err3) return callback(err3);
                fs6.close(fd, (err4) => {
                  if (err4) return callback(err4);
                  fs6.stat(tmpfile, (err5, stats) => {
                    if (err5) return callback(err5);
                    callback(null, stats.mtime > 1435410243e3);
                  });
                });
              });
            });
          },
        );
      }
      __name(hasMillisRes, "hasMillisRes");
      function timeRemoveMillis(timestamp) {
        if (typeof timestamp === "number") {
          return Math.floor(timestamp / 1e3) * 1e3;
        } else if (timestamp instanceof Date) {
          return new Date(Math.floor(timestamp.getTime() / 1e3) * 1e3);
        } else {
          throw new Error(
            "fs-extra: timeRemoveMillis() unknown parameter type",
          );
        }
      }
      __name(timeRemoveMillis, "timeRemoveMillis");
      function utimesMillis(path5, atime, mtime, callback) {
        fs6.open(path5, "r+", (err, fd) => {
          if (err) return callback(err);
          fs6.futimes(fd, atime, mtime, (futimesErr) => {
            fs6.close(fd, (closeErr) => {
              if (callback) callback(futimesErr || closeErr);
            });
          });
        });
      }
      __name(utimesMillis, "utimesMillis");
      function utimesMillisSync(path5, atime, mtime) {
        const fd = fs6.openSync(path5, "r+");
        fs6.futimesSync(fd, atime, mtime);
        return fs6.closeSync(fd);
      }
      __name(utimesMillisSync, "utimesMillisSync");
      module.exports = {
        hasMillisRes,
        hasMillisResSync,
        timeRemoveMillis,
        utimesMillis,
        utimesMillisSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/stat.js
  var require_stat2 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/stat.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var NODE_VERSION_MAJOR_WITH_BIGINT = 10;
      var NODE_VERSION_MINOR_WITH_BIGINT = 5;
      var NODE_VERSION_PATCH_WITH_BIGINT = 0;
      var nodeVersion = process.versions.node.split(".");
      var nodeVersionMajor = Number.parseInt(nodeVersion[0], 10);
      var nodeVersionMinor = Number.parseInt(nodeVersion[1], 10);
      var nodeVersionPatch = Number.parseInt(nodeVersion[2], 10);
      function nodeSupportsBigInt() {
        if (nodeVersionMajor > NODE_VERSION_MAJOR_WITH_BIGINT) {
          return true;
        } else if (nodeVersionMajor === NODE_VERSION_MAJOR_WITH_BIGINT) {
          if (nodeVersionMinor > NODE_VERSION_MINOR_WITH_BIGINT) {
            return true;
          } else if (nodeVersionMinor === NODE_VERSION_MINOR_WITH_BIGINT) {
            if (nodeVersionPatch >= NODE_VERSION_PATCH_WITH_BIGINT) {
              return true;
            }
          }
        }
        return false;
      }
      __name(nodeSupportsBigInt, "nodeSupportsBigInt");
      function getStats(src, dest, cb) {
        if (nodeSupportsBigInt()) {
          fs6.stat(src, { bigint: true }, (err, srcStat) => {
            if (err) return cb(err);
            fs6.stat(dest, { bigint: true }, (err2, destStat) => {
              if (err2) {
                if (err2.code === "ENOENT")
                  return cb(null, { srcStat, destStat: null });
                return cb(err2);
              }
              return cb(null, { srcStat, destStat });
            });
          });
        } else {
          fs6.stat(src, (err, srcStat) => {
            if (err) return cb(err);
            fs6.stat(dest, (err2, destStat) => {
              if (err2) {
                if (err2.code === "ENOENT")
                  return cb(null, { srcStat, destStat: null });
                return cb(err2);
              }
              return cb(null, { srcStat, destStat });
            });
          });
        }
      }
      __name(getStats, "getStats");
      function getStatsSync(src, dest) {
        let srcStat, destStat;
        if (nodeSupportsBigInt()) {
          srcStat = fs6.statSync(src, { bigint: true });
        } else {
          srcStat = fs6.statSync(src);
        }
        try {
          if (nodeSupportsBigInt()) {
            destStat = fs6.statSync(dest, { bigint: true });
          } else {
            destStat = fs6.statSync(dest);
          }
        } catch (err) {
          if (err.code === "ENOENT") return { srcStat, destStat: null };
          throw err;
        }
        return { srcStat, destStat };
      }
      __name(getStatsSync, "getStatsSync");
      function checkPaths(src, dest, funcName, cb) {
        getStats(src, dest, (err, stats) => {
          if (err) return cb(err);
          const { srcStat, destStat } = stats;
          if (
            destStat &&
            destStat.ino &&
            destStat.dev &&
            destStat.ino === srcStat.ino &&
            destStat.dev === srcStat.dev
          ) {
            return cb(
              new Error("Source and destination must not be the same."),
            );
          }
          if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
            return cb(new Error(errMsg(src, dest, funcName)));
          }
          return cb(null, { srcStat, destStat });
        });
      }
      __name(checkPaths, "checkPaths");
      function checkPathsSync(src, dest, funcName) {
        const { srcStat, destStat } = getStatsSync(src, dest);
        if (
          destStat &&
          destStat.ino &&
          destStat.dev &&
          destStat.ino === srcStat.ino &&
          destStat.dev === srcStat.dev
        ) {
          throw new Error("Source and destination must not be the same.");
        }
        if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
          throw new Error(errMsg(src, dest, funcName));
        }
        return { srcStat, destStat };
      }
      __name(checkPathsSync, "checkPathsSync");
      function checkParentPaths(src, srcStat, dest, funcName, cb) {
        const srcParent = path4.resolve(path4.dirname(src));
        const destParent = path4.resolve(path4.dirname(dest));
        if (
          destParent === srcParent ||
          destParent === path4.parse(destParent).root
        )
          return cb();
        if (nodeSupportsBigInt()) {
          fs6.stat(destParent, { bigint: true }, (err, destStat) => {
            if (err) {
              if (err.code === "ENOENT") return cb();
              return cb(err);
            }
            if (
              destStat.ino &&
              destStat.dev &&
              destStat.ino === srcStat.ino &&
              destStat.dev === srcStat.dev
            ) {
              return cb(new Error(errMsg(src, dest, funcName)));
            }
            return checkParentPaths(src, srcStat, destParent, funcName, cb);
          });
        } else {
          fs6.stat(destParent, (err, destStat) => {
            if (err) {
              if (err.code === "ENOENT") return cb();
              return cb(err);
            }
            if (
              destStat.ino &&
              destStat.dev &&
              destStat.ino === srcStat.ino &&
              destStat.dev === srcStat.dev
            ) {
              return cb(new Error(errMsg(src, dest, funcName)));
            }
            return checkParentPaths(src, srcStat, destParent, funcName, cb);
          });
        }
      }
      __name(checkParentPaths, "checkParentPaths");
      function checkParentPathsSync(src, srcStat, dest, funcName) {
        const srcParent = path4.resolve(path4.dirname(src));
        const destParent = path4.resolve(path4.dirname(dest));
        if (
          destParent === srcParent ||
          destParent === path4.parse(destParent).root
        )
          return;
        let destStat;
        try {
          if (nodeSupportsBigInt()) {
            destStat = fs6.statSync(destParent, { bigint: true });
          } else {
            destStat = fs6.statSync(destParent);
          }
        } catch (err) {
          if (err.code === "ENOENT") return;
          throw err;
        }
        if (
          destStat.ino &&
          destStat.dev &&
          destStat.ino === srcStat.ino &&
          destStat.dev === srcStat.dev
        ) {
          throw new Error(errMsg(src, dest, funcName));
        }
        return checkParentPathsSync(src, srcStat, destParent, funcName);
      }
      __name(checkParentPathsSync, "checkParentPathsSync");
      function isSrcSubdir(src, dest) {
        const srcArr = path4
          .resolve(src)
          .split(path4.sep)
          .filter((i) => i);
        const destArr = path4
          .resolve(dest)
          .split(path4.sep)
          .filter((i) => i);
        return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true);
      }
      __name(isSrcSubdir, "isSrcSubdir");
      function errMsg(src, dest, funcName) {
        return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
      }
      __name(errMsg, "errMsg");
      module.exports = {
        checkPaths,
        checkPathsSync,
        checkParentPaths,
        checkParentPathsSync,
        isSrcSubdir,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/buffer.js
  var require_buffer2 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/util/buffer.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = function (size) {
        if (typeof Buffer.allocUnsafe === "function") {
          try {
            return Buffer.allocUnsafe(size);
          } catch (e) {
            return new Buffer(size);
          }
        }
        return new Buffer(size);
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy-sync/copy-sync.js
  var require_copy_sync4 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy-sync/copy-sync.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var mkdirpSync = require_mkdirs5().mkdirsSync;
      var utimesSync = require_utimes3().utimesMillisSync;
      var stat = require_stat2();
      function copySync(src, dest, opts) {
        if (typeof opts === "function") {
          opts = { filter: opts };
        }
        opts = opts || {};
        opts.clobber = "clobber" in opts ? !!opts.clobber : true;
        opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
        if (opts.preserveTimestamps && process.arch === "ia32") {
          console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
        }
        const { srcStat, destStat } = stat.checkPathsSync(src, dest, "copy");
        stat.checkParentPathsSync(src, srcStat, dest, "copy");
        return handleFilterAndCopy(destStat, src, dest, opts);
      }
      __name(copySync, "copySync");
      function handleFilterAndCopy(destStat, src, dest, opts) {
        if (opts.filter && !opts.filter(src, dest)) return;
        const destParent = path4.dirname(dest);
        if (!fs6.existsSync(destParent)) mkdirpSync(destParent);
        return startCopy(destStat, src, dest, opts);
      }
      __name(handleFilterAndCopy, "handleFilterAndCopy");
      function startCopy(destStat, src, dest, opts) {
        if (opts.filter && !opts.filter(src, dest)) return;
        return getStats(destStat, src, dest, opts);
      }
      __name(startCopy, "startCopy");
      function getStats(destStat, src, dest, opts) {
        const statSync = opts.dereference ? fs6.statSync : fs6.lstatSync;
        const srcStat = statSync(src);
        if (srcStat.isDirectory())
          return onDir(srcStat, destStat, src, dest, opts);
        else if (
          srcStat.isFile() ||
          srcStat.isCharacterDevice() ||
          srcStat.isBlockDevice()
        )
          return onFile(srcStat, destStat, src, dest, opts);
        else if (srcStat.isSymbolicLink())
          return onLink(destStat, src, dest, opts);
      }
      __name(getStats, "getStats");
      function onFile(srcStat, destStat, src, dest, opts) {
        if (!destStat) return copyFile(srcStat, src, dest, opts);
        return mayCopyFile(srcStat, src, dest, opts);
      }
      __name(onFile, "onFile");
      function mayCopyFile(srcStat, src, dest, opts) {
        if (opts.overwrite) {
          fs6.unlinkSync(dest);
          return copyFile(srcStat, src, dest, opts);
        } else if (opts.errorOnExist) {
          throw new Error(`'${dest}' already exists`);
        }
      }
      __name(mayCopyFile, "mayCopyFile");
      function copyFile(srcStat, src, dest, opts) {
        if (typeof fs6.copyFileSync === "function") {
          fs6.copyFileSync(src, dest);
          fs6.chmodSync(dest, srcStat.mode);
          if (opts.preserveTimestamps) {
            return utimesSync(dest, srcStat.atime, srcStat.mtime);
          }
          return;
        }
        return copyFileFallback(srcStat, src, dest, opts);
      }
      __name(copyFile, "copyFile");
      function copyFileFallback(srcStat, src, dest, opts) {
        const BUF_LENGTH = 64 * 1024;
        const _buff = require_buffer2()(BUF_LENGTH);
        const fdr = fs6.openSync(src, "r");
        const fdw = fs6.openSync(dest, "w", srcStat.mode);
        let pos = 0;
        while (pos < srcStat.size) {
          const bytesRead = fs6.readSync(fdr, _buff, 0, BUF_LENGTH, pos);
          fs6.writeSync(fdw, _buff, 0, bytesRead);
          pos += bytesRead;
        }
        if (opts.preserveTimestamps)
          fs6.futimesSync(fdw, srcStat.atime, srcStat.mtime);
        fs6.closeSync(fdr);
        fs6.closeSync(fdw);
      }
      __name(copyFileFallback, "copyFileFallback");
      function onDir(srcStat, destStat, src, dest, opts) {
        if (!destStat) return mkDirAndCopy(srcStat, src, dest, opts);
        if (destStat && !destStat.isDirectory()) {
          throw new Error(
            `Cannot overwrite non-directory '${dest}' with directory '${src}'.`,
          );
        }
        return copyDir(src, dest, opts);
      }
      __name(onDir, "onDir");
      function mkDirAndCopy(srcStat, src, dest, opts) {
        fs6.mkdirSync(dest);
        copyDir(src, dest, opts);
        return fs6.chmodSync(dest, srcStat.mode);
      }
      __name(mkDirAndCopy, "mkDirAndCopy");
      function copyDir(src, dest, opts) {
        fs6
          .readdirSync(src)
          .forEach((item) => copyDirItem(item, src, dest, opts));
      }
      __name(copyDir, "copyDir");
      function copyDirItem(item, src, dest, opts) {
        const srcItem = path4.join(src, item);
        const destItem = path4.join(dest, item);
        const { destStat } = stat.checkPathsSync(srcItem, destItem, "copy");
        return startCopy(destStat, srcItem, destItem, opts);
      }
      __name(copyDirItem, "copyDirItem");
      function onLink(destStat, src, dest, opts) {
        let resolvedSrc = fs6.readlinkSync(src);
        if (opts.dereference) {
          resolvedSrc = path4.resolve(process.cwd(), resolvedSrc);
        }
        if (!destStat) {
          return fs6.symlinkSync(resolvedSrc, dest);
        } else {
          let resolvedDest;
          try {
            resolvedDest = fs6.readlinkSync(dest);
          } catch (err) {
            if (err.code === "EINVAL" || err.code === "UNKNOWN")
              return fs6.symlinkSync(resolvedSrc, dest);
            throw err;
          }
          if (opts.dereference) {
            resolvedDest = path4.resolve(process.cwd(), resolvedDest);
          }
          if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
            throw new Error(
              `Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`,
            );
          }
          if (
            fs6.statSync(dest).isDirectory() &&
            stat.isSrcSubdir(resolvedDest, resolvedSrc)
          ) {
            throw new Error(
              `Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`,
            );
          }
          return copyLink(resolvedSrc, dest);
        }
      }
      __name(onLink, "onLink");
      function copyLink(resolvedSrc, dest) {
        fs6.unlinkSync(dest);
        return fs6.symlinkSync(resolvedSrc, dest);
      }
      __name(copyLink, "copyLink");
      module.exports = copySync;
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy-sync/index.js
  var require_copy_sync5 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy-sync/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = {
        copySync: require_copy_sync4(),
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/path-exists/index.js
  var require_path_exists3 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/path-exists/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromPromise;
      var fs6 = require_fs7();
      function pathExists(path4) {
        return fs6
          .access(path4)
          .then(() => true)
          .catch(() => false);
      }
      __name(pathExists, "pathExists");
      module.exports = {
        pathExists: u(pathExists),
        pathExistsSync: fs6.existsSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy/copy.js
  var require_copy5 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy/copy.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var mkdirp = require_mkdirs5().mkdirs;
      var pathExists = require_path_exists3().pathExists;
      var utimes = require_utimes3().utimesMillis;
      var stat = require_stat2();
      function copy(src, dest, opts, cb) {
        if (typeof opts === "function" && !cb) {
          cb = opts;
          opts = {};
        } else if (typeof opts === "function") {
          opts = { filter: opts };
        }
        cb = cb || function () {};
        opts = opts || {};
        opts.clobber = "clobber" in opts ? !!opts.clobber : true;
        opts.overwrite = "overwrite" in opts ? !!opts.overwrite : opts.clobber;
        if (opts.preserveTimestamps && process.arch === "ia32") {
          console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;

    see https://github.com/jprichardson/node-fs-extra/issues/269`);
        }
        stat.checkPaths(src, dest, "copy", (err, stats) => {
          if (err) return cb(err);
          const { srcStat, destStat } = stats;
          stat.checkParentPaths(src, srcStat, dest, "copy", (err2) => {
            if (err2) return cb(err2);
            if (opts.filter)
              return handleFilter(
                checkParentDir,
                destStat,
                src,
                dest,
                opts,
                cb,
              );
            return checkParentDir(destStat, src, dest, opts, cb);
          });
        });
      }
      __name(copy, "copy");
      function checkParentDir(destStat, src, dest, opts, cb) {
        const destParent = path4.dirname(dest);
        pathExists(destParent, (err, dirExists) => {
          if (err) return cb(err);
          if (dirExists) return startCopy(destStat, src, dest, opts, cb);
          mkdirp(destParent, (err2) => {
            if (err2) return cb(err2);
            return startCopy(destStat, src, dest, opts, cb);
          });
        });
      }
      __name(checkParentDir, "checkParentDir");
      function handleFilter(onInclude, destStat, src, dest, opts, cb) {
        Promise.resolve(opts.filter(src, dest)).then(
          (include) => {
            if (include) return onInclude(destStat, src, dest, opts, cb);
            return cb();
          },
          (error) => cb(error),
        );
      }
      __name(handleFilter, "handleFilter");
      function startCopy(destStat, src, dest, opts, cb) {
        if (opts.filter)
          return handleFilter(getStats, destStat, src, dest, opts, cb);
        return getStats(destStat, src, dest, opts, cb);
      }
      __name(startCopy, "startCopy");
      function getStats(destStat, src, dest, opts, cb) {
        const stat2 = opts.dereference ? fs6.stat : fs6.lstat;
        stat2(src, (err, srcStat) => {
          if (err) return cb(err);
          if (srcStat.isDirectory())
            return onDir(srcStat, destStat, src, dest, opts, cb);
          else if (
            srcStat.isFile() ||
            srcStat.isCharacterDevice() ||
            srcStat.isBlockDevice()
          )
            return onFile(srcStat, destStat, src, dest, opts, cb);
          else if (srcStat.isSymbolicLink())
            return onLink(destStat, src, dest, opts, cb);
        });
      }
      __name(getStats, "getStats");
      function onFile(srcStat, destStat, src, dest, opts, cb) {
        if (!destStat) return copyFile(srcStat, src, dest, opts, cb);
        return mayCopyFile(srcStat, src, dest, opts, cb);
      }
      __name(onFile, "onFile");
      function mayCopyFile(srcStat, src, dest, opts, cb) {
        if (opts.overwrite) {
          fs6.unlink(dest, (err) => {
            if (err) return cb(err);
            return copyFile(srcStat, src, dest, opts, cb);
          });
        } else if (opts.errorOnExist) {
          return cb(new Error(`'${dest}' already exists`));
        } else return cb();
      }
      __name(mayCopyFile, "mayCopyFile");
      function copyFile(srcStat, src, dest, opts, cb) {
        if (typeof fs6.copyFile === "function") {
          return fs6.copyFile(src, dest, (err) => {
            if (err) return cb(err);
            return setDestModeAndTimestamps(srcStat, dest, opts, cb);
          });
        }
        return copyFileFallback(srcStat, src, dest, opts, cb);
      }
      __name(copyFile, "copyFile");
      function copyFileFallback(srcStat, src, dest, opts, cb) {
        const rs = fs6.createReadStream(src);
        rs.on("error", (err) => cb(err)).once("open", () => {
          const ws = fs6.createWriteStream(dest, { mode: srcStat.mode });
          ws.on("error", (err) => cb(err))
            .on("open", () => rs.pipe(ws))
            .once("close", () =>
              setDestModeAndTimestamps(srcStat, dest, opts, cb),
            );
        });
      }
      __name(copyFileFallback, "copyFileFallback");
      function setDestModeAndTimestamps(srcStat, dest, opts, cb) {
        fs6.chmod(dest, srcStat.mode, (err) => {
          if (err) return cb(err);
          if (opts.preserveTimestamps) {
            return utimes(dest, srcStat.atime, srcStat.mtime, cb);
          }
          return cb();
        });
      }
      __name(setDestModeAndTimestamps, "setDestModeAndTimestamps");
      function onDir(srcStat, destStat, src, dest, opts, cb) {
        if (!destStat) return mkDirAndCopy(srcStat, src, dest, opts, cb);
        if (destStat && !destStat.isDirectory()) {
          return cb(
            new Error(
              `Cannot overwrite non-directory '${dest}' with directory '${src}'.`,
            ),
          );
        }
        return copyDir(src, dest, opts, cb);
      }
      __name(onDir, "onDir");
      function mkDirAndCopy(srcStat, src, dest, opts, cb) {
        fs6.mkdir(dest, (err) => {
          if (err) return cb(err);
          copyDir(src, dest, opts, (err2) => {
            if (err2) return cb(err2);
            return fs6.chmod(dest, srcStat.mode, cb);
          });
        });
      }
      __name(mkDirAndCopy, "mkDirAndCopy");
      function copyDir(src, dest, opts, cb) {
        fs6.readdir(src, (err, items) => {
          if (err) return cb(err);
          return copyDirItems(items, src, dest, opts, cb);
        });
      }
      __name(copyDir, "copyDir");
      function copyDirItems(items, src, dest, opts, cb) {
        const item = items.pop();
        if (!item) return cb();
        return copyDirItem(items, item, src, dest, opts, cb);
      }
      __name(copyDirItems, "copyDirItems");
      function copyDirItem(items, item, src, dest, opts, cb) {
        const srcItem = path4.join(src, item);
        const destItem = path4.join(dest, item);
        stat.checkPaths(srcItem, destItem, "copy", (err, stats) => {
          if (err) return cb(err);
          const { destStat } = stats;
          startCopy(destStat, srcItem, destItem, opts, (err2) => {
            if (err2) return cb(err2);
            return copyDirItems(items, src, dest, opts, cb);
          });
        });
      }
      __name(copyDirItem, "copyDirItem");
      function onLink(destStat, src, dest, opts, cb) {
        fs6.readlink(src, (err, resolvedSrc) => {
          if (err) return cb(err);
          if (opts.dereference) {
            resolvedSrc = path4.resolve(process.cwd(), resolvedSrc);
          }
          if (!destStat) {
            return fs6.symlink(resolvedSrc, dest, cb);
          } else {
            fs6.readlink(dest, (err2, resolvedDest) => {
              if (err2) {
                if (err2.code === "EINVAL" || err2.code === "UNKNOWN")
                  return fs6.symlink(resolvedSrc, dest, cb);
                return cb(err2);
              }
              if (opts.dereference) {
                resolvedDest = path4.resolve(process.cwd(), resolvedDest);
              }
              if (stat.isSrcSubdir(resolvedSrc, resolvedDest)) {
                return cb(
                  new Error(
                    `Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`,
                  ),
                );
              }
              if (
                destStat.isDirectory() &&
                stat.isSrcSubdir(resolvedDest, resolvedSrc)
              ) {
                return cb(
                  new Error(
                    `Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`,
                  ),
                );
              }
              return copyLink(resolvedSrc, dest, cb);
            });
          }
        });
      }
      __name(onLink, "onLink");
      function copyLink(resolvedSrc, dest, cb) {
        fs6.unlink(dest, (err) => {
          if (err) return cb(err);
          return fs6.symlink(resolvedSrc, dest, cb);
        });
      }
      __name(copyLink, "copyLink");
      module.exports = copy;
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy/index.js
  var require_copy6 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/copy/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      module.exports = {
        copy: u(require_copy5()),
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/remove/rimraf.js
  var require_rimraf2 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/remove/rimraf.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var assert = __require("assert");
      var isWindows = process.platform === "win32";
      function defaults(options) {
        const methods = [
          "unlink",
          "chmod",
          "stat",
          "lstat",
          "rmdir",
          "readdir",
        ];
        methods.forEach((m) => {
          options[m] = options[m] || fs6[m];
          m = m + "Sync";
          options[m] = options[m] || fs6[m];
        });
        options.maxBusyTries = options.maxBusyTries || 3;
      }
      __name(defaults, "defaults");
      function rimraf(p, options, cb) {
        let busyTries = 0;
        if (typeof options === "function") {
          cb = options;
          options = {};
        }
        assert(p, "rimraf: missing path");
        assert.strictEqual(
          typeof p,
          "string",
          "rimraf: path should be a string",
        );
        assert.strictEqual(
          typeof cb,
          "function",
          "rimraf: callback function required",
        );
        assert(options, "rimraf: invalid options argument provided");
        assert.strictEqual(
          typeof options,
          "object",
          "rimraf: options should be object",
        );
        defaults(options);
        rimraf_(
          p,
          options,
          /* @__PURE__ */ __name(function CB(er) {
            if (er) {
              if (
                (er.code === "EBUSY" ||
                  er.code === "ENOTEMPTY" ||
                  er.code === "EPERM") &&
                busyTries < options.maxBusyTries
              ) {
                busyTries++;
                const time = busyTries * 100;
                return setTimeout(() => rimraf_(p, options, CB), time);
              }
              if (er.code === "ENOENT") er = null;
            }
            cb(er);
          }, "CB"),
        );
      }
      __name(rimraf, "rimraf");
      function rimraf_(p, options, cb) {
        assert(p);
        assert(options);
        assert(typeof cb === "function");
        options.lstat(p, (er, st) => {
          if (er && er.code === "ENOENT") {
            return cb(null);
          }
          if (er && er.code === "EPERM" && isWindows) {
            return fixWinEPERM(p, options, er, cb);
          }
          if (st && st.isDirectory()) {
            return rmdir(p, options, er, cb);
          }
          options.unlink(p, (er2) => {
            if (er2) {
              if (er2.code === "ENOENT") {
                return cb(null);
              }
              if (er2.code === "EPERM") {
                return isWindows
                  ? fixWinEPERM(p, options, er2, cb)
                  : rmdir(p, options, er2, cb);
              }
              if (er2.code === "EISDIR") {
                return rmdir(p, options, er2, cb);
              }
            }
            return cb(er2);
          });
        });
      }
      __name(rimraf_, "rimraf_");
      function fixWinEPERM(p, options, er, cb) {
        assert(p);
        assert(options);
        assert(typeof cb === "function");
        if (er) {
          assert(er instanceof Error);
        }
        options.chmod(p, 438, (er2) => {
          if (er2) {
            cb(er2.code === "ENOENT" ? null : er);
          } else {
            options.stat(p, (er3, stats) => {
              if (er3) {
                cb(er3.code === "ENOENT" ? null : er);
              } else if (stats.isDirectory()) {
                rmdir(p, options, er, cb);
              } else {
                options.unlink(p, cb);
              }
            });
          }
        });
      }
      __name(fixWinEPERM, "fixWinEPERM");
      function fixWinEPERMSync(p, options, er) {
        let stats;
        assert(p);
        assert(options);
        if (er) {
          assert(er instanceof Error);
        }
        try {
          options.chmodSync(p, 438);
        } catch (er2) {
          if (er2.code === "ENOENT") {
            return;
          } else {
            throw er;
          }
        }
        try {
          stats = options.statSync(p);
        } catch (er3) {
          if (er3.code === "ENOENT") {
            return;
          } else {
            throw er;
          }
        }
        if (stats.isDirectory()) {
          rmdirSync(p, options, er);
        } else {
          options.unlinkSync(p);
        }
      }
      __name(fixWinEPERMSync, "fixWinEPERMSync");
      function rmdir(p, options, originalEr, cb) {
        assert(p);
        assert(options);
        if (originalEr) {
          assert(originalEr instanceof Error);
        }
        assert(typeof cb === "function");
        options.rmdir(p, (er) => {
          if (
            er &&
            (er.code === "ENOTEMPTY" ||
              er.code === "EEXIST" ||
              er.code === "EPERM")
          ) {
            rmkids(p, options, cb);
          } else if (er && er.code === "ENOTDIR") {
            cb(originalEr);
          } else {
            cb(er);
          }
        });
      }
      __name(rmdir, "rmdir");
      function rmkids(p, options, cb) {
        assert(p);
        assert(options);
        assert(typeof cb === "function");
        options.readdir(p, (er, files) => {
          if (er) return cb(er);
          let n = files.length;
          let errState;
          if (n === 0) return options.rmdir(p, cb);
          files.forEach((f) => {
            rimraf(path4.join(p, f), options, (er2) => {
              if (errState) {
                return;
              }
              if (er2) return cb((errState = er2));
              if (--n === 0) {
                options.rmdir(p, cb);
              }
            });
          });
        });
      }
      __name(rmkids, "rmkids");
      function rimrafSync(p, options) {
        let st;
        options = options || {};
        defaults(options);
        assert(p, "rimraf: missing path");
        assert.strictEqual(
          typeof p,
          "string",
          "rimraf: path should be a string",
        );
        assert(options, "rimraf: missing options");
        assert.strictEqual(
          typeof options,
          "object",
          "rimraf: options should be object",
        );
        try {
          st = options.lstatSync(p);
        } catch (er) {
          if (er.code === "ENOENT") {
            return;
          }
          if (er.code === "EPERM" && isWindows) {
            fixWinEPERMSync(p, options, er);
          }
        }
        try {
          if (st && st.isDirectory()) {
            rmdirSync(p, options, null);
          } else {
            options.unlinkSync(p);
          }
        } catch (er) {
          if (er.code === "ENOENT") {
            return;
          } else if (er.code === "EPERM") {
            return isWindows
              ? fixWinEPERMSync(p, options, er)
              : rmdirSync(p, options, er);
          } else if (er.code !== "EISDIR") {
            throw er;
          }
          rmdirSync(p, options, er);
        }
      }
      __name(rimrafSync, "rimrafSync");
      function rmdirSync(p, options, originalEr) {
        assert(p);
        assert(options);
        if (originalEr) {
          assert(originalEr instanceof Error);
        }
        try {
          options.rmdirSync(p);
        } catch (er) {
          if (er.code === "ENOTDIR") {
            throw originalEr;
          } else if (
            er.code === "ENOTEMPTY" ||
            er.code === "EEXIST" ||
            er.code === "EPERM"
          ) {
            rmkidsSync(p, options);
          } else if (er.code !== "ENOENT") {
            throw er;
          }
        }
      }
      __name(rmdirSync, "rmdirSync");
      function rmkidsSync(p, options) {
        assert(p);
        assert(options);
        options
          .readdirSync(p)
          .forEach((f) => rimrafSync(path4.join(p, f), options));
        if (isWindows) {
          const startTime = Date.now();
          do {
            try {
              const ret = options.rmdirSync(p, options);
              return ret;
            } catch (er) {}
          } while (Date.now() - startTime < 500);
        } else {
          const ret = options.rmdirSync(p, options);
          return ret;
        }
      }
      __name(rmkidsSync, "rmkidsSync");
      module.exports = rimraf;
      rimraf.sync = rimrafSync;
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/remove/index.js
  var require_remove4 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/remove/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var rimraf = require_rimraf2();
      module.exports = {
        remove: u(rimraf),
        removeSync: rimraf.sync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/empty/index.js
  var require_empty3 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/empty/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var mkdir = require_mkdirs5();
      var remove = require_remove4();
      var emptyDir = u(
        /* @__PURE__ */ __name(function emptyDir2(dir, callback) {
          callback = callback || function () {};
          fs6.readdir(dir, (err, items) => {
            if (err) return mkdir.mkdirs(dir, callback);
            items = items.map((item) => path4.join(dir, item));
            deleteItem();
            function deleteItem() {
              const item = items.pop();
              if (!item) return callback();
              remove.remove(item, (err2) => {
                if (err2) return callback(err2);
                deleteItem();
              });
            }
            __name(deleteItem, "deleteItem");
          });
        }, "emptyDir"),
      );
      function emptyDirSync(dir) {
        let items;
        try {
          items = fs6.readdirSync(dir);
        } catch (err) {
          return mkdir.mkdirsSync(dir);
        }
        items.forEach((item) => {
          item = path4.join(dir, item);
          remove.removeSync(item);
        });
      }
      __name(emptyDirSync, "emptyDirSync");
      module.exports = {
        emptyDirSync,
        emptydirSync: emptyDirSync,
        emptyDir,
        emptydir: emptyDir,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/file.js
  var require_file4 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/file.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var path4 = __require("path");
      var fs6 = require_graceful_fs();
      var mkdir = require_mkdirs5();
      var pathExists = require_path_exists3().pathExists;
      function createFile(file, callback) {
        function makeFile() {
          fs6.writeFile(file, "", (err) => {
            if (err) return callback(err);
            callback();
          });
        }
        __name(makeFile, "makeFile");
        fs6.stat(file, (err, stats) => {
          if (!err && stats.isFile()) return callback();
          const dir = path4.dirname(file);
          pathExists(dir, (err2, dirExists) => {
            if (err2) return callback(err2);
            if (dirExists) return makeFile();
            mkdir.mkdirs(dir, (err3) => {
              if (err3) return callback(err3);
              makeFile();
            });
          });
        });
      }
      __name(createFile, "createFile");
      function createFileSync(file) {
        let stats;
        try {
          stats = fs6.statSync(file);
        } catch (e) {}
        if (stats && stats.isFile()) return;
        const dir = path4.dirname(file);
        if (!fs6.existsSync(dir)) {
          mkdir.mkdirsSync(dir);
        }
        fs6.writeFileSync(file, "");
      }
      __name(createFileSync, "createFileSync");
      module.exports = {
        createFile: u(createFile),
        createFileSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/link.js
  var require_link3 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/link.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var path4 = __require("path");
      var fs6 = require_graceful_fs();
      var mkdir = require_mkdirs5();
      var pathExists = require_path_exists3().pathExists;
      function createLink(srcpath, dstpath, callback) {
        function makeLink(srcpath2, dstpath2) {
          fs6.link(srcpath2, dstpath2, (err) => {
            if (err) return callback(err);
            callback(null);
          });
        }
        __name(makeLink, "makeLink");
        pathExists(dstpath, (err, destinationExists) => {
          if (err) return callback(err);
          if (destinationExists) return callback(null);
          fs6.lstat(srcpath, (err2) => {
            if (err2) {
              err2.message = err2.message.replace("lstat", "ensureLink");
              return callback(err2);
            }
            const dir = path4.dirname(dstpath);
            pathExists(dir, (err3, dirExists) => {
              if (err3) return callback(err3);
              if (dirExists) return makeLink(srcpath, dstpath);
              mkdir.mkdirs(dir, (err4) => {
                if (err4) return callback(err4);
                makeLink(srcpath, dstpath);
              });
            });
          });
        });
      }
      __name(createLink, "createLink");
      function createLinkSync(srcpath, dstpath) {
        const destinationExists = fs6.existsSync(dstpath);
        if (destinationExists) return void 0;
        try {
          fs6.lstatSync(srcpath);
        } catch (err) {
          err.message = err.message.replace("lstat", "ensureLink");
          throw err;
        }
        const dir = path4.dirname(dstpath);
        const dirExists = fs6.existsSync(dir);
        if (dirExists) return fs6.linkSync(srcpath, dstpath);
        mkdir.mkdirsSync(dir);
        return fs6.linkSync(srcpath, dstpath);
      }
      __name(createLinkSync, "createLinkSync");
      module.exports = {
        createLink: u(createLink),
        createLinkSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink-paths.js
  var require_symlink_paths3 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink-paths.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var fs6 = require_graceful_fs();
      var pathExists = require_path_exists3().pathExists;
      function symlinkPaths(srcpath, dstpath, callback) {
        if (path4.isAbsolute(srcpath)) {
          return fs6.lstat(srcpath, (err) => {
            if (err) {
              err.message = err.message.replace("lstat", "ensureSymlink");
              return callback(err);
            }
            return callback(null, {
              toCwd: srcpath,
              toDst: srcpath,
            });
          });
        } else {
          const dstdir = path4.dirname(dstpath);
          const relativeToDst = path4.join(dstdir, srcpath);
          return pathExists(relativeToDst, (err, exists) => {
            if (err) return callback(err);
            if (exists) {
              return callback(null, {
                toCwd: relativeToDst,
                toDst: srcpath,
              });
            } else {
              return fs6.lstat(srcpath, (err2) => {
                if (err2) {
                  err2.message = err2.message.replace("lstat", "ensureSymlink");
                  return callback(err2);
                }
                return callback(null, {
                  toCwd: srcpath,
                  toDst: path4.relative(dstdir, srcpath),
                });
              });
            }
          });
        }
      }
      __name(symlinkPaths, "symlinkPaths");
      function symlinkPathsSync(srcpath, dstpath) {
        let exists;
        if (path4.isAbsolute(srcpath)) {
          exists = fs6.existsSync(srcpath);
          if (!exists) throw new Error("absolute srcpath does not exist");
          return {
            toCwd: srcpath,
            toDst: srcpath,
          };
        } else {
          const dstdir = path4.dirname(dstpath);
          const relativeToDst = path4.join(dstdir, srcpath);
          exists = fs6.existsSync(relativeToDst);
          if (exists) {
            return {
              toCwd: relativeToDst,
              toDst: srcpath,
            };
          } else {
            exists = fs6.existsSync(srcpath);
            if (!exists) throw new Error("relative srcpath does not exist");
            return {
              toCwd: srcpath,
              toDst: path4.relative(dstdir, srcpath),
            };
          }
        }
      }
      __name(symlinkPathsSync, "symlinkPathsSync");
      module.exports = {
        symlinkPaths,
        symlinkPathsSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink-type.js
  var require_symlink_type3 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink-type.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      function symlinkType(srcpath, type, callback) {
        callback = typeof type === "function" ? type : callback;
        type = typeof type === "function" ? false : type;
        if (type) return callback(null, type);
        fs6.lstat(srcpath, (err, stats) => {
          if (err) return callback(null, "file");
          type = stats && stats.isDirectory() ? "dir" : "file";
          callback(null, type);
        });
      }
      __name(symlinkType, "symlinkType");
      function symlinkTypeSync(srcpath, type) {
        let stats;
        if (type) return type;
        try {
          stats = fs6.lstatSync(srcpath);
        } catch (e) {
          return "file";
        }
        return stats && stats.isDirectory() ? "dir" : "file";
      }
      __name(symlinkTypeSync, "symlinkTypeSync");
      module.exports = {
        symlinkType,
        symlinkTypeSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink.js
  var require_symlink3 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/symlink.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var path4 = __require("path");
      var fs6 = require_graceful_fs();
      var _mkdirs = require_mkdirs5();
      var mkdirs = _mkdirs.mkdirs;
      var mkdirsSync = _mkdirs.mkdirsSync;
      var _symlinkPaths = require_symlink_paths3();
      var symlinkPaths = _symlinkPaths.symlinkPaths;
      var symlinkPathsSync = _symlinkPaths.symlinkPathsSync;
      var _symlinkType = require_symlink_type3();
      var symlinkType = _symlinkType.symlinkType;
      var symlinkTypeSync = _symlinkType.symlinkTypeSync;
      var pathExists = require_path_exists3().pathExists;
      function createSymlink(srcpath, dstpath, type, callback) {
        callback = typeof type === "function" ? type : callback;
        type = typeof type === "function" ? false : type;
        pathExists(dstpath, (err, destinationExists) => {
          if (err) return callback(err);
          if (destinationExists) return callback(null);
          symlinkPaths(srcpath, dstpath, (err2, relative) => {
            if (err2) return callback(err2);
            srcpath = relative.toDst;
            symlinkType(relative.toCwd, type, (err3, type2) => {
              if (err3) return callback(err3);
              const dir = path4.dirname(dstpath);
              pathExists(dir, (err4, dirExists) => {
                if (err4) return callback(err4);
                if (dirExists)
                  return fs6.symlink(srcpath, dstpath, type2, callback);
                mkdirs(dir, (err5) => {
                  if (err5) return callback(err5);
                  fs6.symlink(srcpath, dstpath, type2, callback);
                });
              });
            });
          });
        });
      }
      __name(createSymlink, "createSymlink");
      function createSymlinkSync(srcpath, dstpath, type) {
        const destinationExists = fs6.existsSync(dstpath);
        if (destinationExists) return void 0;
        const relative = symlinkPathsSync(srcpath, dstpath);
        srcpath = relative.toDst;
        type = symlinkTypeSync(relative.toCwd, type);
        const dir = path4.dirname(dstpath);
        const exists = fs6.existsSync(dir);
        if (exists) return fs6.symlinkSync(srcpath, dstpath, type);
        mkdirsSync(dir);
        return fs6.symlinkSync(srcpath, dstpath, type);
      }
      __name(createSymlinkSync, "createSymlinkSync");
      module.exports = {
        createSymlink: u(createSymlink),
        createSymlinkSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/index.js
  var require_ensure3 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/ensure/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var file = require_file4();
      var link2 = require_link3();
      var symlink = require_symlink3();
      module.exports = {
        // file
        createFile: file.createFile,
        createFileSync: file.createFileSync,
        ensureFile: file.createFile,
        ensureFileSync: file.createFileSync,
        // link
        createLink: link2.createLink,
        createLinkSync: link2.createLinkSync,
        ensureLink: link2.createLink,
        ensureLinkSync: link2.createLinkSync,
        // symlink
        createSymlink: symlink.createSymlink,
        createSymlinkSync: symlink.createSymlinkSync,
        ensureSymlink: symlink.createSymlink,
        ensureSymlinkSync: symlink.createSymlinkSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/jsonfile.js
  var require_jsonfile5 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/jsonfile.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var jsonFile = require_jsonfile3();
      module.exports = {
        // jsonfile exports
        readJson: u(jsonFile.readFile),
        readJsonSync: jsonFile.readFileSync,
        writeJson: u(jsonFile.writeFile),
        writeJsonSync: jsonFile.writeFileSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/output-json.js
  var require_output_json3 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/output-json.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var mkdir = require_mkdirs5();
      var pathExists = require_path_exists3().pathExists;
      var jsonFile = require_jsonfile5();
      function outputJson(file, data, options, callback) {
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        const dir = path4.dirname(file);
        pathExists(dir, (err, itDoes) => {
          if (err) return callback(err);
          if (itDoes) return jsonFile.writeJson(file, data, options, callback);
          mkdir.mkdirs(dir, (err2) => {
            if (err2) return callback(err2);
            jsonFile.writeJson(file, data, options, callback);
          });
        });
      }
      __name(outputJson, "outputJson");
      module.exports = outputJson;
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/output-json-sync.js
  var require_output_json_sync3 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/output-json-sync.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var mkdir = require_mkdirs5();
      var jsonFile = require_jsonfile5();
      function outputJsonSync(file, data, options) {
        const dir = path4.dirname(file);
        if (!fs6.existsSync(dir)) {
          mkdir.mkdirsSync(dir);
        }
        jsonFile.writeJsonSync(file, data, options);
      }
      __name(outputJsonSync, "outputJsonSync");
      module.exports = outputJsonSync;
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/index.js
  var require_json4 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/json/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var jsonFile = require_jsonfile5();
      jsonFile.outputJson = u(require_output_json3());
      jsonFile.outputJsonSync = require_output_json_sync3();
      jsonFile.outputJSON = jsonFile.outputJson;
      jsonFile.outputJSONSync = jsonFile.outputJsonSync;
      jsonFile.writeJSON = jsonFile.writeJson;
      jsonFile.writeJSONSync = jsonFile.writeJsonSync;
      jsonFile.readJSON = jsonFile.readJson;
      jsonFile.readJSONSync = jsonFile.readJsonSync;
      module.exports = jsonFile;
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move-sync/move-sync.js
  var require_move_sync3 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move-sync/move-sync.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var copySync = require_copy_sync5().copySync;
      var removeSync = require_remove4().removeSync;
      var mkdirpSync = require_mkdirs5().mkdirpSync;
      var stat = require_stat2();
      function moveSync(src, dest, opts) {
        opts = opts || {};
        const overwrite = opts.overwrite || opts.clobber || false;
        const { srcStat } = stat.checkPathsSync(src, dest, "move");
        stat.checkParentPathsSync(src, srcStat, dest, "move");
        mkdirpSync(path4.dirname(dest));
        return doRename(src, dest, overwrite);
      }
      __name(moveSync, "moveSync");
      function doRename(src, dest, overwrite) {
        if (overwrite) {
          removeSync(dest);
          return rename(src, dest, overwrite);
        }
        if (fs6.existsSync(dest)) throw new Error("dest already exists.");
        return rename(src, dest, overwrite);
      }
      __name(doRename, "doRename");
      function rename(src, dest, overwrite) {
        try {
          fs6.renameSync(src, dest);
        } catch (err) {
          if (err.code !== "EXDEV") throw err;
          return moveAcrossDevice(src, dest, overwrite);
        }
      }
      __name(rename, "rename");
      function moveAcrossDevice(src, dest, overwrite) {
        const opts = {
          overwrite,
          errorOnExist: true,
        };
        copySync(src, dest, opts);
        return removeSync(src);
      }
      __name(moveAcrossDevice, "moveAcrossDevice");
      module.exports = moveSync;
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move-sync/index.js
  var require_move_sync4 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move-sync/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = {
        moveSync: require_move_sync3(),
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move/move.js
  var require_move4 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move/move.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var copy = require_copy6().copy;
      var remove = require_remove4().remove;
      var mkdirp = require_mkdirs5().mkdirp;
      var pathExists = require_path_exists3().pathExists;
      var stat = require_stat2();
      function move(src, dest, opts, cb) {
        if (typeof opts === "function") {
          cb = opts;
          opts = {};
        }
        const overwrite = opts.overwrite || opts.clobber || false;
        stat.checkPaths(src, dest, "move", (err, stats) => {
          if (err) return cb(err);
          const { srcStat } = stats;
          stat.checkParentPaths(src, srcStat, dest, "move", (err2) => {
            if (err2) return cb(err2);
            mkdirp(path4.dirname(dest), (err3) => {
              if (err3) return cb(err3);
              return doRename(src, dest, overwrite, cb);
            });
          });
        });
      }
      __name(move, "move");
      function doRename(src, dest, overwrite, cb) {
        if (overwrite) {
          return remove(dest, (err) => {
            if (err) return cb(err);
            return rename(src, dest, overwrite, cb);
          });
        }
        pathExists(dest, (err, destExists) => {
          if (err) return cb(err);
          if (destExists) return cb(new Error("dest already exists."));
          return rename(src, dest, overwrite, cb);
        });
      }
      __name(doRename, "doRename");
      function rename(src, dest, overwrite, cb) {
        fs6.rename(src, dest, (err) => {
          if (!err) return cb();
          if (err.code !== "EXDEV") return cb(err);
          return moveAcrossDevice(src, dest, overwrite, cb);
        });
      }
      __name(rename, "rename");
      function moveAcrossDevice(src, dest, overwrite, cb) {
        const opts = {
          overwrite,
          errorOnExist: true,
        };
        copy(src, dest, opts, (err) => {
          if (err) return cb(err);
          return remove(src, cb);
        });
      }
      __name(moveAcrossDevice, "moveAcrossDevice");
      module.exports = move;
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move/index.js
  var require_move5 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/move/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      module.exports = {
        move: u(require_move4()),
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/output/index.js
  var require_output2 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/output/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var u = require_universalify2().fromCallback;
      var fs6 = require_graceful_fs();
      var path4 = __require("path");
      var mkdir = require_mkdirs5();
      var pathExists = require_path_exists3().pathExists;
      function outputFile2(file, data, encoding, callback) {
        if (typeof encoding === "function") {
          callback = encoding;
          encoding = "utf8";
        }
        const dir = path4.dirname(file);
        pathExists(dir, (err, itDoes) => {
          if (err) return callback(err);
          if (itDoes) return fs6.writeFile(file, data, encoding, callback);
          mkdir.mkdirs(dir, (err2) => {
            if (err2) return callback(err2);
            fs6.writeFile(file, data, encoding, callback);
          });
        });
      }
      __name(outputFile2, "outputFile");
      function outputFileSync(file, ...args) {
        const dir = path4.dirname(file);
        if (fs6.existsSync(dir)) {
          return fs6.writeFileSync(file, ...args);
        }
        mkdir.mkdirsSync(dir);
        fs6.writeFileSync(file, ...args);
      }
      __name(outputFileSync, "outputFileSync");
      module.exports = {
        outputFile: u(outputFile2),
        outputFileSync,
      };
    },
  });

  // node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/index.js
  var require_lib4 = __commonJS({
    "node_modules/.pnpm/fs-extra@8.1.0/node_modules/fs-extra/lib/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = Object.assign(
        {},
        // Export promiseified graceful-fs:
        require_fs7(),
        // Export extra methods:
        require_copy_sync5(),
        require_copy6(),
        require_empty3(),
        require_ensure3(),
        require_json4(),
        require_mkdirs5(),
        require_move_sync4(),
        require_move5(),
        require_output2(),
        require_path_exists3(),
        require_remove4(),
      );
      var fs6 = __require("fs");
      if (Object.getOwnPropertyDescriptor(fs6, "promises")) {
        Object.defineProperty(module.exports, "promises", {
          get() {
            return fs6.promises;
          },
        });
      }
    },
  });

  // node_modules/.pnpm/array-union@2.1.0/node_modules/array-union/index.js
  var require_array_union = __commonJS({
    "node_modules/.pnpm/array-union@2.1.0/node_modules/array-union/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = (...arguments_) => {
        return [...new Set([].concat(...arguments_))];
      };
    },
  });

  // node_modules/.pnpm/path-type@4.0.0/node_modules/path-type/index.js
  var require_path_type = __commonJS({
    "node_modules/.pnpm/path-type@4.0.0/node_modules/path-type/index.js"(
      exports,
    ) {
      "use strict";
      var { promisify } = __require("util");
      var fs6 = __require("fs");
      async function isType(fsStatType, statsMethodName, filePath) {
        if (typeof filePath !== "string") {
          throw new TypeError(`Expected a string, got ${typeof filePath}`);
        }
        try {
          const stats = await promisify(fs6[fsStatType])(filePath);
          return stats[statsMethodName]();
        } catch (error) {
          if (error.code === "ENOENT") {
            return false;
          }
          throw error;
        }
      }
      __name(isType, "isType");
      function isTypeSync(fsStatType, statsMethodName, filePath) {
        if (typeof filePath !== "string") {
          throw new TypeError(`Expected a string, got ${typeof filePath}`);
        }
        try {
          return fs6[fsStatType](filePath)[statsMethodName]();
        } catch (error) {
          if (error.code === "ENOENT") {
            return false;
          }
          throw error;
        }
      }
      __name(isTypeSync, "isTypeSync");
      exports.isFile = isType.bind(null, "stat", "isFile");
      exports.isDirectory = isType.bind(null, "stat", "isDirectory");
      exports.isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
      exports.isFileSync = isTypeSync.bind(null, "statSync", "isFile");
      exports.isDirectorySync = isTypeSync.bind(
        null,
        "statSync",
        "isDirectory",
      );
      exports.isSymlinkSync = isTypeSync.bind(
        null,
        "lstatSync",
        "isSymbolicLink",
      );
    },
  });

  // node_modules/.pnpm/dir-glob@3.0.1/node_modules/dir-glob/index.js
  var require_dir_glob = __commonJS({
    "node_modules/.pnpm/dir-glob@3.0.1/node_modules/dir-glob/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var pathType = require_path_type();
      var getExtensions = /* @__PURE__ */ __name(
        (extensions) =>
          extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0],
        "getExtensions",
      );
      var getPath = /* @__PURE__ */ __name((filepath, cwd) => {
        const pth = filepath[0] === "!" ? filepath.slice(1) : filepath;
        return path4.isAbsolute(pth) ? pth : path4.join(cwd, pth);
      }, "getPath");
      var addExtensions = /* @__PURE__ */ __name((file, extensions) => {
        if (path4.extname(file)) {
          return `**/${file}`;
        }
        return `**/${file}.${getExtensions(extensions)}`;
      }, "addExtensions");
      var getGlob = /* @__PURE__ */ __name((directory, options) => {
        if (options.files && !Array.isArray(options.files)) {
          throw new TypeError(
            `Expected \`files\` to be of type \`Array\` but received type \`${typeof options.files}\``,
          );
        }
        if (options.extensions && !Array.isArray(options.extensions)) {
          throw new TypeError(
            `Expected \`extensions\` to be of type \`Array\` but received type \`${typeof options.extensions}\``,
          );
        }
        if (options.files && options.extensions) {
          return options.files.map((x) =>
            path4.posix.join(directory, addExtensions(x, options.extensions)),
          );
        }
        if (options.files) {
          return options.files.map((x) =>
            path4.posix.join(directory, `**/${x}`),
          );
        }
        if (options.extensions) {
          return [
            path4.posix.join(
              directory,
              `**/*.${getExtensions(options.extensions)}`,
            ),
          ];
        }
        return [path4.posix.join(directory, "**")];
      }, "getGlob");
      module.exports = async (input, options) => {
        options = {
          cwd: process.cwd(),
          ...options,
        };
        if (typeof options.cwd !== "string") {
          throw new TypeError(
            `Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``,
          );
        }
        const globs = await Promise.all(
          [].concat(input).map(async (x) => {
            const isDirectory = await pathType.isDirectory(
              getPath(x, options.cwd),
            );
            return isDirectory ? getGlob(x, options) : x;
          }),
        );
        return [].concat.apply([], globs);
      };
      module.exports.sync = (input, options) => {
        options = {
          cwd: process.cwd(),
          ...options,
        };
        if (typeof options.cwd !== "string") {
          throw new TypeError(
            `Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``,
          );
        }
        const globs = []
          .concat(input)
          .map((x) =>
            pathType.isDirectorySync(getPath(x, options.cwd))
              ? getGlob(x, options)
              : x,
          );
        return [].concat.apply([], globs);
      };
    },
  });

  // node_modules/.pnpm/ignore@5.3.2/node_modules/ignore/index.js
  var require_ignore = __commonJS({
    "node_modules/.pnpm/ignore@5.3.2/node_modules/ignore/index.js"(
      exports,
      module,
    ) {
      function makeArray(subject) {
        return Array.isArray(subject) ? subject : [subject];
      }
      __name(makeArray, "makeArray");
      var EMPTY = "";
      var SPACE = " ";
      var ESCAPE = "\\";
      var REGEX_TEST_BLANK_LINE = /^\s+$/;
      var REGEX_INVALID_TRAILING_BACKSLASH = /(?:[^\\]|^)\\$/;
      var REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
      var REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
      var REGEX_SPLITALL_CRLF = /\r?\n/g;
      var REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
      var SLASH = "/";
      var TMP_KEY_IGNORE = "node-ignore";
      if (typeof Symbol !== "undefined") {
        TMP_KEY_IGNORE = Symbol.for("node-ignore");
      }
      var KEY_IGNORE = TMP_KEY_IGNORE;
      var define2 = /* @__PURE__ */ __name(
        (object, key, value) => Object.defineProperty(object, key, { value }),
        "define",
      );
      var REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
      var RETURN_FALSE = /* @__PURE__ */ __name(() => false, "RETURN_FALSE");
      var sanitizeRange = /* @__PURE__ */ __name(
        (range) =>
          range.replace(REGEX_REGEXP_RANGE, (match, from, to) =>
            from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY,
          ),
        "sanitizeRange",
      );
      var cleanRangeBackSlash = /* @__PURE__ */ __name((slashes) => {
        const { length } = slashes;
        return slashes.slice(0, length - (length % 2));
      }, "cleanRangeBackSlash");
      var REPLACERS = [
        [
          // remove BOM
          // TODO:
          // Other similar zero-width characters?
          /^\uFEFF/,
          () => EMPTY,
        ],
        // > Trailing spaces are ignored unless they are quoted with backslash ("\")
        [
          // (a\ ) -> (a )
          // (a  ) -> (a)
          // (a ) -> (a)
          // (a \ ) -> (a  )
          /((?:\\\\)*?)(\\?\s+)$/,
          (_, m1, m2) => m1 + (m2.indexOf("\\") === 0 ? SPACE : EMPTY),
        ],
        // replace (\ ) with ' '
        // (\ ) -> ' '
        // (\\ ) -> '\\ '
        // (\\\ ) -> '\\ '
        [
          /(\\+?)\s/g,
          (_, m1) => {
            const { length } = m1;
            return m1.slice(0, length - (length % 2)) + SPACE;
          },
        ],
        // Escape metacharacters
        // which is written down by users but means special for regular expressions.
        // > There are 12 characters with special meanings:
        // > - the backslash \,
        // > - the caret ^,
        // > - the dollar sign $,
        // > - the period or dot .,
        // > - the vertical bar or pipe symbol |,
        // > - the question mark ?,
        // > - the asterisk or star *,
        // > - the plus sign +,
        // > - the opening parenthesis (,
        // > - the closing parenthesis ),
        // > - and the opening square bracket [,
        // > - the opening curly brace {,
        // > These special characters are often called "metacharacters".
        [/[\\$.|*+(){^]/g, (match) => `\\${match}`],
        [
          // > a question mark (?) matches a single character
          /(?!\\)\?/g,
          () => "[^/]",
        ],
        // leading slash
        [
          // > A leading slash matches the beginning of the pathname.
          // > For example, "/*.c" matches "cat-file.c" but not "mozilla-sha1/sha1.c".
          // A leading slash matches the beginning of the pathname
          /^\//,
          () => "^",
        ],
        // replace special metacharacter slash after the leading slash
        [/\//g, () => "\\/"],
        [
          // > A leading "**" followed by a slash means match in all directories.
          // > For example, "**/foo" matches file or directory "foo" anywhere,
          // > the same as pattern "foo".
          // > "**/foo/bar" matches file or directory "bar" anywhere that is directly
          // >   under directory "foo".
          // Notice that the '*'s have been replaced as '\\*'
          /^\^*\\\*\\\*\\\//,
          // '**/foo' <-> 'foo'
          () => "^(?:.*\\/)?",
        ],
        // starting
        [
          // there will be no leading '/'
          //   (which has been replaced by section "leading slash")
          // If starts with '**', adding a '^' to the regular expression also works
          /^(?=[^^])/,
          /* @__PURE__ */ __name(function startingReplacer() {
            return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
          }, "startingReplacer"),
        ],
        // two globstars
        [
          // Use lookahead assertions so that we could match more than one `'/**'`
          /\\\/\\\*\\\*(?=\\\/|$)/g,
          // Zero, one or several directories
          // should not use '*', or it will be replaced by the next replacer
          // Check if it is not the last `'/**'`
          (_, index2, str) =>
            index2 + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+",
        ],
        // normal intermediate wildcards
        [
          // Never replace escaped '*'
          // ignore rule '\*' will match the path '*'
          // 'abc.*/' -> go
          // 'abc.*'  -> skip this rule,
          //    coz trailing single wildcard will be handed by [trailing wildcard]
          /(^|[^\\]+)(\\\*)+(?=.+)/g,
          // '*.js' matches '.js'
          // '*.js' doesn't match 'abc'
          (_, p1, p2) => {
            const unescaped = p2.replace(/\\\*/g, "[^\\/]*");
            return p1 + unescaped;
          },
        ],
        [
          // unescape, revert step 3 except for back slash
          // For example, if a user escape a '\\*',
          // after step 3, the result will be '\\\\\\*'
          /\\\\\\(?=[$.|*+(){^])/g,
          () => ESCAPE,
        ],
        [
          // '\\\\' -> '\\'
          /\\\\/g,
          () => ESCAPE,
        ],
        [
          // > The range notation, e.g. [a-zA-Z],
          // > can be used to match one of the characters in a range.
          // `\` is escaped by step 3
          /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
          (match, leadEscape, range, endEscape, close) =>
            leadEscape === ESCAPE
              ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close}`
              : close === "]"
                ? endEscape.length % 2 === 0
                  ? `[${sanitizeRange(range)}${endEscape}]`
                  : "[]"
                : "[]",
        ],
        // ending
        [
          // 'js' will not match 'js.'
          // 'ab' will not match 'abc'
          /(?:[^*])$/,
          // WTF!
          // https://git-scm.com/docs/gitignore
          // changes in [2.22.1](https://git-scm.com/docs/gitignore/2.22.1)
          // which re-fixes #24, #38
          // > If there is a separator at the end of the pattern then the pattern
          // > will only match directories, otherwise the pattern can match both
          // > files and directories.
          // 'js*' will not match 'a.js'
          // 'js/' will not match 'a.js'
          // 'js' will match 'a.js' and 'a.js/'
          (match) => (/\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`),
        ],
        // trailing wildcard
        [
          /(\^|\\\/)?\\\*$/,
          (_, p1) => {
            const prefix2 = p1 ? `${p1}[^/]+` : "[^/]*";
            return `${prefix2}(?=$|\\/$)`;
          },
        ],
      ];
      var regexCache = /* @__PURE__ */ Object.create(null);
      var makeRegex = /* @__PURE__ */ __name((pattern, ignoreCase) => {
        let source = regexCache[pattern];
        if (!source) {
          source = REPLACERS.reduce(
            (prev, [matcher, replacer]) =>
              prev.replace(matcher, replacer.bind(pattern)),
            pattern,
          );
          regexCache[pattern] = source;
        }
        return ignoreCase ? new RegExp(source, "i") : new RegExp(source);
      }, "makeRegex");
      var isString = /* @__PURE__ */ __name(
        (subject) => typeof subject === "string",
        "isString",
      );
      var checkPattern = /* @__PURE__ */ __name(
        (pattern) =>
          pattern &&
          isString(pattern) &&
          !REGEX_TEST_BLANK_LINE.test(pattern) &&
          !REGEX_INVALID_TRAILING_BACKSLASH.test(pattern) &&
          pattern.indexOf("#") !== 0,
        "checkPattern",
      );
      var splitPattern = /* @__PURE__ */ __name(
        (pattern) => pattern.split(REGEX_SPLITALL_CRLF),
        "splitPattern",
      );
      var IgnoreRule = class {
        static {
          __name(this, "IgnoreRule");
        }
        constructor(origin, pattern, negative, regex2) {
          this.origin = origin;
          this.pattern = pattern;
          this.negative = negative;
          this.regex = regex2;
        }
      };
      var createRule = /* @__PURE__ */ __name((pattern, ignoreCase) => {
        const origin = pattern;
        let negative = false;
        if (pattern.indexOf("!") === 0) {
          negative = true;
          pattern = pattern.substr(1);
        }
        pattern = pattern
          .replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!")
          .replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
        const regex2 = makeRegex(pattern, ignoreCase);
        return new IgnoreRule(origin, pattern, negative, regex2);
      }, "createRule");
      var throwError = /* @__PURE__ */ __name((message, Ctor) => {
        throw new Ctor(message);
      }, "throwError");
      var checkPath = /* @__PURE__ */ __name((path4, originalPath, doThrow) => {
        if (!isString(path4)) {
          return doThrow(
            `path must be a string, but got \`${originalPath}\``,
            TypeError,
          );
        }
        if (!path4) {
          return doThrow(`path must not be empty`, TypeError);
        }
        if (checkPath.isNotRelative(path4)) {
          const r = "`path.relative()`d";
          return doThrow(
            `path should be a ${r} string, but got "${originalPath}"`,
            RangeError,
          );
        }
        return true;
      }, "checkPath");
      var isNotRelative = /* @__PURE__ */ __name(
        (path4) => REGEX_TEST_INVALID_PATH.test(path4),
        "isNotRelative",
      );
      checkPath.isNotRelative = isNotRelative;
      checkPath.convert = (p) => p;
      var Ignore = class {
        static {
          __name(this, "Ignore");
        }
        constructor({
          ignorecase = true,
          ignoreCase = ignorecase,
          allowRelativePaths = false,
        } = {}) {
          define2(this, KEY_IGNORE, true);
          this._rules = [];
          this._ignoreCase = ignoreCase;
          this._allowRelativePaths = allowRelativePaths;
          this._initCache();
        }
        _initCache() {
          this._ignoreCache = /* @__PURE__ */ Object.create(null);
          this._testCache = /* @__PURE__ */ Object.create(null);
        }
        _addPattern(pattern) {
          if (pattern && pattern[KEY_IGNORE]) {
            this._rules = this._rules.concat(pattern._rules);
            this._added = true;
            return;
          }
          if (checkPattern(pattern)) {
            const rule = createRule(pattern, this._ignoreCase);
            this._added = true;
            this._rules.push(rule);
          }
        }
        // @param {Array<string> | string | Ignore} pattern
        add(pattern) {
          this._added = false;
          makeArray(
            isString(pattern) ? splitPattern(pattern) : pattern,
          ).forEach(this._addPattern, this);
          if (this._added) {
            this._initCache();
          }
          return this;
        }
        // legacy
        addPattern(pattern) {
          return this.add(pattern);
        }
        //          |           ignored : unignored
        // negative |   0:0   |   0:1   |   1:0   |   1:1
        // -------- | ------- | ------- | ------- | --------
        //     0    |  TEST   |  TEST   |  SKIP   |    X
        //     1    |  TESTIF |  SKIP   |  TEST   |    X
        // - SKIP: always skip
        // - TEST: always test
        // - TESTIF: only test if checkUnignored
        // - X: that never happen
        // @param {boolean} whether should check if the path is unignored,
        //   setting `checkUnignored` to `false` could reduce additional
        //   path matching.
        // @returns {TestResult} true if a file is ignored
        _testOne(path4, checkUnignored) {
          let ignored = false;
          let unignored = false;
          this._rules.forEach((rule) => {
            const { negative } = rule;
            if (
              (unignored === negative && ignored !== unignored) ||
              (negative && !ignored && !unignored && !checkUnignored)
            ) {
              return;
            }
            const matched = rule.regex.test(path4);
            if (matched) {
              ignored = !negative;
              unignored = negative;
            }
          });
          return {
            ignored,
            unignored,
          };
        }
        // @returns {TestResult}
        _test(originalPath, cache, checkUnignored, slices) {
          const path4 = originalPath && checkPath.convert(originalPath);
          checkPath(
            path4,
            originalPath,
            this._allowRelativePaths ? RETURN_FALSE : throwError,
          );
          return this._t(path4, cache, checkUnignored, slices);
        }
        _t(path4, cache, checkUnignored, slices) {
          if (path4 in cache) {
            return cache[path4];
          }
          if (!slices) {
            slices = path4.split(SLASH);
          }
          slices.pop();
          if (!slices.length) {
            return (cache[path4] = this._testOne(path4, checkUnignored));
          }
          const parent = this._t(
            slices.join(SLASH) + SLASH,
            cache,
            checkUnignored,
            slices,
          );
          return (cache[path4] = parent.ignored
            ? parent
            : this._testOne(path4, checkUnignored));
        }
        ignores(path4) {
          return this._test(path4, this._ignoreCache, false).ignored;
        }
        createFilter() {
          return (path4) => !this.ignores(path4);
        }
        filter(paths) {
          return makeArray(paths).filter(this.createFilter());
        }
        // @returns {TestResult}
        test(path4) {
          return this._test(path4, this._testCache, true);
        }
      };
      var factory = /* @__PURE__ */ __name(
        (options) => new Ignore(options),
        "factory",
      );
      var isPathValid = /* @__PURE__ */ __name(
        (path4) =>
          checkPath(path4 && checkPath.convert(path4), path4, RETURN_FALSE),
        "isPathValid",
      );
      factory.isPathValid = isPathValid;
      factory.default = factory;
      module.exports = factory;
      if (
        // Detect `process` so that it can run in browsers.
        typeof process !== "undefined" &&
        ((process.env && process.env.IGNORE_TEST_WIN32) ||
          process.platform === "win32")
      ) {
        const makePosix = /* @__PURE__ */ __name(
          (str) =>
            /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str)
              ? str
              : str.replace(/\\/g, "/"),
          "makePosix",
        );
        checkPath.convert = makePosix;
        const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
        checkPath.isNotRelative = (path4) =>
          REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path4) || isNotRelative(path4);
      }
    },
  });

  // node_modules/.pnpm/slash@3.0.0/node_modules/slash/index.js
  var require_slash = __commonJS({
    "node_modules/.pnpm/slash@3.0.0/node_modules/slash/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = (path4) => {
        const isExtendedLengthPath = /^\\\\\?\\/.test(path4);
        const hasNonAscii = /[^\u0000-\u0080]+/.test(path4);
        if (isExtendedLengthPath || hasNonAscii) {
          return path4;
        }
        return path4.replace(/\\/g, "/");
      };
    },
  });

  // node_modules/.pnpm/globby@11.1.0/node_modules/globby/gitignore.js
  var require_gitignore = __commonJS({
    "node_modules/.pnpm/globby@11.1.0/node_modules/globby/gitignore.js"(
      exports,
      module,
    ) {
      "use strict";
      var { promisify } = __require("util");
      var fs6 = __require("fs");
      var path4 = __require("path");
      var fastGlob = require_out4();
      var gitIgnore = require_ignore();
      var slash = require_slash();
      var DEFAULT_IGNORE = [
        "**/node_modules/**",
        "**/flow-typed/**",
        "**/coverage/**",
        "**/.git",
      ];
      var readFileP = promisify(fs6.readFile);
      var mapGitIgnorePatternTo = /* @__PURE__ */ __name(
        (base) => (ignore) => {
          if (ignore.startsWith("!")) {
            return "!" + path4.posix.join(base, ignore.slice(1));
          }
          return path4.posix.join(base, ignore);
        },
        "mapGitIgnorePatternTo",
      );
      var parseGitIgnore = /* @__PURE__ */ __name((content3, options) => {
        const base = slash(
          path4.relative(options.cwd, path4.dirname(options.fileName)),
        );
        return content3
          .split(/\r?\n/)
          .filter(Boolean)
          .filter((line) => !line.startsWith("#"))
          .map(mapGitIgnorePatternTo(base));
      }, "parseGitIgnore");
      var reduceIgnore = /* @__PURE__ */ __name((files) => {
        const ignores = gitIgnore();
        for (const file of files) {
          ignores.add(
            parseGitIgnore(file.content, {
              cwd: file.cwd,
              fileName: file.filePath,
            }),
          );
        }
        return ignores;
      }, "reduceIgnore");
      var ensureAbsolutePathForCwd = /* @__PURE__ */ __name((cwd, p) => {
        cwd = slash(cwd);
        if (path4.isAbsolute(p)) {
          if (slash(p).startsWith(cwd)) {
            return p;
          }
          throw new Error(`Path ${p} is not in cwd ${cwd}`);
        }
        return path4.join(cwd, p);
      }, "ensureAbsolutePathForCwd");
      var getIsIgnoredPredecate = /* @__PURE__ */ __name((ignores, cwd) => {
        return (p) =>
          ignores.ignores(
            slash(
              path4.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p)),
            ),
          );
      }, "getIsIgnoredPredecate");
      var getFile = /* @__PURE__ */ __name(async (file, cwd) => {
        const filePath = path4.join(cwd, file);
        const content3 = await readFileP(filePath, "utf8");
        return {
          cwd,
          filePath,
          content: content3,
        };
      }, "getFile");
      var getFileSync = /* @__PURE__ */ __name((file, cwd) => {
        const filePath = path4.join(cwd, file);
        const content3 = fs6.readFileSync(filePath, "utf8");
        return {
          cwd,
          filePath,
          content: content3,
        };
      }, "getFileSync");
      var normalizeOptions = /* @__PURE__ */ __name(
        ({ ignore = [], cwd = slash(process.cwd()) } = {}) => {
          return { ignore, cwd };
        },
        "normalizeOptions",
      );
      module.exports = async (options) => {
        options = normalizeOptions(options);
        const paths = await fastGlob("**/.gitignore", {
          ignore: DEFAULT_IGNORE.concat(options.ignore),
          cwd: options.cwd,
        });
        const files = await Promise.all(
          paths.map((file) => getFile(file, options.cwd)),
        );
        const ignores = reduceIgnore(files);
        return getIsIgnoredPredecate(ignores, options.cwd);
      };
      module.exports.sync = (options) => {
        options = normalizeOptions(options);
        const paths = fastGlob.sync("**/.gitignore", {
          ignore: DEFAULT_IGNORE.concat(options.ignore),
          cwd: options.cwd,
        });
        const files = paths.map((file) => getFileSync(file, options.cwd));
        const ignores = reduceIgnore(files);
        return getIsIgnoredPredecate(ignores, options.cwd);
      };
    },
  });

  // node_modules/.pnpm/globby@11.1.0/node_modules/globby/stream-utils.js
  var require_stream_utils = __commonJS({
    "node_modules/.pnpm/globby@11.1.0/node_modules/globby/stream-utils.js"(
      exports,
      module,
    ) {
      "use strict";
      var { Transform } = __require("stream");
      var ObjectTransform = class extends Transform {
        static {
          __name(this, "ObjectTransform");
        }
        constructor() {
          super({
            objectMode: true,
          });
        }
      };
      var FilterStream = class extends ObjectTransform {
        static {
          __name(this, "FilterStream");
        }
        constructor(filter) {
          super();
          this._filter = filter;
        }
        _transform(data, encoding, callback) {
          if (this._filter(data)) {
            this.push(data);
          }
          callback();
        }
      };
      var UniqueStream = class extends ObjectTransform {
        static {
          __name(this, "UniqueStream");
        }
        constructor() {
          super();
          this._pushed = /* @__PURE__ */ new Set();
        }
        _transform(data, encoding, callback) {
          if (!this._pushed.has(data)) {
            this.push(data);
            this._pushed.add(data);
          }
          callback();
        }
      };
      module.exports = {
        FilterStream,
        UniqueStream,
      };
    },
  });

  // node_modules/.pnpm/globby@11.1.0/node_modules/globby/index.js
  var require_globby = __commonJS({
    "node_modules/.pnpm/globby@11.1.0/node_modules/globby/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = __require("fs");
      var arrayUnion = require_array_union();
      var merge2 = require_merge2();
      var fastGlob = require_out4();
      var dirGlob = require_dir_glob();
      var gitignore = require_gitignore();
      var { FilterStream, UniqueStream } = require_stream_utils();
      var DEFAULT_FILTER = /* @__PURE__ */ __name(
        () => false,
        "DEFAULT_FILTER",
      );
      var isNegative = /* @__PURE__ */ __name(
        (pattern) => pattern[0] === "!",
        "isNegative",
      );
      var assertPatternsInput = /* @__PURE__ */ __name((patterns) => {
        if (!patterns.every((pattern) => typeof pattern === "string")) {
          throw new TypeError(
            "Patterns must be a string or an array of strings",
          );
        }
      }, "assertPatternsInput");
      var checkCwdOption = /* @__PURE__ */ __name((options = {}) => {
        if (!options.cwd) {
          return;
        }
        let stat;
        try {
          stat = fs6.statSync(options.cwd);
        } catch {
          return;
        }
        if (!stat.isDirectory()) {
          throw new Error("The `cwd` option must be a path to a directory");
        }
      }, "checkCwdOption");
      var getPathString = /* @__PURE__ */ __name(
        (p) => (p.stats instanceof fs6.Stats ? p.path : p),
        "getPathString",
      );
      var generateGlobTasks = /* @__PURE__ */ __name(
        (patterns, taskOptions) => {
          patterns = arrayUnion([].concat(patterns));
          assertPatternsInput(patterns);
          checkCwdOption(taskOptions);
          const globTasks = [];
          taskOptions = {
            ignore: [],
            expandDirectories: true,
            ...taskOptions,
          };
          for (const [index2, pattern] of patterns.entries()) {
            if (isNegative(pattern)) {
              continue;
            }
            const ignore = patterns
              .slice(index2)
              .filter((pattern2) => isNegative(pattern2))
              .map((pattern2) => pattern2.slice(1));
            const options = {
              ...taskOptions,
              ignore: taskOptions.ignore.concat(ignore),
            };
            globTasks.push({ pattern, options });
          }
          return globTasks;
        },
        "generateGlobTasks",
      );
      var globDirs = /* @__PURE__ */ __name((task, fn) => {
        let options = {};
        if (task.options.cwd) {
          options.cwd = task.options.cwd;
        }
        if (Array.isArray(task.options.expandDirectories)) {
          options = {
            ...options,
            files: task.options.expandDirectories,
          };
        } else if (typeof task.options.expandDirectories === "object") {
          options = {
            ...options,
            ...task.options.expandDirectories,
          };
        }
        return fn(task.pattern, options);
      }, "globDirs");
      var getPattern = /* @__PURE__ */ __name(
        (task, fn) =>
          task.options.expandDirectories ? globDirs(task, fn) : [task.pattern],
        "getPattern",
      );
      var getFilterSync = /* @__PURE__ */ __name((options) => {
        return options && options.gitignore
          ? gitignore.sync({ cwd: options.cwd, ignore: options.ignore })
          : DEFAULT_FILTER;
      }, "getFilterSync");
      var globToTask = /* @__PURE__ */ __name(
        (task) => (glob) => {
          const { options } = task;
          if (
            options.ignore &&
            Array.isArray(options.ignore) &&
            options.expandDirectories
          ) {
            options.ignore = dirGlob.sync(options.ignore);
          }
          return {
            pattern: glob,
            options,
          };
        },
        "globToTask",
      );
      module.exports = async (patterns, options) => {
        const globTasks = generateGlobTasks(patterns, options);
        const getFilter = /* @__PURE__ */ __name(async () => {
          return options && options.gitignore
            ? gitignore({ cwd: options.cwd, ignore: options.ignore })
            : DEFAULT_FILTER;
        }, "getFilter");
        const getTasks = /* @__PURE__ */ __name(async () => {
          const tasks2 = await Promise.all(
            globTasks.map(async (task) => {
              const globs = await getPattern(task, dirGlob);
              return Promise.all(globs.map(globToTask(task)));
            }),
          );
          return arrayUnion(...tasks2);
        }, "getTasks");
        const [filter, tasks] = await Promise.all([getFilter(), getTasks()]);
        const paths = await Promise.all(
          tasks.map((task) => fastGlob(task.pattern, task.options)),
        );
        return arrayUnion(...paths).filter(
          (path_) => !filter(getPathString(path_)),
        );
      };
      module.exports.sync = (patterns, options) => {
        const globTasks = generateGlobTasks(patterns, options);
        const tasks = [];
        for (const task of globTasks) {
          const newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
          tasks.push(...newTask);
        }
        const filter = getFilterSync(options);
        let matches = [];
        for (const task of tasks) {
          matches = arrayUnion(
            matches,
            fastGlob.sync(task.pattern, task.options),
          );
        }
        return matches.filter((path_) => !filter(path_));
      };
      module.exports.stream = (patterns, options) => {
        const globTasks = generateGlobTasks(patterns, options);
        const tasks = [];
        for (const task of globTasks) {
          const newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
          tasks.push(...newTask);
        }
        const filter = getFilterSync(options);
        const filterStream = new FilterStream((p) => !filter(p));
        const uniqueStream = new UniqueStream();
        return merge2(
          tasks.map((task) => fastGlob.stream(task.pattern, task.options)),
        )
          .pipe(filterStream)
          .pipe(uniqueStream);
      };
      module.exports.generateGlobTasks = generateGlobTasks;
      module.exports.hasMagic = (patterns, options) =>
        []
          .concat(patterns)
          .some((pattern) => fastGlob.isDynamicPattern(pattern, options));
      module.exports.gitignore = gitignore;
    },
  });

  // node_modules/.pnpm/pify@4.0.1/node_modules/pify/index.js
  var require_pify = __commonJS({
    "node_modules/.pnpm/pify@4.0.1/node_modules/pify/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var processFn = /* @__PURE__ */ __name(
        (fn, options) =>
          function (...args) {
            const P = options.promiseModule;
            return new P((resolve, reject) => {
              if (options.multiArgs) {
                args.push((...result) => {
                  if (options.errorFirst) {
                    if (result[0]) {
                      reject(result);
                    } else {
                      result.shift();
                      resolve(result);
                    }
                  } else {
                    resolve(result);
                  }
                });
              } else if (options.errorFirst) {
                args.push((error, result) => {
                  if (error) {
                    reject(error);
                  } else {
                    resolve(result);
                  }
                });
              } else {
                args.push(resolve);
              }
              fn.apply(this, args);
            });
          },
        "processFn",
      );
      module.exports = (input, options) => {
        options = Object.assign(
          {
            exclude: [/.+(Sync|Stream)$/],
            errorFirst: true,
            promiseModule: Promise,
          },
          options,
        );
        const objType = typeof input;
        if (
          !(input !== null && (objType === "object" || objType === "function"))
        ) {
          throw new TypeError(
            `Expected \`input\` to be a \`Function\` or \`Object\`, got \`${input === null ? "null" : objType}\``,
          );
        }
        const filter = /* @__PURE__ */ __name((key) => {
          const match = /* @__PURE__ */ __name(
            (pattern) =>
              typeof pattern === "string" ? key === pattern : pattern.test(key),
            "match",
          );
          return options.include
            ? options.include.some(match)
            : !options.exclude.some(match);
        }, "filter");
        let ret;
        if (objType === "function") {
          ret = /* @__PURE__ */ __name(function (...args) {
            return options.excludeMain
              ? input(...args)
              : processFn(input, options).apply(this, args);
          }, "ret");
        } else {
          ret = Object.create(Object.getPrototypeOf(input));
        }
        for (const key in input) {
          const property = input[key];
          ret[key] =
            typeof property === "function" && filter(key)
              ? processFn(property, options)
              : property;
        }
        return ret;
      };
    },
  });

  // node_modules/.pnpm/strip-bom@3.0.0/node_modules/strip-bom/index.js
  var require_strip_bom = __commonJS({
    "node_modules/.pnpm/strip-bom@3.0.0/node_modules/strip-bom/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = (x) => {
        if (typeof x !== "string") {
          throw new TypeError("Expected a string, got " + typeof x);
        }
        if (x.charCodeAt(0) === 65279) {
          return x.slice(1);
        }
        return x;
      };
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/common.js
  var require_common4 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/common.js"(
      exports,
      module,
    ) {
      "use strict";
      function isNothing(subject) {
        return typeof subject === "undefined" || subject === null;
      }
      __name(isNothing, "isNothing");
      function isObject(subject) {
        return typeof subject === "object" && subject !== null;
      }
      __name(isObject, "isObject");
      function toArray(sequence) {
        if (Array.isArray(sequence)) return sequence;
        else if (isNothing(sequence)) return [];
        return [sequence];
      }
      __name(toArray, "toArray");
      function extend2(target, source) {
        var index2, length, key, sourceKeys;
        if (source) {
          sourceKeys = Object.keys(source);
          for (
            index2 = 0, length = sourceKeys.length;
            index2 < length;
            index2 += 1
          ) {
            key = sourceKeys[index2];
            target[key] = source[key];
          }
        }
        return target;
      }
      __name(extend2, "extend");
      function repeat(string3, count) {
        var result = "",
          cycle;
        for (cycle = 0; cycle < count; cycle += 1) {
          result += string3;
        }
        return result;
      }
      __name(repeat, "repeat");
      function isNegativeZero(number) {
        return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;
      }
      __name(isNegativeZero, "isNegativeZero");
      module.exports.isNothing = isNothing;
      module.exports.isObject = isObject;
      module.exports.toArray = toArray;
      module.exports.repeat = repeat;
      module.exports.isNegativeZero = isNegativeZero;
      module.exports.extend = extend2;
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/exception.js
  var require_exception2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/exception.js"(
      exports,
      module,
    ) {
      "use strict";
      function YAMLException(reason, mark) {
        Error.call(this);
        this.name = "YAMLException";
        this.reason = reason;
        this.mark = mark;
        this.message =
          (this.reason || "(unknown reason)") +
          (this.mark ? " " + this.mark.toString() : "");
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        } else {
          this.stack = new Error().stack || "";
        }
      }
      __name(YAMLException, "YAMLException");
      YAMLException.prototype = Object.create(Error.prototype);
      YAMLException.prototype.constructor = YAMLException;
      YAMLException.prototype.toString = /* @__PURE__ */ __name(
        function toString2(compact) {
          var result = this.name + ": ";
          result += this.reason || "(unknown reason)";
          if (!compact && this.mark) {
            result += " " + this.mark.toString();
          }
          return result;
        },
        "toString",
      );
      module.exports = YAMLException;
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/mark.js
  var require_mark = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/mark.js"(
      exports,
      module,
    ) {
      "use strict";
      var common = require_common4();
      function Mark(name, buffer, position2, line, column) {
        this.name = name;
        this.buffer = buffer;
        this.position = position2;
        this.line = line;
        this.column = column;
      }
      __name(Mark, "Mark");
      Mark.prototype.getSnippet = /* @__PURE__ */ __name(function getSnippet(
        indent,
        maxLength,
      ) {
        var head, start, tail, end, snippet;
        if (!this.buffer) return null;
        indent = indent || 4;
        maxLength = maxLength || 75;
        head = "";
        start = this.position;
        while (
          start > 0 &&
          "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(start - 1)) === -1
        ) {
          start -= 1;
          if (this.position - start > maxLength / 2 - 1) {
            head = " ... ";
            start += 5;
            break;
          }
        }
        tail = "";
        end = this.position;
        while (
          end < this.buffer.length &&
          "\0\r\n\x85\u2028\u2029".indexOf(this.buffer.charAt(end)) === -1
        ) {
          end += 1;
          if (end - this.position > maxLength / 2 - 1) {
            tail = " ... ";
            end -= 5;
            break;
          }
        }
        snippet = this.buffer.slice(start, end);
        return (
          common.repeat(" ", indent) +
          head +
          snippet +
          tail +
          "\n" +
          common.repeat(" ", indent + this.position - start + head.length) +
          "^"
        );
      }, "getSnippet");
      Mark.prototype.toString = /* @__PURE__ */ __name(function toString2(
        compact,
      ) {
        var snippet,
          where = "";
        if (this.name) {
          where += 'in "' + this.name + '" ';
        }
        where += "at line " + (this.line + 1) + ", column " + (this.column + 1);
        if (!compact) {
          snippet = this.getSnippet();
          if (snippet) {
            where += ":\n" + snippet;
          }
        }
        return where;
      }, "toString");
      module.exports = Mark;
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type.js
  var require_type2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type.js"(
      exports,
      module,
    ) {
      "use strict";
      var YAMLException = require_exception2();
      var TYPE_CONSTRUCTOR_OPTIONS = [
        "kind",
        "resolve",
        "construct",
        "instanceOf",
        "predicate",
        "represent",
        "defaultStyle",
        "styleAliases",
      ];
      var YAML_NODE_KINDS = ["scalar", "sequence", "mapping"];
      function compileStyleAliases(map4) {
        var result = {};
        if (map4 !== null) {
          Object.keys(map4).forEach(function (style) {
            map4[style].forEach(function (alias) {
              result[String(alias)] = style;
            });
          });
        }
        return result;
      }
      __name(compileStyleAliases, "compileStyleAliases");
      function Type(tag, options) {
        options = options || {};
        Object.keys(options).forEach(function (name) {
          if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {
            throw new YAMLException(
              'Unknown option "' +
                name +
                '" is met in definition of "' +
                tag +
                '" YAML type.',
            );
          }
        });
        this.tag = tag;
        this.kind = options["kind"] || null;
        this.resolve =
          options["resolve"] ||
          function () {
            return true;
          };
        this.construct =
          options["construct"] ||
          function (data) {
            return data;
          };
        this.instanceOf = options["instanceOf"] || null;
        this.predicate = options["predicate"] || null;
        this.represent = options["represent"] || null;
        this.defaultStyle = options["defaultStyle"] || null;
        this.styleAliases = compileStyleAliases(
          options["styleAliases"] || null,
        );
        if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {
          throw new YAMLException(
            'Unknown kind "' +
              this.kind +
              '" is specified for "' +
              tag +
              '" YAML type.',
          );
        }
      }
      __name(Type, "Type");
      module.exports = Type;
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema.js
  var require_schema2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema.js"(
      exports,
      module,
    ) {
      "use strict";
      var common = require_common4();
      var YAMLException = require_exception2();
      var Type = require_type2();
      function compileList(schema, name, result) {
        var exclude = [];
        schema.include.forEach(function (includedSchema) {
          result = compileList(includedSchema, name, result);
        });
        schema[name].forEach(function (currentType) {
          result.forEach(function (previousType, previousIndex) {
            if (
              previousType.tag === currentType.tag &&
              previousType.kind === currentType.kind
            ) {
              exclude.push(previousIndex);
            }
          });
          result.push(currentType);
        });
        return result.filter(function (type, index2) {
          return exclude.indexOf(index2) === -1;
        });
      }
      __name(compileList, "compileList");
      function compileMap() {
        var result = {
            scalar: {},
            sequence: {},
            mapping: {},
            fallback: {},
          },
          index2,
          length;
        function collectType(type) {
          result[type.kind][type.tag] = result["fallback"][type.tag] = type;
        }
        __name(collectType, "collectType");
        for (
          index2 = 0, length = arguments.length;
          index2 < length;
          index2 += 1
        ) {
          arguments[index2].forEach(collectType);
        }
        return result;
      }
      __name(compileMap, "compileMap");
      function Schema(definition3) {
        this.include = definition3.include || [];
        this.implicit = definition3.implicit || [];
        this.explicit = definition3.explicit || [];
        this.implicit.forEach(function (type) {
          if (type.loadKind && type.loadKind !== "scalar") {
            throw new YAMLException(
              "There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.",
            );
          }
        });
        this.compiledImplicit = compileList(this, "implicit", []);
        this.compiledExplicit = compileList(this, "explicit", []);
        this.compiledTypeMap = compileMap(
          this.compiledImplicit,
          this.compiledExplicit,
        );
      }
      __name(Schema, "Schema");
      Schema.DEFAULT = null;
      Schema.create = /* @__PURE__ */ __name(function createSchema() {
        var schemas, types;
        switch (arguments.length) {
          case 1:
            schemas = Schema.DEFAULT;
            types = arguments[0];
            break;
          case 2:
            schemas = arguments[0];
            types = arguments[1];
            break;
          default:
            throw new YAMLException(
              "Wrong number of arguments for Schema.create function",
            );
        }
        schemas = common.toArray(schemas);
        types = common.toArray(types);
        if (
          !schemas.every(function (schema) {
            return schema instanceof Schema;
          })
        ) {
          throw new YAMLException(
            "Specified list of super schemas (or a single Schema object) contains a non-Schema object.",
          );
        }
        if (
          !types.every(function (type) {
            return type instanceof Type;
          })
        ) {
          throw new YAMLException(
            "Specified list of YAML types (or a single Type object) contains a non-Type object.",
          );
        }
        return new Schema({
          include: schemas,
          explicit: types,
        });
      }, "createSchema");
      module.exports = Schema;
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/str.js
  var require_str2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/str.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      module.exports = new Type("tag:yaml.org,2002:str", {
        kind: "scalar",
        construct: /* @__PURE__ */ __name(function (data) {
          return data !== null ? data : "";
        }, "construct"),
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/seq.js
  var require_seq2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/seq.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      module.exports = new Type("tag:yaml.org,2002:seq", {
        kind: "sequence",
        construct: /* @__PURE__ */ __name(function (data) {
          return data !== null ? data : [];
        }, "construct"),
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/map.js
  var require_map2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/map.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      module.exports = new Type("tag:yaml.org,2002:map", {
        kind: "mapping",
        construct: /* @__PURE__ */ __name(function (data) {
          return data !== null ? data : {};
        }, "construct"),
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js
  var require_failsafe2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js"(
      exports,
      module,
    ) {
      "use strict";
      var Schema = require_schema2();
      module.exports = new Schema({
        explicit: [require_str2(), require_seq2(), require_map2()],
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/null.js
  var require_null2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/null.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      function resolveYamlNull(data) {
        if (data === null) return true;
        var max = data.length;
        return (
          (max === 1 && data === "~") ||
          (max === 4 && (data === "null" || data === "Null" || data === "NULL"))
        );
      }
      __name(resolveYamlNull, "resolveYamlNull");
      function constructYamlNull() {
        return null;
      }
      __name(constructYamlNull, "constructYamlNull");
      function isNull(object) {
        return object === null;
      }
      __name(isNull, "isNull");
      module.exports = new Type("tag:yaml.org,2002:null", {
        kind: "scalar",
        resolve: resolveYamlNull,
        construct: constructYamlNull,
        predicate: isNull,
        represent: {
          canonical: /* @__PURE__ */ __name(function () {
            return "~";
          }, "canonical"),
          lowercase: /* @__PURE__ */ __name(function () {
            return "null";
          }, "lowercase"),
          uppercase: /* @__PURE__ */ __name(function () {
            return "NULL";
          }, "uppercase"),
          camelcase: /* @__PURE__ */ __name(function () {
            return "Null";
          }, "camelcase"),
        },
        defaultStyle: "lowercase",
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/bool.js
  var require_bool2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/bool.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      function resolveYamlBoolean(data) {
        if (data === null) return false;
        var max = data.length;
        return (
          (max === 4 &&
            (data === "true" || data === "True" || data === "TRUE")) ||
          (max === 5 &&
            (data === "false" || data === "False" || data === "FALSE"))
        );
      }
      __name(resolveYamlBoolean, "resolveYamlBoolean");
      function constructYamlBoolean(data) {
        return data === "true" || data === "True" || data === "TRUE";
      }
      __name(constructYamlBoolean, "constructYamlBoolean");
      function isBoolean(object) {
        return Object.prototype.toString.call(object) === "[object Boolean]";
      }
      __name(isBoolean, "isBoolean");
      module.exports = new Type("tag:yaml.org,2002:bool", {
        kind: "scalar",
        resolve: resolveYamlBoolean,
        construct: constructYamlBoolean,
        predicate: isBoolean,
        represent: {
          lowercase: /* @__PURE__ */ __name(function (object) {
            return object ? "true" : "false";
          }, "lowercase"),
          uppercase: /* @__PURE__ */ __name(function (object) {
            return object ? "TRUE" : "FALSE";
          }, "uppercase"),
          camelcase: /* @__PURE__ */ __name(function (object) {
            return object ? "True" : "False";
          }, "camelcase"),
        },
        defaultStyle: "lowercase",
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/int.js
  var require_int2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/int.js"(
      exports,
      module,
    ) {
      "use strict";
      var common = require_common4();
      var Type = require_type2();
      function isHexCode(c) {
        return (
          (48 <= c && c <= 57) || (65 <= c && c <= 70) || (97 <= c && c <= 102)
        );
      }
      __name(isHexCode, "isHexCode");
      function isOctCode(c) {
        return 48 <= c && c <= 55;
      }
      __name(isOctCode, "isOctCode");
      function isDecCode(c) {
        return 48 <= c && c <= 57;
      }
      __name(isDecCode, "isDecCode");
      function resolveYamlInteger(data) {
        if (data === null) return false;
        var max = data.length,
          index2 = 0,
          hasDigits = false,
          ch;
        if (!max) return false;
        ch = data[index2];
        if (ch === "-" || ch === "+") {
          ch = data[++index2];
        }
        if (ch === "0") {
          if (index2 + 1 === max) return true;
          ch = data[++index2];
          if (ch === "b") {
            index2++;
            for (; index2 < max; index2++) {
              ch = data[index2];
              if (ch === "_") continue;
              if (ch !== "0" && ch !== "1") return false;
              hasDigits = true;
            }
            return hasDigits && ch !== "_";
          }
          if (ch === "x") {
            index2++;
            for (; index2 < max; index2++) {
              ch = data[index2];
              if (ch === "_") continue;
              if (!isHexCode(data.charCodeAt(index2))) return false;
              hasDigits = true;
            }
            return hasDigits && ch !== "_";
          }
          for (; index2 < max; index2++) {
            ch = data[index2];
            if (ch === "_") continue;
            if (!isOctCode(data.charCodeAt(index2))) return false;
            hasDigits = true;
          }
          return hasDigits && ch !== "_";
        }
        if (ch === "_") return false;
        for (; index2 < max; index2++) {
          ch = data[index2];
          if (ch === "_") continue;
          if (ch === ":") break;
          if (!isDecCode(data.charCodeAt(index2))) {
            return false;
          }
          hasDigits = true;
        }
        if (!hasDigits || ch === "_") return false;
        if (ch !== ":") return true;
        return /^(:[0-5]?[0-9])+$/.test(data.slice(index2));
      }
      __name(resolveYamlInteger, "resolveYamlInteger");
      function constructYamlInteger(data) {
        var value = data,
          sign = 1,
          ch,
          base,
          digits = [];
        if (value.indexOf("_") !== -1) {
          value = value.replace(/_/g, "");
        }
        ch = value[0];
        if (ch === "-" || ch === "+") {
          if (ch === "-") sign = -1;
          value = value.slice(1);
          ch = value[0];
        }
        if (value === "0") return 0;
        if (ch === "0") {
          if (value[1] === "b") return sign * parseInt(value.slice(2), 2);
          if (value[1] === "x") return sign * parseInt(value, 16);
          return sign * parseInt(value, 8);
        }
        if (value.indexOf(":") !== -1) {
          value.split(":").forEach(function (v) {
            digits.unshift(parseInt(v, 10));
          });
          value = 0;
          base = 1;
          digits.forEach(function (d) {
            value += d * base;
            base *= 60;
          });
          return sign * value;
        }
        return sign * parseInt(value, 10);
      }
      __name(constructYamlInteger, "constructYamlInteger");
      function isInteger(object) {
        return (
          Object.prototype.toString.call(object) === "[object Number]" &&
          object % 1 === 0 &&
          !common.isNegativeZero(object)
        );
      }
      __name(isInteger, "isInteger");
      module.exports = new Type("tag:yaml.org,2002:int", {
        kind: "scalar",
        resolve: resolveYamlInteger,
        construct: constructYamlInteger,
        predicate: isInteger,
        represent: {
          binary: /* @__PURE__ */ __name(function (obj) {
            return obj >= 0
              ? "0b" + obj.toString(2)
              : "-0b" + obj.toString(2).slice(1);
          }, "binary"),
          octal: /* @__PURE__ */ __name(function (obj) {
            return obj >= 0
              ? "0" + obj.toString(8)
              : "-0" + obj.toString(8).slice(1);
          }, "octal"),
          decimal: /* @__PURE__ */ __name(function (obj) {
            return obj.toString(10);
          }, "decimal"),
          /* eslint-disable max-len */
          hexadecimal: /* @__PURE__ */ __name(function (obj) {
            return obj >= 0
              ? "0x" + obj.toString(16).toUpperCase()
              : "-0x" + obj.toString(16).toUpperCase().slice(1);
          }, "hexadecimal"),
        },
        defaultStyle: "decimal",
        styleAliases: {
          binary: [2, "bin"],
          octal: [8, "oct"],
          decimal: [10, "dec"],
          hexadecimal: [16, "hex"],
        },
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/float.js
  var require_float2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/float.js"(
      exports,
      module,
    ) {
      "use strict";
      var common = require_common4();
      var Type = require_type2();
      var YAML_FLOAT_PATTERN = new RegExp(
        // 2.5e4, 2.5 and integers
        "^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$",
      );
      function resolveYamlFloat(data) {
        if (data === null) return false;
        if (
          !YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`
          // Probably should update regexp & check speed
          data[data.length - 1] === "_"
        ) {
          return false;
        }
        return true;
      }
      __name(resolveYamlFloat, "resolveYamlFloat");
      function constructYamlFloat(data) {
        var value, sign, base, digits;
        value = data.replace(/_/g, "").toLowerCase();
        sign = value[0] === "-" ? -1 : 1;
        digits = [];
        if ("+-".indexOf(value[0]) >= 0) {
          value = value.slice(1);
        }
        if (value === ".inf") {
          return sign === 1
            ? Number.POSITIVE_INFINITY
            : Number.NEGATIVE_INFINITY;
        } else if (value === ".nan") {
          return NaN;
        } else if (value.indexOf(":") >= 0) {
          value.split(":").forEach(function (v) {
            digits.unshift(parseFloat(v, 10));
          });
          value = 0;
          base = 1;
          digits.forEach(function (d) {
            value += d * base;
            base *= 60;
          });
          return sign * value;
        }
        return sign * parseFloat(value, 10);
      }
      __name(constructYamlFloat, "constructYamlFloat");
      var SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;
      function representYamlFloat(object, style) {
        var res;
        if (isNaN(object)) {
          switch (style) {
            case "lowercase":
              return ".nan";
            case "uppercase":
              return ".NAN";
            case "camelcase":
              return ".NaN";
          }
        } else if (Number.POSITIVE_INFINITY === object) {
          switch (style) {
            case "lowercase":
              return ".inf";
            case "uppercase":
              return ".INF";
            case "camelcase":
              return ".Inf";
          }
        } else if (Number.NEGATIVE_INFINITY === object) {
          switch (style) {
            case "lowercase":
              return "-.inf";
            case "uppercase":
              return "-.INF";
            case "camelcase":
              return "-.Inf";
          }
        } else if (common.isNegativeZero(object)) {
          return "-0.0";
        }
        res = object.toString(10);
        return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace("e", ".e") : res;
      }
      __name(representYamlFloat, "representYamlFloat");
      function isFloat(object) {
        return (
          Object.prototype.toString.call(object) === "[object Number]" &&
          (object % 1 !== 0 || common.isNegativeZero(object))
        );
      }
      __name(isFloat, "isFloat");
      module.exports = new Type("tag:yaml.org,2002:float", {
        kind: "scalar",
        resolve: resolveYamlFloat,
        construct: constructYamlFloat,
        predicate: isFloat,
        represent: representYamlFloat,
        defaultStyle: "lowercase",
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/json.js
  var require_json5 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/json.js"(
      exports,
      module,
    ) {
      "use strict";
      var Schema = require_schema2();
      module.exports = new Schema({
        include: [require_failsafe2()],
        implicit: [
          require_null2(),
          require_bool2(),
          require_int2(),
          require_float2(),
        ],
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/core.js
  var require_core3 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/core.js"(
      exports,
      module,
    ) {
      "use strict";
      var Schema = require_schema2();
      module.exports = new Schema({
        include: [require_json5()],
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/timestamp.js
  var require_timestamp2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/timestamp.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      var YAML_DATE_REGEXP = new RegExp(
        "^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$",
      );
      var YAML_TIMESTAMP_REGEXP = new RegExp(
        "^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$",
      );
      function resolveYamlTimestamp(data) {
        if (data === null) return false;
        if (YAML_DATE_REGEXP.exec(data) !== null) return true;
        if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;
        return false;
      }
      __name(resolveYamlTimestamp, "resolveYamlTimestamp");
      function constructYamlTimestamp(data) {
        var match,
          year,
          month,
          day,
          hour,
          minute,
          second,
          fraction = 0,
          delta = null,
          tz_hour,
          tz_minute,
          date;
        match = YAML_DATE_REGEXP.exec(data);
        if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);
        if (match === null) throw new Error("Date resolve error");
        year = +match[1];
        month = +match[2] - 1;
        day = +match[3];
        if (!match[4]) {
          return new Date(Date.UTC(year, month, day));
        }
        hour = +match[4];
        minute = +match[5];
        second = +match[6];
        if (match[7]) {
          fraction = match[7].slice(0, 3);
          while (fraction.length < 3) {
            fraction += "0";
          }
          fraction = +fraction;
        }
        if (match[9]) {
          tz_hour = +match[10];
          tz_minute = +(match[11] || 0);
          delta = (tz_hour * 60 + tz_minute) * 6e4;
          if (match[9] === "-") delta = -delta;
        }
        date = new Date(
          Date.UTC(year, month, day, hour, minute, second, fraction),
        );
        if (delta) date.setTime(date.getTime() - delta);
        return date;
      }
      __name(constructYamlTimestamp, "constructYamlTimestamp");
      function representYamlTimestamp(object) {
        return object.toISOString();
      }
      __name(representYamlTimestamp, "representYamlTimestamp");
      module.exports = new Type("tag:yaml.org,2002:timestamp", {
        kind: "scalar",
        resolve: resolveYamlTimestamp,
        construct: constructYamlTimestamp,
        instanceOf: Date,
        represent: representYamlTimestamp,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/merge.js
  var require_merge3 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/merge.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      function resolveYamlMerge(data) {
        return data === "<<" || data === null;
      }
      __name(resolveYamlMerge, "resolveYamlMerge");
      module.exports = new Type("tag:yaml.org,2002:merge", {
        kind: "scalar",
        resolve: resolveYamlMerge,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/binary.js
  var require_binary2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/binary.js"(
      exports,
      module,
    ) {
      "use strict";
      var NodeBuffer;
      try {
        _require = __require;
        NodeBuffer = _require("buffer").Buffer;
      } catch (__) {}
      var _require;
      var Type = require_type2();
      var BASE64_MAP =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\n\r";
      function resolveYamlBinary(data) {
        if (data === null) return false;
        var code2,
          idx,
          bitlen = 0,
          max = data.length,
          map4 = BASE64_MAP;
        for (idx = 0; idx < max; idx++) {
          code2 = map4.indexOf(data.charAt(idx));
          if (code2 > 64) continue;
          if (code2 < 0) return false;
          bitlen += 6;
        }
        return bitlen % 8 === 0;
      }
      __name(resolveYamlBinary, "resolveYamlBinary");
      function constructYamlBinary(data) {
        var idx,
          tailbits,
          input = data.replace(/[\r\n=]/g, ""),
          max = input.length,
          map4 = BASE64_MAP,
          bits = 0,
          result = [];
        for (idx = 0; idx < max; idx++) {
          if (idx % 4 === 0 && idx) {
            result.push((bits >> 16) & 255);
            result.push((bits >> 8) & 255);
            result.push(bits & 255);
          }
          bits = (bits << 6) | map4.indexOf(input.charAt(idx));
        }
        tailbits = (max % 4) * 6;
        if (tailbits === 0) {
          result.push((bits >> 16) & 255);
          result.push((bits >> 8) & 255);
          result.push(bits & 255);
        } else if (tailbits === 18) {
          result.push((bits >> 10) & 255);
          result.push((bits >> 2) & 255);
        } else if (tailbits === 12) {
          result.push((bits >> 4) & 255);
        }
        if (NodeBuffer) {
          return NodeBuffer.from
            ? NodeBuffer.from(result)
            : new NodeBuffer(result);
        }
        return result;
      }
      __name(constructYamlBinary, "constructYamlBinary");
      function representYamlBinary(object) {
        var result = "",
          bits = 0,
          idx,
          tail,
          max = object.length,
          map4 = BASE64_MAP;
        for (idx = 0; idx < max; idx++) {
          if (idx % 3 === 0 && idx) {
            result += map4[(bits >> 18) & 63];
            result += map4[(bits >> 12) & 63];
            result += map4[(bits >> 6) & 63];
            result += map4[bits & 63];
          }
          bits = (bits << 8) + object[idx];
        }
        tail = max % 3;
        if (tail === 0) {
          result += map4[(bits >> 18) & 63];
          result += map4[(bits >> 12) & 63];
          result += map4[(bits >> 6) & 63];
          result += map4[bits & 63];
        } else if (tail === 2) {
          result += map4[(bits >> 10) & 63];
          result += map4[(bits >> 4) & 63];
          result += map4[(bits << 2) & 63];
          result += map4[64];
        } else if (tail === 1) {
          result += map4[(bits >> 2) & 63];
          result += map4[(bits << 4) & 63];
          result += map4[64];
          result += map4[64];
        }
        return result;
      }
      __name(representYamlBinary, "representYamlBinary");
      function isBinary(object) {
        return NodeBuffer && NodeBuffer.isBuffer(object);
      }
      __name(isBinary, "isBinary");
      module.exports = new Type("tag:yaml.org,2002:binary", {
        kind: "scalar",
        resolve: resolveYamlBinary,
        construct: constructYamlBinary,
        predicate: isBinary,
        represent: representYamlBinary,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/omap.js
  var require_omap2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/omap.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var _toString = Object.prototype.toString;
      function resolveYamlOmap(data) {
        if (data === null) return true;
        var objectKeys = [],
          index2,
          length,
          pair,
          pairKey,
          pairHasKey,
          object = data;
        for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
          pair = object[index2];
          pairHasKey = false;
          if (_toString.call(pair) !== "[object Object]") return false;
          for (pairKey in pair) {
            if (_hasOwnProperty.call(pair, pairKey)) {
              if (!pairHasKey) pairHasKey = true;
              else return false;
            }
          }
          if (!pairHasKey) return false;
          if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);
          else return false;
        }
        return true;
      }
      __name(resolveYamlOmap, "resolveYamlOmap");
      function constructYamlOmap(data) {
        return data !== null ? data : [];
      }
      __name(constructYamlOmap, "constructYamlOmap");
      module.exports = new Type("tag:yaml.org,2002:omap", {
        kind: "sequence",
        resolve: resolveYamlOmap,
        construct: constructYamlOmap,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/pairs.js
  var require_pairs2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/pairs.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      var _toString = Object.prototype.toString;
      function resolveYamlPairs(data) {
        if (data === null) return true;
        var index2,
          length,
          pair,
          keys,
          result,
          object = data;
        result = new Array(object.length);
        for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
          pair = object[index2];
          if (_toString.call(pair) !== "[object Object]") return false;
          keys = Object.keys(pair);
          if (keys.length !== 1) return false;
          result[index2] = [keys[0], pair[keys[0]]];
        }
        return true;
      }
      __name(resolveYamlPairs, "resolveYamlPairs");
      function constructYamlPairs(data) {
        if (data === null) return [];
        var index2,
          length,
          pair,
          keys,
          result,
          object = data;
        result = new Array(object.length);
        for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
          pair = object[index2];
          keys = Object.keys(pair);
          result[index2] = [keys[0], pair[keys[0]]];
        }
        return result;
      }
      __name(constructYamlPairs, "constructYamlPairs");
      module.exports = new Type("tag:yaml.org,2002:pairs", {
        kind: "sequence",
        resolve: resolveYamlPairs,
        construct: constructYamlPairs,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/set.js
  var require_set2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/set.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      function resolveYamlSet(data) {
        if (data === null) return true;
        var key,
          object = data;
        for (key in object) {
          if (_hasOwnProperty.call(object, key)) {
            if (object[key] !== null) return false;
          }
        }
        return true;
      }
      __name(resolveYamlSet, "resolveYamlSet");
      function constructYamlSet(data) {
        return data !== null ? data : {};
      }
      __name(constructYamlSet, "constructYamlSet");
      module.exports = new Type("tag:yaml.org,2002:set", {
        kind: "mapping",
        resolve: resolveYamlSet,
        construct: constructYamlSet,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js
  var require_default_safe = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js"(
      exports,
      module,
    ) {
      "use strict";
      var Schema = require_schema2();
      module.exports = new Schema({
        include: [require_core3()],
        implicit: [require_timestamp2(), require_merge3()],
        explicit: [
          require_binary2(),
          require_omap2(),
          require_pairs2(),
          require_set2(),
        ],
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js
  var require_undefined = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      function resolveJavascriptUndefined() {
        return true;
      }
      __name(resolveJavascriptUndefined, "resolveJavascriptUndefined");
      function constructJavascriptUndefined() {
        return void 0;
      }
      __name(constructJavascriptUndefined, "constructJavascriptUndefined");
      function representJavascriptUndefined() {
        return "";
      }
      __name(representJavascriptUndefined, "representJavascriptUndefined");
      function isUndefined(object) {
        return typeof object === "undefined";
      }
      __name(isUndefined, "isUndefined");
      module.exports = new Type("tag:yaml.org,2002:js/undefined", {
        kind: "scalar",
        resolve: resolveJavascriptUndefined,
        construct: constructJavascriptUndefined,
        predicate: isUndefined,
        represent: representJavascriptUndefined,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js
  var require_regexp = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js"(
      exports,
      module,
    ) {
      "use strict";
      var Type = require_type2();
      function resolveJavascriptRegExp(data) {
        if (data === null) return false;
        if (data.length === 0) return false;
        var regexp = data,
          tail = /\/([gim]*)$/.exec(data),
          modifiers = "";
        if (regexp[0] === "/") {
          if (tail) modifiers = tail[1];
          if (modifiers.length > 3) return false;
          if (regexp[regexp.length - modifiers.length - 1] !== "/")
            return false;
        }
        return true;
      }
      __name(resolveJavascriptRegExp, "resolveJavascriptRegExp");
      function constructJavascriptRegExp(data) {
        var regexp = data,
          tail = /\/([gim]*)$/.exec(data),
          modifiers = "";
        if (regexp[0] === "/") {
          if (tail) modifiers = tail[1];
          regexp = regexp.slice(1, regexp.length - modifiers.length - 1);
        }
        return new RegExp(regexp, modifiers);
      }
      __name(constructJavascriptRegExp, "constructJavascriptRegExp");
      function representJavascriptRegExp(object) {
        var result = "/" + object.source + "/";
        if (object.global) result += "g";
        if (object.multiline) result += "m";
        if (object.ignoreCase) result += "i";
        return result;
      }
      __name(representJavascriptRegExp, "representJavascriptRegExp");
      function isRegExp(object) {
        return Object.prototype.toString.call(object) === "[object RegExp]";
      }
      __name(isRegExp, "isRegExp");
      module.exports = new Type("tag:yaml.org,2002:js/regexp", {
        kind: "scalar",
        resolve: resolveJavascriptRegExp,
        construct: constructJavascriptRegExp,
        predicate: isRegExp,
        represent: representJavascriptRegExp,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/function.js
  var require_function = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/type/js/function.js"(
      exports,
      module,
    ) {
      "use strict";
      var esprima;
      try {
        _require = __require;
        esprima = _require("esprima");
      } catch (_) {
        if (typeof window !== "undefined") esprima = window.esprima;
      }
      var _require;
      var Type = require_type2();
      function resolveJavascriptFunction(data) {
        if (data === null) return false;
        try {
          var source = "(" + data + ")",
            ast = esprima.parse(source, { range: true });
          if (
            ast.type !== "Program" ||
            ast.body.length !== 1 ||
            ast.body[0].type !== "ExpressionStatement" ||
            (ast.body[0].expression.type !== "ArrowFunctionExpression" &&
              ast.body[0].expression.type !== "FunctionExpression")
          ) {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      __name(resolveJavascriptFunction, "resolveJavascriptFunction");
      function constructJavascriptFunction(data) {
        var source = "(" + data + ")",
          ast = esprima.parse(source, { range: true }),
          params = [],
          body;
        if (
          ast.type !== "Program" ||
          ast.body.length !== 1 ||
          ast.body[0].type !== "ExpressionStatement" ||
          (ast.body[0].expression.type !== "ArrowFunctionExpression" &&
            ast.body[0].expression.type !== "FunctionExpression")
        ) {
          throw new Error("Failed to resolve function");
        }
        ast.body[0].expression.params.forEach(function (param) {
          params.push(param.name);
        });
        body = ast.body[0].expression.body.range;
        if (ast.body[0].expression.body.type === "BlockStatement") {
          return new Function(params, source.slice(body[0] + 1, body[1] - 1));
        }
        return new Function(params, "return " + source.slice(body[0], body[1]));
      }
      __name(constructJavascriptFunction, "constructJavascriptFunction");
      function representJavascriptFunction(object) {
        return object.toString();
      }
      __name(representJavascriptFunction, "representJavascriptFunction");
      function isFunction(object) {
        return Object.prototype.toString.call(object) === "[object Function]";
      }
      __name(isFunction, "isFunction");
      module.exports = new Type("tag:yaml.org,2002:js/function", {
        kind: "scalar",
        resolve: resolveJavascriptFunction,
        construct: constructJavascriptFunction,
        predicate: isFunction,
        represent: representJavascriptFunction,
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/default_full.js
  var require_default_full = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/schema/default_full.js"(
      exports,
      module,
    ) {
      "use strict";
      var Schema = require_schema2();
      module.exports = Schema.DEFAULT = new Schema({
        include: [require_default_safe()],
        explicit: [require_undefined(), require_regexp(), require_function()],
      });
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/loader.js
  var require_loader2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/loader.js"(
      exports,
      module,
    ) {
      "use strict";
      var common = require_common4();
      var YAMLException = require_exception2();
      var Mark = require_mark();
      var DEFAULT_SAFE_SCHEMA = require_default_safe();
      var DEFAULT_FULL_SCHEMA = require_default_full();
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var CONTEXT_FLOW_IN = 1;
      var CONTEXT_FLOW_OUT = 2;
      var CONTEXT_BLOCK_IN = 3;
      var CONTEXT_BLOCK_OUT = 4;
      var CHOMPING_CLIP = 1;
      var CHOMPING_STRIP = 2;
      var CHOMPING_KEEP = 3;
      var PATTERN_NON_PRINTABLE =
        /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
      var PATTERN_NON_ASCII_LINE_BREAKS = /[\x85\u2028\u2029]/;
      var PATTERN_FLOW_INDICATORS = /[,\[\]\{\}]/;
      var PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\-]+!)$/i;
      var PATTERN_TAG_URI =
        /^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;
      function _class(obj) {
        return Object.prototype.toString.call(obj);
      }
      __name(_class, "_class");
      function is_EOL(c) {
        return c === 10 || c === 13;
      }
      __name(is_EOL, "is_EOL");
      function is_WHITE_SPACE(c) {
        return c === 9 || c === 32;
      }
      __name(is_WHITE_SPACE, "is_WHITE_SPACE");
      function is_WS_OR_EOL(c) {
        return c === 9 || c === 32 || c === 10 || c === 13;
      }
      __name(is_WS_OR_EOL, "is_WS_OR_EOL");
      function is_FLOW_INDICATOR(c) {
        return c === 44 || c === 91 || c === 93 || c === 123 || c === 125;
      }
      __name(is_FLOW_INDICATOR, "is_FLOW_INDICATOR");
      function fromHexCode(c) {
        var lc;
        if (48 <= c && c <= 57) {
          return c - 48;
        }
        lc = c | 32;
        if (97 <= lc && lc <= 102) {
          return lc - 97 + 10;
        }
        return -1;
      }
      __name(fromHexCode, "fromHexCode");
      function escapedHexLen(c) {
        if (c === 120) {
          return 2;
        }
        if (c === 117) {
          return 4;
        }
        if (c === 85) {
          return 8;
        }
        return 0;
      }
      __name(escapedHexLen, "escapedHexLen");
      function fromDecimalCode(c) {
        if (48 <= c && c <= 57) {
          return c - 48;
        }
        return -1;
      }
      __name(fromDecimalCode, "fromDecimalCode");
      function simpleEscapeSequence(c) {
        return c === 48
          ? "\0"
          : c === 97
            ? "\x07"
            : c === 98
              ? "\b"
              : c === 116
                ? "	"
                : c === 9
                  ? "	"
                  : c === 110
                    ? "\n"
                    : c === 118
                      ? "\v"
                      : c === 102
                        ? "\f"
                        : c === 114
                          ? "\r"
                          : c === 101
                            ? "\x1B"
                            : c === 32
                              ? " "
                              : c === 34
                                ? '"'
                                : c === 47
                                  ? "/"
                                  : c === 92
                                    ? "\\"
                                    : c === 78
                                      ? "\x85"
                                      : c === 95
                                        ? "\xA0"
                                        : c === 76
                                          ? "\u2028"
                                          : c === 80
                                            ? "\u2029"
                                            : "";
      }
      __name(simpleEscapeSequence, "simpleEscapeSequence");
      function charFromCodepoint(c) {
        if (c <= 65535) {
          return String.fromCharCode(c);
        }
        return String.fromCharCode(
          ((c - 65536) >> 10) + 55296,
          ((c - 65536) & 1023) + 56320,
        );
      }
      __name(charFromCodepoint, "charFromCodepoint");
      var simpleEscapeCheck = new Array(256);
      var simpleEscapeMap = new Array(256);
      for (i = 0; i < 256; i++) {
        simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;
        simpleEscapeMap[i] = simpleEscapeSequence(i);
      }
      var i;
      function State(input, options) {
        this.input = input;
        this.filename = options["filename"] || null;
        this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
        this.onWarning = options["onWarning"] || null;
        this.legacy = options["legacy"] || false;
        this.json = options["json"] || false;
        this.listener = options["listener"] || null;
        this.implicitTypes = this.schema.compiledImplicit;
        this.typeMap = this.schema.compiledTypeMap;
        this.length = input.length;
        this.position = 0;
        this.line = 0;
        this.lineStart = 0;
        this.lineIndent = 0;
        this.documents = [];
      }
      __name(State, "State");
      function generateError(state, message) {
        return new YAMLException(
          message,
          new Mark(
            state.filename,
            state.input,
            state.position,
            state.line,
            state.position - state.lineStart,
          ),
        );
      }
      __name(generateError, "generateError");
      function throwError(state, message) {
        throw generateError(state, message);
      }
      __name(throwError, "throwError");
      function throwWarning(state, message) {
        if (state.onWarning) {
          state.onWarning.call(null, generateError(state, message));
        }
      }
      __name(throwWarning, "throwWarning");
      var directiveHandlers = {
        YAML: /* @__PURE__ */ __name(function handleYamlDirective(
          state,
          name,
          args,
        ) {
          var match, major, minor;
          if (state.version !== null) {
            throwError(state, "duplication of %YAML directive");
          }
          if (args.length !== 1) {
            throwError(state, "YAML directive accepts exactly one argument");
          }
          match = /^([0-9]+)\.([0-9]+)$/.exec(args[0]);
          if (match === null) {
            throwError(state, "ill-formed argument of the YAML directive");
          }
          major = parseInt(match[1], 10);
          minor = parseInt(match[2], 10);
          if (major !== 1) {
            throwError(state, "unacceptable YAML version of the document");
          }
          state.version = args[0];
          state.checkLineBreaks = minor < 2;
          if (minor !== 1 && minor !== 2) {
            throwWarning(state, "unsupported YAML version of the document");
          }
        }, "handleYamlDirective"),
        TAG: /* @__PURE__ */ __name(function handleTagDirective(
          state,
          name,
          args,
        ) {
          var handle2, prefix2;
          if (args.length !== 2) {
            throwError(state, "TAG directive accepts exactly two arguments");
          }
          handle2 = args[0];
          prefix2 = args[1];
          if (!PATTERN_TAG_HANDLE.test(handle2)) {
            throwError(
              state,
              "ill-formed tag handle (first argument) of the TAG directive",
            );
          }
          if (_hasOwnProperty.call(state.tagMap, handle2)) {
            throwError(
              state,
              'there is a previously declared suffix for "' +
                handle2 +
                '" tag handle',
            );
          }
          if (!PATTERN_TAG_URI.test(prefix2)) {
            throwError(
              state,
              "ill-formed tag prefix (second argument) of the TAG directive",
            );
          }
          state.tagMap[handle2] = prefix2;
        }, "handleTagDirective"),
      };
      function captureSegment(state, start, end, checkJson) {
        var _position, _length, _character, _result;
        if (start < end) {
          _result = state.input.slice(start, end);
          if (checkJson) {
            for (
              _position = 0, _length = _result.length;
              _position < _length;
              _position += 1
            ) {
              _character = _result.charCodeAt(_position);
              if (
                !(
                  _character === 9 ||
                  (32 <= _character && _character <= 1114111)
                )
              ) {
                throwError(state, "expected valid JSON character");
              }
            }
          } else if (PATTERN_NON_PRINTABLE.test(_result)) {
            throwError(state, "the stream contains non-printable characters");
          }
          state.result += _result;
        }
      }
      __name(captureSegment, "captureSegment");
      function mergeMappings(state, destination, source, overridableKeys) {
        var sourceKeys, key, index2, quantity;
        if (!common.isObject(source)) {
          throwError(
            state,
            "cannot merge mappings; the provided source object is unacceptable",
          );
        }
        sourceKeys = Object.keys(source);
        for (
          index2 = 0, quantity = sourceKeys.length;
          index2 < quantity;
          index2 += 1
        ) {
          key = sourceKeys[index2];
          if (!_hasOwnProperty.call(destination, key)) {
            destination[key] = source[key];
            overridableKeys[key] = true;
          }
        }
      }
      __name(mergeMappings, "mergeMappings");
      function storeMappingPair(
        state,
        _result,
        overridableKeys,
        keyTag,
        keyNode,
        valueNode,
        startLine,
        startPos,
      ) {
        var index2, quantity;
        if (Array.isArray(keyNode)) {
          keyNode = Array.prototype.slice.call(keyNode);
          for (
            index2 = 0, quantity = keyNode.length;
            index2 < quantity;
            index2 += 1
          ) {
            if (Array.isArray(keyNode[index2])) {
              throwError(state, "nested arrays are not supported inside keys");
            }
            if (
              typeof keyNode === "object" &&
              _class(keyNode[index2]) === "[object Object]"
            ) {
              keyNode[index2] = "[object Object]";
            }
          }
        }
        if (
          typeof keyNode === "object" &&
          _class(keyNode) === "[object Object]"
        ) {
          keyNode = "[object Object]";
        }
        keyNode = String(keyNode);
        if (_result === null) {
          _result = {};
        }
        if (keyTag === "tag:yaml.org,2002:merge") {
          if (Array.isArray(valueNode)) {
            for (
              index2 = 0, quantity = valueNode.length;
              index2 < quantity;
              index2 += 1
            ) {
              mergeMappings(state, _result, valueNode[index2], overridableKeys);
            }
          } else {
            mergeMappings(state, _result, valueNode, overridableKeys);
          }
        } else {
          if (
            !state.json &&
            !_hasOwnProperty.call(overridableKeys, keyNode) &&
            _hasOwnProperty.call(_result, keyNode)
          ) {
            state.line = startLine || state.line;
            state.position = startPos || state.position;
            throwError(state, "duplicated mapping key");
          }
          _result[keyNode] = valueNode;
          delete overridableKeys[keyNode];
        }
        return _result;
      }
      __name(storeMappingPair, "storeMappingPair");
      function readLineBreak(state) {
        var ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 10) {
          state.position++;
        } else if (ch === 13) {
          state.position++;
          if (state.input.charCodeAt(state.position) === 10) {
            state.position++;
          }
        } else {
          throwError(state, "a line break is expected");
        }
        state.line += 1;
        state.lineStart = state.position;
      }
      __name(readLineBreak, "readLineBreak");
      function skipSeparationSpace(state, allowComments, checkIndent) {
        var lineBreaks = 0,
          ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          while (is_WHITE_SPACE(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          if (allowComments && ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (ch !== 10 && ch !== 13 && ch !== 0);
          }
          if (is_EOL(ch)) {
            readLineBreak(state);
            ch = state.input.charCodeAt(state.position);
            lineBreaks++;
            state.lineIndent = 0;
            while (ch === 32) {
              state.lineIndent++;
              ch = state.input.charCodeAt(++state.position);
            }
          } else {
            break;
          }
        }
        if (
          checkIndent !== -1 &&
          lineBreaks !== 0 &&
          state.lineIndent < checkIndent
        ) {
          throwWarning(state, "deficient indentation");
        }
        return lineBreaks;
      }
      __name(skipSeparationSpace, "skipSeparationSpace");
      function testDocumentSeparator(state) {
        var _position = state.position,
          ch;
        ch = state.input.charCodeAt(_position);
        if (
          (ch === 45 || ch === 46) &&
          ch === state.input.charCodeAt(_position + 1) &&
          ch === state.input.charCodeAt(_position + 2)
        ) {
          _position += 3;
          ch = state.input.charCodeAt(_position);
          if (ch === 0 || is_WS_OR_EOL(ch)) {
            return true;
          }
        }
        return false;
      }
      __name(testDocumentSeparator, "testDocumentSeparator");
      function writeFoldedLines(state, count) {
        if (count === 1) {
          state.result += " ";
        } else if (count > 1) {
          state.result += common.repeat("\n", count - 1);
        }
      }
      __name(writeFoldedLines, "writeFoldedLines");
      function readPlainScalar(state, nodeIndent, withinFlowCollection) {
        var preceding,
          following,
          captureStart,
          captureEnd,
          hasPendingContent,
          _line,
          _lineStart,
          _lineIndent,
          _kind = state.kind,
          _result = state.result,
          ch;
        ch = state.input.charCodeAt(state.position);
        if (
          is_WS_OR_EOL(ch) ||
          is_FLOW_INDICATOR(ch) ||
          ch === 35 ||
          ch === 38 ||
          ch === 42 ||
          ch === 33 ||
          ch === 124 ||
          ch === 62 ||
          ch === 39 ||
          ch === 34 ||
          ch === 37 ||
          ch === 64 ||
          ch === 96
        ) {
          return false;
        }
        if (ch === 63 || ch === 45) {
          following = state.input.charCodeAt(state.position + 1);
          if (
            is_WS_OR_EOL(following) ||
            (withinFlowCollection && is_FLOW_INDICATOR(following))
          ) {
            return false;
          }
        }
        state.kind = "scalar";
        state.result = "";
        captureStart = captureEnd = state.position;
        hasPendingContent = false;
        while (ch !== 0) {
          if (ch === 58) {
            following = state.input.charCodeAt(state.position + 1);
            if (
              is_WS_OR_EOL(following) ||
              (withinFlowCollection && is_FLOW_INDICATOR(following))
            ) {
              break;
            }
          } else if (ch === 35) {
            preceding = state.input.charCodeAt(state.position - 1);
            if (is_WS_OR_EOL(preceding)) {
              break;
            }
          } else if (
            (state.position === state.lineStart &&
              testDocumentSeparator(state)) ||
            (withinFlowCollection && is_FLOW_INDICATOR(ch))
          ) {
            break;
          } else if (is_EOL(ch)) {
            _line = state.line;
            _lineStart = state.lineStart;
            _lineIndent = state.lineIndent;
            skipSeparationSpace(state, false, -1);
            if (state.lineIndent >= nodeIndent) {
              hasPendingContent = true;
              ch = state.input.charCodeAt(state.position);
              continue;
            } else {
              state.position = captureEnd;
              state.line = _line;
              state.lineStart = _lineStart;
              state.lineIndent = _lineIndent;
              break;
            }
          }
          if (hasPendingContent) {
            captureSegment(state, captureStart, captureEnd, false);
            writeFoldedLines(state, state.line - _line);
            captureStart = captureEnd = state.position;
            hasPendingContent = false;
          }
          if (!is_WHITE_SPACE(ch)) {
            captureEnd = state.position + 1;
          }
          ch = state.input.charCodeAt(++state.position);
        }
        captureSegment(state, captureStart, captureEnd, false);
        if (state.result) {
          return true;
        }
        state.kind = _kind;
        state.result = _result;
        return false;
      }
      __name(readPlainScalar, "readPlainScalar");
      function readSingleQuotedScalar(state, nodeIndent) {
        var ch, captureStart, captureEnd;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 39) {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        state.position++;
        captureStart = captureEnd = state.position;
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          if (ch === 39) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (ch === 39) {
              captureStart = state.position;
              state.position++;
              captureEnd = state.position;
            } else {
              return true;
            }
          } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(
              state,
              skipSeparationSpace(state, false, nodeIndent),
            );
            captureStart = captureEnd = state.position;
          } else if (
            state.position === state.lineStart &&
            testDocumentSeparator(state)
          ) {
            throwError(
              state,
              "unexpected end of the document within a single quoted scalar",
            );
          } else {
            state.position++;
            captureEnd = state.position;
          }
        }
        throwError(
          state,
          "unexpected end of the stream within a single quoted scalar",
        );
      }
      __name(readSingleQuotedScalar, "readSingleQuotedScalar");
      function readDoubleQuotedScalar(state, nodeIndent) {
        var captureStart, captureEnd, hexLength, hexResult, tmp, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 34) {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        state.position++;
        captureStart = captureEnd = state.position;
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          if (ch === 34) {
            captureSegment(state, captureStart, state.position, true);
            state.position++;
            return true;
          } else if (ch === 92) {
            captureSegment(state, captureStart, state.position, true);
            ch = state.input.charCodeAt(++state.position);
            if (is_EOL(ch)) {
              skipSeparationSpace(state, false, nodeIndent);
            } else if (ch < 256 && simpleEscapeCheck[ch]) {
              state.result += simpleEscapeMap[ch];
              state.position++;
            } else if ((tmp = escapedHexLen(ch)) > 0) {
              hexLength = tmp;
              hexResult = 0;
              for (; hexLength > 0; hexLength--) {
                ch = state.input.charCodeAt(++state.position);
                if ((tmp = fromHexCode(ch)) >= 0) {
                  hexResult = (hexResult << 4) + tmp;
                } else {
                  throwError(state, "expected hexadecimal character");
                }
              }
              state.result += charFromCodepoint(hexResult);
              state.position++;
            } else {
              throwError(state, "unknown escape sequence");
            }
            captureStart = captureEnd = state.position;
          } else if (is_EOL(ch)) {
            captureSegment(state, captureStart, captureEnd, true);
            writeFoldedLines(
              state,
              skipSeparationSpace(state, false, nodeIndent),
            );
            captureStart = captureEnd = state.position;
          } else if (
            state.position === state.lineStart &&
            testDocumentSeparator(state)
          ) {
            throwError(
              state,
              "unexpected end of the document within a double quoted scalar",
            );
          } else {
            state.position++;
            captureEnd = state.position;
          }
        }
        throwError(
          state,
          "unexpected end of the stream within a double quoted scalar",
        );
      }
      __name(readDoubleQuotedScalar, "readDoubleQuotedScalar");
      function readFlowCollection(state, nodeIndent) {
        var readNext = true,
          _line,
          _tag = state.tag,
          _result,
          _anchor = state.anchor,
          following,
          terminator,
          isPair,
          isExplicitPair,
          isMapping,
          overridableKeys = {},
          keyNode,
          keyTag,
          valueNode,
          ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 91) {
          terminator = 93;
          isMapping = false;
          _result = [];
        } else if (ch === 123) {
          terminator = 125;
          isMapping = true;
          _result = {};
        } else {
          return false;
        }
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(++state.position);
        while (ch !== 0) {
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if (ch === terminator) {
            state.position++;
            state.tag = _tag;
            state.anchor = _anchor;
            state.kind = isMapping ? "mapping" : "sequence";
            state.result = _result;
            return true;
          } else if (!readNext) {
            throwError(state, "missed comma between flow collection entries");
          }
          keyTag = keyNode = valueNode = null;
          isPair = isExplicitPair = false;
          if (ch === 63) {
            following = state.input.charCodeAt(state.position + 1);
            if (is_WS_OR_EOL(following)) {
              isPair = isExplicitPair = true;
              state.position++;
              skipSeparationSpace(state, true, nodeIndent);
            }
          }
          _line = state.line;
          composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
          keyTag = state.tag;
          keyNode = state.result;
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if ((isExplicitPair || state.line === _line) && ch === 58) {
            isPair = true;
            ch = state.input.charCodeAt(++state.position);
            skipSeparationSpace(state, true, nodeIndent);
            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);
            valueNode = state.result;
          }
          if (isMapping) {
            storeMappingPair(
              state,
              _result,
              overridableKeys,
              keyTag,
              keyNode,
              valueNode,
            );
          } else if (isPair) {
            _result.push(
              storeMappingPair(
                state,
                null,
                overridableKeys,
                keyTag,
                keyNode,
                valueNode,
              ),
            );
          } else {
            _result.push(keyNode);
          }
          skipSeparationSpace(state, true, nodeIndent);
          ch = state.input.charCodeAt(state.position);
          if (ch === 44) {
            readNext = true;
            ch = state.input.charCodeAt(++state.position);
          } else {
            readNext = false;
          }
        }
        throwError(
          state,
          "unexpected end of the stream within a flow collection",
        );
      }
      __name(readFlowCollection, "readFlowCollection");
      function readBlockScalar(state, nodeIndent) {
        var captureStart,
          folding,
          chomping = CHOMPING_CLIP,
          didReadContent = false,
          detectedIndent = false,
          textIndent = nodeIndent,
          emptyLines = 0,
          atMoreIndented = false,
          tmp,
          ch;
        ch = state.input.charCodeAt(state.position);
        if (ch === 124) {
          folding = false;
        } else if (ch === 62) {
          folding = true;
        } else {
          return false;
        }
        state.kind = "scalar";
        state.result = "";
        while (ch !== 0) {
          ch = state.input.charCodeAt(++state.position);
          if (ch === 43 || ch === 45) {
            if (CHOMPING_CLIP === chomping) {
              chomping = ch === 43 ? CHOMPING_KEEP : CHOMPING_STRIP;
            } else {
              throwError(state, "repeat of a chomping mode identifier");
            }
          } else if ((tmp = fromDecimalCode(ch)) >= 0) {
            if (tmp === 0) {
              throwError(
                state,
                "bad explicit indentation width of a block scalar; it cannot be less than one",
              );
            } else if (!detectedIndent) {
              textIndent = nodeIndent + tmp - 1;
              detectedIndent = true;
            } else {
              throwError(state, "repeat of an indentation width identifier");
            }
          } else {
            break;
          }
        }
        if (is_WHITE_SPACE(ch)) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (is_WHITE_SPACE(ch));
          if (ch === 35) {
            do {
              ch = state.input.charCodeAt(++state.position);
            } while (!is_EOL(ch) && ch !== 0);
          }
        }
        while (ch !== 0) {
          readLineBreak(state);
          state.lineIndent = 0;
          ch = state.input.charCodeAt(state.position);
          while (
            (!detectedIndent || state.lineIndent < textIndent) &&
            ch === 32
          ) {
            state.lineIndent++;
            ch = state.input.charCodeAt(++state.position);
          }
          if (!detectedIndent && state.lineIndent > textIndent) {
            textIndent = state.lineIndent;
          }
          if (is_EOL(ch)) {
            emptyLines++;
            continue;
          }
          if (state.lineIndent < textIndent) {
            if (chomping === CHOMPING_KEEP) {
              state.result += common.repeat(
                "\n",
                didReadContent ? 1 + emptyLines : emptyLines,
              );
            } else if (chomping === CHOMPING_CLIP) {
              if (didReadContent) {
                state.result += "\n";
              }
            }
            break;
          }
          if (folding) {
            if (is_WHITE_SPACE(ch)) {
              atMoreIndented = true;
              state.result += common.repeat(
                "\n",
                didReadContent ? 1 + emptyLines : emptyLines,
              );
            } else if (atMoreIndented) {
              atMoreIndented = false;
              state.result += common.repeat("\n", emptyLines + 1);
            } else if (emptyLines === 0) {
              if (didReadContent) {
                state.result += " ";
              }
            } else {
              state.result += common.repeat("\n", emptyLines);
            }
          } else {
            state.result += common.repeat(
              "\n",
              didReadContent ? 1 + emptyLines : emptyLines,
            );
          }
          didReadContent = true;
          detectedIndent = true;
          emptyLines = 0;
          captureStart = state.position;
          while (!is_EOL(ch) && ch !== 0) {
            ch = state.input.charCodeAt(++state.position);
          }
          captureSegment(state, captureStart, state.position, false);
        }
        return true;
      }
      __name(readBlockScalar, "readBlockScalar");
      function readBlockSequence(state, nodeIndent) {
        var _line,
          _tag = state.tag,
          _anchor = state.anchor,
          _result = [],
          following,
          detected = false,
          ch;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          if (ch !== 45) {
            break;
          }
          following = state.input.charCodeAt(state.position + 1);
          if (!is_WS_OR_EOL(following)) {
            break;
          }
          detected = true;
          state.position++;
          if (skipSeparationSpace(state, true, -1)) {
            if (state.lineIndent <= nodeIndent) {
              _result.push(null);
              ch = state.input.charCodeAt(state.position);
              continue;
            }
          }
          _line = state.line;
          composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);
          _result.push(state.result);
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
          if (
            (state.line === _line || state.lineIndent > nodeIndent) &&
            ch !== 0
          ) {
            throwError(state, "bad indentation of a sequence entry");
          } else if (state.lineIndent < nodeIndent) {
            break;
          }
        }
        if (detected) {
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = "sequence";
          state.result = _result;
          return true;
        }
        return false;
      }
      __name(readBlockSequence, "readBlockSequence");
      function readBlockMapping(state, nodeIndent, flowIndent) {
        var following,
          allowCompact,
          _line,
          _pos,
          _tag = state.tag,
          _anchor = state.anchor,
          _result = {},
          overridableKeys = {},
          keyTag = null,
          keyNode = null,
          valueNode = null,
          atExplicitKey = false,
          detected = false,
          ch;
        if (state.anchor !== null) {
          state.anchorMap[state.anchor] = _result;
        }
        ch = state.input.charCodeAt(state.position);
        while (ch !== 0) {
          following = state.input.charCodeAt(state.position + 1);
          _line = state.line;
          _pos = state.position;
          if ((ch === 63 || ch === 58) && is_WS_OR_EOL(following)) {
            if (ch === 63) {
              if (atExplicitKey) {
                storeMappingPair(
                  state,
                  _result,
                  overridableKeys,
                  keyTag,
                  keyNode,
                  null,
                );
                keyTag = keyNode = valueNode = null;
              }
              detected = true;
              atExplicitKey = true;
              allowCompact = true;
            } else if (atExplicitKey) {
              atExplicitKey = false;
              allowCompact = true;
            } else {
              throwError(
                state,
                "incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line",
              );
            }
            state.position += 1;
            ch = following;
          } else if (
            composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)
          ) {
            if (state.line === _line) {
              ch = state.input.charCodeAt(state.position);
              while (is_WHITE_SPACE(ch)) {
                ch = state.input.charCodeAt(++state.position);
              }
              if (ch === 58) {
                ch = state.input.charCodeAt(++state.position);
                if (!is_WS_OR_EOL(ch)) {
                  throwError(
                    state,
                    "a whitespace character is expected after the key-value separator within a block mapping",
                  );
                }
                if (atExplicitKey) {
                  storeMappingPair(
                    state,
                    _result,
                    overridableKeys,
                    keyTag,
                    keyNode,
                    null,
                  );
                  keyTag = keyNode = valueNode = null;
                }
                detected = true;
                atExplicitKey = false;
                allowCompact = false;
                keyTag = state.tag;
                keyNode = state.result;
              } else if (detected) {
                throwError(
                  state,
                  "can not read an implicit mapping pair; a colon is missed",
                );
              } else {
                state.tag = _tag;
                state.anchor = _anchor;
                return true;
              }
            } else if (detected) {
              throwError(
                state,
                "can not read a block mapping entry; a multiline key may not be an implicit key",
              );
            } else {
              state.tag = _tag;
              state.anchor = _anchor;
              return true;
            }
          } else {
            break;
          }
          if (state.line === _line || state.lineIndent > nodeIndent) {
            if (
              composeNode(
                state,
                nodeIndent,
                CONTEXT_BLOCK_OUT,
                true,
                allowCompact,
              )
            ) {
              if (atExplicitKey) {
                keyNode = state.result;
              } else {
                valueNode = state.result;
              }
            }
            if (!atExplicitKey) {
              storeMappingPair(
                state,
                _result,
                overridableKeys,
                keyTag,
                keyNode,
                valueNode,
                _line,
                _pos,
              );
              keyTag = keyNode = valueNode = null;
            }
            skipSeparationSpace(state, true, -1);
            ch = state.input.charCodeAt(state.position);
          }
          if (state.lineIndent > nodeIndent && ch !== 0) {
            throwError(state, "bad indentation of a mapping entry");
          } else if (state.lineIndent < nodeIndent) {
            break;
          }
        }
        if (atExplicitKey) {
          storeMappingPair(
            state,
            _result,
            overridableKeys,
            keyTag,
            keyNode,
            null,
          );
        }
        if (detected) {
          state.tag = _tag;
          state.anchor = _anchor;
          state.kind = "mapping";
          state.result = _result;
        }
        return detected;
      }
      __name(readBlockMapping, "readBlockMapping");
      function readTagProperty(state) {
        var _position,
          isVerbatim = false,
          isNamed = false,
          tagHandle,
          tagName,
          ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 33) return false;
        if (state.tag !== null) {
          throwError(state, "duplication of a tag property");
        }
        ch = state.input.charCodeAt(++state.position);
        if (ch === 60) {
          isVerbatim = true;
          ch = state.input.charCodeAt(++state.position);
        } else if (ch === 33) {
          isNamed = true;
          tagHandle = "!!";
          ch = state.input.charCodeAt(++state.position);
        } else {
          tagHandle = "!";
        }
        _position = state.position;
        if (isVerbatim) {
          do {
            ch = state.input.charCodeAt(++state.position);
          } while (ch !== 0 && ch !== 62);
          if (state.position < state.length) {
            tagName = state.input.slice(_position, state.position);
            ch = state.input.charCodeAt(++state.position);
          } else {
            throwError(
              state,
              "unexpected end of the stream within a verbatim tag",
            );
          }
        } else {
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            if (ch === 33) {
              if (!isNamed) {
                tagHandle = state.input.slice(
                  _position - 1,
                  state.position + 1,
                );
                if (!PATTERN_TAG_HANDLE.test(tagHandle)) {
                  throwError(
                    state,
                    "named tag handle cannot contain such characters",
                  );
                }
                isNamed = true;
                _position = state.position + 1;
              } else {
                throwError(
                  state,
                  "tag suffix cannot contain exclamation marks",
                );
              }
            }
            ch = state.input.charCodeAt(++state.position);
          }
          tagName = state.input.slice(_position, state.position);
          if (PATTERN_FLOW_INDICATORS.test(tagName)) {
            throwError(
              state,
              "tag suffix cannot contain flow indicator characters",
            );
          }
        }
        if (tagName && !PATTERN_TAG_URI.test(tagName)) {
          throwError(
            state,
            "tag name cannot contain such characters: " + tagName,
          );
        }
        if (isVerbatim) {
          state.tag = tagName;
        } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {
          state.tag = state.tagMap[tagHandle] + tagName;
        } else if (tagHandle === "!") {
          state.tag = "!" + tagName;
        } else if (tagHandle === "!!") {
          state.tag = "tag:yaml.org,2002:" + tagName;
        } else {
          throwError(state, 'undeclared tag handle "' + tagHandle + '"');
        }
        return true;
      }
      __name(readTagProperty, "readTagProperty");
      function readAnchorProperty(state) {
        var _position, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 38) return false;
        if (state.anchor !== null) {
          throwError(state, "duplication of an anchor property");
        }
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (state.position === _position) {
          throwError(
            state,
            "name of an anchor node must contain at least one character",
          );
        }
        state.anchor = state.input.slice(_position, state.position);
        return true;
      }
      __name(readAnchorProperty, "readAnchorProperty");
      function readAlias(state) {
        var _position, alias, ch;
        ch = state.input.charCodeAt(state.position);
        if (ch !== 42) return false;
        ch = state.input.charCodeAt(++state.position);
        _position = state.position;
        while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {
          ch = state.input.charCodeAt(++state.position);
        }
        if (state.position === _position) {
          throwError(
            state,
            "name of an alias node must contain at least one character",
          );
        }
        alias = state.input.slice(_position, state.position);
        if (!_hasOwnProperty.call(state.anchorMap, alias)) {
          throwError(state, 'unidentified alias "' + alias + '"');
        }
        state.result = state.anchorMap[alias];
        skipSeparationSpace(state, true, -1);
        return true;
      }
      __name(readAlias, "readAlias");
      function composeNode(
        state,
        parentIndent,
        nodeContext,
        allowToSeek,
        allowCompact,
      ) {
        var allowBlockStyles,
          allowBlockScalars,
          allowBlockCollections,
          indentStatus = 1,
          atNewLine = false,
          hasContent = false,
          typeIndex,
          typeQuantity,
          type,
          flowIndent,
          blockIndent;
        if (state.listener !== null) {
          state.listener("open", state);
        }
        state.tag = null;
        state.anchor = null;
        state.kind = null;
        state.result = null;
        allowBlockStyles =
          allowBlockScalars =
          allowBlockCollections =
            CONTEXT_BLOCK_OUT === nodeContext ||
            CONTEXT_BLOCK_IN === nodeContext;
        if (allowToSeek) {
          if (skipSeparationSpace(state, true, -1)) {
            atNewLine = true;
            if (state.lineIndent > parentIndent) {
              indentStatus = 1;
            } else if (state.lineIndent === parentIndent) {
              indentStatus = 0;
            } else if (state.lineIndent < parentIndent) {
              indentStatus = -1;
            }
          }
        }
        if (indentStatus === 1) {
          while (readTagProperty(state) || readAnchorProperty(state)) {
            if (skipSeparationSpace(state, true, -1)) {
              atNewLine = true;
              allowBlockCollections = allowBlockStyles;
              if (state.lineIndent > parentIndent) {
                indentStatus = 1;
              } else if (state.lineIndent === parentIndent) {
                indentStatus = 0;
              } else if (state.lineIndent < parentIndent) {
                indentStatus = -1;
              }
            } else {
              allowBlockCollections = false;
            }
          }
        }
        if (allowBlockCollections) {
          allowBlockCollections = atNewLine || allowCompact;
        }
        if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {
          if (
            CONTEXT_FLOW_IN === nodeContext ||
            CONTEXT_FLOW_OUT === nodeContext
          ) {
            flowIndent = parentIndent;
          } else {
            flowIndent = parentIndent + 1;
          }
          blockIndent = state.position - state.lineStart;
          if (indentStatus === 1) {
            if (
              (allowBlockCollections &&
                (readBlockSequence(state, blockIndent) ||
                  readBlockMapping(state, blockIndent, flowIndent))) ||
              readFlowCollection(state, flowIndent)
            ) {
              hasContent = true;
            } else {
              if (
                (allowBlockScalars && readBlockScalar(state, flowIndent)) ||
                readSingleQuotedScalar(state, flowIndent) ||
                readDoubleQuotedScalar(state, flowIndent)
              ) {
                hasContent = true;
              } else if (readAlias(state)) {
                hasContent = true;
                if (state.tag !== null || state.anchor !== null) {
                  throwError(
                    state,
                    "alias node should not have any properties",
                  );
                }
              } else if (
                readPlainScalar(
                  state,
                  flowIndent,
                  CONTEXT_FLOW_IN === nodeContext,
                )
              ) {
                hasContent = true;
                if (state.tag === null) {
                  state.tag = "?";
                }
              }
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
            }
          } else if (indentStatus === 0) {
            hasContent =
              allowBlockCollections && readBlockSequence(state, blockIndent);
          }
        }
        if (state.tag !== null && state.tag !== "!") {
          if (state.tag === "?") {
            if (state.result !== null && state.kind !== "scalar") {
              throwError(
                state,
                'unacceptable node kind for !<?> tag; it should be "scalar", not "' +
                  state.kind +
                  '"',
              );
            }
            for (
              typeIndex = 0, typeQuantity = state.implicitTypes.length;
              typeIndex < typeQuantity;
              typeIndex += 1
            ) {
              type = state.implicitTypes[typeIndex];
              if (type.resolve(state.result)) {
                state.result = type.construct(state.result);
                state.tag = type.tag;
                if (state.anchor !== null) {
                  state.anchorMap[state.anchor] = state.result;
                }
                break;
              }
            }
          } else if (
            _hasOwnProperty.call(
              state.typeMap[state.kind || "fallback"],
              state.tag,
            )
          ) {
            type = state.typeMap[state.kind || "fallback"][state.tag];
            if (state.result !== null && type.kind !== state.kind) {
              throwError(
                state,
                "unacceptable node kind for !<" +
                  state.tag +
                  '> tag; it should be "' +
                  type.kind +
                  '", not "' +
                  state.kind +
                  '"',
              );
            }
            if (!type.resolve(state.result)) {
              throwError(
                state,
                "cannot resolve a node with !<" + state.tag + "> explicit tag",
              );
            } else {
              state.result = type.construct(state.result);
              if (state.anchor !== null) {
                state.anchorMap[state.anchor] = state.result;
              }
            }
          } else {
            throwError(state, "unknown tag !<" + state.tag + ">");
          }
        }
        if (state.listener !== null) {
          state.listener("close", state);
        }
        return state.tag !== null || state.anchor !== null || hasContent;
      }
      __name(composeNode, "composeNode");
      function readDocument(state) {
        var documentStart = state.position,
          _position,
          directiveName,
          directiveArgs,
          hasDirectives = false,
          ch;
        state.version = null;
        state.checkLineBreaks = state.legacy;
        state.tagMap = {};
        state.anchorMap = {};
        while ((ch = state.input.charCodeAt(state.position)) !== 0) {
          skipSeparationSpace(state, true, -1);
          ch = state.input.charCodeAt(state.position);
          if (state.lineIndent > 0 || ch !== 37) {
            break;
          }
          hasDirectives = true;
          ch = state.input.charCodeAt(++state.position);
          _position = state.position;
          while (ch !== 0 && !is_WS_OR_EOL(ch)) {
            ch = state.input.charCodeAt(++state.position);
          }
          directiveName = state.input.slice(_position, state.position);
          directiveArgs = [];
          if (directiveName.length < 1) {
            throwError(
              state,
              "directive name must not be less than one character in length",
            );
          }
          while (ch !== 0) {
            while (is_WHITE_SPACE(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            if (ch === 35) {
              do {
                ch = state.input.charCodeAt(++state.position);
              } while (ch !== 0 && !is_EOL(ch));
              break;
            }
            if (is_EOL(ch)) break;
            _position = state.position;
            while (ch !== 0 && !is_WS_OR_EOL(ch)) {
              ch = state.input.charCodeAt(++state.position);
            }
            directiveArgs.push(state.input.slice(_position, state.position));
          }
          if (ch !== 0) readLineBreak(state);
          if (_hasOwnProperty.call(directiveHandlers, directiveName)) {
            directiveHandlers[directiveName](
              state,
              directiveName,
              directiveArgs,
            );
          } else {
            throwWarning(
              state,
              'unknown document directive "' + directiveName + '"',
            );
          }
        }
        skipSeparationSpace(state, true, -1);
        if (
          state.lineIndent === 0 &&
          state.input.charCodeAt(state.position) === 45 &&
          state.input.charCodeAt(state.position + 1) === 45 &&
          state.input.charCodeAt(state.position + 2) === 45
        ) {
          state.position += 3;
          skipSeparationSpace(state, true, -1);
        } else if (hasDirectives) {
          throwError(state, "directives end mark is expected");
        }
        composeNode(
          state,
          state.lineIndent - 1,
          CONTEXT_BLOCK_OUT,
          false,
          true,
        );
        skipSeparationSpace(state, true, -1);
        if (
          state.checkLineBreaks &&
          PATTERN_NON_ASCII_LINE_BREAKS.test(
            state.input.slice(documentStart, state.position),
          )
        ) {
          throwWarning(
            state,
            "non-ASCII line breaks are interpreted as content",
          );
        }
        state.documents.push(state.result);
        if (
          state.position === state.lineStart &&
          testDocumentSeparator(state)
        ) {
          if (state.input.charCodeAt(state.position) === 46) {
            state.position += 3;
            skipSeparationSpace(state, true, -1);
          }
          return;
        }
        if (state.position < state.length - 1) {
          throwError(
            state,
            "end of the stream or a document separator is expected",
          );
        } else {
          return;
        }
      }
      __name(readDocument, "readDocument");
      function loadDocuments(input, options) {
        input = String(input);
        options = options || {};
        if (input.length !== 0) {
          if (
            input.charCodeAt(input.length - 1) !== 10 &&
            input.charCodeAt(input.length - 1) !== 13
          ) {
            input += "\n";
          }
          if (input.charCodeAt(0) === 65279) {
            input = input.slice(1);
          }
        }
        var state = new State(input, options);
        var nullpos = input.indexOf("\0");
        if (nullpos !== -1) {
          state.position = nullpos;
          throwError(state, "null byte is not allowed in input");
        }
        state.input += "\0";
        while (state.input.charCodeAt(state.position) === 32) {
          state.lineIndent += 1;
          state.position += 1;
        }
        while (state.position < state.length - 1) {
          readDocument(state);
        }
        return state.documents;
      }
      __name(loadDocuments, "loadDocuments");
      function loadAll(input, iterator, options) {
        if (
          iterator !== null &&
          typeof iterator === "object" &&
          typeof options === "undefined"
        ) {
          options = iterator;
          iterator = null;
        }
        var documents = loadDocuments(input, options);
        if (typeof iterator !== "function") {
          return documents;
        }
        for (
          var index2 = 0, length = documents.length;
          index2 < length;
          index2 += 1
        ) {
          iterator(documents[index2]);
        }
      }
      __name(loadAll, "loadAll");
      function load(input, options) {
        var documents = loadDocuments(input, options);
        if (documents.length === 0) {
          return void 0;
        } else if (documents.length === 1) {
          return documents[0];
        }
        throw new YAMLException(
          "expected a single document in the stream, but found more",
        );
      }
      __name(load, "load");
      function safeLoadAll(input, iterator, options) {
        if (
          typeof iterator === "object" &&
          iterator !== null &&
          typeof options === "undefined"
        ) {
          options = iterator;
          iterator = null;
        }
        return loadAll(
          input,
          iterator,
          common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options),
        );
      }
      __name(safeLoadAll, "safeLoadAll");
      function safeLoad(input, options) {
        return load(
          input,
          common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options),
        );
      }
      __name(safeLoad, "safeLoad");
      module.exports.loadAll = loadAll;
      module.exports.load = load;
      module.exports.safeLoadAll = safeLoadAll;
      module.exports.safeLoad = safeLoad;
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/dumper.js
  var require_dumper2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml/dumper.js"(
      exports,
      module,
    ) {
      "use strict";
      var common = require_common4();
      var YAMLException = require_exception2();
      var DEFAULT_FULL_SCHEMA = require_default_full();
      var DEFAULT_SAFE_SCHEMA = require_default_safe();
      var _toString = Object.prototype.toString;
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var CHAR_TAB = 9;
      var CHAR_LINE_FEED = 10;
      var CHAR_CARRIAGE_RETURN = 13;
      var CHAR_SPACE = 32;
      var CHAR_EXCLAMATION = 33;
      var CHAR_DOUBLE_QUOTE = 34;
      var CHAR_SHARP = 35;
      var CHAR_PERCENT = 37;
      var CHAR_AMPERSAND = 38;
      var CHAR_SINGLE_QUOTE = 39;
      var CHAR_ASTERISK = 42;
      var CHAR_COMMA = 44;
      var CHAR_MINUS = 45;
      var CHAR_COLON = 58;
      var CHAR_EQUALS = 61;
      var CHAR_GREATER_THAN = 62;
      var CHAR_QUESTION = 63;
      var CHAR_COMMERCIAL_AT = 64;
      var CHAR_LEFT_SQUARE_BRACKET = 91;
      var CHAR_RIGHT_SQUARE_BRACKET = 93;
      var CHAR_GRAVE_ACCENT = 96;
      var CHAR_LEFT_CURLY_BRACKET = 123;
      var CHAR_VERTICAL_LINE = 124;
      var CHAR_RIGHT_CURLY_BRACKET = 125;
      var ESCAPE_SEQUENCES = {};
      ESCAPE_SEQUENCES[0] = "\\0";
      ESCAPE_SEQUENCES[7] = "\\a";
      ESCAPE_SEQUENCES[8] = "\\b";
      ESCAPE_SEQUENCES[9] = "\\t";
      ESCAPE_SEQUENCES[10] = "\\n";
      ESCAPE_SEQUENCES[11] = "\\v";
      ESCAPE_SEQUENCES[12] = "\\f";
      ESCAPE_SEQUENCES[13] = "\\r";
      ESCAPE_SEQUENCES[27] = "\\e";
      ESCAPE_SEQUENCES[34] = '\\"';
      ESCAPE_SEQUENCES[92] = "\\\\";
      ESCAPE_SEQUENCES[133] = "\\N";
      ESCAPE_SEQUENCES[160] = "\\_";
      ESCAPE_SEQUENCES[8232] = "\\L";
      ESCAPE_SEQUENCES[8233] = "\\P";
      var DEPRECATED_BOOLEANS_SYNTAX = [
        "y",
        "Y",
        "yes",
        "Yes",
        "YES",
        "on",
        "On",
        "ON",
        "n",
        "N",
        "no",
        "No",
        "NO",
        "off",
        "Off",
        "OFF",
      ];
      function compileStyleMap(schema, map4) {
        var result, keys, index2, length, tag, style, type;
        if (map4 === null) return {};
        result = {};
        keys = Object.keys(map4);
        for (index2 = 0, length = keys.length; index2 < length; index2 += 1) {
          tag = keys[index2];
          style = String(map4[tag]);
          if (tag.slice(0, 2) === "!!") {
            tag = "tag:yaml.org,2002:" + tag.slice(2);
          }
          type = schema.compiledTypeMap["fallback"][tag];
          if (type && _hasOwnProperty.call(type.styleAliases, style)) {
            style = type.styleAliases[style];
          }
          result[tag] = style;
        }
        return result;
      }
      __name(compileStyleMap, "compileStyleMap");
      function encodeHex(character) {
        var string3, handle2, length;
        string3 = character.toString(16).toUpperCase();
        if (character <= 255) {
          handle2 = "x";
          length = 2;
        } else if (character <= 65535) {
          handle2 = "u";
          length = 4;
        } else if (character <= 4294967295) {
          handle2 = "U";
          length = 8;
        } else {
          throw new YAMLException(
            "code point within a string may not be greater than 0xFFFFFFFF",
          );
        }
        return (
          "\\" + handle2 + common.repeat("0", length - string3.length) + string3
        );
      }
      __name(encodeHex, "encodeHex");
      function State(options) {
        this.schema = options["schema"] || DEFAULT_FULL_SCHEMA;
        this.indent = Math.max(1, options["indent"] || 2);
        this.noArrayIndent = options["noArrayIndent"] || false;
        this.skipInvalid = options["skipInvalid"] || false;
        this.flowLevel = common.isNothing(options["flowLevel"])
          ? -1
          : options["flowLevel"];
        this.styleMap = compileStyleMap(this.schema, options["styles"] || null);
        this.sortKeys = options["sortKeys"] || false;
        this.lineWidth = options["lineWidth"] || 80;
        this.noRefs = options["noRefs"] || false;
        this.noCompatMode = options["noCompatMode"] || false;
        this.condenseFlow = options["condenseFlow"] || false;
        this.implicitTypes = this.schema.compiledImplicit;
        this.explicitTypes = this.schema.compiledExplicit;
        this.tag = null;
        this.result = "";
        this.duplicates = [];
        this.usedDuplicates = null;
      }
      __name(State, "State");
      function indentString(string3, spaces) {
        var ind = common.repeat(" ", spaces),
          position2 = 0,
          next = -1,
          result = "",
          line,
          length = string3.length;
        while (position2 < length) {
          next = string3.indexOf("\n", position2);
          if (next === -1) {
            line = string3.slice(position2);
            position2 = length;
          } else {
            line = string3.slice(position2, next + 1);
            position2 = next + 1;
          }
          if (line.length && line !== "\n") result += ind;
          result += line;
        }
        return result;
      }
      __name(indentString, "indentString");
      function generateNextLine(state, level) {
        return "\n" + common.repeat(" ", state.indent * level);
      }
      __name(generateNextLine, "generateNextLine");
      function testImplicitResolving(state, str) {
        var index2, length, type;
        for (
          index2 = 0, length = state.implicitTypes.length;
          index2 < length;
          index2 += 1
        ) {
          type = state.implicitTypes[index2];
          if (type.resolve(str)) {
            return true;
          }
        }
        return false;
      }
      __name(testImplicitResolving, "testImplicitResolving");
      function isWhitespace(c) {
        return c === CHAR_SPACE || c === CHAR_TAB;
      }
      __name(isWhitespace, "isWhitespace");
      function isPrintable(c) {
        return (
          (32 <= c && c <= 126) ||
          (161 <= c && c <= 55295 && c !== 8232 && c !== 8233) ||
          (57344 <= c && c <= 65533 && c !== 65279) ||
          (65536 <= c && c <= 1114111)
        );
      }
      __name(isPrintable, "isPrintable");
      function isNsChar(c) {
        return (
          isPrintable(c) &&
          !isWhitespace(c) &&
          c !== 65279 &&
          c !== CHAR_CARRIAGE_RETURN &&
          c !== CHAR_LINE_FEED
        );
      }
      __name(isNsChar, "isNsChar");
      function isPlainSafe(c, prev) {
        return (
          isPrintable(c) &&
          c !== 65279 &&
          c !== CHAR_COMMA &&
          c !== CHAR_LEFT_SQUARE_BRACKET &&
          c !== CHAR_RIGHT_SQUARE_BRACKET &&
          c !== CHAR_LEFT_CURLY_BRACKET &&
          c !== CHAR_RIGHT_CURLY_BRACKET &&
          c !== CHAR_COLON &&
          (c !== CHAR_SHARP || (prev && isNsChar(prev)))
        );
      }
      __name(isPlainSafe, "isPlainSafe");
      function isPlainSafeFirst(c) {
        return (
          isPrintable(c) &&
          c !== 65279 &&
          !isWhitespace(c) &&
          c !== CHAR_MINUS &&
          c !== CHAR_QUESTION &&
          c !== CHAR_COLON &&
          c !== CHAR_COMMA &&
          c !== CHAR_LEFT_SQUARE_BRACKET &&
          c !== CHAR_RIGHT_SQUARE_BRACKET &&
          c !== CHAR_LEFT_CURLY_BRACKET &&
          c !== CHAR_RIGHT_CURLY_BRACKET &&
          c !== CHAR_SHARP &&
          c !== CHAR_AMPERSAND &&
          c !== CHAR_ASTERISK &&
          c !== CHAR_EXCLAMATION &&
          c !== CHAR_VERTICAL_LINE &&
          c !== CHAR_EQUALS &&
          c !== CHAR_GREATER_THAN &&
          c !== CHAR_SINGLE_QUOTE &&
          c !== CHAR_DOUBLE_QUOTE &&
          c !== CHAR_PERCENT &&
          c !== CHAR_COMMERCIAL_AT &&
          c !== CHAR_GRAVE_ACCENT
        );
      }
      __name(isPlainSafeFirst, "isPlainSafeFirst");
      function needIndentIndicator(string3) {
        var leadingSpaceRe = /^\n* /;
        return leadingSpaceRe.test(string3);
      }
      __name(needIndentIndicator, "needIndentIndicator");
      var STYLE_PLAIN = 1;
      var STYLE_SINGLE = 2;
      var STYLE_LITERAL = 3;
      var STYLE_FOLDED = 4;
      var STYLE_DOUBLE = 5;
      function chooseScalarStyle(
        string3,
        singleLineOnly,
        indentPerLevel,
        lineWidth,
        testAmbiguousType,
      ) {
        var i;
        var char, prev_char;
        var hasLineBreak = false;
        var hasFoldableLine = false;
        var shouldTrackWidth = lineWidth !== -1;
        var previousLineBreak = -1;
        var plain =
          isPlainSafeFirst(string3.charCodeAt(0)) &&
          !isWhitespace(string3.charCodeAt(string3.length - 1));
        if (singleLineOnly) {
          for (i = 0; i < string3.length; i++) {
            char = string3.charCodeAt(i);
            if (!isPrintable(char)) {
              return STYLE_DOUBLE;
            }
            prev_char = i > 0 ? string3.charCodeAt(i - 1) : null;
            plain = plain && isPlainSafe(char, prev_char);
          }
        } else {
          for (i = 0; i < string3.length; i++) {
            char = string3.charCodeAt(i);
            if (char === CHAR_LINE_FEED) {
              hasLineBreak = true;
              if (shouldTrackWidth) {
                hasFoldableLine =
                  hasFoldableLine || // Foldable line = too long, and not more-indented.
                  (i - previousLineBreak - 1 > lineWidth &&
                    string3[previousLineBreak + 1] !== " ");
                previousLineBreak = i;
              }
            } else if (!isPrintable(char)) {
              return STYLE_DOUBLE;
            }
            prev_char = i > 0 ? string3.charCodeAt(i - 1) : null;
            plain = plain && isPlainSafe(char, prev_char);
          }
          hasFoldableLine =
            hasFoldableLine ||
            (shouldTrackWidth &&
              i - previousLineBreak - 1 > lineWidth &&
              string3[previousLineBreak + 1] !== " ");
        }
        if (!hasLineBreak && !hasFoldableLine) {
          return plain && !testAmbiguousType(string3)
            ? STYLE_PLAIN
            : STYLE_SINGLE;
        }
        if (indentPerLevel > 9 && needIndentIndicator(string3)) {
          return STYLE_DOUBLE;
        }
        return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;
      }
      __name(chooseScalarStyle, "chooseScalarStyle");
      function writeScalar(state, string3, level, iskey) {
        state.dump = (function () {
          if (string3.length === 0) {
            return "''";
          }
          if (
            !state.noCompatMode &&
            DEPRECATED_BOOLEANS_SYNTAX.indexOf(string3) !== -1
          ) {
            return "'" + string3 + "'";
          }
          var indent = state.indent * Math.max(1, level);
          var lineWidth =
            state.lineWidth === -1
              ? -1
              : Math.max(
                  Math.min(state.lineWidth, 40),
                  state.lineWidth - indent,
                );
          var singleLineOnly =
            iskey || (state.flowLevel > -1 && level >= state.flowLevel);
          function testAmbiguity(string4) {
            return testImplicitResolving(state, string4);
          }
          __name(testAmbiguity, "testAmbiguity");
          switch (
            chooseScalarStyle(
              string3,
              singleLineOnly,
              state.indent,
              lineWidth,
              testAmbiguity,
            )
          ) {
            case STYLE_PLAIN:
              return string3;
            case STYLE_SINGLE:
              return "'" + string3.replace(/'/g, "''") + "'";
            case STYLE_LITERAL:
              return (
                "|" +
                blockHeader(string3, state.indent) +
                dropEndingNewline(indentString(string3, indent))
              );
            case STYLE_FOLDED:
              return (
                ">" +
                blockHeader(string3, state.indent) +
                dropEndingNewline(
                  indentString(foldString(string3, lineWidth), indent),
                )
              );
            case STYLE_DOUBLE:
              return '"' + escapeString(string3, lineWidth) + '"';
            default:
              throw new YAMLException("impossible error: invalid scalar style");
          }
        })();
      }
      __name(writeScalar, "writeScalar");
      function blockHeader(string3, indentPerLevel) {
        var indentIndicator = needIndentIndicator(string3)
          ? String(indentPerLevel)
          : "";
        var clip = string3[string3.length - 1] === "\n";
        var keep =
          clip && (string3[string3.length - 2] === "\n" || string3 === "\n");
        var chomp = keep ? "+" : clip ? "" : "-";
        return indentIndicator + chomp + "\n";
      }
      __name(blockHeader, "blockHeader");
      function dropEndingNewline(string3) {
        return string3[string3.length - 1] === "\n"
          ? string3.slice(0, -1)
          : string3;
      }
      __name(dropEndingNewline, "dropEndingNewline");
      function foldString(string3, width) {
        var lineRe = /(\n+)([^\n]*)/g;
        var result = (function () {
          var nextLF = string3.indexOf("\n");
          nextLF = nextLF !== -1 ? nextLF : string3.length;
          lineRe.lastIndex = nextLF;
          return foldLine(string3.slice(0, nextLF), width);
        })();
        var prevMoreIndented = string3[0] === "\n" || string3[0] === " ";
        var moreIndented;
        var match;
        while ((match = lineRe.exec(string3))) {
          var prefix2 = match[1],
            line = match[2];
          moreIndented = line[0] === " ";
          result +=
            prefix2 +
            (!prevMoreIndented && !moreIndented && line !== "" ? "\n" : "") +
            foldLine(line, width);
          prevMoreIndented = moreIndented;
        }
        return result;
      }
      __name(foldString, "foldString");
      function foldLine(line, width) {
        if (line === "" || line[0] === " ") return line;
        var breakRe = / [^ ]/g;
        var match;
        var start = 0,
          end,
          curr = 0,
          next = 0;
        var result = "";
        while ((match = breakRe.exec(line))) {
          next = match.index;
          if (next - start > width) {
            end = curr > start ? curr : next;
            result += "\n" + line.slice(start, end);
            start = end + 1;
          }
          curr = next;
        }
        result += "\n";
        if (line.length - start > width && curr > start) {
          result += line.slice(start, curr) + "\n" + line.slice(curr + 1);
        } else {
          result += line.slice(start);
        }
        return result.slice(1);
      }
      __name(foldLine, "foldLine");
      function escapeString(string3) {
        var result = "";
        var char, nextChar;
        var escapeSeq;
        for (var i = 0; i < string3.length; i++) {
          char = string3.charCodeAt(i);
          if (char >= 55296 && char <= 56319) {
            nextChar = string3.charCodeAt(i + 1);
            if (nextChar >= 56320 && nextChar <= 57343) {
              result += encodeHex(
                (char - 55296) * 1024 + nextChar - 56320 + 65536,
              );
              i++;
              continue;
            }
          }
          escapeSeq = ESCAPE_SEQUENCES[char];
          result +=
            !escapeSeq && isPrintable(char)
              ? string3[i]
              : escapeSeq || encodeHex(char);
        }
        return result;
      }
      __name(escapeString, "escapeString");
      function writeFlowSequence(state, level, object) {
        var _result = "",
          _tag = state.tag,
          index2,
          length;
        for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
          if (writeNode(state, level, object[index2], false, false)) {
            if (index2 !== 0) _result += "," + (!state.condenseFlow ? " " : "");
            _result += state.dump;
          }
        }
        state.tag = _tag;
        state.dump = "[" + _result + "]";
      }
      __name(writeFlowSequence, "writeFlowSequence");
      function writeBlockSequence(state, level, object, compact) {
        var _result = "",
          _tag = state.tag,
          index2,
          length;
        for (index2 = 0, length = object.length; index2 < length; index2 += 1) {
          if (writeNode(state, level + 1, object[index2], true, true)) {
            if (!compact || index2 !== 0) {
              _result += generateNextLine(state, level);
            }
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
              _result += "-";
            } else {
              _result += "- ";
            }
            _result += state.dump;
          }
        }
        state.tag = _tag;
        state.dump = _result || "[]";
      }
      __name(writeBlockSequence, "writeBlockSequence");
      function writeFlowMapping(state, level, object) {
        var _result = "",
          _tag = state.tag,
          objectKeyList = Object.keys(object),
          index2,
          length,
          objectKey,
          objectValue,
          pairBuffer;
        for (
          index2 = 0, length = objectKeyList.length;
          index2 < length;
          index2 += 1
        ) {
          pairBuffer = "";
          if (index2 !== 0) pairBuffer += ", ";
          if (state.condenseFlow) pairBuffer += '"';
          objectKey = objectKeyList[index2];
          objectValue = object[objectKey];
          if (!writeNode(state, level, objectKey, false, false)) {
            continue;
          }
          if (state.dump.length > 1024) pairBuffer += "? ";
          pairBuffer +=
            state.dump +
            (state.condenseFlow ? '"' : "") +
            ":" +
            (state.condenseFlow ? "" : " ");
          if (!writeNode(state, level, objectValue, false, false)) {
            continue;
          }
          pairBuffer += state.dump;
          _result += pairBuffer;
        }
        state.tag = _tag;
        state.dump = "{" + _result + "}";
      }
      __name(writeFlowMapping, "writeFlowMapping");
      function writeBlockMapping(state, level, object, compact) {
        var _result = "",
          _tag = state.tag,
          objectKeyList = Object.keys(object),
          index2,
          length,
          objectKey,
          objectValue,
          explicitPair,
          pairBuffer;
        if (state.sortKeys === true) {
          objectKeyList.sort();
        } else if (typeof state.sortKeys === "function") {
          objectKeyList.sort(state.sortKeys);
        } else if (state.sortKeys) {
          throw new YAMLException("sortKeys must be a boolean or a function");
        }
        for (
          index2 = 0, length = objectKeyList.length;
          index2 < length;
          index2 += 1
        ) {
          pairBuffer = "";
          if (!compact || index2 !== 0) {
            pairBuffer += generateNextLine(state, level);
          }
          objectKey = objectKeyList[index2];
          objectValue = object[objectKey];
          if (!writeNode(state, level + 1, objectKey, true, true, true)) {
            continue;
          }
          explicitPair =
            (state.tag !== null && state.tag !== "?") ||
            (state.dump && state.dump.length > 1024);
          if (explicitPair) {
            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
              pairBuffer += "?";
            } else {
              pairBuffer += "? ";
            }
          }
          pairBuffer += state.dump;
          if (explicitPair) {
            pairBuffer += generateNextLine(state, level);
          }
          if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {
            continue;
          }
          if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {
            pairBuffer += ":";
          } else {
            pairBuffer += ": ";
          }
          pairBuffer += state.dump;
          _result += pairBuffer;
        }
        state.tag = _tag;
        state.dump = _result || "{}";
      }
      __name(writeBlockMapping, "writeBlockMapping");
      function detectType(state, object, explicit) {
        var _result, typeList, index2, length, type, style;
        typeList = explicit ? state.explicitTypes : state.implicitTypes;
        for (
          index2 = 0, length = typeList.length;
          index2 < length;
          index2 += 1
        ) {
          type = typeList[index2];
          if (
            (type.instanceOf || type.predicate) &&
            (!type.instanceOf ||
              (typeof object === "object" &&
                object instanceof type.instanceOf)) &&
            (!type.predicate || type.predicate(object))
          ) {
            state.tag = explicit ? type.tag : "?";
            if (type.represent) {
              style = state.styleMap[type.tag] || type.defaultStyle;
              if (_toString.call(type.represent) === "[object Function]") {
                _result = type.represent(object, style);
              } else if (_hasOwnProperty.call(type.represent, style)) {
                _result = type.represent[style](object, style);
              } else {
                throw new YAMLException(
                  "!<" +
                    type.tag +
                    '> tag resolver accepts not "' +
                    style +
                    '" style',
                );
              }
              state.dump = _result;
            }
            return true;
          }
        }
        return false;
      }
      __name(detectType, "detectType");
      function writeNode(state, level, object, block, compact, iskey) {
        state.tag = null;
        state.dump = object;
        if (!detectType(state, object, false)) {
          detectType(state, object, true);
        }
        var type = _toString.call(state.dump);
        if (block) {
          block = state.flowLevel < 0 || state.flowLevel > level;
        }
        var objectOrArray =
            type === "[object Object]" || type === "[object Array]",
          duplicateIndex,
          duplicate;
        if (objectOrArray) {
          duplicateIndex = state.duplicates.indexOf(object);
          duplicate = duplicateIndex !== -1;
        }
        if (
          (state.tag !== null && state.tag !== "?") ||
          duplicate ||
          (state.indent !== 2 && level > 0)
        ) {
          compact = false;
        }
        if (duplicate && state.usedDuplicates[duplicateIndex]) {
          state.dump = "*ref_" + duplicateIndex;
        } else {
          if (
            objectOrArray &&
            duplicate &&
            !state.usedDuplicates[duplicateIndex]
          ) {
            state.usedDuplicates[duplicateIndex] = true;
          }
          if (type === "[object Object]") {
            if (block && Object.keys(state.dump).length !== 0) {
              writeBlockMapping(state, level, state.dump, compact);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + state.dump;
              }
            } else {
              writeFlowMapping(state, level, state.dump);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + " " + state.dump;
              }
            }
          } else if (type === "[object Array]") {
            var arrayLevel =
              state.noArrayIndent && level > 0 ? level - 1 : level;
            if (block && state.dump.length !== 0) {
              writeBlockSequence(state, arrayLevel, state.dump, compact);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + state.dump;
              }
            } else {
              writeFlowSequence(state, arrayLevel, state.dump);
              if (duplicate) {
                state.dump = "&ref_" + duplicateIndex + " " + state.dump;
              }
            }
          } else if (type === "[object String]") {
            if (state.tag !== "?") {
              writeScalar(state, state.dump, level, iskey);
            }
          } else {
            if (state.skipInvalid) return false;
            throw new YAMLException(
              "unacceptable kind of an object to dump " + type,
            );
          }
          if (state.tag !== null && state.tag !== "?") {
            state.dump = "!<" + state.tag + "> " + state.dump;
          }
        }
        return true;
      }
      __name(writeNode, "writeNode");
      function getDuplicateReferences(object, state) {
        var objects = [],
          duplicatesIndexes = [],
          index2,
          length;
        inspectNode(object, objects, duplicatesIndexes);
        for (
          index2 = 0, length = duplicatesIndexes.length;
          index2 < length;
          index2 += 1
        ) {
          state.duplicates.push(objects[duplicatesIndexes[index2]]);
        }
        state.usedDuplicates = new Array(length);
      }
      __name(getDuplicateReferences, "getDuplicateReferences");
      function inspectNode(object, objects, duplicatesIndexes) {
        var objectKeyList, index2, length;
        if (object !== null && typeof object === "object") {
          index2 = objects.indexOf(object);
          if (index2 !== -1) {
            if (duplicatesIndexes.indexOf(index2) === -1) {
              duplicatesIndexes.push(index2);
            }
          } else {
            objects.push(object);
            if (Array.isArray(object)) {
              for (
                index2 = 0, length = object.length;
                index2 < length;
                index2 += 1
              ) {
                inspectNode(object[index2], objects, duplicatesIndexes);
              }
            } else {
              objectKeyList = Object.keys(object);
              for (
                index2 = 0, length = objectKeyList.length;
                index2 < length;
                index2 += 1
              ) {
                inspectNode(
                  object[objectKeyList[index2]],
                  objects,
                  duplicatesIndexes,
                );
              }
            }
          }
        }
      }
      __name(inspectNode, "inspectNode");
      function dump(input, options) {
        options = options || {};
        var state = new State(options);
        if (!state.noRefs) getDuplicateReferences(input, state);
        if (writeNode(state, 0, input, true, true)) return state.dump + "\n";
        return "";
      }
      __name(dump, "dump");
      function safeDump(input, options) {
        return dump(
          input,
          common.extend({ schema: DEFAULT_SAFE_SCHEMA }, options),
        );
      }
      __name(safeDump, "safeDump");
      module.exports.dump = dump;
      module.exports.safeDump = safeDump;
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml.js
  var require_js_yaml2 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/lib/js-yaml.js"(
      exports,
      module,
    ) {
      "use strict";
      var loader = require_loader2();
      var dumper = require_dumper2();
      function deprecated(name) {
        return function () {
          throw new Error(
            "Function " + name + " is deprecated and cannot be used.",
          );
        };
      }
      __name(deprecated, "deprecated");
      module.exports.Type = require_type2();
      module.exports.Schema = require_schema2();
      module.exports.FAILSAFE_SCHEMA = require_failsafe2();
      module.exports.JSON_SCHEMA = require_json5();
      module.exports.CORE_SCHEMA = require_core3();
      module.exports.DEFAULT_SAFE_SCHEMA = require_default_safe();
      module.exports.DEFAULT_FULL_SCHEMA = require_default_full();
      module.exports.load = loader.load;
      module.exports.loadAll = loader.loadAll;
      module.exports.safeLoad = loader.safeLoad;
      module.exports.safeLoadAll = loader.safeLoadAll;
      module.exports.dump = dumper.dump;
      module.exports.safeDump = dumper.safeDump;
      module.exports.YAMLException = require_exception2();
      module.exports.MINIMAL_SCHEMA = require_failsafe2();
      module.exports.SAFE_SCHEMA = require_default_safe();
      module.exports.DEFAULT_SCHEMA = require_default_full();
      module.exports.scan = deprecated("scan");
      module.exports.parse = deprecated("parse");
      module.exports.compose = deprecated("compose");
      module.exports.addConstructor = deprecated("addConstructor");
    },
  });

  // node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/index.js
  var require_js_yaml3 = __commonJS({
    "node_modules/.pnpm/js-yaml@3.14.1/node_modules/js-yaml/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var yaml2 = require_js_yaml2();
      module.exports = yaml2;
    },
  });

  // node_modules/.pnpm/read-yaml-file@1.1.0/node_modules/read-yaml-file/index.js
  var require_read_yaml_file = __commonJS({
    "node_modules/.pnpm/read-yaml-file@1.1.0/node_modules/read-yaml-file/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = require_graceful_fs();
      var pify = require_pify();
      var stripBom = require_strip_bom();
      var yaml2 = require_js_yaml3();
      var parse3 = /* @__PURE__ */ __name(
        (data) => yaml2.safeLoad(stripBom(data)),
        "parse",
      );
      var readYamlFile = /* @__PURE__ */ __name(
        (fp) => pify(fs6.readFile)(fp, "utf8").then((data) => parse3(data)),
        "readYamlFile",
      );
      module.exports = readYamlFile;
      module.exports.default = readYamlFile;
      module.exports.sync = (fp) => parse3(fs6.readFileSync(fp, "utf8"));
    },
  });

  // node_modules/.pnpm/p-try@2.2.0/node_modules/p-try/index.js
  var require_p_try = __commonJS({
    "node_modules/.pnpm/p-try@2.2.0/node_modules/p-try/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var pTry = /* @__PURE__ */ __name(
        (fn, ...arguments_) =>
          new Promise((resolve) => {
            resolve(fn(...arguments_));
          }),
        "pTry",
      );
      module.exports = pTry;
      module.exports.default = pTry;
    },
  });

  // node_modules/.pnpm/p-limit@2.3.0/node_modules/p-limit/index.js
  var require_p_limit = __commonJS({
    "node_modules/.pnpm/p-limit@2.3.0/node_modules/p-limit/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var pTry = require_p_try();
      var pLimit = /* @__PURE__ */ __name((concurrency) => {
        if (
          !(
            (Number.isInteger(concurrency) || concurrency === Infinity) &&
            concurrency > 0
          )
        ) {
          return Promise.reject(
            new TypeError(
              "Expected `concurrency` to be a number from 1 and up",
            ),
          );
        }
        const queue = [];
        let activeCount = 0;
        const next = /* @__PURE__ */ __name(() => {
          activeCount--;
          if (queue.length > 0) {
            queue.shift()();
          }
        }, "next");
        const run = /* @__PURE__ */ __name((fn, resolve, ...args) => {
          activeCount++;
          const result = pTry(fn, ...args);
          resolve(result);
          result.then(next, next);
        }, "run");
        const enqueue = /* @__PURE__ */ __name((fn, resolve, ...args) => {
          if (activeCount < concurrency) {
            run(fn, resolve, ...args);
          } else {
            queue.push(run.bind(null, fn, resolve, ...args));
          }
        }, "enqueue");
        const generator = /* @__PURE__ */ __name(
          (fn, ...args) =>
            new Promise((resolve) => enqueue(fn, resolve, ...args)),
          "generator",
        );
        Object.defineProperties(generator, {
          activeCount: {
            get: /* @__PURE__ */ __name(() => activeCount, "get"),
          },
          pendingCount: {
            get: /* @__PURE__ */ __name(() => queue.length, "get"),
          },
          clearQueue: {
            value: /* @__PURE__ */ __name(() => {
              queue.length = 0;
            }, "value"),
          },
        });
        return generator;
      }, "pLimit");
      module.exports = pLimit;
      module.exports.default = pLimit;
    },
  });

  // node_modules/.pnpm/p-locate@4.1.0/node_modules/p-locate/index.js
  var require_p_locate = __commonJS({
    "node_modules/.pnpm/p-locate@4.1.0/node_modules/p-locate/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var pLimit = require_p_limit();
      var EndError = class extends Error {
        static {
          __name(this, "EndError");
        }
        constructor(value) {
          super();
          this.value = value;
        }
      };
      var testElement = /* @__PURE__ */ __name(
        async (element, tester) => tester(await element),
        "testElement",
      );
      var finder = /* @__PURE__ */ __name(async (element) => {
        const values = await Promise.all(element);
        if (values[1] === true) {
          throw new EndError(values[0]);
        }
        return false;
      }, "finder");
      var pLocate = /* @__PURE__ */ __name(
        async (iterable, tester, options) => {
          options = {
            concurrency: Infinity,
            preserveOrder: true,
            ...options,
          };
          const limit = pLimit(options.concurrency);
          const items = [...iterable].map((element) => [
            element,
            limit(testElement, element, tester),
          ]);
          const checkLimit = pLimit(options.preserveOrder ? 1 : Infinity);
          try {
            await Promise.all(
              items.map((element) => checkLimit(finder, element)),
            );
          } catch (error) {
            if (error instanceof EndError) {
              return error.value;
            }
            throw error;
          }
        },
        "pLocate",
      );
      module.exports = pLocate;
      module.exports.default = pLocate;
    },
  });

  // node_modules/.pnpm/locate-path@5.0.0/node_modules/locate-path/index.js
  var require_locate_path = __commonJS({
    "node_modules/.pnpm/locate-path@5.0.0/node_modules/locate-path/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var fs6 = __require("fs");
      var { promisify } = __require("util");
      var pLocate = require_p_locate();
      var fsStat = promisify(fs6.stat);
      var fsLStat = promisify(fs6.lstat);
      var typeMappings = {
        directory: "isDirectory",
        file: "isFile",
      };
      function checkType({ type }) {
        if (type in typeMappings) {
          return;
        }
        throw new Error(`Invalid type specified: ${type}`);
      }
      __name(checkType, "checkType");
      var matchType = /* @__PURE__ */ __name(
        (type, stat) => type === void 0 || stat[typeMappings[type]](),
        "matchType",
      );
      module.exports = async (paths, options) => {
        options = {
          cwd: process.cwd(),
          type: "file",
          allowSymlinks: true,
          ...options,
        };
        checkType(options);
        const statFn = options.allowSymlinks ? fsStat : fsLStat;
        return pLocate(
          paths,
          async (path_) => {
            try {
              const stat = await statFn(path4.resolve(options.cwd, path_));
              return matchType(options.type, stat);
            } catch (_) {
              return false;
            }
          },
          options,
        );
      };
      module.exports.sync = (paths, options) => {
        options = {
          cwd: process.cwd(),
          allowSymlinks: true,
          type: "file",
          ...options,
        };
        checkType(options);
        const statFn = options.allowSymlinks ? fs6.statSync : fs6.lstatSync;
        for (const path_ of paths) {
          try {
            const stat = statFn(path4.resolve(options.cwd, path_));
            if (matchType(options.type, stat)) {
              return path_;
            }
          } catch (_) {}
        }
      };
    },
  });

  // node_modules/.pnpm/path-exists@4.0.0/node_modules/path-exists/index.js
  var require_path_exists4 = __commonJS({
    "node_modules/.pnpm/path-exists@4.0.0/node_modules/path-exists/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = __require("fs");
      var { promisify } = __require("util");
      var pAccess = promisify(fs6.access);
      module.exports = async (path4) => {
        try {
          await pAccess(path4);
          return true;
        } catch (_) {
          return false;
        }
      };
      module.exports.sync = (path4) => {
        try {
          fs6.accessSync(path4);
          return true;
        } catch (_) {
          return false;
        }
      };
    },
  });

  // node_modules/.pnpm/find-up@4.1.0/node_modules/find-up/index.js
  var require_find_up = __commonJS({
    "node_modules/.pnpm/find-up@4.1.0/node_modules/find-up/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var locatePath = require_locate_path();
      var pathExists = require_path_exists4();
      var stop = Symbol("findUp.stop");
      module.exports = async (name, options = {}) => {
        let directory = path4.resolve(options.cwd || "");
        const { root: root2 } = path4.parse(directory);
        const paths = [].concat(name);
        const runMatcher = /* @__PURE__ */ __name(async (locateOptions) => {
          if (typeof name !== "function") {
            return locatePath(paths, locateOptions);
          }
          const foundPath = await name(locateOptions.cwd);
          if (typeof foundPath === "string") {
            return locatePath([foundPath], locateOptions);
          }
          return foundPath;
        }, "runMatcher");
        while (true) {
          const foundPath = await runMatcher({ ...options, cwd: directory });
          if (foundPath === stop) {
            return;
          }
          if (foundPath) {
            return path4.resolve(directory, foundPath);
          }
          if (directory === root2) {
            return;
          }
          directory = path4.dirname(directory);
        }
      };
      module.exports.sync = (name, options = {}) => {
        let directory = path4.resolve(options.cwd || "");
        const { root: root2 } = path4.parse(directory);
        const paths = [].concat(name);
        const runMatcher = /* @__PURE__ */ __name((locateOptions) => {
          if (typeof name !== "function") {
            return locatePath.sync(paths, locateOptions);
          }
          const foundPath = name(locateOptions.cwd);
          if (typeof foundPath === "string") {
            return locatePath.sync([foundPath], locateOptions);
          }
          return foundPath;
        }, "runMatcher");
        while (true) {
          const foundPath = runMatcher({ ...options, cwd: directory });
          if (foundPath === stop) {
            return;
          }
          if (foundPath) {
            return path4.resolve(directory, foundPath);
          }
          if (directory === root2) {
            return;
          }
          directory = path4.dirname(directory);
        }
      };
      module.exports.exists = pathExists;
      module.exports.sync.exists = pathExists.sync;
      module.exports.stop = stop;
    },
  });

  // node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.prod.js
  var require_find_root_cjs_prod = __commonJS({
    "node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.prod.js"(
      exports,
    ) {
      "use strict";
      function _interopDefault(ex) {
        return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
      }
      __name(_interopDefault, "_interopDefault");
      Object.defineProperty(exports, "__esModule", {
        value: true,
      });
      var _regeneratorRuntime = _interopDefault(require_regenerator());
      var _asyncToGenerator = _interopDefault(require_asyncToGenerator());
      var _classCallCheck = _interopDefault(require_classCallCheck());
      var _possibleConstructorReturn = _interopDefault(
        require_possibleConstructorReturn(),
      );
      var _getPrototypeOf = _interopDefault(require_getPrototypeOf());
      var _inherits = _interopDefault(require_inherits());
      var _wrapNativeSuper = _interopDefault(require_wrapNativeSuper());
      var findUp = require_find_up();
      var findUp__default = _interopDefault(findUp);
      var path4 = _interopDefault(__require("path"));
      var fs6 = _interopDefault(require_lib4());
      var NoPkgJsonFound = (function (_Error) {
        function NoPkgJsonFound2(directory) {
          var _this;
          return (
            _classCallCheck(this, NoPkgJsonFound2),
            ((_this = _possibleConstructorReturn(
              this,
              _getPrototypeOf(NoPkgJsonFound2).call(
                this,
                "No package.json could be found upwards from the directory ".concat(
                  directory,
                ),
              ),
            )).directory = directory),
            _this
          );
        }
        __name(NoPkgJsonFound2, "NoPkgJsonFound");
        return _inherits(NoPkgJsonFound2, _Error), NoPkgJsonFound2;
      })(_wrapNativeSuper(Error));
      function hasWorkspacesConfiguredViaPkgJson(_x, _x2) {
        return _hasWorkspacesConfiguredViaPkgJson.apply(this, arguments);
      }
      __name(
        hasWorkspacesConfiguredViaPkgJson,
        "hasWorkspacesConfiguredViaPkgJson",
      );
      function _hasWorkspacesConfiguredViaPkgJson() {
        return (_hasWorkspacesConfiguredViaPkgJson = _asyncToGenerator(
          _regeneratorRuntime.mark(
            /* @__PURE__ */ __name(function _callee(
              directory,
              firstPkgJsonDirRef,
            ) {
              var pkgJson;
              return _regeneratorRuntime.wrap(
                function (_context) {
                  for (;;)
                    switch ((_context.prev = _context.next)) {
                      case 0:
                        return (
                          (_context.prev = 0),
                          (_context.next = 3),
                          fs6.readJson(path4.join(directory, "package.json"))
                        );
                      case 3:
                        if (
                          ((pkgJson = _context.sent),
                          void 0 === firstPkgJsonDirRef.current &&
                            (firstPkgJsonDirRef.current = directory),
                          !pkgJson.workspaces && !pkgJson.bolt)
                        ) {
                          _context.next = 7;
                          break;
                        }
                        return _context.abrupt("return", directory);
                      case 7:
                        _context.next = 13;
                        break;
                      case 9:
                        if (
                          ((_context.prev = 9),
                          (_context.t0 = _context.catch(0)),
                          "ENOENT" === _context.t0.code)
                        ) {
                          _context.next = 13;
                          break;
                        }
                        throw _context.t0;
                      case 13:
                      case "end":
                        return _context.stop();
                    }
                },
                _callee,
                null,
                [[0, 9]],
              );
            }, "_callee"),
          ),
        )).apply(this, arguments);
      }
      __name(
        _hasWorkspacesConfiguredViaPkgJson,
        "_hasWorkspacesConfiguredViaPkgJson",
      );
      function hasWorkspacesConfiguredViaLerna(_x3) {
        return _hasWorkspacesConfiguredViaLerna.apply(this, arguments);
      }
      __name(
        hasWorkspacesConfiguredViaLerna,
        "hasWorkspacesConfiguredViaLerna",
      );
      function _hasWorkspacesConfiguredViaLerna() {
        return (_hasWorkspacesConfiguredViaLerna = _asyncToGenerator(
          _regeneratorRuntime.mark(
            /* @__PURE__ */ __name(function _callee2(directory) {
              return _regeneratorRuntime.wrap(
                function (_context2) {
                  for (;;)
                    switch ((_context2.prev = _context2.next)) {
                      case 0:
                        return (
                          (_context2.prev = 0),
                          (_context2.next = 3),
                          fs6.readJson(path4.join(directory, "lerna.json"))
                        );
                      case 3:
                        if (true === _context2.sent.useWorkspaces) {
                          _context2.next = 6;
                          break;
                        }
                        return _context2.abrupt("return", directory);
                      case 6:
                        _context2.next = 12;
                        break;
                      case 8:
                        if (
                          ((_context2.prev = 8),
                          (_context2.t0 = _context2.catch(0)),
                          "ENOENT" === _context2.t0.code)
                        ) {
                          _context2.next = 12;
                          break;
                        }
                        throw _context2.t0;
                      case 12:
                      case "end":
                        return _context2.stop();
                    }
                },
                _callee2,
                null,
                [[0, 8]],
              );
            }, "_callee2"),
          ),
        )).apply(this, arguments);
      }
      __name(
        _hasWorkspacesConfiguredViaLerna,
        "_hasWorkspacesConfiguredViaLerna",
      );
      function hasWorkspacesConfiguredViaPnpm(_x4) {
        return _hasWorkspacesConfiguredViaPnpm.apply(this, arguments);
      }
      __name(hasWorkspacesConfiguredViaPnpm, "hasWorkspacesConfiguredViaPnpm");
      function _hasWorkspacesConfiguredViaPnpm() {
        return (_hasWorkspacesConfiguredViaPnpm = _asyncToGenerator(
          _regeneratorRuntime.mark(
            /* @__PURE__ */ __name(function _callee3(directory) {
              return _regeneratorRuntime.wrap(function (_context3) {
                for (;;)
                  switch ((_context3.prev = _context3.next)) {
                    case 0:
                      return (
                        (_context3.next = 2),
                        fs6.exists(path4.join(directory, "pnpm-workspace.yaml"))
                      );
                    case 2:
                      if (!_context3.sent) {
                        _context3.next = 5;
                        break;
                      }
                      return _context3.abrupt("return", directory);
                    case 5:
                    case "end":
                      return _context3.stop();
                  }
              }, _callee3);
            }, "_callee3"),
          ),
        )).apply(this, arguments);
      }
      __name(
        _hasWorkspacesConfiguredViaPnpm,
        "_hasWorkspacesConfiguredViaPnpm",
      );
      function findRoot(_x5) {
        return _findRoot.apply(this, arguments);
      }
      __name(findRoot, "findRoot");
      function _findRoot() {
        return (_findRoot = _asyncToGenerator(
          _regeneratorRuntime.mark(
            /* @__PURE__ */ __name(function _callee4(cwd) {
              var firstPkgJsonDirRef, dir;
              return _regeneratorRuntime.wrap(function (_context4) {
                for (;;)
                  switch ((_context4.prev = _context4.next)) {
                    case 0:
                      return (
                        (firstPkgJsonDirRef = {
                          current: void 0,
                        }),
                        (_context4.next = 3),
                        findUp__default(
                          function (directory) {
                            return Promise.all([
                              hasWorkspacesConfiguredViaLerna(directory),
                              hasWorkspacesConfiguredViaPkgJson(
                                directory,
                                firstPkgJsonDirRef,
                              ),
                              hasWorkspacesConfiguredViaPnpm(directory),
                            ]).then(function (x) {
                              return x.find(function (dir2) {
                                return dir2;
                              });
                            });
                          },
                          {
                            cwd,
                            type: "directory",
                          },
                        )
                      );
                    case 3:
                      if (
                        ((dir = _context4.sent),
                        void 0 !== firstPkgJsonDirRef.current)
                      ) {
                        _context4.next = 6;
                        break;
                      }
                      throw new NoPkgJsonFound(cwd);
                    case 6:
                      if (void 0 !== dir) {
                        _context4.next = 8;
                        break;
                      }
                      return _context4.abrupt(
                        "return",
                        firstPkgJsonDirRef.current,
                      );
                    case 8:
                      return _context4.abrupt("return", dir);
                    case 9:
                    case "end":
                      return _context4.stop();
                  }
              }, _callee4);
            }, "_callee4"),
          ),
        )).apply(this, arguments);
      }
      __name(_findRoot, "_findRoot");
      function hasWorkspacesConfiguredViaPkgJsonSync(
        directory,
        firstPkgJsonDirRef,
      ) {
        try {
          var pkgJson = fs6.readJsonSync(path4.join(directory, "package.json"));
          if (
            (void 0 === firstPkgJsonDirRef.current &&
              (firstPkgJsonDirRef.current = directory),
            pkgJson.workspaces || pkgJson.bolt)
          )
            return directory;
        } catch (err) {
          if ("ENOENT" !== err.code) throw err;
        }
      }
      __name(
        hasWorkspacesConfiguredViaPkgJsonSync,
        "hasWorkspacesConfiguredViaPkgJsonSync",
      );
      function hasWorkspacesConfiguredViaLernaSync(directory) {
        try {
          if (
            true !==
            fs6.readJsonSync(path4.join(directory, "lerna.json")).useWorkspaces
          )
            return directory;
        } catch (err) {
          if ("ENOENT" !== err.code) throw err;
        }
      }
      __name(
        hasWorkspacesConfiguredViaLernaSync,
        "hasWorkspacesConfiguredViaLernaSync",
      );
      function hasWorkspacesConfiguredViaPnpmSync(directory) {
        if (fs6.existsSync(path4.join(directory, "pnpm-workspace.yaml")))
          return directory;
      }
      __name(
        hasWorkspacesConfiguredViaPnpmSync,
        "hasWorkspacesConfiguredViaPnpmSync",
      );
      function findRootSync(cwd) {
        var firstPkgJsonDirRef = {
            current: void 0,
          },
          dir = findUp.sync(
            function (directory) {
              return [
                hasWorkspacesConfiguredViaLernaSync(directory),
                hasWorkspacesConfiguredViaPkgJsonSync(
                  directory,
                  firstPkgJsonDirRef,
                ),
                hasWorkspacesConfiguredViaPnpmSync(directory),
              ].find(function (dir2) {
                return dir2;
              });
            },
            {
              cwd,
              type: "directory",
            },
          );
        if (void 0 === firstPkgJsonDirRef.current)
          throw new NoPkgJsonFound(cwd);
        return void 0 === dir ? firstPkgJsonDirRef.current : dir;
      }
      __name(findRootSync, "findRootSync");
      (exports.NoPkgJsonFound = NoPkgJsonFound),
        (exports.findRoot = findRoot),
        (exports.findRootSync = findRootSync);
    },
  });

  // node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.dev.js
  var require_find_root_cjs_dev = __commonJS({
    "node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.dev.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }
      __name(_interopDefault, "_interopDefault");
      var _regeneratorRuntime = _interopDefault(require_regenerator());
      var _asyncToGenerator = _interopDefault(require_asyncToGenerator());
      var _classCallCheck = _interopDefault(require_classCallCheck());
      var _possibleConstructorReturn = _interopDefault(
        require_possibleConstructorReturn(),
      );
      var _getPrototypeOf = _interopDefault(require_getPrototypeOf());
      var _inherits = _interopDefault(require_inherits());
      var _wrapNativeSuper = _interopDefault(require_wrapNativeSuper());
      var findUp = require_find_up();
      var findUp__default = _interopDefault(findUp);
      var path4 = _interopDefault(__require("path"));
      var fs6 = _interopDefault(require_lib4());
      var NoPkgJsonFound = /* @__PURE__ */ (function (_Error) {
        _inherits(NoPkgJsonFound2, _Error);
        function NoPkgJsonFound2(directory) {
          var _this;
          _classCallCheck(this, NoPkgJsonFound2);
          _this = _possibleConstructorReturn(
            this,
            _getPrototypeOf(NoPkgJsonFound2).call(
              this,
              "No package.json could be found upwards from the directory ".concat(
                directory,
              ),
            ),
          );
          _this.directory = directory;
          return _this;
        }
        __name(NoPkgJsonFound2, "NoPkgJsonFound");
        return NoPkgJsonFound2;
      })(_wrapNativeSuper(Error));
      function hasWorkspacesConfiguredViaPkgJson(_x, _x2) {
        return _hasWorkspacesConfiguredViaPkgJson.apply(this, arguments);
      }
      __name(
        hasWorkspacesConfiguredViaPkgJson,
        "hasWorkspacesConfiguredViaPkgJson",
      );
      function _hasWorkspacesConfiguredViaPkgJson() {
        _hasWorkspacesConfiguredViaPkgJson = _asyncToGenerator(
          /* @__PURE__ */ _regeneratorRuntime.mark(
            /* @__PURE__ */ __name(function _callee(
              directory,
              firstPkgJsonDirRef,
            ) {
              var pkgJson;
              return _regeneratorRuntime.wrap(
                /* @__PURE__ */ __name(function _callee$(_context) {
                  while (1) {
                    switch ((_context.prev = _context.next)) {
                      case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return fs6.readJson(
                          path4.join(directory, "package.json"),
                        );
                      case 3:
                        pkgJson = _context.sent;
                        if (firstPkgJsonDirRef.current === void 0) {
                          firstPkgJsonDirRef.current = directory;
                        }
                        if (!(pkgJson.workspaces || pkgJson.bolt)) {
                          _context.next = 7;
                          break;
                        }
                        return _context.abrupt("return", directory);
                      case 7:
                        _context.next = 13;
                        break;
                      case 9:
                        _context.prev = 9;
                        _context.t0 = _context["catch"](0);
                        if (!(_context.t0.code !== "ENOENT")) {
                          _context.next = 13;
                          break;
                        }
                        throw _context.t0;
                      case 13:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, "_callee$"),
                _callee,
                null,
                [[0, 9]],
              );
            }, "_callee"),
          ),
        );
        return _hasWorkspacesConfiguredViaPkgJson.apply(this, arguments);
      }
      __name(
        _hasWorkspacesConfiguredViaPkgJson,
        "_hasWorkspacesConfiguredViaPkgJson",
      );
      function hasWorkspacesConfiguredViaLerna(_x3) {
        return _hasWorkspacesConfiguredViaLerna.apply(this, arguments);
      }
      __name(
        hasWorkspacesConfiguredViaLerna,
        "hasWorkspacesConfiguredViaLerna",
      );
      function _hasWorkspacesConfiguredViaLerna() {
        _hasWorkspacesConfiguredViaLerna = _asyncToGenerator(
          /* @__PURE__ */ _regeneratorRuntime.mark(
            /* @__PURE__ */ __name(function _callee2(directory) {
              var lernaJson;
              return _regeneratorRuntime.wrap(
                /* @__PURE__ */ __name(function _callee2$(_context2) {
                  while (1) {
                    switch ((_context2.prev = _context2.next)) {
                      case 0:
                        _context2.prev = 0;
                        _context2.next = 3;
                        return fs6.readJson(
                          path4.join(directory, "lerna.json"),
                        );
                      case 3:
                        lernaJson = _context2.sent;
                        if (!(lernaJson.useWorkspaces !== true)) {
                          _context2.next = 6;
                          break;
                        }
                        return _context2.abrupt("return", directory);
                      case 6:
                        _context2.next = 12;
                        break;
                      case 8:
                        _context2.prev = 8;
                        _context2.t0 = _context2["catch"](0);
                        if (!(_context2.t0.code !== "ENOENT")) {
                          _context2.next = 12;
                          break;
                        }
                        throw _context2.t0;
                      case 12:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, "_callee2$"),
                _callee2,
                null,
                [[0, 8]],
              );
            }, "_callee2"),
          ),
        );
        return _hasWorkspacesConfiguredViaLerna.apply(this, arguments);
      }
      __name(
        _hasWorkspacesConfiguredViaLerna,
        "_hasWorkspacesConfiguredViaLerna",
      );
      function hasWorkspacesConfiguredViaPnpm(_x4) {
        return _hasWorkspacesConfiguredViaPnpm.apply(this, arguments);
      }
      __name(hasWorkspacesConfiguredViaPnpm, "hasWorkspacesConfiguredViaPnpm");
      function _hasWorkspacesConfiguredViaPnpm() {
        _hasWorkspacesConfiguredViaPnpm = _asyncToGenerator(
          /* @__PURE__ */ _regeneratorRuntime.mark(
            /* @__PURE__ */ __name(function _callee3(directory) {
              var pnpmWorkspacesFileExists;
              return _regeneratorRuntime.wrap(
                /* @__PURE__ */ __name(function _callee3$(_context3) {
                  while (1) {
                    switch ((_context3.prev = _context3.next)) {
                      case 0:
                        _context3.next = 2;
                        return fs6.exists(
                          path4.join(directory, "pnpm-workspace.yaml"),
                        );
                      case 2:
                        pnpmWorkspacesFileExists = _context3.sent;
                        if (!pnpmWorkspacesFileExists) {
                          _context3.next = 5;
                          break;
                        }
                        return _context3.abrupt("return", directory);
                      case 5:
                      case "end":
                        return _context3.stop();
                    }
                  }
                }, "_callee3$"),
                _callee3,
              );
            }, "_callee3"),
          ),
        );
        return _hasWorkspacesConfiguredViaPnpm.apply(this, arguments);
      }
      __name(
        _hasWorkspacesConfiguredViaPnpm,
        "_hasWorkspacesConfiguredViaPnpm",
      );
      function findRoot(_x5) {
        return _findRoot.apply(this, arguments);
      }
      __name(findRoot, "findRoot");
      function _findRoot() {
        _findRoot = _asyncToGenerator(
          /* @__PURE__ */ _regeneratorRuntime.mark(
            /* @__PURE__ */ __name(function _callee4(cwd) {
              var firstPkgJsonDirRef, dir;
              return _regeneratorRuntime.wrap(
                /* @__PURE__ */ __name(function _callee4$(_context4) {
                  while (1) {
                    switch ((_context4.prev = _context4.next)) {
                      case 0:
                        firstPkgJsonDirRef = {
                          current: void 0,
                        };
                        _context4.next = 3;
                        return findUp__default(
                          function (directory) {
                            return Promise.all([
                              hasWorkspacesConfiguredViaLerna(directory),
                              hasWorkspacesConfiguredViaPkgJson(
                                directory,
                                firstPkgJsonDirRef,
                              ),
                              hasWorkspacesConfiguredViaPnpm(directory),
                            ]).then(function (x) {
                              return x.find(function (dir2) {
                                return dir2;
                              });
                            });
                          },
                          {
                            cwd,
                            type: "directory",
                          },
                        );
                      case 3:
                        dir = _context4.sent;
                        if (!(firstPkgJsonDirRef.current === void 0)) {
                          _context4.next = 6;
                          break;
                        }
                        throw new NoPkgJsonFound(cwd);
                      case 6:
                        if (!(dir === void 0)) {
                          _context4.next = 8;
                          break;
                        }
                        return _context4.abrupt(
                          "return",
                          firstPkgJsonDirRef.current,
                        );
                      case 8:
                        return _context4.abrupt("return", dir);
                      case 9:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, "_callee4$"),
                _callee4,
              );
            }, "_callee4"),
          ),
        );
        return _findRoot.apply(this, arguments);
      }
      __name(_findRoot, "_findRoot");
      function hasWorkspacesConfiguredViaPkgJsonSync(
        directory,
        firstPkgJsonDirRef,
      ) {
        try {
          var pkgJson = fs6.readJsonSync(path4.join(directory, "package.json"));
          if (firstPkgJsonDirRef.current === void 0) {
            firstPkgJsonDirRef.current = directory;
          }
          if (pkgJson.workspaces || pkgJson.bolt) {
            return directory;
          }
        } catch (err) {
          if (err.code !== "ENOENT") {
            throw err;
          }
        }
      }
      __name(
        hasWorkspacesConfiguredViaPkgJsonSync,
        "hasWorkspacesConfiguredViaPkgJsonSync",
      );
      function hasWorkspacesConfiguredViaLernaSync(directory) {
        try {
          var lernaJson = fs6.readJsonSync(path4.join(directory, "lerna.json"));
          if (lernaJson.useWorkspaces !== true) {
            return directory;
          }
        } catch (err) {
          if (err.code !== "ENOENT") {
            throw err;
          }
        }
      }
      __name(
        hasWorkspacesConfiguredViaLernaSync,
        "hasWorkspacesConfiguredViaLernaSync",
      );
      function hasWorkspacesConfiguredViaPnpmSync(directory) {
        var pnpmWorkspacesFileExists = fs6.existsSync(
          path4.join(directory, "pnpm-workspace.yaml"),
        );
        if (pnpmWorkspacesFileExists) {
          return directory;
        }
      }
      __name(
        hasWorkspacesConfiguredViaPnpmSync,
        "hasWorkspacesConfiguredViaPnpmSync",
      );
      function findRootSync(cwd) {
        var firstPkgJsonDirRef = {
          current: void 0,
        };
        var dir = findUp.sync(
          function (directory) {
            return [
              hasWorkspacesConfiguredViaLernaSync(directory),
              hasWorkspacesConfiguredViaPkgJsonSync(
                directory,
                firstPkgJsonDirRef,
              ),
              hasWorkspacesConfiguredViaPnpmSync(directory),
            ].find(function (dir2) {
              return dir2;
            });
          },
          {
            cwd,
            type: "directory",
          },
        );
        if (firstPkgJsonDirRef.current === void 0) {
          throw new NoPkgJsonFound(cwd);
        }
        if (dir === void 0) {
          return firstPkgJsonDirRef.current;
        }
        return dir;
      }
      __name(findRootSync, "findRootSync");
      exports.NoPkgJsonFound = NoPkgJsonFound;
      exports.findRoot = findRoot;
      exports.findRootSync = findRootSync;
    },
  });

  // node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.js
  var require_find_root_cjs = __commonJS({
    "node_modules/.pnpm/@manypkg+find-root@1.1.0/node_modules/@manypkg/find-root/dist/find-root.cjs.js"(
      exports,
      module,
    ) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_find_root_cjs_prod();
      } else {
        module.exports = require_find_root_cjs_dev();
      }
    },
  });

  // node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.prod.js
  var require_get_packages_cjs_prod = __commonJS({
    "node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.prod.js"(
      exports,
    ) {
      "use strict";
      function _interopDefault(ex) {
        return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
      }
      __name(_interopDefault, "_interopDefault");
      Object.defineProperty(exports, "__esModule", {
        value: true,
      });
      var _regeneratorRuntime = _interopDefault(require_regenerator());
      var _asyncToGenerator = _interopDefault(require_asyncToGenerator());
      var _classCallCheck = _interopDefault(require_classCallCheck());
      var _possibleConstructorReturn = _interopDefault(
        require_possibleConstructorReturn(),
      );
      var _getPrototypeOf = _interopDefault(require_getPrototypeOf());
      var _inherits = _interopDefault(require_inherits());
      var _wrapNativeSuper = _interopDefault(require_wrapNativeSuper());
      var fs6 = _interopDefault(require_lib4());
      var path4 = _interopDefault(__require("path"));
      var globby = require_globby();
      var globby__default = _interopDefault(globby);
      var readYamlFile = require_read_yaml_file();
      var readYamlFile__default = _interopDefault(readYamlFile);
      var findRoot = require_find_root_cjs();
      var PackageJsonMissingNameError = (function (_Error) {
        function PackageJsonMissingNameError2(directories) {
          var _this;
          return (
            _classCallCheck(this, PackageJsonMissingNameError2),
            ((_this = _possibleConstructorReturn(
              this,
              _getPrototypeOf(PackageJsonMissingNameError2).call(
                this,
                'The following package.jsons are missing the "name" field:\n'.concat(
                  directories.join("\n"),
                ),
              ),
            )).directories = directories),
            _this
          );
        }
        __name(PackageJsonMissingNameError2, "PackageJsonMissingNameError");
        return (
          _inherits(PackageJsonMissingNameError2, _Error),
          PackageJsonMissingNameError2
        );
      })(_wrapNativeSuper(Error));
      function getPackages5(_x) {
        return _getPackages.apply(this, arguments);
      }
      __name(getPackages5, "getPackages");
      function _getPackages() {
        return (_getPackages = _asyncToGenerator(
          _regeneratorRuntime.mark(
            /* @__PURE__ */ __name(function _callee(dir) {
              var cwd,
                pkg,
                tool,
                manifest,
                lernaJson,
                root2,
                relativeDirectories,
                directories,
                pkgJsonsMissingNameField,
                results;
              return _regeneratorRuntime.wrap(
                function (_context) {
                  for (;;)
                    switch ((_context.prev = _context.next)) {
                      case 0:
                        return (_context.next = 2), findRoot.findRoot(dir);
                      case 2:
                        return (
                          (cwd = _context.sent),
                          (_context.next = 5),
                          fs6.readJson(path4.join(cwd, "package.json"))
                        );
                      case 5:
                        if (!(pkg = _context.sent).workspaces) {
                          _context.next = 10;
                          break;
                        }
                        Array.isArray(pkg.workspaces)
                          ? (tool = {
                              type: "yarn",
                              packageGlobs: pkg.workspaces,
                            })
                          : pkg.workspaces.packages &&
                            (tool = {
                              type: "yarn",
                              packageGlobs: pkg.workspaces.packages,
                            }),
                          (_context.next = 37);
                        break;
                      case 10:
                        if (!pkg.bolt || !pkg.bolt.workspaces) {
                          _context.next = 14;
                          break;
                        }
                        (tool = {
                          type: "bolt",
                          packageGlobs: pkg.bolt.workspaces,
                        }),
                          (_context.next = 37);
                        break;
                      case 14:
                        return (
                          (_context.prev = 14),
                          (_context.next = 17),
                          readYamlFile__default(
                            path4.join(cwd, "pnpm-workspace.yaml"),
                          )
                        );
                      case 17:
                        (manifest = _context.sent) &&
                          manifest.packages &&
                          (tool = {
                            type: "pnpm",
                            packageGlobs: manifest.packages,
                          }),
                          (_context.next = 25);
                        break;
                      case 21:
                        if (
                          ((_context.prev = 21),
                          (_context.t0 = _context.catch(14)),
                          "ENOENT" === _context.t0.code)
                        ) {
                          _context.next = 25;
                          break;
                        }
                        throw _context.t0;
                      case 25:
                        if (tool) {
                          _context.next = 37;
                          break;
                        }
                        return (
                          (_context.prev = 26),
                          (_context.next = 29),
                          fs6.readJson(path4.join(cwd, "lerna.json"))
                        );
                      case 29:
                        (lernaJson = _context.sent) &&
                          (tool = {
                            type: "lerna",
                            packageGlobs: lernaJson.packages || ["packages/*"],
                          }),
                          (_context.next = 37);
                        break;
                      case 33:
                        if (
                          ((_context.prev = 33),
                          (_context.t1 = _context.catch(26)),
                          "ENOENT" === _context.t1.code)
                        ) {
                          _context.next = 37;
                          break;
                        }
                        throw _context.t1;
                      case 37:
                        if (tool) {
                          _context.next = 42;
                          break;
                        }
                        if (
                          ((root2 = {
                            dir: cwd,
                            packageJson: pkg,
                          }),
                          pkg.name)
                        ) {
                          _context.next = 41;
                          break;
                        }
                        throw new PackageJsonMissingNameError(["package.json"]);
                      case 41:
                        return _context.abrupt("return", {
                          tool: "root",
                          root: root2,
                          packages: [root2],
                        });
                      case 42:
                        return (
                          (_context.next = 44),
                          globby__default(tool.packageGlobs, {
                            cwd,
                            onlyDirectories: true,
                            expandDirectories: false,
                            ignore: ["**/node_modules"],
                          })
                        );
                      case 44:
                        return (
                          (relativeDirectories = _context.sent),
                          (directories = relativeDirectories.map(function (p) {
                            return path4.resolve(cwd, p);
                          })),
                          (pkgJsonsMissingNameField = []),
                          (_context.next = 49),
                          Promise.all(
                            directories.sort().map(function (dir2) {
                              return fs6
                                .readJson(path4.join(dir2, "package.json"))
                                .then(function (packageJson) {
                                  return (
                                    packageJson.name ||
                                      pkgJsonsMissingNameField.push(
                                        path4.relative(
                                          cwd,
                                          path4.join(dir2, "package.json"),
                                        ),
                                      ),
                                    {
                                      packageJson,
                                      dir: dir2,
                                    }
                                  );
                                })
                                .catch(function (err) {
                                  if ("ENOENT" === err.code) return null;
                                  throw err;
                                });
                            }),
                          )
                        );
                      case 49:
                        if (
                          ((_context.t2 = function (x) {
                            return x;
                          }),
                          (results = _context.sent.filter(_context.t2)),
                          0 === pkgJsonsMissingNameField.length)
                        ) {
                          _context.next = 54;
                          break;
                        }
                        throw (
                          (pkgJsonsMissingNameField.sort(),
                          new PackageJsonMissingNameError(
                            pkgJsonsMissingNameField,
                          ))
                        );
                      case 54:
                        return _context.abrupt("return", {
                          tool: tool.type,
                          root: {
                            dir: cwd,
                            packageJson: pkg,
                          },
                          packages: results,
                        });
                      case 55:
                      case "end":
                        return _context.stop();
                    }
                },
                _callee,
                null,
                [
                  [14, 21],
                  [26, 33],
                ],
              );
            }, "_callee"),
          ),
        )).apply(this, arguments);
      }
      __name(_getPackages, "_getPackages");
      function getPackagesSync(dir) {
        var tool,
          cwd = findRoot.findRootSync(dir),
          pkg = fs6.readJsonSync(path4.join(cwd, "package.json"));
        if (pkg.workspaces)
          Array.isArray(pkg.workspaces)
            ? (tool = {
                type: "yarn",
                packageGlobs: pkg.workspaces,
              })
            : pkg.workspaces.packages &&
              (tool = {
                type: "yarn",
                packageGlobs: pkg.workspaces.packages,
              });
        else if (pkg.bolt && pkg.bolt.workspaces)
          tool = {
            type: "bolt",
            packageGlobs: pkg.bolt.workspaces,
          };
        else {
          try {
            var manifest = readYamlFile.sync(
              path4.join(cwd, "pnpm-workspace.yaml"),
            );
            manifest &&
              manifest.packages &&
              (tool = {
                type: "pnpm",
                packageGlobs: manifest.packages,
              });
          } catch (err) {
            if ("ENOENT" !== err.code) throw err;
          }
          if (!tool)
            try {
              var lernaJson = fs6.readJsonSync(path4.join(cwd, "lerna.json"));
              lernaJson &&
                (tool = {
                  type: "lerna",
                  packageGlobs: lernaJson.packages || ["packages/*"],
                });
            } catch (err) {
              if ("ENOENT" !== err.code) throw err;
            }
        }
        if (!tool) {
          var root2 = {
            dir: cwd,
            packageJson: pkg,
          };
          if (!pkg.name)
            throw new PackageJsonMissingNameError(["package.json"]);
          return {
            tool: "root",
            root: root2,
            packages: [root2],
          };
        }
        var directories = globby
            .sync(tool.packageGlobs, {
              cwd,
              onlyDirectories: true,
              expandDirectories: false,
              ignore: ["**/node_modules"],
            })
            .map(function (p) {
              return path4.resolve(cwd, p);
            }),
          pkgJsonsMissingNameField = [],
          results = directories
            .sort()
            .map(function (dir2) {
              try {
                var packageJson = fs6.readJsonSync(
                  path4.join(dir2, "package.json"),
                );
                return (
                  packageJson.name ||
                    pkgJsonsMissingNameField.push(
                      path4.relative(cwd, path4.join(dir2, "package.json")),
                    ),
                  {
                    packageJson,
                    dir: dir2,
                  }
                );
              } catch (err) {
                if ("ENOENT" === err.code) return null;
                throw err;
              }
            })
            .filter(function (x) {
              return x;
            });
        if (0 !== pkgJsonsMissingNameField.length)
          throw (
            (pkgJsonsMissingNameField.sort(),
            new PackageJsonMissingNameError(pkgJsonsMissingNameField))
          );
        return {
          tool: tool.type,
          root: {
            dir: cwd,
            packageJson: pkg,
          },
          packages: results,
        };
      }
      __name(getPackagesSync, "getPackagesSync");
      (exports.PackageJsonMissingNameError = PackageJsonMissingNameError),
        (exports.getPackages = getPackages5),
        (exports.getPackagesSync = getPackagesSync);
    },
  });

  // node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.dev.js
  var require_get_packages_cjs_dev = __commonJS({
    "node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.dev.js"(
      exports,
    ) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex
          ? ex["default"]
          : ex;
      }
      __name(_interopDefault, "_interopDefault");
      var _regeneratorRuntime = _interopDefault(require_regenerator());
      var _asyncToGenerator = _interopDefault(require_asyncToGenerator());
      var _classCallCheck = _interopDefault(require_classCallCheck());
      var _possibleConstructorReturn = _interopDefault(
        require_possibleConstructorReturn(),
      );
      var _getPrototypeOf = _interopDefault(require_getPrototypeOf());
      var _inherits = _interopDefault(require_inherits());
      var _wrapNativeSuper = _interopDefault(require_wrapNativeSuper());
      var fs6 = _interopDefault(require_lib4());
      var path4 = _interopDefault(__require("path"));
      var globby = require_globby();
      var globby__default = _interopDefault(globby);
      var readYamlFile = require_read_yaml_file();
      var readYamlFile__default = _interopDefault(readYamlFile);
      var findRoot = require_find_root_cjs();
      var PackageJsonMissingNameError = /* @__PURE__ */ (function (_Error) {
        _inherits(PackageJsonMissingNameError2, _Error);
        function PackageJsonMissingNameError2(directories) {
          var _this;
          _classCallCheck(this, PackageJsonMissingNameError2);
          _this = _possibleConstructorReturn(
            this,
            _getPrototypeOf(PackageJsonMissingNameError2).call(
              this,
              'The following package.jsons are missing the "name" field:\n'.concat(
                directories.join("\n"),
              ),
            ),
          );
          _this.directories = directories;
          return _this;
        }
        __name(PackageJsonMissingNameError2, "PackageJsonMissingNameError");
        return PackageJsonMissingNameError2;
      })(_wrapNativeSuper(Error));
      function getPackages5(_x) {
        return _getPackages.apply(this, arguments);
      }
      __name(getPackages5, "getPackages");
      function _getPackages() {
        _getPackages = _asyncToGenerator(
          /* @__PURE__ */ _regeneratorRuntime.mark(
            /* @__PURE__ */ __name(function _callee(dir) {
              var cwd,
                pkg,
                tool,
                manifest,
                lernaJson,
                root2,
                relativeDirectories,
                directories,
                pkgJsonsMissingNameField,
                results;
              return _regeneratorRuntime.wrap(
                /* @__PURE__ */ __name(function _callee$(_context) {
                  while (1) {
                    switch ((_context.prev = _context.next)) {
                      case 0:
                        _context.next = 2;
                        return findRoot.findRoot(dir);
                      case 2:
                        cwd = _context.sent;
                        _context.next = 5;
                        return fs6.readJson(path4.join(cwd, "package.json"));
                      case 5:
                        pkg = _context.sent;
                        if (!pkg.workspaces) {
                          _context.next = 10;
                          break;
                        }
                        if (Array.isArray(pkg.workspaces)) {
                          tool = {
                            type: "yarn",
                            packageGlobs: pkg.workspaces,
                          };
                        } else if (pkg.workspaces.packages) {
                          tool = {
                            type: "yarn",
                            packageGlobs: pkg.workspaces.packages,
                          };
                        }
                        _context.next = 37;
                        break;
                      case 10:
                        if (!(pkg.bolt && pkg.bolt.workspaces)) {
                          _context.next = 14;
                          break;
                        }
                        tool = {
                          type: "bolt",
                          packageGlobs: pkg.bolt.workspaces,
                        };
                        _context.next = 37;
                        break;
                      case 14:
                        _context.prev = 14;
                        _context.next = 17;
                        return readYamlFile__default(
                          path4.join(cwd, "pnpm-workspace.yaml"),
                        );
                      case 17:
                        manifest = _context.sent;
                        if (manifest && manifest.packages) {
                          tool = {
                            type: "pnpm",
                            packageGlobs: manifest.packages,
                          };
                        }
                        _context.next = 25;
                        break;
                      case 21:
                        _context.prev = 21;
                        _context.t0 = _context["catch"](14);
                        if (!(_context.t0.code !== "ENOENT")) {
                          _context.next = 25;
                          break;
                        }
                        throw _context.t0;
                      case 25:
                        if (tool) {
                          _context.next = 37;
                          break;
                        }
                        _context.prev = 26;
                        _context.next = 29;
                        return fs6.readJson(path4.join(cwd, "lerna.json"));
                      case 29:
                        lernaJson = _context.sent;
                        if (lernaJson) {
                          tool = {
                            type: "lerna",
                            packageGlobs: lernaJson.packages || ["packages/*"],
                          };
                        }
                        _context.next = 37;
                        break;
                      case 33:
                        _context.prev = 33;
                        _context.t1 = _context["catch"](26);
                        if (!(_context.t1.code !== "ENOENT")) {
                          _context.next = 37;
                          break;
                        }
                        throw _context.t1;
                      case 37:
                        if (tool) {
                          _context.next = 42;
                          break;
                        }
                        root2 = {
                          dir: cwd,
                          packageJson: pkg,
                        };
                        if (pkg.name) {
                          _context.next = 41;
                          break;
                        }
                        throw new PackageJsonMissingNameError(["package.json"]);
                      case 41:
                        return _context.abrupt("return", {
                          tool: "root",
                          root: root2,
                          packages: [root2],
                        });
                      case 42:
                        _context.next = 44;
                        return globby__default(tool.packageGlobs, {
                          cwd,
                          onlyDirectories: true,
                          expandDirectories: false,
                          ignore: ["**/node_modules"],
                        });
                      case 44:
                        relativeDirectories = _context.sent;
                        directories = relativeDirectories.map(function (p) {
                          return path4.resolve(cwd, p);
                        });
                        pkgJsonsMissingNameField = [];
                        _context.next = 49;
                        return Promise.all(
                          directories.sort().map(function (dir2) {
                            return fs6
                              .readJson(path4.join(dir2, "package.json"))
                              .then(function (packageJson) {
                                if (!packageJson.name) {
                                  pkgJsonsMissingNameField.push(
                                    path4.relative(
                                      cwd,
                                      path4.join(dir2, "package.json"),
                                    ),
                                  );
                                }
                                return {
                                  packageJson,
                                  dir: dir2,
                                };
                              })
                              ["catch"](function (err) {
                                if (err.code === "ENOENT") {
                                  return null;
                                }
                                throw err;
                              });
                          }),
                        );
                      case 49:
                        _context.t2 = function (x) {
                          return x;
                        };
                        results = _context.sent.filter(_context.t2);
                        if (!(pkgJsonsMissingNameField.length !== 0)) {
                          _context.next = 54;
                          break;
                        }
                        pkgJsonsMissingNameField.sort();
                        throw new PackageJsonMissingNameError(
                          pkgJsonsMissingNameField,
                        );
                      case 54:
                        return _context.abrupt("return", {
                          tool: tool.type,
                          root: {
                            dir: cwd,
                            packageJson: pkg,
                          },
                          packages: results,
                        });
                      case 55:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, "_callee$"),
                _callee,
                null,
                [
                  [14, 21],
                  [26, 33],
                ],
              );
            }, "_callee"),
          ),
        );
        return _getPackages.apply(this, arguments);
      }
      __name(_getPackages, "_getPackages");
      function getPackagesSync(dir) {
        var cwd = findRoot.findRootSync(dir);
        var pkg = fs6.readJsonSync(path4.join(cwd, "package.json"));
        var tool;
        if (pkg.workspaces) {
          if (Array.isArray(pkg.workspaces)) {
            tool = {
              type: "yarn",
              packageGlobs: pkg.workspaces,
            };
          } else if (pkg.workspaces.packages) {
            tool = {
              type: "yarn",
              packageGlobs: pkg.workspaces.packages,
            };
          }
        } else if (pkg.bolt && pkg.bolt.workspaces) {
          tool = {
            type: "bolt",
            packageGlobs: pkg.bolt.workspaces,
          };
        } else {
          try {
            var manifest = readYamlFile.sync(
              path4.join(cwd, "pnpm-workspace.yaml"),
            );
            if (manifest && manifest.packages) {
              tool = {
                type: "pnpm",
                packageGlobs: manifest.packages,
              };
            }
          } catch (err) {
            if (err.code !== "ENOENT") {
              throw err;
            }
          }
          if (!tool) {
            try {
              var lernaJson = fs6.readJsonSync(path4.join(cwd, "lerna.json"));
              if (lernaJson) {
                tool = {
                  type: "lerna",
                  packageGlobs: lernaJson.packages || ["packages/*"],
                };
              }
            } catch (err) {
              if (err.code !== "ENOENT") {
                throw err;
              }
            }
          }
        }
        if (!tool) {
          var root2 = {
            dir: cwd,
            packageJson: pkg,
          };
          if (!pkg.name) {
            throw new PackageJsonMissingNameError(["package.json"]);
          }
          return {
            tool: "root",
            root: root2,
            packages: [root2],
          };
        }
        var relativeDirectories = globby.sync(tool.packageGlobs, {
          cwd,
          onlyDirectories: true,
          expandDirectories: false,
          ignore: ["**/node_modules"],
        });
        var directories = relativeDirectories.map(function (p) {
          return path4.resolve(cwd, p);
        });
        var pkgJsonsMissingNameField = [];
        var results = directories
          .sort()
          .map(function (dir2) {
            try {
              var packageJson = fs6.readJsonSync(
                path4.join(dir2, "package.json"),
              );
              if (!packageJson.name) {
                pkgJsonsMissingNameField.push(
                  path4.relative(cwd, path4.join(dir2, "package.json")),
                );
              }
              return {
                packageJson,
                dir: dir2,
              };
            } catch (err) {
              if (err.code === "ENOENT") return null;
              throw err;
            }
          })
          .filter(function (x) {
            return x;
          });
        if (pkgJsonsMissingNameField.length !== 0) {
          pkgJsonsMissingNameField.sort();
          throw new PackageJsonMissingNameError(pkgJsonsMissingNameField);
        }
        return {
          tool: tool.type,
          root: {
            dir: cwd,
            packageJson: pkg,
          },
          packages: results,
        };
      }
      __name(getPackagesSync, "getPackagesSync");
      exports.PackageJsonMissingNameError = PackageJsonMissingNameError;
      exports.getPackages = getPackages5;
      exports.getPackagesSync = getPackagesSync;
    },
  });

  // node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.js
  var require_get_packages_cjs = __commonJS({
    "node_modules/.pnpm/@manypkg+get-packages@1.1.3/node_modules/@manypkg/get-packages/dist/get-packages.cjs.js"(
      exports,
      module,
    ) {
      "use strict";
      if (process.env.NODE_ENV === "production") {
        module.exports = require_get_packages_cjs_prod();
      } else {
        module.exports = require_get_packages_cjs_dev();
      }
    },
  });

  // node_modules/.pnpm/extendable-error@0.1.7/node_modules/extendable-error/bld/index.js
  var require_bld = __commonJS({
    "node_modules/.pnpm/extendable-error@0.1.7/node_modules/extendable-error/bld/index.js"(
      exports,
    ) {
      "use strict";
      var __extends =
        (exports && exports.__extends) ||
        (function () {
          var extendStatics =
            Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array &&
              function (d, b) {
                d.__proto__ = b;
              }) ||
            function (d, b) {
              for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
            };
          return function (d, b) {
            extendStatics(d, b);
            function __() {
              this.constructor = d;
            }
            __name(__, "__");
            d.prototype =
              b === null
                ? Object.create(b)
                : ((__.prototype = b.prototype), new __());
          };
        })();
      Object.defineProperty(exports, "__esModule", { value: true });
      var ExtendableError2 =
        /** @class */
        (function (_super) {
          __extends(ExtendableError3, _super);
          function ExtendableError3(message) {
            var _newTarget = this.constructor;
            if (message === void 0) {
              message = "";
            }
            var _this = _super.call(this, message) || this;
            _this.message = message;
            Object.setPrototypeOf(_this, _newTarget.prototype);
            delete _this.stack;
            _this.name = _newTarget.name;
            _this._error = new Error();
            return _this;
          }
          __name(ExtendableError3, "ExtendableError");
          Object.defineProperty(ExtendableError3.prototype, "stack", {
            get: /* @__PURE__ */ __name(function () {
              if (this._stack) {
                return this._stack;
              }
              var prototype = Object.getPrototypeOf(this);
              var depth = 1;
              loop: while (prototype) {
                switch (prototype) {
                  case ExtendableError3.prototype:
                    break loop;
                  case Object.prototype:
                    depth = 1;
                    break loop;
                  default:
                    depth++;
                    break;
                }
                prototype = Object.getPrototypeOf(prototype);
              }
              var stackLines = (this._error.stack || "").match(/.+/g) || [];
              var nameLine = this.name;
              if (this.message) {
                nameLine += ": " + this.message;
              }
              stackLines.splice(0, depth + 1, nameLine);
              return (this._stack = stackLines.join("\n"));
            }, "get"),
            enumerable: true,
            configurable: true,
          });
          return ExtendableError3;
        })(Error);
      exports.ExtendableError = ExtendableError2;
      exports.default = ExtendableError2;
    },
  });

  // node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js
  var require_windows = __commonJS({
    "node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js"(
      exports,
      module,
    ) {
      module.exports = isexe;
      isexe.sync = sync;
      var fs6 = __require("fs");
      function checkPathExt(path4, options) {
        var pathext =
          options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
        if (!pathext) {
          return true;
        }
        pathext = pathext.split(";");
        if (pathext.indexOf("") !== -1) {
          return true;
        }
        for (var i = 0; i < pathext.length; i++) {
          var p = pathext[i].toLowerCase();
          if (p && path4.substr(-p.length).toLowerCase() === p) {
            return true;
          }
        }
        return false;
      }
      __name(checkPathExt, "checkPathExt");
      function checkStat(stat, path4, options) {
        if (!stat.isSymbolicLink() && !stat.isFile()) {
          return false;
        }
        return checkPathExt(path4, options);
      }
      __name(checkStat, "checkStat");
      function isexe(path4, options, cb) {
        fs6.stat(path4, function (er, stat) {
          cb(er, er ? false : checkStat(stat, path4, options));
        });
      }
      __name(isexe, "isexe");
      function sync(path4, options) {
        return checkStat(fs6.statSync(path4), path4, options);
      }
      __name(sync, "sync");
    },
  });

  // node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js
  var require_mode = __commonJS({
    "node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js"(
      exports,
      module,
    ) {
      module.exports = isexe;
      isexe.sync = sync;
      var fs6 = __require("fs");
      function isexe(path4, options, cb) {
        fs6.stat(path4, function (er, stat) {
          cb(er, er ? false : checkStat(stat, options));
        });
      }
      __name(isexe, "isexe");
      function sync(path4, options) {
        return checkStat(fs6.statSync(path4), options);
      }
      __name(sync, "sync");
      function checkStat(stat, options) {
        return stat.isFile() && checkMode(stat, options);
      }
      __name(checkStat, "checkStat");
      function checkMode(stat, options) {
        var mod = stat.mode;
        var uid = stat.uid;
        var gid = stat.gid;
        var myUid =
          options.uid !== void 0
            ? options.uid
            : process.getuid && process.getuid();
        var myGid =
          options.gid !== void 0
            ? options.gid
            : process.getgid && process.getgid();
        var u = parseInt("100", 8);
        var g = parseInt("010", 8);
        var o = parseInt("001", 8);
        var ug = u | g;
        var ret =
          mod & o ||
          (mod & g && gid === myGid) ||
          (mod & u && uid === myUid) ||
          (mod & ug && myUid === 0);
        return ret;
      }
      __name(checkMode, "checkMode");
    },
  });

  // node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js
  var require_isexe = __commonJS({
    "node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js"(
      exports,
      module,
    ) {
      var fs6 = __require("fs");
      var core4;
      if (process.platform === "win32" || global.TESTING_WINDOWS) {
        core4 = require_windows();
      } else {
        core4 = require_mode();
      }
      module.exports = isexe;
      isexe.sync = sync;
      function isexe(path4, options, cb) {
        if (typeof options === "function") {
          cb = options;
          options = {};
        }
        if (!cb) {
          if (typeof Promise !== "function") {
            throw new TypeError("callback not provided");
          }
          return new Promise(function (resolve, reject) {
            isexe(path4, options || {}, function (er, is2) {
              if (er) {
                reject(er);
              } else {
                resolve(is2);
              }
            });
          });
        }
        core4(path4, options || {}, function (er, is2) {
          if (er) {
            if (er.code === "EACCES" || (options && options.ignoreErrors)) {
              er = null;
              is2 = false;
            }
          }
          cb(er, is2);
        });
      }
      __name(isexe, "isexe");
      function sync(path4, options) {
        try {
          return core4.sync(path4, options || {});
        } catch (er) {
          if ((options && options.ignoreErrors) || er.code === "EACCES") {
            return false;
          } else {
            throw er;
          }
        }
      }
      __name(sync, "sync");
    },
  });

  // node_modules/.pnpm/which@1.3.1/node_modules/which/which.js
  var require_which = __commonJS({
    "node_modules/.pnpm/which@1.3.1/node_modules/which/which.js"(
      exports,
      module,
    ) {
      module.exports = which;
      which.sync = whichSync;
      var isWindows =
        process.platform === "win32" ||
        process.env.OSTYPE === "cygwin" ||
        process.env.OSTYPE === "msys";
      var path4 = __require("path");
      var COLON = isWindows ? ";" : ":";
      var isexe = require_isexe();
      function getNotFoundError(cmd) {
        var er = new Error("not found: " + cmd);
        er.code = "ENOENT";
        return er;
      }
      __name(getNotFoundError, "getNotFoundError");
      function getPathInfo(cmd, opt) {
        var colon = opt.colon || COLON;
        var pathEnv = opt.path || process.env.PATH || "";
        var pathExt = [""];
        pathEnv = pathEnv.split(colon);
        var pathExtExe = "";
        if (isWindows) {
          pathEnv.unshift(process.cwd());
          pathExtExe =
            opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM";
          pathExt = pathExtExe.split(colon);
          if (cmd.indexOf(".") !== -1 && pathExt[0] !== "") pathExt.unshift("");
        }
        if (cmd.match(/\//) || (isWindows && cmd.match(/\\/))) pathEnv = [""];
        return {
          env: pathEnv,
          ext: pathExt,
          extExe: pathExtExe,
        };
      }
      __name(getPathInfo, "getPathInfo");
      function which(cmd, opt, cb) {
        if (typeof opt === "function") {
          cb = opt;
          opt = {};
        }
        var info2 = getPathInfo(cmd, opt);
        var pathEnv = info2.env;
        var pathExt = info2.ext;
        var pathExtExe = info2.extExe;
        var found = [];
        /* @__PURE__ */ __name(function F(i, l) {
          if (i === l) {
            if (opt.all && found.length) return cb(null, found);
            else return cb(getNotFoundError(cmd));
          }
          var pathPart = pathEnv[i];
          if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"')
            pathPart = pathPart.slice(1, -1);
          var p = path4.join(pathPart, cmd);
          if (!pathPart && /^\.[\\\/]/.test(cmd)) {
            p = cmd.slice(0, 2) + p;
          }
          /* @__PURE__ */ __name(function E(ii, ll) {
            if (ii === ll) return F(i + 1, l);
            var ext = pathExt[ii];
            isexe(p + ext, { pathExt: pathExtExe }, function (er, is2) {
              if (!er && is2) {
                if (opt.all) found.push(p + ext);
                else return cb(null, p + ext);
              }
              return E(ii + 1, ll);
            });
          }, "E")(0, pathExt.length);
        }, "F")(0, pathEnv.length);
      }
      __name(which, "which");
      function whichSync(cmd, opt) {
        opt = opt || {};
        var info2 = getPathInfo(cmd, opt);
        var pathEnv = info2.env;
        var pathExt = info2.ext;
        var pathExtExe = info2.extExe;
        var found = [];
        for (var i = 0, l = pathEnv.length; i < l; i++) {
          var pathPart = pathEnv[i];
          if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"')
            pathPart = pathPart.slice(1, -1);
          var p = path4.join(pathPart, cmd);
          if (!pathPart && /^\.[\\\/]/.test(cmd)) {
            p = cmd.slice(0, 2) + p;
          }
          for (var j = 0, ll = pathExt.length; j < ll; j++) {
            var cur = p + pathExt[j];
            var is2;
            try {
              is2 = isexe.sync(cur, { pathExt: pathExtExe });
              if (is2) {
                if (opt.all) found.push(cur);
                else return cur;
              }
            } catch (ex) {}
          }
        }
        if (opt.all && found.length) return found;
        if (opt.nothrow) return null;
        throw getNotFoundError(cmd);
      }
      __name(whichSync, "whichSync");
    },
  });

  // node_modules/.pnpm/pseudomap@1.0.2/node_modules/pseudomap/pseudomap.js
  var require_pseudomap = __commonJS({
    "node_modules/.pnpm/pseudomap@1.0.2/node_modules/pseudomap/pseudomap.js"(
      exports,
      module,
    ) {
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      module.exports = PseudoMap;
      function PseudoMap(set2) {
        if (!(this instanceof PseudoMap))
          throw new TypeError("Constructor PseudoMap requires 'new'");
        this.clear();
        if (set2) {
          if (
            set2 instanceof PseudoMap ||
            (typeof Map === "function" && set2 instanceof Map)
          )
            set2.forEach(function (value, key) {
              this.set(key, value);
            }, this);
          else if (Array.isArray(set2))
            set2.forEach(function (kv) {
              this.set(kv[0], kv[1]);
            }, this);
          else throw new TypeError("invalid argument");
        }
      }
      __name(PseudoMap, "PseudoMap");
      PseudoMap.prototype.forEach = function (fn, thisp) {
        thisp = thisp || this;
        Object.keys(this._data).forEach(function (k) {
          if (k !== "size")
            fn.call(thisp, this._data[k].value, this._data[k].key);
        }, this);
      };
      PseudoMap.prototype.has = function (k) {
        return !!find(this._data, k);
      };
      PseudoMap.prototype.get = function (k) {
        var res = find(this._data, k);
        return res && res.value;
      };
      PseudoMap.prototype.set = function (k, v) {
        set(this._data, k, v);
      };
      PseudoMap.prototype.delete = function (k) {
        var res = find(this._data, k);
        if (res) {
          delete this._data[res._index];
          this._data.size--;
        }
      };
      PseudoMap.prototype.clear = function () {
        var data = /* @__PURE__ */ Object.create(null);
        data.size = 0;
        Object.defineProperty(this, "_data", {
          value: data,
          enumerable: false,
          configurable: true,
          writable: false,
        });
      };
      Object.defineProperty(PseudoMap.prototype, "size", {
        get: /* @__PURE__ */ __name(function () {
          return this._data.size;
        }, "get"),
        set: /* @__PURE__ */ __name(function (n) {}, "set"),
        enumerable: true,
        configurable: true,
      });
      PseudoMap.prototype.values =
        PseudoMap.prototype.keys =
        PseudoMap.prototype.entries =
          function () {
            throw new Error("iterators are not implemented in this version");
          };
      function same(a, b) {
        return a === b || (a !== a && b !== b);
      }
      __name(same, "same");
      function Entry(k, v, i) {
        this.key = k;
        this.value = v;
        this._index = i;
      }
      __name(Entry, "Entry");
      function find(data, k) {
        for (
          var i = 0, s = "_" + k, key = s;
          hasOwnProperty2.call(data, key);
          key = s + i++
        ) {
          if (same(data[key].key, k)) return data[key];
        }
      }
      __name(find, "find");
      function set(data, k, v) {
        for (
          var i = 0, s = "_" + k, key = s;
          hasOwnProperty2.call(data, key);
          key = s + i++
        ) {
          if (same(data[key].key, k)) {
            data[key].value = v;
            return;
          }
        }
        data.size++;
        data[key] = new Entry(k, v, key);
      }
      __name(set, "set");
    },
  });

  // node_modules/.pnpm/pseudomap@1.0.2/node_modules/pseudomap/map.js
  var require_map3 = __commonJS({
    "node_modules/.pnpm/pseudomap@1.0.2/node_modules/pseudomap/map.js"(
      exports,
      module,
    ) {
      if (
        process.env.npm_package_name === "pseudomap" &&
        process.env.npm_lifecycle_script === "test"
      )
        process.env.TEST_PSEUDOMAP = "true";
      if (typeof Map === "function" && !process.env.TEST_PSEUDOMAP) {
        module.exports = Map;
      } else {
        module.exports = require_pseudomap();
      }
    },
  });

  // node_modules/.pnpm/yallist@2.1.2/node_modules/yallist/yallist.js
  var require_yallist = __commonJS({
    "node_modules/.pnpm/yallist@2.1.2/node_modules/yallist/yallist.js"(
      exports,
      module,
    ) {
      module.exports = Yallist;
      Yallist.Node = Node;
      Yallist.create = Yallist;
      function Yallist(list4) {
        var self2 = this;
        if (!(self2 instanceof Yallist)) {
          self2 = new Yallist();
        }
        self2.tail = null;
        self2.head = null;
        self2.length = 0;
        if (list4 && typeof list4.forEach === "function") {
          list4.forEach(function (item) {
            self2.push(item);
          });
        } else if (arguments.length > 0) {
          for (var i = 0, l = arguments.length; i < l; i++) {
            self2.push(arguments[i]);
          }
        }
        return self2;
      }
      __name(Yallist, "Yallist");
      Yallist.prototype.removeNode = function (node2) {
        if (node2.list !== this) {
          throw new Error("removing node which does not belong to this list");
        }
        var next = node2.next;
        var prev = node2.prev;
        if (next) {
          next.prev = prev;
        }
        if (prev) {
          prev.next = next;
        }
        if (node2 === this.head) {
          this.head = next;
        }
        if (node2 === this.tail) {
          this.tail = prev;
        }
        node2.list.length--;
        node2.next = null;
        node2.prev = null;
        node2.list = null;
      };
      Yallist.prototype.unshiftNode = function (node2) {
        if (node2 === this.head) {
          return;
        }
        if (node2.list) {
          node2.list.removeNode(node2);
        }
        var head = this.head;
        node2.list = this;
        node2.next = head;
        if (head) {
          head.prev = node2;
        }
        this.head = node2;
        if (!this.tail) {
          this.tail = node2;
        }
        this.length++;
      };
      Yallist.prototype.pushNode = function (node2) {
        if (node2 === this.tail) {
          return;
        }
        if (node2.list) {
          node2.list.removeNode(node2);
        }
        var tail = this.tail;
        node2.list = this;
        node2.prev = tail;
        if (tail) {
          tail.next = node2;
        }
        this.tail = node2;
        if (!this.head) {
          this.head = node2;
        }
        this.length++;
      };
      Yallist.prototype.push = function () {
        for (var i = 0, l = arguments.length; i < l; i++) {
          push3(this, arguments[i]);
        }
        return this.length;
      };
      Yallist.prototype.unshift = function () {
        for (var i = 0, l = arguments.length; i < l; i++) {
          unshift(this, arguments[i]);
        }
        return this.length;
      };
      Yallist.prototype.pop = function () {
        if (!this.tail) {
          return void 0;
        }
        var res = this.tail.value;
        this.tail = this.tail.prev;
        if (this.tail) {
          this.tail.next = null;
        } else {
          this.head = null;
        }
        this.length--;
        return res;
      };
      Yallist.prototype.shift = function () {
        if (!this.head) {
          return void 0;
        }
        var res = this.head.value;
        this.head = this.head.next;
        if (this.head) {
          this.head.prev = null;
        } else {
          this.tail = null;
        }
        this.length--;
        return res;
      };
      Yallist.prototype.forEach = function (fn, thisp) {
        thisp = thisp || this;
        for (var walker = this.head, i = 0; walker !== null; i++) {
          fn.call(thisp, walker.value, i, this);
          walker = walker.next;
        }
      };
      Yallist.prototype.forEachReverse = function (fn, thisp) {
        thisp = thisp || this;
        for (
          var walker = this.tail, i = this.length - 1;
          walker !== null;
          i--
        ) {
          fn.call(thisp, walker.value, i, this);
          walker = walker.prev;
        }
      };
      Yallist.prototype.get = function (n) {
        for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
          walker = walker.next;
        }
        if (i === n && walker !== null) {
          return walker.value;
        }
      };
      Yallist.prototype.getReverse = function (n) {
        for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
          walker = walker.prev;
        }
        if (i === n && walker !== null) {
          return walker.value;
        }
      };
      Yallist.prototype.map = function (fn, thisp) {
        thisp = thisp || this;
        var res = new Yallist();
        for (var walker = this.head; walker !== null; ) {
          res.push(fn.call(thisp, walker.value, this));
          walker = walker.next;
        }
        return res;
      };
      Yallist.prototype.mapReverse = function (fn, thisp) {
        thisp = thisp || this;
        var res = new Yallist();
        for (var walker = this.tail; walker !== null; ) {
          res.push(fn.call(thisp, walker.value, this));
          walker = walker.prev;
        }
        return res;
      };
      Yallist.prototype.reduce = function (fn, initial) {
        var acc;
        var walker = this.head;
        if (arguments.length > 1) {
          acc = initial;
        } else if (this.head) {
          walker = this.head.next;
          acc = this.head.value;
        } else {
          throw new TypeError("Reduce of empty list with no initial value");
        }
        for (var i = 0; walker !== null; i++) {
          acc = fn(acc, walker.value, i);
          walker = walker.next;
        }
        return acc;
      };
      Yallist.prototype.reduceReverse = function (fn, initial) {
        var acc;
        var walker = this.tail;
        if (arguments.length > 1) {
          acc = initial;
        } else if (this.tail) {
          walker = this.tail.prev;
          acc = this.tail.value;
        } else {
          throw new TypeError("Reduce of empty list with no initial value");
        }
        for (var i = this.length - 1; walker !== null; i--) {
          acc = fn(acc, walker.value, i);
          walker = walker.prev;
        }
        return acc;
      };
      Yallist.prototype.toArray = function () {
        var arr = new Array(this.length);
        for (var i = 0, walker = this.head; walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.next;
        }
        return arr;
      };
      Yallist.prototype.toArrayReverse = function () {
        var arr = new Array(this.length);
        for (var i = 0, walker = this.tail; walker !== null; i++) {
          arr[i] = walker.value;
          walker = walker.prev;
        }
        return arr;
      };
      Yallist.prototype.slice = function (from, to) {
        to = to || this.length;
        if (to < 0) {
          to += this.length;
        }
        from = from || 0;
        if (from < 0) {
          from += this.length;
        }
        var ret = new Yallist();
        if (to < from || to < 0) {
          return ret;
        }
        if (from < 0) {
          from = 0;
        }
        if (to > this.length) {
          to = this.length;
        }
        for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
          walker = walker.next;
        }
        for (; walker !== null && i < to; i++, walker = walker.next) {
          ret.push(walker.value);
        }
        return ret;
      };
      Yallist.prototype.sliceReverse = function (from, to) {
        to = to || this.length;
        if (to < 0) {
          to += this.length;
        }
        from = from || 0;
        if (from < 0) {
          from += this.length;
        }
        var ret = new Yallist();
        if (to < from || to < 0) {
          return ret;
        }
        if (from < 0) {
          from = 0;
        }
        if (to > this.length) {
          to = this.length;
        }
        for (
          var i = this.length, walker = this.tail;
          walker !== null && i > to;
          i--
        ) {
          walker = walker.prev;
        }
        for (; walker !== null && i > from; i--, walker = walker.prev) {
          ret.push(walker.value);
        }
        return ret;
      };
      Yallist.prototype.reverse = function () {
        var head = this.head;
        var tail = this.tail;
        for (var walker = head; walker !== null; walker = walker.prev) {
          var p = walker.prev;
          walker.prev = walker.next;
          walker.next = p;
        }
        this.head = tail;
        this.tail = head;
        return this;
      };
      function push3(self2, item) {
        self2.tail = new Node(item, self2.tail, null, self2);
        if (!self2.head) {
          self2.head = self2.tail;
        }
        self2.length++;
      }
      __name(push3, "push");
      function unshift(self2, item) {
        self2.head = new Node(item, null, self2.head, self2);
        if (!self2.tail) {
          self2.tail = self2.head;
        }
        self2.length++;
      }
      __name(unshift, "unshift");
      function Node(value, prev, next, list4) {
        if (!(this instanceof Node)) {
          return new Node(value, prev, next, list4);
        }
        this.list = list4;
        this.value = value;
        if (prev) {
          prev.next = this;
          this.prev = prev;
        } else {
          this.prev = null;
        }
        if (next) {
          next.prev = this;
          this.next = next;
        } else {
          this.next = null;
        }
      }
      __name(Node, "Node");
    },
  });

  // node_modules/.pnpm/lru-cache@4.1.5/node_modules/lru-cache/index.js
  var require_lru_cache = __commonJS({
    "node_modules/.pnpm/lru-cache@4.1.5/node_modules/lru-cache/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = LRUCache;
      var Map2 = require_map3();
      var util2 = __require("util");
      var Yallist = require_yallist();
      var hasSymbol =
        typeof Symbol === "function" &&
        process.env._nodeLRUCacheForceNoSymbol !== "1";
      var makeSymbol;
      if (hasSymbol) {
        makeSymbol = /* @__PURE__ */ __name(function (key) {
          return Symbol(key);
        }, "makeSymbol");
      } else {
        makeSymbol = /* @__PURE__ */ __name(function (key) {
          return "_" + key;
        }, "makeSymbol");
      }
      var MAX = makeSymbol("max");
      var LENGTH = makeSymbol("length");
      var LENGTH_CALCULATOR = makeSymbol("lengthCalculator");
      var ALLOW_STALE = makeSymbol("allowStale");
      var MAX_AGE = makeSymbol("maxAge");
      var DISPOSE = makeSymbol("dispose");
      var NO_DISPOSE_ON_SET = makeSymbol("noDisposeOnSet");
      var LRU_LIST = makeSymbol("lruList");
      var CACHE = makeSymbol("cache");
      function naiveLength() {
        return 1;
      }
      __name(naiveLength, "naiveLength");
      function LRUCache(options) {
        if (!(this instanceof LRUCache)) {
          return new LRUCache(options);
        }
        if (typeof options === "number") {
          options = { max: options };
        }
        if (!options) {
          options = {};
        }
        var max = (this[MAX] = options.max);
        if (!max || !(typeof max === "number") || max <= 0) {
          this[MAX] = Infinity;
        }
        var lc = options.length || naiveLength;
        if (typeof lc !== "function") {
          lc = naiveLength;
        }
        this[LENGTH_CALCULATOR] = lc;
        this[ALLOW_STALE] = options.stale || false;
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this.reset();
      }
      __name(LRUCache, "LRUCache");
      Object.defineProperty(LRUCache.prototype, "max", {
        set: /* @__PURE__ */ __name(function (mL) {
          if (!mL || !(typeof mL === "number") || mL <= 0) {
            mL = Infinity;
          }
          this[MAX] = mL;
          trim(this);
        }, "set"),
        get: /* @__PURE__ */ __name(function () {
          return this[MAX];
        }, "get"),
        enumerable: true,
      });
      Object.defineProperty(LRUCache.prototype, "allowStale", {
        set: /* @__PURE__ */ __name(function (allowStale) {
          this[ALLOW_STALE] = !!allowStale;
        }, "set"),
        get: /* @__PURE__ */ __name(function () {
          return this[ALLOW_STALE];
        }, "get"),
        enumerable: true,
      });
      Object.defineProperty(LRUCache.prototype, "maxAge", {
        set: /* @__PURE__ */ __name(function (mA) {
          if (!mA || !(typeof mA === "number") || mA < 0) {
            mA = 0;
          }
          this[MAX_AGE] = mA;
          trim(this);
        }, "set"),
        get: /* @__PURE__ */ __name(function () {
          return this[MAX_AGE];
        }, "get"),
        enumerable: true,
      });
      Object.defineProperty(LRUCache.prototype, "lengthCalculator", {
        set: /* @__PURE__ */ __name(function (lC) {
          if (typeof lC !== "function") {
            lC = naiveLength;
          }
          if (lC !== this[LENGTH_CALCULATOR]) {
            this[LENGTH_CALCULATOR] = lC;
            this[LENGTH] = 0;
            this[LRU_LIST].forEach(function (hit) {
              hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
              this[LENGTH] += hit.length;
            }, this);
          }
          trim(this);
        }, "set"),
        get: /* @__PURE__ */ __name(function () {
          return this[LENGTH_CALCULATOR];
        }, "get"),
        enumerable: true,
      });
      Object.defineProperty(LRUCache.prototype, "length", {
        get: /* @__PURE__ */ __name(function () {
          return this[LENGTH];
        }, "get"),
        enumerable: true,
      });
      Object.defineProperty(LRUCache.prototype, "itemCount", {
        get: /* @__PURE__ */ __name(function () {
          return this[LRU_LIST].length;
        }, "get"),
        enumerable: true,
      });
      LRUCache.prototype.rforEach = function (fn, thisp) {
        thisp = thisp || this;
        for (var walker = this[LRU_LIST].tail; walker !== null; ) {
          var prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      };
      function forEachStep(self2, fn, node2, thisp) {
        var hit = node2.value;
        if (isStale(self2, hit)) {
          del(self2, node2);
          if (!self2[ALLOW_STALE]) {
            hit = void 0;
          }
        }
        if (hit) {
          fn.call(thisp, hit.value, hit.key, self2);
        }
      }
      __name(forEachStep, "forEachStep");
      LRUCache.prototype.forEach = function (fn, thisp) {
        thisp = thisp || this;
        for (var walker = this[LRU_LIST].head; walker !== null; ) {
          var next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      };
      LRUCache.prototype.keys = function () {
        return this[LRU_LIST].toArray().map(function (k) {
          return k.key;
        }, this);
      };
      LRUCache.prototype.values = function () {
        return this[LRU_LIST].toArray().map(function (k) {
          return k.value;
        }, this);
      };
      LRUCache.prototype.reset = function () {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach(function (hit) {
            this[DISPOSE](hit.key, hit.value);
          }, this);
        }
        this[CACHE] = new Map2();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      };
      LRUCache.prototype.dump = function () {
        return this[LRU_LIST].map(function (hit) {
          if (!isStale(this, hit)) {
            return {
              k: hit.key,
              v: hit.value,
              e: hit.now + (hit.maxAge || 0),
            };
          }
        }, this)
          .toArray()
          .filter(function (h) {
            return h;
          });
      };
      LRUCache.prototype.dumpLru = function () {
        return this[LRU_LIST];
      };
      LRUCache.prototype.inspect = function (n, opts) {
        var str = "LRUCache {";
        var extras = false;
        var as = this[ALLOW_STALE];
        if (as) {
          str += "\n  allowStale: true";
          extras = true;
        }
        var max = this[MAX];
        if (max && max !== Infinity) {
          if (extras) {
            str += ",";
          }
          str += "\n  max: " + util2.inspect(max, opts);
          extras = true;
        }
        var maxAge = this[MAX_AGE];
        if (maxAge) {
          if (extras) {
            str += ",";
          }
          str += "\n  maxAge: " + util2.inspect(maxAge, opts);
          extras = true;
        }
        var lc = this[LENGTH_CALCULATOR];
        if (lc && lc !== naiveLength) {
          if (extras) {
            str += ",";
          }
          str += "\n  length: " + util2.inspect(this[LENGTH], opts);
          extras = true;
        }
        var didFirst = false;
        this[LRU_LIST].forEach(function (item) {
          if (didFirst) {
            str += ",\n  ";
          } else {
            if (extras) {
              str += ",\n";
            }
            didFirst = true;
            str += "\n  ";
          }
          var key = util2.inspect(item.key).split("\n").join("\n  ");
          var val = { value: item.value };
          if (item.maxAge !== maxAge) {
            val.maxAge = item.maxAge;
          }
          if (lc !== naiveLength) {
            val.length = item.length;
          }
          if (isStale(this, item)) {
            val.stale = true;
          }
          val = util2.inspect(val, opts).split("\n").join("\n  ");
          str += key + " => " + val;
        });
        if (didFirst || extras) {
          str += "\n";
        }
        str += "}";
        return str;
      };
      LRUCache.prototype.set = function (key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        var now = maxAge ? Date.now() : 0;
        var len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          var node2 = this[CACHE].get(key);
          var item = node2.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET]) {
              this[DISPOSE](key, item.value);
            }
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim(this);
          return true;
        }
        var hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE]) {
            this[DISPOSE](key, value);
          }
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
      };
      LRUCache.prototype.has = function (key) {
        if (!this[CACHE].has(key)) return false;
        var hit = this[CACHE].get(key).value;
        if (isStale(this, hit)) {
          return false;
        }
        return true;
      };
      LRUCache.prototype.get = function (key) {
        return get(this, key, true);
      };
      LRUCache.prototype.peek = function (key) {
        return get(this, key, false);
      };
      LRUCache.prototype.pop = function () {
        var node2 = this[LRU_LIST].tail;
        if (!node2) return null;
        del(this, node2);
        return node2.value;
      };
      LRUCache.prototype.del = function (key) {
        del(this, this[CACHE].get(key));
      };
      LRUCache.prototype.load = function (arr) {
        this.reset();
        var now = Date.now();
        for (var l = arr.length - 1; l >= 0; l--) {
          var hit = arr[l];
          var expiresAt = hit.e || 0;
          if (expiresAt === 0) {
            this.set(hit.k, hit.v);
          } else {
            var maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      };
      LRUCache.prototype.prune = function () {
        var self2 = this;
        this[CACHE].forEach(function (value, key) {
          get(self2, key, false);
        });
      };
      function get(self2, key, doUse) {
        var node2 = self2[CACHE].get(key);
        if (node2) {
          var hit = node2.value;
          if (isStale(self2, hit)) {
            del(self2, node2);
            if (!self2[ALLOW_STALE]) hit = void 0;
          } else {
            if (doUse) {
              self2[LRU_LIST].unshiftNode(node2);
            }
          }
          if (hit) hit = hit.value;
        }
        return hit;
      }
      __name(get, "get");
      function isStale(self2, hit) {
        if (!hit || (!hit.maxAge && !self2[MAX_AGE])) {
          return false;
        }
        var stale = false;
        var diff = Date.now() - hit.now;
        if (hit.maxAge) {
          stale = diff > hit.maxAge;
        } else {
          stale = self2[MAX_AGE] && diff > self2[MAX_AGE];
        }
        return stale;
      }
      __name(isStale, "isStale");
      function trim(self2) {
        if (self2[LENGTH] > self2[MAX]) {
          for (
            var walker = self2[LRU_LIST].tail;
            self2[LENGTH] > self2[MAX] && walker !== null;

          ) {
            var prev = walker.prev;
            del(self2, walker);
            walker = prev;
          }
        }
      }
      __name(trim, "trim");
      function del(self2, node2) {
        if (node2) {
          var hit = node2.value;
          if (self2[DISPOSE]) {
            self2[DISPOSE](hit.key, hit.value);
          }
          self2[LENGTH] -= hit.length;
          self2[CACHE].delete(hit.key);
          self2[LRU_LIST].removeNode(node2);
        }
      }
      __name(del, "del");
      function Entry(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
      __name(Entry, "Entry");
    },
  });

  // node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/util/resolveCommand.js
  var require_resolveCommand = __commonJS({
    "node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/util/resolveCommand.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var which = require_which();
      var LRU = require_lru_cache();
      var commandCache = new LRU({ max: 50, maxAge: 30 * 1e3 });
      function resolveCommand(command, noExtension) {
        var resolved;
        noExtension = !!noExtension;
        resolved = commandCache.get(command + "!" + noExtension);
        if (commandCache.has(command)) {
          return commandCache.get(command);
        }
        try {
          resolved = !noExtension
            ? which.sync(command)
            : which.sync(command, {
                pathExt: path4.delimiter + (process.env.PATHEXT || ""),
              });
        } catch (e) {}
        commandCache.set(command + "!" + noExtension, resolved);
        return resolved;
      }
      __name(resolveCommand, "resolveCommand");
      module.exports = resolveCommand;
    },
  });

  // node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/util/hasEmptyArgumentBug.js
  var require_hasEmptyArgumentBug = __commonJS({
    "node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/util/hasEmptyArgumentBug.js"(
      exports,
      module,
    ) {
      "use strict";
      function hasEmptyArgumentBug() {
        var nodeVer;
        if (process.platform !== "win32") {
          return false;
        }
        nodeVer = process.version
          .substr(1)
          .split(".")
          .map(function (num) {
            return parseInt(num, 10);
          });
        return nodeVer[0] === 0 && nodeVer[1] < 12;
      }
      __name(hasEmptyArgumentBug, "hasEmptyArgumentBug");
      module.exports = hasEmptyArgumentBug();
    },
  });

  // node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/util/escapeArgument.js
  var require_escapeArgument = __commonJS({
    "node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/util/escapeArgument.js"(
      exports,
      module,
    ) {
      "use strict";
      function escapeArgument(arg, quote) {
        arg = "" + arg;
        if (!quote) {
          arg = arg.replace(/([()%!^<>&|;,"'\s])/g, "^$1");
        } else {
          arg = arg.replace(/(\\*)"/g, '$1$1\\"');
          arg = arg.replace(/(\\*)$/, "$1$1");
          arg = '"' + arg + '"';
        }
        return arg;
      }
      __name(escapeArgument, "escapeArgument");
      module.exports = escapeArgument;
    },
  });

  // node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/util/escapeCommand.js
  var require_escapeCommand = __commonJS({
    "node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/util/escapeCommand.js"(
      exports,
      module,
    ) {
      "use strict";
      var escapeArgument = require_escapeArgument();
      function escapeCommand(command) {
        return /^[a-z0-9_-]+$/i.test(command)
          ? command
          : escapeArgument(command, true);
      }
      __name(escapeCommand, "escapeCommand");
      module.exports = escapeCommand;
    },
  });

  // node_modules/.pnpm/shebang-regex@1.0.0/node_modules/shebang-regex/index.js
  var require_shebang_regex = __commonJS({
    "node_modules/.pnpm/shebang-regex@1.0.0/node_modules/shebang-regex/index.js"(
      exports,
      module,
    ) {
      "use strict";
      module.exports = /^#!.*/;
    },
  });

  // node_modules/.pnpm/shebang-command@1.2.0/node_modules/shebang-command/index.js
  var require_shebang_command = __commonJS({
    "node_modules/.pnpm/shebang-command@1.2.0/node_modules/shebang-command/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var shebangRegex = require_shebang_regex();
      module.exports = function (str) {
        var match = str.match(shebangRegex);
        if (!match) {
          return null;
        }
        var arr = match[0].replace(/#! ?/, "").split(" ");
        var bin = arr[0].split("/").pop();
        var arg = arr[1];
        return bin === "env" ? arg : bin + (arg ? " " + arg : "");
      };
    },
  });

  // node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/util/readShebang.js
  var require_readShebang = __commonJS({
    "node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/util/readShebang.js"(
      exports,
      module,
    ) {
      "use strict";
      var fs6 = __require("fs");
      var LRU = require_lru_cache();
      var shebangCommand = require_shebang_command();
      var shebangCache = new LRU({ max: 50, maxAge: 30 * 1e3 });
      function readShebang(command) {
        var buffer;
        var fd;
        var shebang;
        if (shebangCache.has(command)) {
          return shebangCache.get(command);
        }
        buffer = new Buffer(150);
        try {
          fd = fs6.openSync(command, "r");
          fs6.readSync(fd, buffer, 0, 150, 0);
          fs6.closeSync(fd);
        } catch (e) {}
        shebang = shebangCommand(buffer.toString());
        shebangCache.set(command, shebang);
        return shebang;
      }
      __name(readShebang, "readShebang");
      module.exports = readShebang;
    },
  });

  // node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/parse.js
  var require_parse6 = __commonJS({
    "node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/parse.js"(
      exports,
      module,
    ) {
      "use strict";
      var resolveCommand = require_resolveCommand();
      var hasEmptyArgumentBug = require_hasEmptyArgumentBug();
      var escapeArgument = require_escapeArgument();
      var escapeCommand = require_escapeCommand();
      var readShebang = require_readShebang();
      var isWin = process.platform === "win32";
      var skipShellRegExp = /\.(?:com|exe)$/i;
      var supportsShellOption =
        parseInt(process.version.substr(1).split(".")[0], 10) >= 6 ||
        (parseInt(process.version.substr(1).split(".")[0], 10) === 4 &&
          parseInt(process.version.substr(1).split(".")[1], 10) >= 8);
      function parseNonShell(parsed) {
        var shebang;
        var needsShell;
        var applyQuotes;
        if (!isWin) {
          return parsed;
        }
        parsed.file = resolveCommand(parsed.command);
        parsed.file = parsed.file || resolveCommand(parsed.command, true);
        shebang = parsed.file && readShebang(parsed.file);
        if (shebang) {
          parsed.args.unshift(parsed.file);
          parsed.command = shebang;
          needsShell =
            hasEmptyArgumentBug ||
            !skipShellRegExp.test(
              resolveCommand(shebang) || resolveCommand(shebang, true),
            );
        } else {
          needsShell =
            hasEmptyArgumentBug || !skipShellRegExp.test(parsed.file);
        }
        if (needsShell) {
          applyQuotes = parsed.command !== "echo";
          parsed.command = escapeCommand(parsed.command);
          parsed.args = parsed.args.map(function (arg) {
            return escapeArgument(arg, applyQuotes);
          });
          parsed.args = [
            "/d",
            "/s",
            "/c",
            '"' +
              parsed.command +
              (parsed.args.length ? " " + parsed.args.join(" ") : "") +
              '"',
          ];
          parsed.command = process.env.comspec || "cmd.exe";
          parsed.options.windowsVerbatimArguments = true;
        }
        return parsed;
      }
      __name(parseNonShell, "parseNonShell");
      function parseShell(parsed) {
        var shellCommand;
        if (supportsShellOption) {
          return parsed;
        }
        shellCommand = [parsed.command].concat(parsed.args).join(" ");
        if (isWin) {
          parsed.command =
            typeof parsed.options.shell === "string"
              ? parsed.options.shell
              : process.env.comspec || "cmd.exe";
          parsed.args = ["/d", "/s", "/c", '"' + shellCommand + '"'];
          parsed.options.windowsVerbatimArguments = true;
        } else {
          if (typeof parsed.options.shell === "string") {
            parsed.command = parsed.options.shell;
          } else if (process.platform === "android") {
            parsed.command = "/system/bin/sh";
          } else {
            parsed.command = "/bin/sh";
          }
          parsed.args = ["-c", shellCommand];
        }
        return parsed;
      }
      __name(parseShell, "parseShell");
      function parse3(command, args, options) {
        var parsed;
        if (args && !Array.isArray(args)) {
          options = args;
          args = null;
        }
        args = args ? args.slice(0) : [];
        options = options || {};
        parsed = {
          command,
          args,
          options,
          file: void 0,
          original: command,
        };
        return options.shell ? parseShell(parsed) : parseNonShell(parsed);
      }
      __name(parse3, "parse");
      module.exports = parse3;
    },
  });

  // node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/enoent.js
  var require_enoent = __commonJS({
    "node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/lib/enoent.js"(
      exports,
      module,
    ) {
      "use strict";
      var isWin = process.platform === "win32";
      var resolveCommand = require_resolveCommand();
      var isNode10 = process.version.indexOf("v0.10.") === 0;
      function notFoundError(command, syscall) {
        var err;
        err = new Error(syscall + " " + command + " ENOENT");
        err.code = err.errno = "ENOENT";
        err.syscall = syscall + " " + command;
        return err;
      }
      __name(notFoundError, "notFoundError");
      function hookChildProcess(cp, parsed) {
        var originalEmit;
        if (!isWin) {
          return;
        }
        originalEmit = cp.emit;
        cp.emit = function (name, arg1) {
          var err;
          if (name === "exit") {
            err = verifyENOENT(arg1, parsed, "spawn");
            if (err) {
              return originalEmit.call(cp, "error", err);
            }
          }
          return originalEmit.apply(cp, arguments);
        };
      }
      __name(hookChildProcess, "hookChildProcess");
      function verifyENOENT(status, parsed) {
        if (isWin && status === 1 && !parsed.file) {
          return notFoundError(parsed.original, "spawn");
        }
        return null;
      }
      __name(verifyENOENT, "verifyENOENT");
      function verifyENOENTSync(status, parsed) {
        if (isWin && status === 1 && !parsed.file) {
          return notFoundError(parsed.original, "spawnSync");
        }
        if (isNode10 && status === -1) {
          parsed.file = isWin ? parsed.file : resolveCommand(parsed.original);
          if (!parsed.file) {
            return notFoundError(parsed.original, "spawnSync");
          }
        }
        return null;
      }
      __name(verifyENOENTSync, "verifyENOENTSync");
      module.exports.hookChildProcess = hookChildProcess;
      module.exports.verifyENOENT = verifyENOENT;
      module.exports.verifyENOENTSync = verifyENOENTSync;
      module.exports.notFoundError = notFoundError;
    },
  });

  // node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/index.js
  var require_cross_spawn = __commonJS({
    "node_modules/.pnpm/cross-spawn@5.1.0/node_modules/cross-spawn/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var cp = __require("child_process");
      var parse3 = require_parse6();
      var enoent = require_enoent();
      var cpSpawnSync = cp.spawnSync;
      function spawn2(command, args, options) {
        var parsed;
        var spawned;
        parsed = parse3(command, args, options);
        spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
        enoent.hookChildProcess(spawned, parsed);
        return spawned;
      }
      __name(spawn2, "spawn");
      function spawnSync(command, args, options) {
        var parsed;
        var result;
        if (!cpSpawnSync) {
          try {
            cpSpawnSync = __require("spawn-sync");
          } catch (ex) {
            throw new Error(
              "In order to use spawnSync on node 0.10 or older, you must install spawn-sync:\n\n  npm install spawn-sync --save",
            );
          }
        }
        parsed = parse3(command, args, options);
        result = cpSpawnSync(parsed.command, parsed.args, parsed.options);
        result.error =
          result.error || enoent.verifyENOENTSync(result.status, parsed);
        return result;
      }
      __name(spawnSync, "spawnSync");
      module.exports = spawn2;
      module.exports.spawn = spawn2;
      module.exports.sync = spawnSync;
      module.exports._parse = parse3;
      module.exports._enoent = enoent;
    },
  });

  // node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/signals.js
  var require_signals = __commonJS({
    "node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/signals.js"(
      exports,
      module,
    ) {
      module.exports = ["SIGABRT", "SIGALRM", "SIGHUP", "SIGINT", "SIGTERM"];
      if (process.platform !== "win32") {
        module.exports.push(
          "SIGVTALRM",
          "SIGXCPU",
          "SIGXFSZ",
          "SIGUSR2",
          "SIGTRAP",
          "SIGSYS",
          "SIGQUIT",
          "SIGIOT",
          // should detect profiler and enable/disable accordingly.
          // see #21
          // 'SIGPROF'
        );
      }
      if (process.platform === "linux") {
        module.exports.push(
          "SIGIO",
          "SIGPOLL",
          "SIGPWR",
          "SIGSTKFLT",
          "SIGUNUSED",
        );
      }
    },
  });

  // node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/index.js
  var require_signal_exit = __commonJS({
    "node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/index.js"(
      exports,
      module,
    ) {
      var process2 = global.process;
      var processOk = /* @__PURE__ */ __name(function (process3) {
        return (
          process3 &&
          typeof process3 === "object" &&
          typeof process3.removeListener === "function" &&
          typeof process3.emit === "function" &&
          typeof process3.reallyExit === "function" &&
          typeof process3.listeners === "function" &&
          typeof process3.kill === "function" &&
          typeof process3.pid === "number" &&
          typeof process3.on === "function"
        );
      }, "processOk");
      if (!processOk(process2)) {
        module.exports = function () {
          return function () {};
        };
      } else {
        assert = __require("assert");
        signals = require_signals();
        isWin = /^win/i.test(process2.platform);
        EE = __require("events");
        if (typeof EE !== "function") {
          EE = EE.EventEmitter;
        }
        if (process2.__signal_exit_emitter__) {
          emitter = process2.__signal_exit_emitter__;
        } else {
          emitter = process2.__signal_exit_emitter__ = new EE();
          emitter.count = 0;
          emitter.emitted = {};
        }
        if (!emitter.infinite) {
          emitter.setMaxListeners(Infinity);
          emitter.infinite = true;
        }
        module.exports = function (cb, opts) {
          if (!processOk(global.process)) {
            return function () {};
          }
          assert.equal(
            typeof cb,
            "function",
            "a callback must be provided for exit handler",
          );
          if (loaded === false) {
            load();
          }
          var ev = "exit";
          if (opts && opts.alwaysLast) {
            ev = "afterexit";
          }
          var remove = /* @__PURE__ */ __name(function () {
            emitter.removeListener(ev, cb);
            if (
              emitter.listeners("exit").length === 0 &&
              emitter.listeners("afterexit").length === 0
            ) {
              unload();
            }
          }, "remove");
          emitter.on(ev, cb);
          return remove;
        };
        unload = /* @__PURE__ */ __name(function unload2() {
          if (!loaded || !processOk(global.process)) {
            return;
          }
          loaded = false;
          signals.forEach(function (sig) {
            try {
              process2.removeListener(sig, sigListeners[sig]);
            } catch (er) {}
          });
          process2.emit = originalProcessEmit;
          process2.reallyExit = originalProcessReallyExit;
          emitter.count -= 1;
        }, "unload");
        module.exports.unload = unload;
        emit = /* @__PURE__ */ __name(function emit2(event, code2, signal) {
          if (emitter.emitted[event]) {
            return;
          }
          emitter.emitted[event] = true;
          emitter.emit(event, code2, signal);
        }, "emit");
        sigListeners = {};
        signals.forEach(function (sig) {
          sigListeners[sig] = /* @__PURE__ */ __name(function listener() {
            if (!processOk(global.process)) {
              return;
            }
            var listeners = process2.listeners(sig);
            if (listeners.length === emitter.count) {
              unload();
              emit("exit", null, sig);
              emit("afterexit", null, sig);
              if (isWin && sig === "SIGHUP") {
                sig = "SIGINT";
              }
              process2.kill(process2.pid, sig);
            }
          }, "listener");
        });
        module.exports.signals = function () {
          return signals;
        };
        loaded = false;
        load = /* @__PURE__ */ __name(function load2() {
          if (loaded || !processOk(global.process)) {
            return;
          }
          loaded = true;
          emitter.count += 1;
          signals = signals.filter(function (sig) {
            try {
              process2.on(sig, sigListeners[sig]);
              return true;
            } catch (er) {
              return false;
            }
          });
          process2.emit = processEmit;
          process2.reallyExit = processReallyExit;
        }, "load");
        module.exports.load = load;
        originalProcessReallyExit = process2.reallyExit;
        processReallyExit = /* @__PURE__ */ __name(function processReallyExit2(
          code2,
        ) {
          if (!processOk(global.process)) {
            return;
          }
          process2.exitCode = code2 /* istanbul ignore next */ || 0;
          emit("exit", process2.exitCode, null);
          emit("afterexit", process2.exitCode, null);
          originalProcessReallyExit.call(process2, process2.exitCode);
        }, "processReallyExit");
        originalProcessEmit = process2.emit;
        processEmit = /* @__PURE__ */ __name(function processEmit2(ev, arg) {
          if (ev === "exit" && processOk(global.process)) {
            if (arg !== void 0) {
              process2.exitCode = arg;
            }
            var ret = originalProcessEmit.apply(this, arguments);
            emit("exit", process2.exitCode, null);
            emit("afterexit", process2.exitCode, null);
            return ret;
          } else {
            return originalProcessEmit.apply(this, arguments);
          }
        }, "processEmit");
      }
      var assert;
      var signals;
      var isWin;
      var EE;
      var emitter;
      var unload;
      var emit;
      var sigListeners;
      var loaded;
      var load;
      var originalProcessReallyExit;
      var processReallyExit;
      var originalProcessEmit;
      var processEmit;
    },
  });

  // node_modules/.pnpm/spawndamnit@2.0.0/node_modules/spawndamnit/promise.js
  var require_promise = __commonJS({
    "node_modules/.pnpm/spawndamnit@2.0.0/node_modules/spawndamnit/promise.js"(
      exports,
      module,
    ) {
      "use strict";
      var EventEmitter = __require("events");
      var ChildProcessPromise = class extends Promise {
        static {
          __name(this, "ChildProcessPromise");
        }
        constructor(executer) {
          let resolve;
          let reject;
          super((res, rej) => {
            resolve = res;
            reject = rej;
          });
          executer(resolve, reject, this);
        }
      };
      Object.assign(ChildProcessPromise.prototype, EventEmitter.prototype);
      module.exports = ChildProcessPromise;
    },
  });

  // node_modules/.pnpm/spawndamnit@2.0.0/node_modules/spawndamnit/index.js
  var require_spawndamnit = __commonJS({
    "node_modules/.pnpm/spawndamnit@2.0.0/node_modules/spawndamnit/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var crossSpawn = require_cross_spawn();
      var onExit = require_signal_exit();
      var EventEmitter = __require("events");
      var ChildProcessPromise = require_promise();
      var activeProcesses = /* @__PURE__ */ new Set();
      onExit(() => {
        for (let child of activeProcesses) {
          child.kill("SIGTERM");
        }
      });
      function spawn2(cmd, args, opts) {
        return new ChildProcessPromise((resolve, reject, events) => {
          let child = crossSpawn(cmd, args, opts);
          let stdout = Buffer.from("");
          let stderr = Buffer.from("");
          activeProcesses.add(child);
          if (child.stdout) {
            child.stdout.on("data", (data) => {
              stdout = Buffer.concat([stdout, data]);
              events.emit("stdout", data);
            });
          }
          if (child.stderr) {
            child.stderr.on("data", (data) => {
              stderr = Buffer.concat([stderr, data]);
              events.emit("stderr", data);
            });
          }
          child.on("error", (err) => {
            activeProcesses.delete(child);
            reject(err);
          });
          child.on("close", (code2) => {
            activeProcesses.delete(child);
            resolve({ code: code2, stdout, stderr });
          });
        });
      }
      __name(spawn2, "spawn");
      module.exports = spawn2;
      module.exports.ChildProcessPromise = ChildProcessPromise;
    },
  });

  // node_modules/.pnpm/is-windows@1.0.2/node_modules/is-windows/index.js
  var require_is_windows = __commonJS({
    "node_modules/.pnpm/is-windows@1.0.2/node_modules/is-windows/index.js"(
      exports,
      module,
    ) {
      (function (factory) {
        if (
          exports &&
          typeof exports === "object" &&
          typeof module !== "undefined"
        ) {
          module.exports = factory();
        } else if (typeof define === "function" && define.amd) {
          define([], factory);
        } else if (typeof window !== "undefined") {
          window.isWindows = factory();
        } else if (typeof global !== "undefined") {
          global.isWindows = factory();
        } else if (typeof self !== "undefined") {
          self.isWindows = factory();
        } else {
          this.isWindows = factory();
        }
      })(function () {
        "use strict";
        return /* @__PURE__ */ __name(function isWindows() {
          return (
            process &&
            (process.platform === "win32" ||
              /^(msys|cygwin)$/.test(process.env.OSTYPE))
          );
        }, "isWindows");
      });
    },
  });

  // node_modules/.pnpm/better-path-resolve@1.0.0/node_modules/better-path-resolve/index.js
  var require_better_path_resolve = __commonJS({
    "node_modules/.pnpm/better-path-resolve@1.0.0/node_modules/better-path-resolve/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var isWindows = require_is_windows();
      module.exports = isWindows() ? winResolve : path4.resolve;
      function winResolve(p) {
        if (arguments.length === 0) return path4.resolve();
        if (typeof p !== "string") {
          return path4.resolve(p);
        }
        if (p[1] === ":") {
          const cc = p[0].charCodeAt();
          if (cc < 65 || cc > 90) {
            p = `${p[0].toUpperCase()}${p.substr(1)}`;
          }
        }
        if (p.endsWith(":")) {
          return p;
        }
        return path4.resolve(p);
      }
      __name(winResolve, "winResolve");
    },
  });

  // node_modules/.pnpm/is-subdir@1.2.0/node_modules/is-subdir/index.js
  var require_is_subdir = __commonJS({
    "node_modules/.pnpm/is-subdir@1.2.0/node_modules/is-subdir/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var betterPathResolve = require_better_path_resolve();
      var path4 = __require("path");
      function isSubdir2(parentDir, subdir) {
        const rParent = `${betterPathResolve(parentDir)}${path4.sep}`;
        const rDir = `${betterPathResolve(subdir)}${path4.sep}`;
        return rDir.startsWith(rParent);
      }
      __name(isSubdir2, "isSubdir");
      isSubdir2.strict = /* @__PURE__ */ __name(function isSubdirStrict(
        parentDir,
        subdir,
      ) {
        const rParent = `${betterPathResolve(parentDir)}${path4.sep}`;
        const rDir = `${betterPathResolve(subdir)}${path4.sep}`;
        return rDir !== rParent && rDir.startsWith(rParent);
      }, "isSubdirStrict");
      module.exports = isSubdir2;
    },
  });

  // node_modules/.pnpm/picocolors@1.1.0/node_modules/picocolors/picocolors.js
  var require_picocolors = __commonJS({
    "node_modules/.pnpm/picocolors@1.1.0/node_modules/picocolors/picocolors.js"(
      exports,
      module,
    ) {
      var argv = process.argv || [];
      var env = process.env;
      var isColorSupported =
        !("NO_COLOR" in env || argv.includes("--no-color")) &&
        ("FORCE_COLOR" in env ||
          argv.includes("--color") ||
          process.platform === "win32" ||
          (__require != null &&
            __require("tty").isatty(1) &&
            env.TERM !== "dumb") ||
          "CI" in env);
      var formatter = /* @__PURE__ */ __name(
        (open, close, replace = open) =>
          (input) => {
            let string3 = "" + input;
            let index2 = string3.indexOf(close, open.length);
            return ~index2
              ? open + replaceClose(string3, close, replace, index2) + close
              : open + string3 + close;
          },
        "formatter",
      );
      var replaceClose = /* @__PURE__ */ __name(
        (string3, close, replace, index2) => {
          let result = "";
          let cursor = 0;
          do {
            result += string3.substring(cursor, index2) + replace;
            cursor = index2 + close.length;
            index2 = string3.indexOf(close, cursor);
          } while (~index2);
          return result + string3.substring(cursor);
        },
        "replaceClose",
      );
      var createColors = /* @__PURE__ */ __name(
        (enabled = isColorSupported) => {
          let init = enabled ? formatter : () => String;
          return {
            isColorSupported: enabled,
            reset: init("\x1B[0m", "\x1B[0m"),
            bold: init("\x1B[1m", "\x1B[22m", "\x1B[22m\x1B[1m"),
            dim: init("\x1B[2m", "\x1B[22m", "\x1B[22m\x1B[2m"),
            italic: init("\x1B[3m", "\x1B[23m"),
            underline: init("\x1B[4m", "\x1B[24m"),
            inverse: init("\x1B[7m", "\x1B[27m"),
            hidden: init("\x1B[8m", "\x1B[28m"),
            strikethrough: init("\x1B[9m", "\x1B[29m"),
            black: init("\x1B[30m", "\x1B[39m"),
            red: init("\x1B[31m", "\x1B[39m"),
            green: init("\x1B[32m", "\x1B[39m"),
            yellow: init("\x1B[33m", "\x1B[39m"),
            blue: init("\x1B[34m", "\x1B[39m"),
            magenta: init("\x1B[35m", "\x1B[39m"),
            cyan: init("\x1B[36m", "\x1B[39m"),
            white: init("\x1B[37m", "\x1B[39m"),
            gray: init("\x1B[90m", "\x1B[39m"),
            bgBlack: init("\x1B[40m", "\x1B[49m"),
            bgRed: init("\x1B[41m", "\x1B[49m"),
            bgGreen: init("\x1B[42m", "\x1B[49m"),
            bgYellow: init("\x1B[43m", "\x1B[49m"),
            bgBlue: init("\x1B[44m", "\x1B[49m"),
            bgMagenta: init("\x1B[45m", "\x1B[49m"),
            bgCyan: init("\x1B[46m", "\x1B[49m"),
            bgWhite: init("\x1B[47m", "\x1B[49m"),
            blackBright: init("\x1B[90m", "\x1B[39m"),
            redBright: init("\x1B[91m", "\x1B[39m"),
            greenBright: init("\x1B[92m", "\x1B[39m"),
            yellowBright: init("\x1B[93m", "\x1B[39m"),
            blueBright: init("\x1B[94m", "\x1B[39m"),
            magentaBright: init("\x1B[95m", "\x1B[39m"),
            cyanBright: init("\x1B[96m", "\x1B[39m"),
            whiteBright: init("\x1B[97m", "\x1B[39m"),
            bgBlackBright: init("\x1B[100m", "\x1B[49m"),
            bgRedBright: init("\x1B[101m", "\x1B[49m"),
            bgGreenBright: init("\x1B[102m", "\x1B[49m"),
            bgYellowBright: init("\x1B[103m", "\x1B[49m"),
            bgBlueBright: init("\x1B[104m", "\x1B[49m"),
            bgMagentaBright: init("\x1B[105m", "\x1B[49m"),
            bgCyanBright: init("\x1B[106m", "\x1B[49m"),
            bgWhiteBright: init("\x1B[107m", "\x1B[49m"),
          };
        },
        "createColors",
      );
      module.exports = createColors();
      module.exports.createColors = createColors;
    },
  });

  // node_modules/.pnpm/p-map@2.1.0/node_modules/p-map/index.js
  var require_p_map = __commonJS({
    "node_modules/.pnpm/p-map@2.1.0/node_modules/p-map/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var pMap = /* @__PURE__ */ __name(
        (iterable, mapper, options) =>
          new Promise((resolve, reject) => {
            options = Object.assign(
              {
                concurrency: Infinity,
              },
              options,
            );
            if (typeof mapper !== "function") {
              throw new TypeError("Mapper function is required");
            }
            const { concurrency } = options;
            if (!(typeof concurrency === "number" && concurrency >= 1)) {
              throw new TypeError(
                `Expected \`concurrency\` to be a number from 1 and up, got \`${concurrency}\` (${typeof concurrency})`,
              );
            }
            const ret = [];
            const iterator = iterable[Symbol.iterator]();
            let isRejected = false;
            let isIterableDone = false;
            let resolvingCount = 0;
            let currentIndex = 0;
            const next = /* @__PURE__ */ __name(() => {
              if (isRejected) {
                return;
              }
              const nextItem = iterator.next();
              const i = currentIndex;
              currentIndex++;
              if (nextItem.done) {
                isIterableDone = true;
                if (resolvingCount === 0) {
                  resolve(ret);
                }
                return;
              }
              resolvingCount++;
              Promise.resolve(nextItem.value)
                .then((element) => mapper(element, i))
                .then(
                  (value) => {
                    ret[i] = value;
                    resolvingCount--;
                    next();
                  },
                  (error) => {
                    isRejected = true;
                    reject(error);
                  },
                );
            }, "next");
            for (let i = 0; i < concurrency; i++) {
              next();
              if (isIterableDone) {
                break;
              }
            }
          }),
        "pMap",
      );
      module.exports = pMap;
      module.exports.default = pMap;
    },
  });

  // node_modules/.pnpm/p-filter@2.1.0/node_modules/p-filter/index.js
  var require_p_filter = __commonJS({
    "node_modules/.pnpm/p-filter@2.1.0/node_modules/p-filter/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var pMap = require_p_map();
      var pFilter2 = /* @__PURE__ */ __name(
        async (iterable, filterer, options) => {
          const values = await pMap(
            iterable,
            (element, index2) =>
              Promise.all([filterer(element, index2), element]),
            options,
          );
          return values
            .filter((value) => Boolean(value[0]))
            .map((value) => value[1]);
        },
        "pFilter",
      );
      module.exports = pFilter2;
      module.exports.default = pFilter2;
    },
  });

  // node_modules/.pnpm/resolve-from@5.0.0/node_modules/resolve-from/index.js
  var require_resolve_from = __commonJS({
    "node_modules/.pnpm/resolve-from@5.0.0/node_modules/resolve-from/index.js"(
      exports,
      module,
    ) {
      "use strict";
      var path4 = __require("path");
      var Module = __require("module");
      var fs6 = __require("fs");
      var resolveFrom2 = /* @__PURE__ */ __name(
        (fromDirectory, moduleId, silent) => {
          if (typeof fromDirectory !== "string") {
            throw new TypeError(
              `Expected \`fromDir\` to be of type \`string\`, got \`${typeof fromDirectory}\``,
            );
          }
          if (typeof moduleId !== "string") {
            throw new TypeError(
              `Expected \`moduleId\` to be of type \`string\`, got \`${typeof moduleId}\``,
            );
          }
          try {
            fromDirectory = fs6.realpathSync(fromDirectory);
          } catch (error) {
            if (error.code === "ENOENT") {
              fromDirectory = path4.resolve(fromDirectory);
            } else if (silent) {
              return;
            } else {
              throw error;
            }
          }
          const fromFile = path4.join(fromDirectory, "noop.js");
          const resolveFileName = /* @__PURE__ */ __name(
            () =>
              Module._resolveFilename(moduleId, {
                id: fromFile,
                filename: fromFile,
                paths: Module._nodeModulePaths(fromDirectory),
              }),
            "resolveFileName",
          );
          if (silent) {
            try {
              return resolveFileName();
            } catch (error) {
              return;
            }
          }
          return resolveFileName();
        },
        "resolveFrom",
      );
      module.exports = (fromDirectory, moduleId) =>
        resolveFrom2(fromDirectory, moduleId);
      module.exports.silent = (fromDirectory, moduleId) =>
        resolveFrom2(fromDirectory, moduleId, true);
    },
  });

  // node_modules/.pnpm/bottleneck@2.19.5/node_modules/bottleneck/light.js
  var require_light = __commonJS({
    "node_modules/.pnpm/bottleneck@2.19.5/node_modules/bottleneck/light.js"(
      exports,
      module,
    ) {
      (function (global2, factory) {
        typeof exports === "object" && typeof module !== "undefined"
          ? (module.exports = factory())
          : typeof define === "function" && define.amd
            ? define(factory)
            : (global2.Bottleneck = factory());
      })(exports, function () {
        "use strict";
        var commonjsGlobal =
          typeof globalThis !== "undefined"
            ? globalThis
            : typeof window !== "undefined"
              ? window
              : typeof global !== "undefined"
                ? global
                : typeof self !== "undefined"
                  ? self
                  : {};
        function getCjsExportFromNamespace(n) {
          return (n && n["default"]) || n;
        }
        __name(getCjsExportFromNamespace, "getCjsExportFromNamespace");
        var load = /* @__PURE__ */ __name(function (
          received,
          defaults,
          onto = {},
        ) {
          var k, ref, v;
          for (k in defaults) {
            v = defaults[k];
            onto[k] = (ref = received[k]) != null ? ref : v;
          }
          return onto;
        }, "load");
        var overwrite = /* @__PURE__ */ __name(function (
          received,
          defaults,
          onto = {},
        ) {
          var k, v;
          for (k in received) {
            v = received[k];
            if (defaults[k] !== void 0) {
              onto[k] = v;
            }
          }
          return onto;
        }, "overwrite");
        var parser = {
          load,
          overwrite,
        };
        var DLList;
        DLList = class DLList {
          static {
            __name(this, "DLList");
          }
          constructor(incr, decr) {
            this.incr = incr;
            this.decr = decr;
            this._first = null;
            this._last = null;
            this.length = 0;
          }
          push(value) {
            var node2;
            this.length++;
            if (typeof this.incr === "function") {
              this.incr();
            }
            node2 = {
              value,
              prev: this._last,
              next: null,
            };
            if (this._last != null) {
              this._last.next = node2;
              this._last = node2;
            } else {
              this._first = this._last = node2;
            }
            return void 0;
          }
          shift() {
            var value;
            if (this._first == null) {
              return;
            } else {
              this.length--;
              if (typeof this.decr === "function") {
                this.decr();
              }
            }
            value = this._first.value;
            if ((this._first = this._first.next) != null) {
              this._first.prev = null;
            } else {
              this._last = null;
            }
            return value;
          }
          first() {
            if (this._first != null) {
              return this._first.value;
            }
          }
          getArray() {
            var node2, ref, results;
            node2 = this._first;
            results = [];
            while (node2 != null) {
              results.push(((ref = node2), (node2 = node2.next), ref.value));
            }
            return results;
          }
          forEachShift(cb) {
            var node2;
            node2 = this.shift();
            while (node2 != null) {
              cb(node2), (node2 = this.shift());
            }
            return void 0;
          }
          debug() {
            var node2, ref, ref1, ref2, results;
            node2 = this._first;
            results = [];
            while (node2 != null) {
              results.push(
                ((ref = node2),
                (node2 = node2.next),
                {
                  value: ref.value,
                  prev: (ref1 = ref.prev) != null ? ref1.value : void 0,
                  next: (ref2 = ref.next) != null ? ref2.value : void 0,
                }),
              );
            }
            return results;
          }
        };
        var DLList_1 = DLList;
        var Events;
        Events = class Events {
          static {
            __name(this, "Events");
          }
          constructor(instance) {
            this.instance = instance;
            this._events = {};
            if (
              this.instance.on != null ||
              this.instance.once != null ||
              this.instance.removeAllListeners != null
            ) {
              throw new Error("An Emitter already exists for this object");
            }
            this.instance.on = (name, cb) => {
              return this._addListener(name, "many", cb);
            };
            this.instance.once = (name, cb) => {
              return this._addListener(name, "once", cb);
            };
            this.instance.removeAllListeners = (name = null) => {
              if (name != null) {
                return delete this._events[name];
              } else {
                return (this._events = {});
              }
            };
          }
          _addListener(name, status, cb) {
            var base;
            if ((base = this._events)[name] == null) {
              base[name] = [];
            }
            this._events[name].push({ cb, status });
            return this.instance;
          }
          listenerCount(name) {
            if (this._events[name] != null) {
              return this._events[name].length;
            } else {
              return 0;
            }
          }
          async trigger(name, ...args) {
            var e, promises;
            try {
              if (name !== "debug") {
                this.trigger("debug", `Event triggered: ${name}`, args);
              }
              if (this._events[name] == null) {
                return;
              }
              this._events[name] = this._events[name].filter(
                function (listener) {
                  return listener.status !== "none";
                },
              );
              promises = this._events[name].map(async (listener) => {
                var e2, returned;
                if (listener.status === "none") {
                  return;
                }
                if (listener.status === "once") {
                  listener.status = "none";
                }
                try {
                  returned =
                    typeof listener.cb === "function"
                      ? listener.cb(...args)
                      : void 0;
                  if (
                    typeof (returned != null ? returned.then : void 0) ===
                    "function"
                  ) {
                    return await returned;
                  } else {
                    return returned;
                  }
                } catch (error) {
                  e2 = error;
                  {
                    this.trigger("error", e2);
                  }
                  return null;
                }
              });
              return (await Promise.all(promises)).find(function (x) {
                return x != null;
              });
            } catch (error) {
              e = error;
              {
                this.trigger("error", e);
              }
              return null;
            }
          }
        };
        var Events_1 = Events;
        var DLList$1, Events$1, Queues;
        DLList$1 = DLList_1;
        Events$1 = Events_1;
        Queues = class Queues {
          static {
            __name(this, "Queues");
          }
          constructor(num_priorities) {
            var i;
            this.Events = new Events$1(this);
            this._length = 0;
            this._lists = function () {
              var j, ref, results;
              results = [];
              for (
                i = j = 1, ref = num_priorities;
                1 <= ref ? j <= ref : j >= ref;
                i = 1 <= ref ? ++j : --j
              ) {
                results.push(
                  new DLList$1(
                    () => {
                      return this.incr();
                    },
                    () => {
                      return this.decr();
                    },
                  ),
                );
              }
              return results;
            }.call(this);
          }
          incr() {
            if (this._length++ === 0) {
              return this.Events.trigger("leftzero");
            }
          }
          decr() {
            if (--this._length === 0) {
              return this.Events.trigger("zero");
            }
          }
          push(job) {
            return this._lists[job.options.priority].push(job);
          }
          queued(priority) {
            if (priority != null) {
              return this._lists[priority].length;
            } else {
              return this._length;
            }
          }
          shiftAll(fn) {
            return this._lists.forEach(function (list4) {
              return list4.forEachShift(fn);
            });
          }
          getFirst(arr = this._lists) {
            var j, len, list4;
            for (j = 0, len = arr.length; j < len; j++) {
              list4 = arr[j];
              if (list4.length > 0) {
                return list4;
              }
            }
            return [];
          }
          shiftLastFrom(priority) {
            return this.getFirst(this._lists.slice(priority).reverse()).shift();
          }
        };
        var Queues_1 = Queues;
        var BottleneckError;
        BottleneckError = class BottleneckError extends Error {
          static {
            __name(this, "BottleneckError");
          }
        };
        var BottleneckError_1 = BottleneckError;
        var BottleneckError$1, DEFAULT_PRIORITY, Job, NUM_PRIORITIES, parser$1;
        NUM_PRIORITIES = 10;
        DEFAULT_PRIORITY = 5;
        parser$1 = parser;
        BottleneckError$1 = BottleneckError_1;
        Job = class Job {
          static {
            __name(this, "Job");
          }
          constructor(
            task,
            args,
            options,
            jobDefaults,
            rejectOnDrop,
            Events2,
            _states,
            Promise2,
          ) {
            this.task = task;
            this.args = args;
            this.rejectOnDrop = rejectOnDrop;
            this.Events = Events2;
            this._states = _states;
            this.Promise = Promise2;
            this.options = parser$1.load(options, jobDefaults);
            this.options.priority = this._sanitizePriority(
              this.options.priority,
            );
            if (this.options.id === jobDefaults.id) {
              this.options.id = `${this.options.id}-${this._randomIndex()}`;
            }
            this.promise = new this.Promise((_resolve, _reject) => {
              this._resolve = _resolve;
              this._reject = _reject;
            });
            this.retryCount = 0;
          }
          _sanitizePriority(priority) {
            var sProperty;
            sProperty = ~~priority !== priority ? DEFAULT_PRIORITY : priority;
            if (sProperty < 0) {
              return 0;
            } else if (sProperty > NUM_PRIORITIES - 1) {
              return NUM_PRIORITIES - 1;
            } else {
              return sProperty;
            }
          }
          _randomIndex() {
            return Math.random().toString(36).slice(2);
          }
          doDrop({
            error,
            message = "This job has been dropped by Bottleneck",
          } = {}) {
            if (this._states.remove(this.options.id)) {
              if (this.rejectOnDrop) {
                this._reject(
                  error != null ? error : new BottleneckError$1(message),
                );
              }
              this.Events.trigger("dropped", {
                args: this.args,
                options: this.options,
                task: this.task,
                promise: this.promise,
              });
              return true;
            } else {
              return false;
            }
          }
          _assertStatus(expected) {
            var status;
            status = this._states.jobStatus(this.options.id);
            if (
              !(status === expected || (expected === "DONE" && status === null))
            ) {
              throw new BottleneckError$1(
                `Invalid job status ${status}, expected ${expected}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`,
              );
            }
          }
          doReceive() {
            this._states.start(this.options.id);
            return this.Events.trigger("received", {
              args: this.args,
              options: this.options,
            });
          }
          doQueue(reachedHWM, blocked) {
            this._assertStatus("RECEIVED");
            this._states.next(this.options.id);
            return this.Events.trigger("queued", {
              args: this.args,
              options: this.options,
              reachedHWM,
              blocked,
            });
          }
          doRun() {
            if (this.retryCount === 0) {
              this._assertStatus("QUEUED");
              this._states.next(this.options.id);
            } else {
              this._assertStatus("EXECUTING");
            }
            return this.Events.trigger("scheduled", {
              args: this.args,
              options: this.options,
            });
          }
          async doExecute(chained, clearGlobalState, run, free) {
            var error, eventInfo, passed;
            if (this.retryCount === 0) {
              this._assertStatus("RUNNING");
              this._states.next(this.options.id);
            } else {
              this._assertStatus("EXECUTING");
            }
            eventInfo = {
              args: this.args,
              options: this.options,
              retryCount: this.retryCount,
            };
            this.Events.trigger("executing", eventInfo);
            try {
              passed = await (chained != null
                ? chained.schedule(this.options, this.task, ...this.args)
                : this.task(...this.args));
              if (clearGlobalState()) {
                this.doDone(eventInfo);
                await free(this.options, eventInfo);
                this._assertStatus("DONE");
                return this._resolve(passed);
              }
            } catch (error1) {
              error = error1;
              return this._onFailure(
                error,
                eventInfo,
                clearGlobalState,
                run,
                free,
              );
            }
          }
          doExpire(clearGlobalState, run, free) {
            var error, eventInfo;
            if (this._states.jobStatus(this.options.id === "RUNNING")) {
              this._states.next(this.options.id);
            }
            this._assertStatus("EXECUTING");
            eventInfo = {
              args: this.args,
              options: this.options,
              retryCount: this.retryCount,
            };
            error = new BottleneckError$1(
              `This job timed out after ${this.options.expiration} ms.`,
            );
            return this._onFailure(
              error,
              eventInfo,
              clearGlobalState,
              run,
              free,
            );
          }
          async _onFailure(error, eventInfo, clearGlobalState, run, free) {
            var retry, retryAfter;
            if (clearGlobalState()) {
              retry = await this.Events.trigger("failed", error, eventInfo);
              if (retry != null) {
                retryAfter = ~~retry;
                this.Events.trigger(
                  "retry",
                  `Retrying ${this.options.id} after ${retryAfter} ms`,
                  eventInfo,
                );
                this.retryCount++;
                return run(retryAfter);
              } else {
                this.doDone(eventInfo);
                await free(this.options, eventInfo);
                this._assertStatus("DONE");
                return this._reject(error);
              }
            }
          }
          doDone(eventInfo) {
            this._assertStatus("EXECUTING");
            this._states.next(this.options.id);
            return this.Events.trigger("done", eventInfo);
          }
        };
        var Job_1 = Job;
        var BottleneckError$2, LocalDatastore, parser$2;
        parser$2 = parser;
        BottleneckError$2 = BottleneckError_1;
        LocalDatastore = class LocalDatastore {
          static {
            __name(this, "LocalDatastore");
          }
          constructor(instance, storeOptions, storeInstanceOptions) {
            this.instance = instance;
            this.storeOptions = storeOptions;
            this.clientId = this.instance._randomIndex();
            parser$2.load(storeInstanceOptions, storeInstanceOptions, this);
            this._nextRequest =
              this._lastReservoirRefresh =
              this._lastReservoirIncrease =
                Date.now();
            this._running = 0;
            this._done = 0;
            this._unblockTime = 0;
            this.ready = this.Promise.resolve();
            this.clients = {};
            this._startHeartbeat();
          }
          _startHeartbeat() {
            var base;
            if (
              this.heartbeat == null &&
              ((this.storeOptions.reservoirRefreshInterval != null &&
                this.storeOptions.reservoirRefreshAmount != null) ||
                (this.storeOptions.reservoirIncreaseInterval != null &&
                  this.storeOptions.reservoirIncreaseAmount != null))
            ) {
              return typeof (base = this.heartbeat =
                setInterval(() => {
                  var amount, incr, maximum, now, reservoir;
                  now = Date.now();
                  if (
                    this.storeOptions.reservoirRefreshInterval != null &&
                    now >=
                      this._lastReservoirRefresh +
                        this.storeOptions.reservoirRefreshInterval
                  ) {
                    this._lastReservoirRefresh = now;
                    this.storeOptions.reservoir =
                      this.storeOptions.reservoirRefreshAmount;
                    this.instance._drainAll(this.computeCapacity());
                  }
                  if (
                    this.storeOptions.reservoirIncreaseInterval != null &&
                    now >=
                      this._lastReservoirIncrease +
                        this.storeOptions.reservoirIncreaseInterval
                  ) {
                    ({
                      reservoirIncreaseAmount: amount,
                      reservoirIncreaseMaximum: maximum,
                      reservoir,
                    } = this.storeOptions);
                    this._lastReservoirIncrease = now;
                    incr =
                      maximum != null
                        ? Math.min(amount, maximum - reservoir)
                        : amount;
                    if (incr > 0) {
                      this.storeOptions.reservoir += incr;
                      return this.instance._drainAll(this.computeCapacity());
                    }
                  }
                }, this.heartbeatInterval)).unref === "function"
                ? base.unref()
                : void 0;
            } else {
              return clearInterval(this.heartbeat);
            }
          }
          async __publish__(message) {
            await this.yieldLoop();
            return this.instance.Events.trigger("message", message.toString());
          }
          async __disconnect__(flush) {
            await this.yieldLoop();
            clearInterval(this.heartbeat);
            return this.Promise.resolve();
          }
          yieldLoop(t = 0) {
            return new this.Promise(function (resolve, reject) {
              return setTimeout(resolve, t);
            });
          }
          computePenalty() {
            var ref;
            return (ref = this.storeOptions.penalty) != null
              ? ref
              : 15 * this.storeOptions.minTime || 5e3;
          }
          async __updateSettings__(options) {
            await this.yieldLoop();
            parser$2.overwrite(options, options, this.storeOptions);
            this._startHeartbeat();
            this.instance._drainAll(this.computeCapacity());
            return true;
          }
          async __running__() {
            await this.yieldLoop();
            return this._running;
          }
          async __queued__() {
            await this.yieldLoop();
            return this.instance.queued();
          }
          async __done__() {
            await this.yieldLoop();
            return this._done;
          }
          async __groupCheck__(time) {
            await this.yieldLoop();
            return this._nextRequest + this.timeout < time;
          }
          computeCapacity() {
            var maxConcurrent, reservoir;
            ({ maxConcurrent, reservoir } = this.storeOptions);
            if (maxConcurrent != null && reservoir != null) {
              return Math.min(maxConcurrent - this._running, reservoir);
            } else if (maxConcurrent != null) {
              return maxConcurrent - this._running;
            } else if (reservoir != null) {
              return reservoir;
            } else {
              return null;
            }
          }
          conditionsCheck(weight) {
            var capacity;
            capacity = this.computeCapacity();
            return capacity == null || weight <= capacity;
          }
          async __incrementReservoir__(incr) {
            var reservoir;
            await this.yieldLoop();
            reservoir = this.storeOptions.reservoir += incr;
            this.instance._drainAll(this.computeCapacity());
            return reservoir;
          }
          async __currentReservoir__() {
            await this.yieldLoop();
            return this.storeOptions.reservoir;
          }
          isBlocked(now) {
            return this._unblockTime >= now;
          }
          check(weight, now) {
            return this.conditionsCheck(weight) && this._nextRequest - now <= 0;
          }
          async __check__(weight) {
            var now;
            await this.yieldLoop();
            now = Date.now();
            return this.check(weight, now);
          }
          async __register__(index2, weight, expiration) {
            var now, wait;
            await this.yieldLoop();
            now = Date.now();
            if (this.conditionsCheck(weight)) {
              this._running += weight;
              if (this.storeOptions.reservoir != null) {
                this.storeOptions.reservoir -= weight;
              }
              wait = Math.max(this._nextRequest - now, 0);
              this._nextRequest = now + wait + this.storeOptions.minTime;
              return {
                success: true,
                wait,
                reservoir: this.storeOptions.reservoir,
              };
            } else {
              return {
                success: false,
              };
            }
          }
          strategyIsBlock() {
            return this.storeOptions.strategy === 3;
          }
          async __submit__(queueLength, weight) {
            var blocked, now, reachedHWM;
            await this.yieldLoop();
            if (
              this.storeOptions.maxConcurrent != null &&
              weight > this.storeOptions.maxConcurrent
            ) {
              throw new BottleneckError$2(
                `Impossible to add a job having a weight of ${weight} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`,
              );
            }
            now = Date.now();
            reachedHWM =
              this.storeOptions.highWater != null &&
              queueLength === this.storeOptions.highWater &&
              !this.check(weight, now);
            blocked =
              this.strategyIsBlock() && (reachedHWM || this.isBlocked(now));
            if (blocked) {
              this._unblockTime = now + this.computePenalty();
              this._nextRequest = this._unblockTime + this.storeOptions.minTime;
              this.instance._dropAllQueued();
            }
            return {
              reachedHWM,
              blocked,
              strategy: this.storeOptions.strategy,
            };
          }
          async __free__(index2, weight) {
            await this.yieldLoop();
            this._running -= weight;
            this._done += weight;
            this.instance._drainAll(this.computeCapacity());
            return {
              running: this._running,
            };
          }
        };
        var LocalDatastore_1 = LocalDatastore;
        var BottleneckError$3, States;
        BottleneckError$3 = BottleneckError_1;
        States = class States {
          static {
            __name(this, "States");
          }
          constructor(status1) {
            this.status = status1;
            this._jobs = {};
            this.counts = this.status.map(function () {
              return 0;
            });
          }
          next(id) {
            var current, next;
            current = this._jobs[id];
            next = current + 1;
            if (current != null && next < this.status.length) {
              this.counts[current]--;
              this.counts[next]++;
              return this._jobs[id]++;
            } else if (current != null) {
              this.counts[current]--;
              return delete this._jobs[id];
            }
          }
          start(id) {
            var initial;
            initial = 0;
            this._jobs[id] = initial;
            return this.counts[initial]++;
          }
          remove(id) {
            var current;
            current = this._jobs[id];
            if (current != null) {
              this.counts[current]--;
              delete this._jobs[id];
            }
            return current != null;
          }
          jobStatus(id) {
            var ref;
            return (ref = this.status[this._jobs[id]]) != null ? ref : null;
          }
          statusJobs(status) {
            var k, pos, ref, results, v;
            if (status != null) {
              pos = this.status.indexOf(status);
              if (pos < 0) {
                throw new BottleneckError$3(
                  `status must be one of ${this.status.join(", ")}`,
                );
              }
              ref = this._jobs;
              results = [];
              for (k in ref) {
                v = ref[k];
                if (v === pos) {
                  results.push(k);
                }
              }
              return results;
            } else {
              return Object.keys(this._jobs);
            }
          }
          statusCounts() {
            return this.counts.reduce((acc, v, i) => {
              acc[this.status[i]] = v;
              return acc;
            }, {});
          }
        };
        var States_1 = States;
        var DLList$2, Sync;
        DLList$2 = DLList_1;
        Sync = class Sync {
          static {
            __name(this, "Sync");
          }
          constructor(name, Promise2) {
            this.schedule = this.schedule.bind(this);
            this.name = name;
            this.Promise = Promise2;
            this._running = 0;
            this._queue = new DLList$2();
          }
          isEmpty() {
            return this._queue.length === 0;
          }
          async _tryToRun() {
            var args, cb, error, reject, resolve, returned, task;
            if (this._running < 1 && this._queue.length > 0) {
              this._running++;
              ({ task, args, resolve, reject } = this._queue.shift());
              cb = await (async function () {
                try {
                  returned = await task(...args);
                  return function () {
                    return resolve(returned);
                  };
                } catch (error1) {
                  error = error1;
                  return function () {
                    return reject(error);
                  };
                }
              })();
              this._running--;
              this._tryToRun();
              return cb();
            }
          }
          schedule(task, ...args) {
            var promise, reject, resolve;
            resolve = reject = null;
            promise = new this.Promise(function (_resolve, _reject) {
              resolve = _resolve;
              return (reject = _reject);
            });
            this._queue.push({ task, args, resolve, reject });
            this._tryToRun();
            return promise;
          }
        };
        var Sync_1 = Sync;
        var version2 = "2.19.5";
        var version$1 = {
          version: version2,
        };
        var version$2 = /* @__PURE__ */ Object.freeze({
          version: version2,
          default: version$1,
        });
        var require$$2 = /* @__PURE__ */ __name(
          () =>
            console.log(
              "You must import the full version of Bottleneck in order to use this feature.",
            ),
          "require$$2",
        );
        var require$$3 = /* @__PURE__ */ __name(
          () =>
            console.log(
              "You must import the full version of Bottleneck in order to use this feature.",
            ),
          "require$$3",
        );
        var require$$4 = /* @__PURE__ */ __name(
          () =>
            console.log(
              "You must import the full version of Bottleneck in order to use this feature.",
            ),
          "require$$4",
        );
        var Events$2,
          Group,
          IORedisConnection$1,
          RedisConnection$1,
          Scripts$1,
          parser$3;
        parser$3 = parser;
        Events$2 = Events_1;
        RedisConnection$1 = require$$2;
        IORedisConnection$1 = require$$3;
        Scripts$1 = require$$4;
        Group = function () {
          class Group2 {
            static {
              __name(this, "Group");
            }
            constructor(limiterOptions = {}) {
              this.deleteKey = this.deleteKey.bind(this);
              this.limiterOptions = limiterOptions;
              parser$3.load(this.limiterOptions, this.defaults, this);
              this.Events = new Events$2(this);
              this.instances = {};
              this.Bottleneck = Bottleneck_1;
              this._startAutoCleanup();
              this.sharedConnection = this.connection != null;
              if (this.connection == null) {
                if (this.limiterOptions.datastore === "redis") {
                  this.connection = new RedisConnection$1(
                    Object.assign({}, this.limiterOptions, {
                      Events: this.Events,
                    }),
                  );
                } else if (this.limiterOptions.datastore === "ioredis") {
                  this.connection = new IORedisConnection$1(
                    Object.assign({}, this.limiterOptions, {
                      Events: this.Events,
                    }),
                  );
                }
              }
            }
            key(key = "") {
              var ref;
              return (ref = this.instances[key]) != null
                ? ref
                : (() => {
                    var limiter;
                    limiter = this.instances[key] = new this.Bottleneck(
                      Object.assign(this.limiterOptions, {
                        id: `${this.id}-${key}`,
                        timeout: this.timeout,
                        connection: this.connection,
                      }),
                    );
                    this.Events.trigger("created", limiter, key);
                    return limiter;
                  })();
            }
            async deleteKey(key = "") {
              var deleted, instance;
              instance = this.instances[key];
              if (this.connection) {
                deleted = await this.connection.__runCommand__([
                  "del",
                  ...Scripts$1.allKeys(`${this.id}-${key}`),
                ]);
              }
              if (instance != null) {
                delete this.instances[key];
                await instance.disconnect();
              }
              return instance != null || deleted > 0;
            }
            limiters() {
              var k, ref, results, v;
              ref = this.instances;
              results = [];
              for (k in ref) {
                v = ref[k];
                results.push({
                  key: k,
                  limiter: v,
                });
              }
              return results;
            }
            keys() {
              return Object.keys(this.instances);
            }
            async clusterKeys() {
              var cursor, end, found, i, k, keys, len, next, start;
              if (this.connection == null) {
                return this.Promise.resolve(this.keys());
              }
              keys = [];
              cursor = null;
              start = `b_${this.id}-`.length;
              end = "_settings".length;
              while (cursor !== 0) {
                [next, found] = await this.connection.__runCommand__([
                  "scan",
                  cursor != null ? cursor : 0,
                  "match",
                  `b_${this.id}-*_settings`,
                  "count",
                  1e4,
                ]);
                cursor = ~~next;
                for (i = 0, len = found.length; i < len; i++) {
                  k = found[i];
                  keys.push(k.slice(start, -end));
                }
              }
              return keys;
            }
            _startAutoCleanup() {
              var base;
              clearInterval(this.interval);
              return typeof (base = this.interval =
                setInterval(async () => {
                  var e, k, ref, results, time, v;
                  time = Date.now();
                  ref = this.instances;
                  results = [];
                  for (k in ref) {
                    v = ref[k];
                    try {
                      if (await v._store.__groupCheck__(time)) {
                        results.push(this.deleteKey(k));
                      } else {
                        results.push(void 0);
                      }
                    } catch (error) {
                      e = error;
                      results.push(v.Events.trigger("error", e));
                    }
                  }
                  return results;
                }, this.timeout / 2)).unref === "function"
                ? base.unref()
                : void 0;
            }
            updateSettings(options = {}) {
              parser$3.overwrite(options, this.defaults, this);
              parser$3.overwrite(options, options, this.limiterOptions);
              if (options.timeout != null) {
                return this._startAutoCleanup();
              }
            }
            disconnect(flush = true) {
              var ref;
              if (!this.sharedConnection) {
                return (ref = this.connection) != null
                  ? ref.disconnect(flush)
                  : void 0;
              }
            }
          }
          Group2.prototype.defaults = {
            timeout: 1e3 * 60 * 5,
            connection: null,
            Promise,
            id: "group-key",
          };
          return Group2;
        }.call(commonjsGlobal);
        var Group_1 = Group;
        var Batcher, Events$3, parser$4;
        parser$4 = parser;
        Events$3 = Events_1;
        Batcher = function () {
          class Batcher2 {
            static {
              __name(this, "Batcher");
            }
            constructor(options = {}) {
              this.options = options;
              parser$4.load(this.options, this.defaults, this);
              this.Events = new Events$3(this);
              this._arr = [];
              this._resetPromise();
              this._lastFlush = Date.now();
            }
            _resetPromise() {
              return (this._promise = new this.Promise((res, rej) => {
                return (this._resolve = res);
              }));
            }
            _flush() {
              clearTimeout(this._timeout);
              this._lastFlush = Date.now();
              this._resolve();
              this.Events.trigger("batch", this._arr);
              this._arr = [];
              return this._resetPromise();
            }
            add(data) {
              var ret;
              this._arr.push(data);
              ret = this._promise;
              if (this._arr.length === this.maxSize) {
                this._flush();
              } else if (this.maxTime != null && this._arr.length === 1) {
                this._timeout = setTimeout(() => {
                  return this._flush();
                }, this.maxTime);
              }
              return ret;
            }
          }
          Batcher2.prototype.defaults = {
            maxTime: null,
            maxSize: null,
            Promise,
          };
          return Batcher2;
        }.call(commonjsGlobal);
        var Batcher_1 = Batcher;
        var require$$4$1 = /* @__PURE__ */ __name(
          () =>
            console.log(
              "You must import the full version of Bottleneck in order to use this feature.",
            ),
          "require$$4$1",
        );
        var require$$8 = getCjsExportFromNamespace(version$2);
        var Bottleneck,
          DEFAULT_PRIORITY$1,
          Events$4,
          Job$1,
          LocalDatastore$1,
          NUM_PRIORITIES$1,
          Queues$1,
          RedisDatastore$1,
          States$1,
          Sync$1,
          parser$5,
          splice2 = [].splice;
        NUM_PRIORITIES$1 = 10;
        DEFAULT_PRIORITY$1 = 5;
        parser$5 = parser;
        Queues$1 = Queues_1;
        Job$1 = Job_1;
        LocalDatastore$1 = LocalDatastore_1;
        RedisDatastore$1 = require$$4$1;
        Events$4 = Events_1;
        States$1 = States_1;
        Sync$1 = Sync_1;
        Bottleneck = function () {
          class Bottleneck2 {
            static {
              __name(this, "Bottleneck");
            }
            constructor(options = {}, ...invalid2) {
              var storeInstanceOptions, storeOptions;
              this._addToQueue = this._addToQueue.bind(this);
              this._validateOptions(options, invalid2);
              parser$5.load(options, this.instanceDefaults, this);
              this._queues = new Queues$1(NUM_PRIORITIES$1);
              this._scheduled = {};
              this._states = new States$1(
                ["RECEIVED", "QUEUED", "RUNNING", "EXECUTING"].concat(
                  this.trackDoneStatus ? ["DONE"] : [],
                ),
              );
              this._limiter = null;
              this.Events = new Events$4(this);
              this._submitLock = new Sync$1("submit", this.Promise);
              this._registerLock = new Sync$1("register", this.Promise);
              storeOptions = parser$5.load(options, this.storeDefaults, {});
              this._store = function () {
                if (
                  this.datastore === "redis" ||
                  this.datastore === "ioredis" ||
                  this.connection != null
                ) {
                  storeInstanceOptions = parser$5.load(
                    options,
                    this.redisStoreDefaults,
                    {},
                  );
                  return new RedisDatastore$1(
                    this,
                    storeOptions,
                    storeInstanceOptions,
                  );
                } else if (this.datastore === "local") {
                  storeInstanceOptions = parser$5.load(
                    options,
                    this.localStoreDefaults,
                    {},
                  );
                  return new LocalDatastore$1(
                    this,
                    storeOptions,
                    storeInstanceOptions,
                  );
                } else {
                  throw new Bottleneck2.prototype.BottleneckError(
                    `Invalid datastore type: ${this.datastore}`,
                  );
                }
              }.call(this);
              this._queues.on("leftzero", () => {
                var ref;
                return (ref = this._store.heartbeat) != null
                  ? typeof ref.ref === "function"
                    ? ref.ref()
                    : void 0
                  : void 0;
              });
              this._queues.on("zero", () => {
                var ref;
                return (ref = this._store.heartbeat) != null
                  ? typeof ref.unref === "function"
                    ? ref.unref()
                    : void 0
                  : void 0;
              });
            }
            _validateOptions(options, invalid2) {
              if (
                !(
                  options != null &&
                  typeof options === "object" &&
                  invalid2.length === 0
                )
              ) {
                throw new Bottleneck2.prototype.BottleneckError(
                  "Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.",
                );
              }
            }
            ready() {
              return this._store.ready;
            }
            clients() {
              return this._store.clients;
            }
            channel() {
              return `b_${this.id}`;
            }
            channel_client() {
              return `b_${this.id}_${this._store.clientId}`;
            }
            publish(message) {
              return this._store.__publish__(message);
            }
            disconnect(flush = true) {
              return this._store.__disconnect__(flush);
            }
            chain(_limiter) {
              this._limiter = _limiter;
              return this;
            }
            queued(priority) {
              return this._queues.queued(priority);
            }
            clusterQueued() {
              return this._store.__queued__();
            }
            empty() {
              return this.queued() === 0 && this._submitLock.isEmpty();
            }
            running() {
              return this._store.__running__();
            }
            done() {
              return this._store.__done__();
            }
            jobStatus(id) {
              return this._states.jobStatus(id);
            }
            jobs(status) {
              return this._states.statusJobs(status);
            }
            counts() {
              return this._states.statusCounts();
            }
            _randomIndex() {
              return Math.random().toString(36).slice(2);
            }
            check(weight = 1) {
              return this._store.__check__(weight);
            }
            _clearGlobalState(index2) {
              if (this._scheduled[index2] != null) {
                clearTimeout(this._scheduled[index2].expiration);
                delete this._scheduled[index2];
                return true;
              } else {
                return false;
              }
            }
            async _free(index2, job, options, eventInfo) {
              var e, running;
              try {
                ({ running } = await this._store.__free__(
                  index2,
                  options.weight,
                ));
                this.Events.trigger("debug", `Freed ${options.id}`, eventInfo);
                if (running === 0 && this.empty()) {
                  return this.Events.trigger("idle");
                }
              } catch (error1) {
                e = error1;
                return this.Events.trigger("error", e);
              }
            }
            _run(index2, job, wait) {
              var clearGlobalState, free, run;
              job.doRun();
              clearGlobalState = this._clearGlobalState.bind(this, index2);
              run = this._run.bind(this, index2, job);
              free = this._free.bind(this, index2, job);
              return (this._scheduled[index2] = {
                timeout: setTimeout(() => {
                  return job.doExecute(
                    this._limiter,
                    clearGlobalState,
                    run,
                    free,
                  );
                }, wait),
                expiration:
                  job.options.expiration != null
                    ? setTimeout(function () {
                        return job.doExpire(clearGlobalState, run, free);
                      }, wait + job.options.expiration)
                    : void 0,
                job,
              });
            }
            _drainOne(capacity) {
              return this._registerLock.schedule(() => {
                var args, index2, next, options, queue;
                if (this.queued() === 0) {
                  return this.Promise.resolve(null);
                }
                queue = this._queues.getFirst();
                ({ options, args } = next = queue.first());
                if (capacity != null && options.weight > capacity) {
                  return this.Promise.resolve(null);
                }
                this.Events.trigger("debug", `Draining ${options.id}`, {
                  args,
                  options,
                });
                index2 = this._randomIndex();
                return this._store
                  .__register__(index2, options.weight, options.expiration)
                  .then(({ success, wait, reservoir }) => {
                    var empty2;
                    this.Events.trigger("debug", `Drained ${options.id}`, {
                      success,
                      args,
                      options,
                    });
                    if (success) {
                      queue.shift();
                      empty2 = this.empty();
                      if (empty2) {
                        this.Events.trigger("empty");
                      }
                      if (reservoir === 0) {
                        this.Events.trigger("depleted", empty2);
                      }
                      this._run(index2, next, wait);
                      return this.Promise.resolve(options.weight);
                    } else {
                      return this.Promise.resolve(null);
                    }
                  });
              });
            }
            _drainAll(capacity, total = 0) {
              return this._drainOne(capacity)
                .then((drained) => {
                  var newCapacity;
                  if (drained != null) {
                    newCapacity =
                      capacity != null ? capacity - drained : capacity;
                    return this._drainAll(newCapacity, total + drained);
                  } else {
                    return this.Promise.resolve(total);
                  }
                })
                .catch((e) => {
                  return this.Events.trigger("error", e);
                });
            }
            _dropAllQueued(message) {
              return this._queues.shiftAll(function (job) {
                return job.doDrop({ message });
              });
            }
            stop(options = {}) {
              var done, waitForExecuting;
              options = parser$5.load(options, this.stopDefaults);
              waitForExecuting = /* @__PURE__ */ __name((at) => {
                var finished;
                finished = /* @__PURE__ */ __name(() => {
                  var counts;
                  counts = this._states.counts;
                  return counts[0] + counts[1] + counts[2] + counts[3] === at;
                }, "finished");
                return new this.Promise((resolve, reject) => {
                  if (finished()) {
                    return resolve();
                  } else {
                    return this.on("done", () => {
                      if (finished()) {
                        this.removeAllListeners("done");
                        return resolve();
                      }
                    });
                  }
                });
              }, "waitForExecuting");
              done = options.dropWaitingJobs
                ? ((this._run = function (index2, next) {
                    return next.doDrop({
                      message: options.dropErrorMessage,
                    });
                  }),
                  (this._drainOne = () => {
                    return this.Promise.resolve(null);
                  }),
                  this._registerLock.schedule(() => {
                    return this._submitLock.schedule(() => {
                      var k, ref, v;
                      ref = this._scheduled;
                      for (k in ref) {
                        v = ref[k];
                        if (this.jobStatus(v.job.options.id) === "RUNNING") {
                          clearTimeout(v.timeout);
                          clearTimeout(v.expiration);
                          v.job.doDrop({
                            message: options.dropErrorMessage,
                          });
                        }
                      }
                      this._dropAllQueued(options.dropErrorMessage);
                      return waitForExecuting(0);
                    });
                  }))
                : this.schedule(
                    {
                      priority: NUM_PRIORITIES$1 - 1,
                      weight: 0,
                    },
                    () => {
                      return waitForExecuting(1);
                    },
                  );
              this._receive = function (job) {
                return job._reject(
                  new Bottleneck2.prototype.BottleneckError(
                    options.enqueueErrorMessage,
                  ),
                );
              };
              this.stop = () => {
                return this.Promise.reject(
                  new Bottleneck2.prototype.BottleneckError(
                    "stop() has already been called",
                  ),
                );
              };
              return done;
            }
            async _addToQueue(job) {
              var args, blocked, error, options, reachedHWM, shifted, strategy;
              ({ args, options } = job);
              try {
                ({ reachedHWM, blocked, strategy } =
                  await this._store.__submit__(this.queued(), options.weight));
              } catch (error1) {
                error = error1;
                this.Events.trigger("debug", `Could not queue ${options.id}`, {
                  args,
                  options,
                  error,
                });
                job.doDrop({ error });
                return false;
              }
              if (blocked) {
                job.doDrop();
                return true;
              } else if (reachedHWM) {
                shifted =
                  strategy === Bottleneck2.prototype.strategy.LEAK
                    ? this._queues.shiftLastFrom(options.priority)
                    : strategy ===
                        Bottleneck2.prototype.strategy.OVERFLOW_PRIORITY
                      ? this._queues.shiftLastFrom(options.priority + 1)
                      : strategy === Bottleneck2.prototype.strategy.OVERFLOW
                        ? job
                        : void 0;
                if (shifted != null) {
                  shifted.doDrop();
                }
                if (
                  shifted == null ||
                  strategy === Bottleneck2.prototype.strategy.OVERFLOW
                ) {
                  if (shifted == null) {
                    job.doDrop();
                  }
                  return reachedHWM;
                }
              }
              job.doQueue(reachedHWM, blocked);
              this._queues.push(job);
              await this._drainAll();
              return reachedHWM;
            }
            _receive(job) {
              if (this._states.jobStatus(job.options.id) != null) {
                job._reject(
                  new Bottleneck2.prototype.BottleneckError(
                    `A job with the same id already exists (id=${job.options.id})`,
                  ),
                );
                return false;
              } else {
                job.doReceive();
                return this._submitLock.schedule(this._addToQueue, job);
              }
            }
            submit(...args) {
              var cb, fn, job, options, ref, ref1, task;
              if (typeof args[0] === "function") {
                (ref = args),
                  ([fn, ...args] = ref),
                  ([cb] = splice2.call(args, -1));
                options = parser$5.load({}, this.jobDefaults);
              } else {
                (ref1 = args),
                  ([options, fn, ...args] = ref1),
                  ([cb] = splice2.call(args, -1));
                options = parser$5.load(options, this.jobDefaults);
              }
              task = /* @__PURE__ */ __name((...args2) => {
                return new this.Promise(function (resolve, reject) {
                  return fn(...args2, function (...args3) {
                    return (args3[0] != null ? reject : resolve)(args3);
                  });
                });
              }, "task");
              job = new Job$1(
                task,
                args,
                options,
                this.jobDefaults,
                this.rejectOnDrop,
                this.Events,
                this._states,
                this.Promise,
              );
              job.promise
                .then(function (args2) {
                  return typeof cb === "function" ? cb(...args2) : void 0;
                })
                .catch(function (args2) {
                  if (Array.isArray(args2)) {
                    return typeof cb === "function" ? cb(...args2) : void 0;
                  } else {
                    return typeof cb === "function" ? cb(args2) : void 0;
                  }
                });
              return this._receive(job);
            }
            schedule(...args) {
              var job, options, task;
              if (typeof args[0] === "function") {
                [task, ...args] = args;
                options = {};
              } else {
                [options, task, ...args] = args;
              }
              job = new Job$1(
                task,
                args,
                options,
                this.jobDefaults,
                this.rejectOnDrop,
                this.Events,
                this._states,
                this.Promise,
              );
              this._receive(job);
              return job.promise;
            }
            wrap(fn) {
              var schedule, wrapped;
              schedule = this.schedule.bind(this);
              wrapped = /* @__PURE__ */ __name(function (...args) {
                return schedule(fn.bind(this), ...args);
              }, "wrapped");
              wrapped.withOptions = function (options, ...args) {
                return schedule(options, fn, ...args);
              };
              return wrapped;
            }
            async updateSettings(options = {}) {
              await this._store.__updateSettings__(
                parser$5.overwrite(options, this.storeDefaults),
              );
              parser$5.overwrite(options, this.instanceDefaults, this);
              return this;
            }
            currentReservoir() {
              return this._store.__currentReservoir__();
            }
            incrementReservoir(incr = 0) {
              return this._store.__incrementReservoir__(incr);
            }
          }
          Bottleneck2.default = Bottleneck2;
          Bottleneck2.Events = Events$4;
          Bottleneck2.version = Bottleneck2.prototype.version =
            require$$8.version;
          Bottleneck2.strategy = Bottleneck2.prototype.strategy = {
            LEAK: 1,
            OVERFLOW: 2,
            OVERFLOW_PRIORITY: 4,
            BLOCK: 3,
          };
          Bottleneck2.BottleneckError = Bottleneck2.prototype.BottleneckError =
            BottleneckError_1;
          Bottleneck2.Group = Bottleneck2.prototype.Group = Group_1;
          Bottleneck2.RedisConnection = Bottleneck2.prototype.RedisConnection =
            require$$2;
          Bottleneck2.IORedisConnection =
            Bottleneck2.prototype.IORedisConnection = require$$3;
          Bottleneck2.Batcher = Bottleneck2.prototype.Batcher = Batcher_1;
          Bottleneck2.prototype.jobDefaults = {
            priority: DEFAULT_PRIORITY$1,
            weight: 1,
            expiration: null,
            id: "<no-id>",
          };
          Bottleneck2.prototype.storeDefaults = {
            maxConcurrent: null,
            minTime: 0,
            highWater: null,
            strategy: Bottleneck2.prototype.strategy.LEAK,
            penalty: null,
            reservoir: null,
            reservoirRefreshInterval: null,
            reservoirRefreshAmount: null,
            reservoirIncreaseInterval: null,
            reservoirIncreaseAmount: null,
            reservoirIncreaseMaximum: null,
          };
          Bottleneck2.prototype.localStoreDefaults = {
            Promise,
            timeout: null,
            heartbeatInterval: 250,
          };
          Bottleneck2.prototype.redisStoreDefaults = {
            Promise,
            timeout: null,
            heartbeatInterval: 5e3,
            clientTimeout: 1e4,
            Redis: null,
            clientOptions: {},
            clusterNodes: null,
            clearDatastore: false,
            connection: null,
          };
          Bottleneck2.prototype.instanceDefaults = {
            datastore: "local",
            connection: null,
            id: "<no-id>",
            rejectOnDrop: true,
            trackDoneStatus: false,
            Promise,
          };
          Bottleneck2.prototype.stopDefaults = {
            enqueueErrorMessage:
              "This limiter has been stopped and cannot accept new jobs.",
            dropWaitingJobs: true,
            dropErrorMessage: "This limiter has been stopped.",
          };
          return Bottleneck2;
        }.call(commonjsGlobal);
        var Bottleneck_1 = Bottleneck;
        var lib = Bottleneck_1;
        return lib;
      });
    },
  });

  // src/index.ts
  var import_core2 = __toESM(require_core());
  var import_fs_extra4 = __toESM(require_lib2());

  // src/gitUtils.ts
  var import_exec = __toESM(require_exec());
  var setupUser = /* @__PURE__ */ __name(async () => {
    await (0, import_exec.exec)("git", [
      "config",
      "user.name",
      `"github-actions[bot]"`,
    ]);
    await (0, import_exec.exec)("git", [
      "config",
      "user.email",
      `"github-actions[bot]@users.noreply.github.com"`,
    ]);
  }, "setupUser");
  var push = /* @__PURE__ */ __name(async (branch, { force } = {}) => {
    await (0, import_exec.exec)(
      "git",
      ["push", "origin", `HEAD:${branch}`, force && "--force"].filter(Boolean),
    );
  }, "push");
  var pushTags = /* @__PURE__ */ __name(async () => {
    await (0, import_exec.exec)("git", ["push", "origin", "--tags"]);
  }, "pushTags");
  var switchToMaybeExistingBranch = /* @__PURE__ */ __name(async (branch) => {
    let { stderr } = await (0, import_exec.getExecOutput)(
      "git",
      ["checkout", branch],
      {
        ignoreReturnCode: true,
      },
    );
    let isCreatingBranch = !stderr
      .toString()
      .includes(`Switched to a new branch '${branch}'`);
    if (isCreatingBranch) {
      await (0, import_exec.exec)("git", ["checkout", "-b", branch]);
    }
  }, "switchToMaybeExistingBranch");
  var reset = /* @__PURE__ */ __name(async (pathSpec, mode = "hard") => {
    await (0, import_exec.exec)("git", ["reset", `--${mode}`, pathSpec]);
  }, "reset");
  var commitAll = /* @__PURE__ */ __name(async (message) => {
    await (0, import_exec.exec)("git", ["add", "."]);
    await (0, import_exec.exec)("git", ["commit", "-m", message]);
  }, "commitAll");
  var checkIfClean = /* @__PURE__ */ __name(async () => {
    const { stdout } = await (0, import_exec.getExecOutput)("git", [
      "status",
      "--porcelain",
    ]);
    return !stdout.length;
  }, "checkIfClean");

  // src/run.ts
  var import_exec2 = __toESM(require_exec());
  var import_utils = __toESM(require_utils6());
  var github = __toESM(require_github());
  var core = __toESM(require_core());
  var import_fs_extra2 = __toESM(require_lib2());
  var import_get_packages4 = __toESM(require_manypkg_get_packages_cjs());
  var import_path3 = __toESM(__require("path"));
  var semver = __toESM(require_semver2());

  // node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js
  function bail(error) {
    if (error) {
      throw error;
    }
  }
  __name(bail, "bail");

  // node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js
  var import_extend = __toESM(require_extend(), 1);

  // node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/default.js
  function ok() {}
  __name(ok, "ok");

  // node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js
  function isPlainObject(value) {
    if (typeof value !== "object" || value === null) {
      return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return (
      (prototype === null ||
        prototype === Object.prototype ||
        Object.getPrototypeOf(prototype) === null) &&
      !(Symbol.toStringTag in value) &&
      !(Symbol.iterator in value)
    );
  }
  __name(isPlainObject, "isPlainObject");

  // node_modules/.pnpm/trough@2.2.0/node_modules/trough/lib/index.js
  function trough() {
    const fns = [];
    const pipeline = { run, use };
    return pipeline;
    function run(...values) {
      let middlewareIndex = -1;
      const callback = values.pop();
      if (typeof callback !== "function") {
        throw new TypeError(
          "Expected function as last argument, not " + callback,
        );
      }
      next(null, ...values);
      function next(error, ...output) {
        const fn = fns[++middlewareIndex];
        let index2 = -1;
        if (error) {
          callback(error);
          return;
        }
        while (++index2 < values.length) {
          if (output[index2] === null || output[index2] === void 0) {
            output[index2] = values[index2];
          }
        }
        values = output;
        if (fn) {
          wrap(fn, next)(...output);
        } else {
          callback(null, ...output);
        }
      }
      __name(next, "next");
    }
    __name(run, "run");
    function use(middelware) {
      if (typeof middelware !== "function") {
        throw new TypeError(
          "Expected `middelware` to be a function, not " + middelware,
        );
      }
      fns.push(middelware);
      return pipeline;
    }
    __name(use, "use");
  }
  __name(trough, "trough");
  function wrap(middleware, callback) {
    let called;
    return wrapped;
    function wrapped(...parameters) {
      const fnExpectsCallback = middleware.length > parameters.length;
      let result;
      if (fnExpectsCallback) {
        parameters.push(done);
      }
      try {
        result = middleware.apply(this, parameters);
      } catch (error) {
        const exception =
          /** @type {Error} */
          error;
        if (fnExpectsCallback && called) {
          throw exception;
        }
        return done(exception);
      }
      if (!fnExpectsCallback) {
        if (result && result.then && typeof result.then === "function") {
          result.then(then, done);
        } else if (result instanceof Error) {
          done(result);
        } else {
          then(result);
        }
      }
    }
    __name(wrapped, "wrapped");
    function done(error, ...output) {
      if (!called) {
        called = true;
        callback(error, ...output);
      }
    }
    __name(done, "done");
    function then(value) {
      done(null, value);
    }
    __name(then, "then");
  }
  __name(wrap, "wrap");

  // node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js
  function stringifyPosition(value) {
    if (!value || typeof value !== "object") {
      return "";
    }
    if ("position" in value || "type" in value) {
      return position(value.position);
    }
    if ("start" in value || "end" in value) {
      return position(value);
    }
    if ("line" in value || "column" in value) {
      return point(value);
    }
    return "";
  }
  __name(stringifyPosition, "stringifyPosition");
  function point(point3) {
    return index(point3 && point3.line) + ":" + index(point3 && point3.column);
  }
  __name(point, "point");
  function position(pos) {
    return point(pos && pos.start) + "-" + point(pos && pos.end);
  }
  __name(position, "position");
  function index(value) {
    return value && typeof value === "number" ? value : 1;
  }
  __name(index, "index");

  // node_modules/.pnpm/vfile-message@4.0.2/node_modules/vfile-message/lib/index.js
  var VFileMessage = class extends Error {
    static {
      __name(this, "VFileMessage");
    }
    /**
     * Create a message for `reason`.
     *
     * > 🪦 **Note**: also has obsolete signatures.
     *
     * @overload
     * @param {string} reason
     * @param {Options | null | undefined} [options]
     * @returns
     *
     * @overload
     * @param {string} reason
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @overload
     * @param {string} reason
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @overload
     * @param {string} reason
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {string | null | undefined} [origin]
     * @returns
     *
     * @param {Error | VFileMessage | string} causeOrReason
     *   Reason for message, should use markdown.
     * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
     *   Configuration (optional).
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns
     *   Instance of `VFileMessage`.
     */
    // eslint-disable-next-line complexity
    constructor(causeOrReason, optionsOrParentOrPlace, origin) {
      super();
      if (typeof optionsOrParentOrPlace === "string") {
        origin = optionsOrParentOrPlace;
        optionsOrParentOrPlace = void 0;
      }
      let reason = "";
      let options = {};
      let legacyCause = false;
      if (optionsOrParentOrPlace) {
        if (
          "line" in optionsOrParentOrPlace &&
          "column" in optionsOrParentOrPlace
        ) {
          options = { place: optionsOrParentOrPlace };
        } else if (
          "start" in optionsOrParentOrPlace &&
          "end" in optionsOrParentOrPlace
        ) {
          options = { place: optionsOrParentOrPlace };
        } else if ("type" in optionsOrParentOrPlace) {
          options = {
            ancestors: [optionsOrParentOrPlace],
            place: optionsOrParentOrPlace.position,
          };
        } else {
          options = { ...optionsOrParentOrPlace };
        }
      }
      if (typeof causeOrReason === "string") {
        reason = causeOrReason;
      } else if (!options.cause && causeOrReason) {
        legacyCause = true;
        reason = causeOrReason.message;
        options.cause = causeOrReason;
      }
      if (!options.ruleId && !options.source && typeof origin === "string") {
        const index2 = origin.indexOf(":");
        if (index2 === -1) {
          options.ruleId = origin;
        } else {
          options.source = origin.slice(0, index2);
          options.ruleId = origin.slice(index2 + 1);
        }
      }
      if (!options.place && options.ancestors && options.ancestors) {
        const parent = options.ancestors[options.ancestors.length - 1];
        if (parent) {
          options.place = parent.position;
        }
      }
      const start =
        options.place && "start" in options.place
          ? options.place.start
          : options.place;
      this.ancestors = options.ancestors || void 0;
      this.cause = options.cause || void 0;
      this.column = start ? start.column : void 0;
      this.fatal = void 0;
      this.file;
      this.message = reason;
      this.line = start ? start.line : void 0;
      this.name = stringifyPosition(options.place) || "1:1";
      this.place = options.place || void 0;
      this.reason = this.message;
      this.ruleId = options.ruleId || void 0;
      this.source = options.source || void 0;
      this.stack =
        legacyCause && options.cause && typeof options.cause.stack === "string"
          ? options.cause.stack
          : "";
      this.actual;
      this.expected;
      this.note;
      this.url;
    }
  };
  VFileMessage.prototype.file = "";
  VFileMessage.prototype.name = "";
  VFileMessage.prototype.reason = "";
  VFileMessage.prototype.message = "";
  VFileMessage.prototype.stack = "";
  VFileMessage.prototype.column = void 0;
  VFileMessage.prototype.line = void 0;
  VFileMessage.prototype.ancestors = void 0;
  VFileMessage.prototype.cause = void 0;
  VFileMessage.prototype.fatal = void 0;
  VFileMessage.prototype.place = void 0;
  VFileMessage.prototype.ruleId = void 0;
  VFileMessage.prototype.source = void 0;

  // node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minpath.js
  var import_node_path = __toESM(__require("node:path"), 1);

  // node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minproc.js
  var import_node_process = __toESM(__require("node:process"), 1);

  // node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.js
  var import_node_url = __require("node:url");

  // node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.shared.js
  function isUrl(fileUrlOrPath) {
    return Boolean(
      fileUrlOrPath !== null &&
        typeof fileUrlOrPath === "object" &&
        "href" in fileUrlOrPath &&
        fileUrlOrPath.href &&
        "protocol" in fileUrlOrPath &&
        fileUrlOrPath.protocol && // @ts-expect-error: indexing is fine.
        fileUrlOrPath.auth === void 0,
    );
  }
  __name(isUrl, "isUrl");

  // node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/index.js
  var order =
    /** @type {const} */
    ["history", "path", "basename", "stem", "extname", "dirname"];
  var VFile = class {
    static {
      __name(this, "VFile");
    }
    /**
     * Create a new virtual file.
     *
     * `options` is treated as:
     *
     * *   `string` or `Uint8Array` — `{value: options}`
     * *   `URL` — `{path: options}`
     * *   `VFile` — shallow copies its data over to the new file
     * *   `object` — all fields are shallow copied over to the new file
     *
     * Path related fields are set in the following order (least specific to
     * most specific): `history`, `path`, `basename`, `stem`, `extname`,
     * `dirname`.
     *
     * You cannot set `dirname` or `extname` without setting either `history`,
     * `path`, `basename`, or `stem` too.
     *
     * @param {Compatible | null | undefined} [value]
     *   File value.
     * @returns
     *   New instance.
     */
    constructor(value) {
      let options;
      if (!value) {
        options = {};
      } else if (isUrl(value)) {
        options = { path: value };
      } else if (typeof value === "string" || isUint8Array(value)) {
        options = { value };
      } else {
        options = value;
      }
      this.cwd = "cwd" in options ? "" : import_node_process.default.cwd();
      this.data = {};
      this.history = [];
      this.messages = [];
      this.value;
      this.map;
      this.result;
      this.stored;
      let index2 = -1;
      while (++index2 < order.length) {
        const field2 = order[index2];
        if (
          field2 in options &&
          options[field2] !== void 0 &&
          options[field2] !== null
        ) {
          this[field2] =
            field2 === "history" ? [...options[field2]] : options[field2];
        }
      }
      let field;
      for (field in options) {
        if (!order.includes(field)) {
          this[field] = options[field];
        }
      }
    }
    /**
     * Get the basename (including extname) (example: `'index.min.js'`).
     *
     * @returns {string | undefined}
     *   Basename.
     */
    get basename() {
      return typeof this.path === "string"
        ? import_node_path.default.basename(this.path)
        : void 0;
    }
    /**
     * Set basename (including extname) (`'index.min.js'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be nullified (use `file.path = file.dirname` instead).
     *
     * @param {string} basename
     *   Basename.
     * @returns {undefined}
     *   Nothing.
     */
    set basename(basename) {
      assertNonEmpty(basename, "basename");
      assertPart(basename, "basename");
      this.path = import_node_path.default.join(this.dirname || "", basename);
    }
    /**
     * Get the parent path (example: `'~'`).
     *
     * @returns {string | undefined}
     *   Dirname.
     */
    get dirname() {
      return typeof this.path === "string"
        ? import_node_path.default.dirname(this.path)
        : void 0;
    }
    /**
     * Set the parent path (example: `'~'`).
     *
     * Cannot be set if there’s no `path` yet.
     *
     * @param {string | undefined} dirname
     *   Dirname.
     * @returns {undefined}
     *   Nothing.
     */
    set dirname(dirname) {
      assertPath(this.basename, "dirname");
      this.path = import_node_path.default.join(dirname || "", this.basename);
    }
    /**
     * Get the extname (including dot) (example: `'.js'`).
     *
     * @returns {string | undefined}
     *   Extname.
     */
    get extname() {
      return typeof this.path === "string"
        ? import_node_path.default.extname(this.path)
        : void 0;
    }
    /**
     * Set the extname (including dot) (example: `'.js'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be set if there’s no `path` yet.
     *
     * @param {string | undefined} extname
     *   Extname.
     * @returns {undefined}
     *   Nothing.
     */
    set extname(extname) {
      assertPart(extname, "extname");
      assertPath(this.dirname, "extname");
      if (extname) {
        if (extname.codePointAt(0) !== 46) {
          throw new Error("`extname` must start with `.`");
        }
        if (extname.includes(".", 1)) {
          throw new Error("`extname` cannot contain multiple dots");
        }
      }
      this.path = import_node_path.default.join(
        this.dirname,
        this.stem + (extname || ""),
      );
    }
    /**
     * Get the full path (example: `'~/index.min.js'`).
     *
     * @returns {string}
     *   Path.
     */
    get path() {
      return this.history[this.history.length - 1];
    }
    /**
     * Set the full path (example: `'~/index.min.js'`).
     *
     * Cannot be nullified.
     * You can set a file URL (a `URL` object with a `file:` protocol) which will
     * be turned into a path with `url.fileURLToPath`.
     *
     * @param {URL | string} path
     *   Path.
     * @returns {undefined}
     *   Nothing.
     */
    set path(path4) {
      if (isUrl(path4)) {
        path4 = (0, import_node_url.fileURLToPath)(path4);
      }
      assertNonEmpty(path4, "path");
      if (this.path !== path4) {
        this.history.push(path4);
      }
    }
    /**
     * Get the stem (basename w/o extname) (example: `'index.min'`).
     *
     * @returns {string | undefined}
     *   Stem.
     */
    get stem() {
      return typeof this.path === "string"
        ? import_node_path.default.basename(this.path, this.extname)
        : void 0;
    }
    /**
     * Set the stem (basename w/o extname) (example: `'index.min'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be nullified (use `file.path = file.dirname` instead).
     *
     * @param {string} stem
     *   Stem.
     * @returns {undefined}
     *   Nothing.
     */
    set stem(stem) {
      assertNonEmpty(stem, "stem");
      assertPart(stem, "stem");
      this.path = import_node_path.default.join(
        this.dirname || "",
        stem + (this.extname || ""),
      );
    }
    // Normal prototypal methods.
    /**
     * Create a fatal message for `reason` associated with the file.
     *
     * The `fatal` field of the message is set to `true` (error; file not usable)
     * and the `file` field is set to the current file path.
     * The message is added to the `messages` field on `file`.
     *
     * > 🪦 **Note**: also has obsolete signatures.
     *
     * @overload
     * @param {string} reason
     * @param {MessageOptions | null | undefined} [options]
     * @returns {never}
     *
     * @overload
     * @param {string} reason
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @overload
     * @param {string} reason
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @overload
     * @param {string} reason
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {string | null | undefined} [origin]
     * @returns {never}
     *
     * @param {Error | VFileMessage | string} causeOrReason
     *   Reason for message, should use markdown.
     * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
     *   Configuration (optional).
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {never}
     *   Never.
     * @throws {VFileMessage}
     *   Message.
     */
    fail(causeOrReason, optionsOrParentOrPlace, origin) {
      const message = this.message(
        causeOrReason,
        optionsOrParentOrPlace,
        origin,
      );
      message.fatal = true;
      throw message;
    }
    /**
     * Create an info message for `reason` associated with the file.
     *
     * The `fatal` field of the message is set to `undefined` (info; change
     * likely not needed) and the `file` field is set to the current file path.
     * The message is added to the `messages` field on `file`.
     *
     * > 🪦 **Note**: also has obsolete signatures.
     *
     * @overload
     * @param {string} reason
     * @param {MessageOptions | null | undefined} [options]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @param {Error | VFileMessage | string} causeOrReason
     *   Reason for message, should use markdown.
     * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
     *   Configuration (optional).
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {VFileMessage}
     *   Message.
     */
    info(causeOrReason, optionsOrParentOrPlace, origin) {
      const message = this.message(
        causeOrReason,
        optionsOrParentOrPlace,
        origin,
      );
      message.fatal = void 0;
      return message;
    }
    /**
     * Create a message for `reason` associated with the file.
     *
     * The `fatal` field of the message is set to `false` (warning; change may be
     * needed) and the `file` field is set to the current file path.
     * The message is added to the `messages` field on `file`.
     *
     * > 🪦 **Note**: also has obsolete signatures.
     *
     * @overload
     * @param {string} reason
     * @param {MessageOptions | null | undefined} [options]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {string} reason
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Node | NodeLike | null | undefined} parent
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {Point | Position | null | undefined} place
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @overload
     * @param {Error | VFileMessage} cause
     * @param {string | null | undefined} [origin]
     * @returns {VFileMessage}
     *
     * @param {Error | VFileMessage | string} causeOrReason
     *   Reason for message, should use markdown.
     * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]
     *   Configuration (optional).
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {VFileMessage}
     *   Message.
     */
    message(causeOrReason, optionsOrParentOrPlace, origin) {
      const message = new VFileMessage(
        // @ts-expect-error: the overloads are fine.
        causeOrReason,
        optionsOrParentOrPlace,
        origin,
      );
      if (this.path) {
        message.name = this.path + ":" + message.name;
        message.file = this.path;
      }
      message.fatal = false;
      this.messages.push(message);
      return message;
    }
    /**
     * Serialize the file.
     *
     * > **Note**: which encodings are supported depends on the engine.
     * > For info on Node.js, see:
     * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.
     *
     * @param {string | null | undefined} [encoding='utf8']
     *   Character encoding to understand `value` as when it’s a `Uint8Array`
     *   (default: `'utf-8'`).
     * @returns {string}
     *   Serialized file.
     */
    toString(encoding) {
      if (this.value === void 0) {
        return "";
      }
      if (typeof this.value === "string") {
        return this.value;
      }
      const decoder = new TextDecoder(encoding || void 0);
      return decoder.decode(this.value);
    }
  };
  function assertPart(part, name) {
    if (part && part.includes(import_node_path.default.sep)) {
      throw new Error(
        "`" +
          name +
          "` cannot be a path: did not expect `" +
          import_node_path.default.sep +
          "`",
      );
    }
  }
  __name(assertPart, "assertPart");
  function assertNonEmpty(part, name) {
    if (!part) {
      throw new Error("`" + name + "` cannot be empty");
    }
  }
  __name(assertNonEmpty, "assertNonEmpty");
  function assertPath(path4, name) {
    if (!path4) {
      throw new Error("Setting `" + name + "` requires `path` to be set too");
    }
  }
  __name(assertPath, "assertPath");
  function isUint8Array(value) {
    return Boolean(
      value &&
        typeof value === "object" &&
        "byteLength" in value &&
        "byteOffset" in value,
    );
  }
  __name(isUint8Array, "isUint8Array");

  // node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/callable-instance.js
  var CallableInstance =
    /**
     * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}
     */
    /** @type {unknown} */
    /**
     * @this {Function}
     * @param {string | symbol} property
     * @returns {(...parameters: Array<unknown>) => unknown}
     */
    /* @__PURE__ */ __name(function (property) {
      const self2 = this;
      const constr = self2.constructor;
      const proto =
        /** @type {Record<string | symbol, Function>} */
        // Prototypes do exist.
        // type-coverage:ignore-next-line
        constr.prototype;
      const value = proto[property];
      const apply = /* @__PURE__ */ __name(function () {
        return value.apply(apply, arguments);
      }, "apply");
      Object.setPrototypeOf(apply, proto);
      return apply;
    }, "CallableInstance");

  // node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js
  var own = {}.hasOwnProperty;
  var Processor = class _Processor extends CallableInstance {
    static {
      __name(this, "Processor");
    }
    /**
     * Create a processor.
     */
    constructor() {
      super("copy");
      this.Compiler = void 0;
      this.Parser = void 0;
      this.attachers = [];
      this.compiler = void 0;
      this.freezeIndex = -1;
      this.frozen = void 0;
      this.namespace = {};
      this.parser = void 0;
      this.transformers = trough();
    }
    /**
     * Copy a processor.
     *
     * @deprecated
     *   This is a private internal method and should not be used.
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *   New *unfrozen* processor ({@linkcode Processor}) that is
     *   configured to work the same as its ancestor.
     *   When the descendant processor is configured in the future it does not
     *   affect the ancestral processor.
     */
    copy() {
      const destination =
        /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */
        new _Processor();
      let index2 = -1;
      while (++index2 < this.attachers.length) {
        const attacher = this.attachers[index2];
        destination.use(...attacher);
      }
      destination.data((0, import_extend.default)(true, {}, this.namespace));
      return destination;
    }
    /**
     * Configure the processor with info available to all plugins.
     * Information is stored in an object.
     *
     * Typically, options can be given to a specific plugin, but sometimes it
     * makes sense to have information shared with several plugins.
     * For example, a list of HTML elements that are self-closing, which is
     * needed during all phases.
     *
     * > **Note**: setting information cannot occur on *frozen* processors.
     * > Call the processor first to create a new unfrozen processor.
     *
     * > **Note**: to register custom data in TypeScript, augment the
     * > {@linkcode Data} interface.
     *
     * @example
     *   This example show how to get and set info:
     *
     *   ```js
     *   import {unified} from 'unified'
     *
     *   const processor = unified().data('alpha', 'bravo')
     *
     *   processor.data('alpha') // => 'bravo'
     *
     *   processor.data() // => {alpha: 'bravo'}
     *
     *   processor.data({charlie: 'delta'})
     *
     *   processor.data() // => {charlie: 'delta'}
     *   ```
     *
     * @template {keyof Data} Key
     *
     * @overload
     * @returns {Data}
     *
     * @overload
     * @param {Data} dataset
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *
     * @overload
     * @param {Key} key
     * @returns {Data[Key]}
     *
     * @overload
     * @param {Key} key
     * @param {Data[Key]} value
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *
     * @param {Data | Key} [key]
     *   Key to get or set, or entire dataset to set, or nothing to get the
     *   entire dataset (optional).
     * @param {Data[Key]} [value]
     *   Value to set (optional).
     * @returns {unknown}
     *   The current processor when setting, the value at `key` when getting, or
     *   the entire dataset when getting without key.
     */
    data(key, value) {
      if (typeof key === "string") {
        if (arguments.length === 2) {
          assertUnfrozen("data", this.frozen);
          this.namespace[key] = value;
          return this;
        }
        return (own.call(this.namespace, key) && this.namespace[key]) || void 0;
      }
      if (key) {
        assertUnfrozen("data", this.frozen);
        this.namespace = key;
        return this;
      }
      return this.namespace;
    }
    /**
     * Freeze a processor.
     *
     * Frozen processors are meant to be extended and not to be configured
     * directly.
     *
     * When a processor is frozen it cannot be unfrozen.
     * New processors working the same way can be created by calling the
     * processor.
     *
     * It’s possible to freeze processors explicitly by calling `.freeze()`.
     * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,
     * `.stringify()`, `.process()`, or `.processSync()` are called.
     *
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *   The current processor.
     */
    freeze() {
      if (this.frozen) {
        return this;
      }
      const self2 =
        /** @type {Processor} */
        /** @type {unknown} */
        this;
      while (++this.freezeIndex < this.attachers.length) {
        const [attacher, ...options] = this.attachers[this.freezeIndex];
        if (options[0] === false) {
          continue;
        }
        if (options[0] === true) {
          options[0] = void 0;
        }
        const transformer = attacher.call(self2, ...options);
        if (typeof transformer === "function") {
          this.transformers.use(transformer);
        }
      }
      this.frozen = true;
      this.freezeIndex = Number.POSITIVE_INFINITY;
      return this;
    }
    /**
     * Parse text to a syntax tree.
     *
     * > **Note**: `parse` freezes the processor if not already *frozen*.
     *
     * > **Note**: `parse` performs the parse phase, not the run phase or other
     * > phases.
     *
     * @param {Compatible | undefined} [file]
     *   file to parse (optional); typically `string` or `VFile`; any value
     *   accepted as `x` in `new VFile(x)`.
     * @returns {ParseTree extends undefined ? Node : ParseTree}
     *   Syntax tree representing `file`.
     */
    parse(file) {
      this.freeze();
      const realFile = vfile(file);
      const parser = this.parser || this.Parser;
      assertParser("parse", parser);
      return parser(String(realFile), realFile);
    }
    /**
     * Process the given file as configured on the processor.
     *
     * > **Note**: `process` freezes the processor if not already *frozen*.
     *
     * > **Note**: `process` performs the parse, run, and stringify phases.
     *
     * @overload
     * @param {Compatible | undefined} file
     * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done
     * @returns {undefined}
     *
     * @overload
     * @param {Compatible | undefined} [file]
     * @returns {Promise<VFileWithOutput<CompileResult>>}
     *
     * @param {Compatible | undefined} [file]
     *   File (optional); typically `string` or `VFile`]; any value accepted as
     *   `x` in `new VFile(x)`.
     * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]
     *   Callback (optional).
     * @returns {Promise<VFile> | undefined}
     *   Nothing if `done` is given.
     *   Otherwise a promise, rejected with a fatal error or resolved with the
     *   processed file.
     *
     *   The parsed, transformed, and compiled value is available at
     *   `file.value` (see note).
     *
     *   > **Note**: unified typically compiles by serializing: most
     *   > compilers return `string` (or `Uint8Array`).
     *   > Some compilers, such as the one configured with
     *   > [`rehype-react`][rehype-react], return other values (in this case, a
     *   > React tree).
     *   > If you’re using a compiler that doesn’t serialize, expect different
     *   > result values.
     *   >
     *   > To register custom results in TypeScript, add them to
     *   > {@linkcode CompileResultMap}.
     *
     *   [rehype-react]: https://github.com/rehypejs/rehype-react
     */
    process(file, done) {
      const self2 = this;
      this.freeze();
      assertParser("process", this.parser || this.Parser);
      assertCompiler("process", this.compiler || this.Compiler);
      return done ? executor(void 0, done) : new Promise(executor);
      function executor(resolve, reject) {
        const realFile = vfile(file);
        const parseTree =
          /** @type {HeadTree extends undefined ? Node : HeadTree} */
          /** @type {unknown} */
          self2.parse(realFile);
        self2.run(parseTree, realFile, function (error, tree, file2) {
          if (error || !tree || !file2) {
            return realDone(error);
          }
          const compileTree =
            /** @type {CompileTree extends undefined ? Node : CompileTree} */
            /** @type {unknown} */
            tree;
          const compileResult = self2.stringify(compileTree, file2);
          if (looksLikeAValue(compileResult)) {
            file2.value = compileResult;
          } else {
            file2.result = compileResult;
          }
          realDone(
            error,
            /** @type {VFileWithOutput<CompileResult>} */
            file2,
          );
        });
        function realDone(error, file2) {
          if (error || !file2) {
            reject(error);
          } else if (resolve) {
            resolve(file2);
          } else {
            ok(done, "`done` is defined if `resolve` is not");
            done(void 0, file2);
          }
        }
        __name(realDone, "realDone");
      }
      __name(executor, "executor");
    }
    /**
     * Process the given file as configured on the processor.
     *
     * An error is thrown if asynchronous transforms are configured.
     *
     * > **Note**: `processSync` freezes the processor if not already *frozen*.
     *
     * > **Note**: `processSync` performs the parse, run, and stringify phases.
     *
     * @param {Compatible | undefined} [file]
     *   File (optional); typically `string` or `VFile`; any value accepted as
     *   `x` in `new VFile(x)`.
     * @returns {VFileWithOutput<CompileResult>}
     *   The processed file.
     *
     *   The parsed, transformed, and compiled value is available at
     *   `file.value` (see note).
     *
     *   > **Note**: unified typically compiles by serializing: most
     *   > compilers return `string` (or `Uint8Array`).
     *   > Some compilers, such as the one configured with
     *   > [`rehype-react`][rehype-react], return other values (in this case, a
     *   > React tree).
     *   > If you’re using a compiler that doesn’t serialize, expect different
     *   > result values.
     *   >
     *   > To register custom results in TypeScript, add them to
     *   > {@linkcode CompileResultMap}.
     *
     *   [rehype-react]: https://github.com/rehypejs/rehype-react
     */
    processSync(file) {
      let complete = false;
      let result;
      this.freeze();
      assertParser("processSync", this.parser || this.Parser);
      assertCompiler("processSync", this.compiler || this.Compiler);
      this.process(file, realDone);
      assertDone("processSync", "process", complete);
      ok(result, "we either bailed on an error or have a tree");
      return result;
      function realDone(error, file2) {
        complete = true;
        bail(error);
        result = file2;
      }
      __name(realDone, "realDone");
    }
    /**
     * Run *transformers* on a syntax tree.
     *
     * > **Note**: `run` freezes the processor if not already *frozen*.
     *
     * > **Note**: `run` performs the run phase, not other phases.
     *
     * @overload
     * @param {HeadTree extends undefined ? Node : HeadTree} tree
     * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
     * @returns {undefined}
     *
     * @overload
     * @param {HeadTree extends undefined ? Node : HeadTree} tree
     * @param {Compatible | undefined} file
     * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done
     * @returns {undefined}
     *
     * @overload
     * @param {HeadTree extends undefined ? Node : HeadTree} tree
     * @param {Compatible | undefined} [file]
     * @returns {Promise<TailTree extends undefined ? Node : TailTree>}
     *
     * @param {HeadTree extends undefined ? Node : HeadTree} tree
     *   Tree to transform and inspect.
     * @param {(
     *   RunCallback<TailTree extends undefined ? Node : TailTree> |
     *   Compatible
     * )} [file]
     *   File associated with `node` (optional); any value accepted as `x` in
     *   `new VFile(x)`.
     * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]
     *   Callback (optional).
     * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}
     *   Nothing if `done` is given.
     *   Otherwise, a promise rejected with a fatal error or resolved with the
     *   transformed tree.
     */
    run(tree, file, done) {
      assertNode(tree);
      this.freeze();
      const transformers = this.transformers;
      if (!done && typeof file === "function") {
        done = file;
        file = void 0;
      }
      return done ? executor(void 0, done) : new Promise(executor);
      function executor(resolve, reject) {
        ok(
          typeof file !== "function",
          "`file` can\u2019t be a `done` anymore, we checked",
        );
        const realFile = vfile(file);
        transformers.run(tree, realFile, realDone);
        function realDone(error, outputTree, file2) {
          const resultingTree =
            /** @type {TailTree extends undefined ? Node : TailTree} */
            outputTree || tree;
          if (error) {
            reject(error);
          } else if (resolve) {
            resolve(resultingTree);
          } else {
            ok(done, "`done` is defined if `resolve` is not");
            done(void 0, resultingTree, file2);
          }
        }
        __name(realDone, "realDone");
      }
      __name(executor, "executor");
    }
    /**
     * Run *transformers* on a syntax tree.
     *
     * An error is thrown if asynchronous transforms are configured.
     *
     * > **Note**: `runSync` freezes the processor if not already *frozen*.
     *
     * > **Note**: `runSync` performs the run phase, not other phases.
     *
     * @param {HeadTree extends undefined ? Node : HeadTree} tree
     *   Tree to transform and inspect.
     * @param {Compatible | undefined} [file]
     *   File associated with `node` (optional); any value accepted as `x` in
     *   `new VFile(x)`.
     * @returns {TailTree extends undefined ? Node : TailTree}
     *   Transformed tree.
     */
    runSync(tree, file) {
      let complete = false;
      let result;
      this.run(tree, file, realDone);
      assertDone("runSync", "run", complete);
      ok(result, "we either bailed on an error or have a tree");
      return result;
      function realDone(error, tree2) {
        bail(error);
        result = tree2;
        complete = true;
      }
      __name(realDone, "realDone");
    }
    /**
     * Compile a syntax tree.
     *
     * > **Note**: `stringify` freezes the processor if not already *frozen*.
     *
     * > **Note**: `stringify` performs the stringify phase, not the run phase
     * > or other phases.
     *
     * @param {CompileTree extends undefined ? Node : CompileTree} tree
     *   Tree to compile.
     * @param {Compatible | undefined} [file]
     *   File associated with `node` (optional); any value accepted as `x` in
     *   `new VFile(x)`.
     * @returns {CompileResult extends undefined ? Value : CompileResult}
     *   Textual representation of the tree (see note).
     *
     *   > **Note**: unified typically compiles by serializing: most compilers
     *   > return `string` (or `Uint8Array`).
     *   > Some compilers, such as the one configured with
     *   > [`rehype-react`][rehype-react], return other values (in this case, a
     *   > React tree).
     *   > If you’re using a compiler that doesn’t serialize, expect different
     *   > result values.
     *   >
     *   > To register custom results in TypeScript, add them to
     *   > {@linkcode CompileResultMap}.
     *
     *   [rehype-react]: https://github.com/rehypejs/rehype-react
     */
    stringify(tree, file) {
      this.freeze();
      const realFile = vfile(file);
      const compiler2 = this.compiler || this.Compiler;
      assertCompiler("stringify", compiler2);
      assertNode(tree);
      return compiler2(tree, realFile);
    }
    /**
     * Configure the processor to use a plugin, a list of usable values, or a
     * preset.
     *
     * If the processor is already using a plugin, the previous plugin
     * configuration is changed based on the options that are passed in.
     * In other words, the plugin is not added a second time.
     *
     * > **Note**: `use` cannot be called on *frozen* processors.
     * > Call the processor first to create a new unfrozen processor.
     *
     * @example
     *   There are many ways to pass plugins to `.use()`.
     *   This example gives an overview:
     *
     *   ```js
     *   import {unified} from 'unified'
     *
     *   unified()
     *     // Plugin with options:
     *     .use(pluginA, {x: true, y: true})
     *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):
     *     .use(pluginA, {y: false, z: true})
     *     // Plugins:
     *     .use([pluginB, pluginC])
     *     // Two plugins, the second with options:
     *     .use([pluginD, [pluginE, {}]])
     *     // Preset with plugins and settings:
     *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})
     *     // Settings only:
     *     .use({settings: {position: false}})
     *   ```
     *
     * @template {Array<unknown>} [Parameters=[]]
     * @template {Node | string | undefined} [Input=undefined]
     * @template [Output=Input]
     *
     * @overload
     * @param {Preset | null | undefined} [preset]
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *
     * @overload
     * @param {PluggableList} list
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *
     * @overload
     * @param {Plugin<Parameters, Input, Output>} plugin
     * @param {...(Parameters | [boolean])} parameters
     * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}
     *
     * @param {PluggableList | Plugin | Preset | null | undefined} value
     *   Usable value.
     * @param {...unknown} parameters
     *   Parameters, when a plugin is given as a usable value.
     * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}
     *   Current processor.
     */
    use(value, ...parameters) {
      const attachers = this.attachers;
      const namespace = this.namespace;
      assertUnfrozen("use", this.frozen);
      if (value === null || value === void 0) {
      } else if (typeof value === "function") {
        addPlugin(value, parameters);
      } else if (typeof value === "object") {
        if (Array.isArray(value)) {
          addList(value);
        } else {
          addPreset(value);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value + "`");
      }
      return this;
      function add(value2) {
        if (typeof value2 === "function") {
          addPlugin(value2, []);
        } else if (typeof value2 === "object") {
          if (Array.isArray(value2)) {
            const [plugin, ...parameters2] =
              /** @type {PluginTuple<Array<unknown>>} */
              value2;
            addPlugin(plugin, parameters2);
          } else {
            addPreset(value2);
          }
        } else {
          throw new TypeError("Expected usable value, not `" + value2 + "`");
        }
      }
      __name(add, "add");
      function addPreset(result) {
        if (!("plugins" in result) && !("settings" in result)) {
          throw new Error(
            "Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither",
          );
        }
        addList(result.plugins);
        if (result.settings) {
          namespace.settings = (0, import_extend.default)(
            true,
            namespace.settings,
            result.settings,
          );
        }
      }
      __name(addPreset, "addPreset");
      function addList(plugins) {
        let index2 = -1;
        if (plugins === null || plugins === void 0) {
        } else if (Array.isArray(plugins)) {
          while (++index2 < plugins.length) {
            const thing = plugins[index2];
            add(thing);
          }
        } else {
          throw new TypeError(
            "Expected a list of plugins, not `" + plugins + "`",
          );
        }
      }
      __name(addList, "addList");
      function addPlugin(plugin, parameters2) {
        let index2 = -1;
        let entryIndex = -1;
        while (++index2 < attachers.length) {
          if (attachers[index2][0] === plugin) {
            entryIndex = index2;
            break;
          }
        }
        if (entryIndex === -1) {
          attachers.push([plugin, ...parameters2]);
        } else if (parameters2.length > 0) {
          let [primary, ...rest] = parameters2;
          const currentPrimary = attachers[entryIndex][1];
          if (isPlainObject(currentPrimary) && isPlainObject(primary)) {
            primary = (0, import_extend.default)(true, currentPrimary, primary);
          }
          attachers[entryIndex] = [plugin, primary, ...rest];
        }
      }
      __name(addPlugin, "addPlugin");
    }
  };
  var unified = new Processor().freeze();
  function assertParser(name, value) {
    if (typeof value !== "function") {
      throw new TypeError("Cannot `" + name + "` without `parser`");
    }
  }
  __name(assertParser, "assertParser");
  function assertCompiler(name, value) {
    if (typeof value !== "function") {
      throw new TypeError("Cannot `" + name + "` without `compiler`");
    }
  }
  __name(assertCompiler, "assertCompiler");
  function assertUnfrozen(name, frozen) {
    if (frozen) {
      throw new Error(
        "Cannot call `" +
          name +
          "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.",
      );
    }
  }
  __name(assertUnfrozen, "assertUnfrozen");
  function assertNode(node2) {
    if (!isPlainObject(node2) || typeof node2.type !== "string") {
      throw new TypeError("Expected node, got `" + node2 + "`");
    }
  }
  __name(assertNode, "assertNode");
  function assertDone(name, asyncName, complete) {
    if (!complete) {
      throw new Error(
        "`" + name + "` finished async. Use `" + asyncName + "` instead",
      );
    }
  }
  __name(assertDone, "assertDone");
  function vfile(value) {
    return looksLikeAVFile(value) ? value : new VFile(value);
  }
  __name(vfile, "vfile");
  function looksLikeAVFile(value) {
    return Boolean(
      value &&
        typeof value === "object" &&
        "message" in value &&
        "messages" in value,
    );
  }
  __name(looksLikeAVFile, "looksLikeAVFile");
  function looksLikeAValue(value) {
    return typeof value === "string" || isUint8Array2(value);
  }
  __name(looksLikeAValue, "looksLikeAValue");
  function isUint8Array2(value) {
    return Boolean(
      value &&
        typeof value === "object" &&
        "byteLength" in value &&
        "byteOffset" in value,
    );
  }
  __name(isUint8Array2, "isUint8Array");

  // node_modules/.pnpm/mdast-util-to-string@4.0.0/node_modules/mdast-util-to-string/lib/index.js
  var emptyOptions = {};
  function toString(value, options) {
    const settings = options || emptyOptions;
    const includeImageAlt =
      typeof settings.includeImageAlt === "boolean"
        ? settings.includeImageAlt
        : true;
    const includeHtml =
      typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
    return one(value, includeImageAlt, includeHtml);
  }
  __name(toString, "toString");
  function one(value, includeImageAlt, includeHtml) {
    if (node(value)) {
      if ("value" in value) {
        return value.type === "html" && !includeHtml ? "" : value.value;
      }
      if (includeImageAlt && "alt" in value && value.alt) {
        return value.alt;
      }
      if ("children" in value) {
        return all(value.children, includeImageAlt, includeHtml);
      }
    }
    if (Array.isArray(value)) {
      return all(value, includeImageAlt, includeHtml);
    }
    return "";
  }
  __name(one, "one");
  function all(values, includeImageAlt, includeHtml) {
    const result = [];
    let index2 = -1;
    while (++index2 < values.length) {
      result[index2] = one(values[index2], includeImageAlt, includeHtml);
    }
    return result.join("");
  }
  __name(all, "all");
  function node(value) {
    return Boolean(value && typeof value === "object");
  }
  __name(node, "node");

  // node_modules/.pnpm/character-entities@2.0.2/node_modules/character-entities/index.js
  var characterEntities = {
    AElig: "\xC6",
    AMP: "&",
    Aacute: "\xC1",
    Abreve: "\u0102",
    Acirc: "\xC2",
    Acy: "\u0410",
    Afr: "\u{1D504}",
    Agrave: "\xC0",
    Alpha: "\u0391",
    Amacr: "\u0100",
    And: "\u2A53",
    Aogon: "\u0104",
    Aopf: "\u{1D538}",
    ApplyFunction: "\u2061",
    Aring: "\xC5",
    Ascr: "\u{1D49C}",
    Assign: "\u2254",
    Atilde: "\xC3",
    Auml: "\xC4",
    Backslash: "\u2216",
    Barv: "\u2AE7",
    Barwed: "\u2306",
    Bcy: "\u0411",
    Because: "\u2235",
    Bernoullis: "\u212C",
    Beta: "\u0392",
    Bfr: "\u{1D505}",
    Bopf: "\u{1D539}",
    Breve: "\u02D8",
    Bscr: "\u212C",
    Bumpeq: "\u224E",
    CHcy: "\u0427",
    COPY: "\xA9",
    Cacute: "\u0106",
    Cap: "\u22D2",
    CapitalDifferentialD: "\u2145",
    Cayleys: "\u212D",
    Ccaron: "\u010C",
    Ccedil: "\xC7",
    Ccirc: "\u0108",
    Cconint: "\u2230",
    Cdot: "\u010A",
    Cedilla: "\xB8",
    CenterDot: "\xB7",
    Cfr: "\u212D",
    Chi: "\u03A7",
    CircleDot: "\u2299",
    CircleMinus: "\u2296",
    CirclePlus: "\u2295",
    CircleTimes: "\u2297",
    ClockwiseContourIntegral: "\u2232",
    CloseCurlyDoubleQuote: "\u201D",
    CloseCurlyQuote: "\u2019",
    Colon: "\u2237",
    Colone: "\u2A74",
    Congruent: "\u2261",
    Conint: "\u222F",
    ContourIntegral: "\u222E",
    Copf: "\u2102",
    Coproduct: "\u2210",
    CounterClockwiseContourIntegral: "\u2233",
    Cross: "\u2A2F",
    Cscr: "\u{1D49E}",
    Cup: "\u22D3",
    CupCap: "\u224D",
    DD: "\u2145",
    DDotrahd: "\u2911",
    DJcy: "\u0402",
    DScy: "\u0405",
    DZcy: "\u040F",
    Dagger: "\u2021",
    Darr: "\u21A1",
    Dashv: "\u2AE4",
    Dcaron: "\u010E",
    Dcy: "\u0414",
    Del: "\u2207",
    Delta: "\u0394",
    Dfr: "\u{1D507}",
    DiacriticalAcute: "\xB4",
    DiacriticalDot: "\u02D9",
    DiacriticalDoubleAcute: "\u02DD",
    DiacriticalGrave: "`",
    DiacriticalTilde: "\u02DC",
    Diamond: "\u22C4",
    DifferentialD: "\u2146",
    Dopf: "\u{1D53B}",
    Dot: "\xA8",
    DotDot: "\u20DC",
    DotEqual: "\u2250",
    DoubleContourIntegral: "\u222F",
    DoubleDot: "\xA8",
    DoubleDownArrow: "\u21D3",
    DoubleLeftArrow: "\u21D0",
    DoubleLeftRightArrow: "\u21D4",
    DoubleLeftTee: "\u2AE4",
    DoubleLongLeftArrow: "\u27F8",
    DoubleLongLeftRightArrow: "\u27FA",
    DoubleLongRightArrow: "\u27F9",
    DoubleRightArrow: "\u21D2",
    DoubleRightTee: "\u22A8",
    DoubleUpArrow: "\u21D1",
    DoubleUpDownArrow: "\u21D5",
    DoubleVerticalBar: "\u2225",
    DownArrow: "\u2193",
    DownArrowBar: "\u2913",
    DownArrowUpArrow: "\u21F5",
    DownBreve: "\u0311",
    DownLeftRightVector: "\u2950",
    DownLeftTeeVector: "\u295E",
    DownLeftVector: "\u21BD",
    DownLeftVectorBar: "\u2956",
    DownRightTeeVector: "\u295F",
    DownRightVector: "\u21C1",
    DownRightVectorBar: "\u2957",
    DownTee: "\u22A4",
    DownTeeArrow: "\u21A7",
    Downarrow: "\u21D3",
    Dscr: "\u{1D49F}",
    Dstrok: "\u0110",
    ENG: "\u014A",
    ETH: "\xD0",
    Eacute: "\xC9",
    Ecaron: "\u011A",
    Ecirc: "\xCA",
    Ecy: "\u042D",
    Edot: "\u0116",
    Efr: "\u{1D508}",
    Egrave: "\xC8",
    Element: "\u2208",
    Emacr: "\u0112",
    EmptySmallSquare: "\u25FB",
    EmptyVerySmallSquare: "\u25AB",
    Eogon: "\u0118",
    Eopf: "\u{1D53C}",
    Epsilon: "\u0395",
    Equal: "\u2A75",
    EqualTilde: "\u2242",
    Equilibrium: "\u21CC",
    Escr: "\u2130",
    Esim: "\u2A73",
    Eta: "\u0397",
    Euml: "\xCB",
    Exists: "\u2203",
    ExponentialE: "\u2147",
    Fcy: "\u0424",
    Ffr: "\u{1D509}",
    FilledSmallSquare: "\u25FC",
    FilledVerySmallSquare: "\u25AA",
    Fopf: "\u{1D53D}",
    ForAll: "\u2200",
    Fouriertrf: "\u2131",
    Fscr: "\u2131",
    GJcy: "\u0403",
    GT: ">",
    Gamma: "\u0393",
    Gammad: "\u03DC",
    Gbreve: "\u011E",
    Gcedil: "\u0122",
    Gcirc: "\u011C",
    Gcy: "\u0413",
    Gdot: "\u0120",
    Gfr: "\u{1D50A}",
    Gg: "\u22D9",
    Gopf: "\u{1D53E}",
    GreaterEqual: "\u2265",
    GreaterEqualLess: "\u22DB",
    GreaterFullEqual: "\u2267",
    GreaterGreater: "\u2AA2",
    GreaterLess: "\u2277",
    GreaterSlantEqual: "\u2A7E",
    GreaterTilde: "\u2273",
    Gscr: "\u{1D4A2}",
    Gt: "\u226B",
    HARDcy: "\u042A",
    Hacek: "\u02C7",
    Hat: "^",
    Hcirc: "\u0124",
    Hfr: "\u210C",
    HilbertSpace: "\u210B",
    Hopf: "\u210D",
    HorizontalLine: "\u2500",
    Hscr: "\u210B",
    Hstrok: "\u0126",
    HumpDownHump: "\u224E",
    HumpEqual: "\u224F",
    IEcy: "\u0415",
    IJlig: "\u0132",
    IOcy: "\u0401",
    Iacute: "\xCD",
    Icirc: "\xCE",
    Icy: "\u0418",
    Idot: "\u0130",
    Ifr: "\u2111",
    Igrave: "\xCC",
    Im: "\u2111",
    Imacr: "\u012A",
    ImaginaryI: "\u2148",
    Implies: "\u21D2",
    Int: "\u222C",
    Integral: "\u222B",
    Intersection: "\u22C2",
    InvisibleComma: "\u2063",
    InvisibleTimes: "\u2062",
    Iogon: "\u012E",
    Iopf: "\u{1D540}",
    Iota: "\u0399",
    Iscr: "\u2110",
    Itilde: "\u0128",
    Iukcy: "\u0406",
    Iuml: "\xCF",
    Jcirc: "\u0134",
    Jcy: "\u0419",
    Jfr: "\u{1D50D}",
    Jopf: "\u{1D541}",
    Jscr: "\u{1D4A5}",
    Jsercy: "\u0408",
    Jukcy: "\u0404",
    KHcy: "\u0425",
    KJcy: "\u040C",
    Kappa: "\u039A",
    Kcedil: "\u0136",
    Kcy: "\u041A",
    Kfr: "\u{1D50E}",
    Kopf: "\u{1D542}",
    Kscr: "\u{1D4A6}",
    LJcy: "\u0409",
    LT: "<",
    Lacute: "\u0139",
    Lambda: "\u039B",
    Lang: "\u27EA",
    Laplacetrf: "\u2112",
    Larr: "\u219E",
    Lcaron: "\u013D",
    Lcedil: "\u013B",
    Lcy: "\u041B",
    LeftAngleBracket: "\u27E8",
    LeftArrow: "\u2190",
    LeftArrowBar: "\u21E4",
    LeftArrowRightArrow: "\u21C6",
    LeftCeiling: "\u2308",
    LeftDoubleBracket: "\u27E6",
    LeftDownTeeVector: "\u2961",
    LeftDownVector: "\u21C3",
    LeftDownVectorBar: "\u2959",
    LeftFloor: "\u230A",
    LeftRightArrow: "\u2194",
    LeftRightVector: "\u294E",
    LeftTee: "\u22A3",
    LeftTeeArrow: "\u21A4",
    LeftTeeVector: "\u295A",
    LeftTriangle: "\u22B2",
    LeftTriangleBar: "\u29CF",
    LeftTriangleEqual: "\u22B4",
    LeftUpDownVector: "\u2951",
    LeftUpTeeVector: "\u2960",
    LeftUpVector: "\u21BF",
    LeftUpVectorBar: "\u2958",
    LeftVector: "\u21BC",
    LeftVectorBar: "\u2952",
    Leftarrow: "\u21D0",
    Leftrightarrow: "\u21D4",
    LessEqualGreater: "\u22DA",
    LessFullEqual: "\u2266",
    LessGreater: "\u2276",
    LessLess: "\u2AA1",
    LessSlantEqual: "\u2A7D",
    LessTilde: "\u2272",
    Lfr: "\u{1D50F}",
    Ll: "\u22D8",
    Lleftarrow: "\u21DA",
    Lmidot: "\u013F",
    LongLeftArrow: "\u27F5",
    LongLeftRightArrow: "\u27F7",
    LongRightArrow: "\u27F6",
    Longleftarrow: "\u27F8",
    Longleftrightarrow: "\u27FA",
    Longrightarrow: "\u27F9",
    Lopf: "\u{1D543}",
    LowerLeftArrow: "\u2199",
    LowerRightArrow: "\u2198",
    Lscr: "\u2112",
    Lsh: "\u21B0",
    Lstrok: "\u0141",
    Lt: "\u226A",
    Map: "\u2905",
    Mcy: "\u041C",
    MediumSpace: "\u205F",
    Mellintrf: "\u2133",
    Mfr: "\u{1D510}",
    MinusPlus: "\u2213",
    Mopf: "\u{1D544}",
    Mscr: "\u2133",
    Mu: "\u039C",
    NJcy: "\u040A",
    Nacute: "\u0143",
    Ncaron: "\u0147",
    Ncedil: "\u0145",
    Ncy: "\u041D",
    NegativeMediumSpace: "\u200B",
    NegativeThickSpace: "\u200B",
    NegativeThinSpace: "\u200B",
    NegativeVeryThinSpace: "\u200B",
    NestedGreaterGreater: "\u226B",
    NestedLessLess: "\u226A",
    NewLine: "\n",
    Nfr: "\u{1D511}",
    NoBreak: "\u2060",
    NonBreakingSpace: "\xA0",
    Nopf: "\u2115",
    Not: "\u2AEC",
    NotCongruent: "\u2262",
    NotCupCap: "\u226D",
    NotDoubleVerticalBar: "\u2226",
    NotElement: "\u2209",
    NotEqual: "\u2260",
    NotEqualTilde: "\u2242\u0338",
    NotExists: "\u2204",
    NotGreater: "\u226F",
    NotGreaterEqual: "\u2271",
    NotGreaterFullEqual: "\u2267\u0338",
    NotGreaterGreater: "\u226B\u0338",
    NotGreaterLess: "\u2279",
    NotGreaterSlantEqual: "\u2A7E\u0338",
    NotGreaterTilde: "\u2275",
    NotHumpDownHump: "\u224E\u0338",
    NotHumpEqual: "\u224F\u0338",
    NotLeftTriangle: "\u22EA",
    NotLeftTriangleBar: "\u29CF\u0338",
    NotLeftTriangleEqual: "\u22EC",
    NotLess: "\u226E",
    NotLessEqual: "\u2270",
    NotLessGreater: "\u2278",
    NotLessLess: "\u226A\u0338",
    NotLessSlantEqual: "\u2A7D\u0338",
    NotLessTilde: "\u2274",
    NotNestedGreaterGreater: "\u2AA2\u0338",
    NotNestedLessLess: "\u2AA1\u0338",
    NotPrecedes: "\u2280",
    NotPrecedesEqual: "\u2AAF\u0338",
    NotPrecedesSlantEqual: "\u22E0",
    NotReverseElement: "\u220C",
    NotRightTriangle: "\u22EB",
    NotRightTriangleBar: "\u29D0\u0338",
    NotRightTriangleEqual: "\u22ED",
    NotSquareSubset: "\u228F\u0338",
    NotSquareSubsetEqual: "\u22E2",
    NotSquareSuperset: "\u2290\u0338",
    NotSquareSupersetEqual: "\u22E3",
    NotSubset: "\u2282\u20D2",
    NotSubsetEqual: "\u2288",
    NotSucceeds: "\u2281",
    NotSucceedsEqual: "\u2AB0\u0338",
    NotSucceedsSlantEqual: "\u22E1",
    NotSucceedsTilde: "\u227F\u0338",
    NotSuperset: "\u2283\u20D2",
    NotSupersetEqual: "\u2289",
    NotTilde: "\u2241",
    NotTildeEqual: "\u2244",
    NotTildeFullEqual: "\u2247",
    NotTildeTilde: "\u2249",
    NotVerticalBar: "\u2224",
    Nscr: "\u{1D4A9}",
    Ntilde: "\xD1",
    Nu: "\u039D",
    OElig: "\u0152",
    Oacute: "\xD3",
    Ocirc: "\xD4",
    Ocy: "\u041E",
    Odblac: "\u0150",
    Ofr: "\u{1D512}",
    Ograve: "\xD2",
    Omacr: "\u014C",
    Omega: "\u03A9",
    Omicron: "\u039F",
    Oopf: "\u{1D546}",
    OpenCurlyDoubleQuote: "\u201C",
    OpenCurlyQuote: "\u2018",
    Or: "\u2A54",
    Oscr: "\u{1D4AA}",
    Oslash: "\xD8",
    Otilde: "\xD5",
    Otimes: "\u2A37",
    Ouml: "\xD6",
    OverBar: "\u203E",
    OverBrace: "\u23DE",
    OverBracket: "\u23B4",
    OverParenthesis: "\u23DC",
    PartialD: "\u2202",
    Pcy: "\u041F",
    Pfr: "\u{1D513}",
    Phi: "\u03A6",
    Pi: "\u03A0",
    PlusMinus: "\xB1",
    Poincareplane: "\u210C",
    Popf: "\u2119",
    Pr: "\u2ABB",
    Precedes: "\u227A",
    PrecedesEqual: "\u2AAF",
    PrecedesSlantEqual: "\u227C",
    PrecedesTilde: "\u227E",
    Prime: "\u2033",
    Product: "\u220F",
    Proportion: "\u2237",
    Proportional: "\u221D",
    Pscr: "\u{1D4AB}",
    Psi: "\u03A8",
    QUOT: '"',
    Qfr: "\u{1D514}",
    Qopf: "\u211A",
    Qscr: "\u{1D4AC}",
    RBarr: "\u2910",
    REG: "\xAE",
    Racute: "\u0154",
    Rang: "\u27EB",
    Rarr: "\u21A0",
    Rarrtl: "\u2916",
    Rcaron: "\u0158",
    Rcedil: "\u0156",
    Rcy: "\u0420",
    Re: "\u211C",
    ReverseElement: "\u220B",
    ReverseEquilibrium: "\u21CB",
    ReverseUpEquilibrium: "\u296F",
    Rfr: "\u211C",
    Rho: "\u03A1",
    RightAngleBracket: "\u27E9",
    RightArrow: "\u2192",
    RightArrowBar: "\u21E5",
    RightArrowLeftArrow: "\u21C4",
    RightCeiling: "\u2309",
    RightDoubleBracket: "\u27E7",
    RightDownTeeVector: "\u295D",
    RightDownVector: "\u21C2",
    RightDownVectorBar: "\u2955",
    RightFloor: "\u230B",
    RightTee: "\u22A2",
    RightTeeArrow: "\u21A6",
    RightTeeVector: "\u295B",
    RightTriangle: "\u22B3",
    RightTriangleBar: "\u29D0",
    RightTriangleEqual: "\u22B5",
    RightUpDownVector: "\u294F",
    RightUpTeeVector: "\u295C",
    RightUpVector: "\u21BE",
    RightUpVectorBar: "\u2954",
    RightVector: "\u21C0",
    RightVectorBar: "\u2953",
    Rightarrow: "\u21D2",
    Ropf: "\u211D",
    RoundImplies: "\u2970",
    Rrightarrow: "\u21DB",
    Rscr: "\u211B",
    Rsh: "\u21B1",
    RuleDelayed: "\u29F4",
    SHCHcy: "\u0429",
    SHcy: "\u0428",
    SOFTcy: "\u042C",
    Sacute: "\u015A",
    Sc: "\u2ABC",
    Scaron: "\u0160",
    Scedil: "\u015E",
    Scirc: "\u015C",
    Scy: "\u0421",
    Sfr: "\u{1D516}",
    ShortDownArrow: "\u2193",
    ShortLeftArrow: "\u2190",
    ShortRightArrow: "\u2192",
    ShortUpArrow: "\u2191",
    Sigma: "\u03A3",
    SmallCircle: "\u2218",
    Sopf: "\u{1D54A}",
    Sqrt: "\u221A",
    Square: "\u25A1",
    SquareIntersection: "\u2293",
    SquareSubset: "\u228F",
    SquareSubsetEqual: "\u2291",
    SquareSuperset: "\u2290",
    SquareSupersetEqual: "\u2292",
    SquareUnion: "\u2294",
    Sscr: "\u{1D4AE}",
    Star: "\u22C6",
    Sub: "\u22D0",
    Subset: "\u22D0",
    SubsetEqual: "\u2286",
    Succeeds: "\u227B",
    SucceedsEqual: "\u2AB0",
    SucceedsSlantEqual: "\u227D",
    SucceedsTilde: "\u227F",
    SuchThat: "\u220B",
    Sum: "\u2211",
    Sup: "\u22D1",
    Superset: "\u2283",
    SupersetEqual: "\u2287",
    Supset: "\u22D1",
    THORN: "\xDE",
    TRADE: "\u2122",
    TSHcy: "\u040B",
    TScy: "\u0426",
    Tab: "	",
    Tau: "\u03A4",
    Tcaron: "\u0164",
    Tcedil: "\u0162",
    Tcy: "\u0422",
    Tfr: "\u{1D517}",
    Therefore: "\u2234",
    Theta: "\u0398",
    ThickSpace: "\u205F\u200A",
    ThinSpace: "\u2009",
    Tilde: "\u223C",
    TildeEqual: "\u2243",
    TildeFullEqual: "\u2245",
    TildeTilde: "\u2248",
    Topf: "\u{1D54B}",
    TripleDot: "\u20DB",
    Tscr: "\u{1D4AF}",
    Tstrok: "\u0166",
    Uacute: "\xDA",
    Uarr: "\u219F",
    Uarrocir: "\u2949",
    Ubrcy: "\u040E",
    Ubreve: "\u016C",
    Ucirc: "\xDB",
    Ucy: "\u0423",
    Udblac: "\u0170",
    Ufr: "\u{1D518}",
    Ugrave: "\xD9",
    Umacr: "\u016A",
    UnderBar: "_",
    UnderBrace: "\u23DF",
    UnderBracket: "\u23B5",
    UnderParenthesis: "\u23DD",
    Union: "\u22C3",
    UnionPlus: "\u228E",
    Uogon: "\u0172",
    Uopf: "\u{1D54C}",
    UpArrow: "\u2191",
    UpArrowBar: "\u2912",
    UpArrowDownArrow: "\u21C5",
    UpDownArrow: "\u2195",
    UpEquilibrium: "\u296E",
    UpTee: "\u22A5",
    UpTeeArrow: "\u21A5",
    Uparrow: "\u21D1",
    Updownarrow: "\u21D5",
    UpperLeftArrow: "\u2196",
    UpperRightArrow: "\u2197",
    Upsi: "\u03D2",
    Upsilon: "\u03A5",
    Uring: "\u016E",
    Uscr: "\u{1D4B0}",
    Utilde: "\u0168",
    Uuml: "\xDC",
    VDash: "\u22AB",
    Vbar: "\u2AEB",
    Vcy: "\u0412",
    Vdash: "\u22A9",
    Vdashl: "\u2AE6",
    Vee: "\u22C1",
    Verbar: "\u2016",
    Vert: "\u2016",
    VerticalBar: "\u2223",
    VerticalLine: "|",
    VerticalSeparator: "\u2758",
    VerticalTilde: "\u2240",
    VeryThinSpace: "\u200A",
    Vfr: "\u{1D519}",
    Vopf: "\u{1D54D}",
    Vscr: "\u{1D4B1}",
    Vvdash: "\u22AA",
    Wcirc: "\u0174",
    Wedge: "\u22C0",
    Wfr: "\u{1D51A}",
    Wopf: "\u{1D54E}",
    Wscr: "\u{1D4B2}",
    Xfr: "\u{1D51B}",
    Xi: "\u039E",
    Xopf: "\u{1D54F}",
    Xscr: "\u{1D4B3}",
    YAcy: "\u042F",
    YIcy: "\u0407",
    YUcy: "\u042E",
    Yacute: "\xDD",
    Ycirc: "\u0176",
    Ycy: "\u042B",
    Yfr: "\u{1D51C}",
    Yopf: "\u{1D550}",
    Yscr: "\u{1D4B4}",
    Yuml: "\u0178",
    ZHcy: "\u0416",
    Zacute: "\u0179",
    Zcaron: "\u017D",
    Zcy: "\u0417",
    Zdot: "\u017B",
    ZeroWidthSpace: "\u200B",
    Zeta: "\u0396",
    Zfr: "\u2128",
    Zopf: "\u2124",
    Zscr: "\u{1D4B5}",
    aacute: "\xE1",
    abreve: "\u0103",
    ac: "\u223E",
    acE: "\u223E\u0333",
    acd: "\u223F",
    acirc: "\xE2",
    acute: "\xB4",
    acy: "\u0430",
    aelig: "\xE6",
    af: "\u2061",
    afr: "\u{1D51E}",
    agrave: "\xE0",
    alefsym: "\u2135",
    aleph: "\u2135",
    alpha: "\u03B1",
    amacr: "\u0101",
    amalg: "\u2A3F",
    amp: "&",
    and: "\u2227",
    andand: "\u2A55",
    andd: "\u2A5C",
    andslope: "\u2A58",
    andv: "\u2A5A",
    ang: "\u2220",
    ange: "\u29A4",
    angle: "\u2220",
    angmsd: "\u2221",
    angmsdaa: "\u29A8",
    angmsdab: "\u29A9",
    angmsdac: "\u29AA",
    angmsdad: "\u29AB",
    angmsdae: "\u29AC",
    angmsdaf: "\u29AD",
    angmsdag: "\u29AE",
    angmsdah: "\u29AF",
    angrt: "\u221F",
    angrtvb: "\u22BE",
    angrtvbd: "\u299D",
    angsph: "\u2222",
    angst: "\xC5",
    angzarr: "\u237C",
    aogon: "\u0105",
    aopf: "\u{1D552}",
    ap: "\u2248",
    apE: "\u2A70",
    apacir: "\u2A6F",
    ape: "\u224A",
    apid: "\u224B",
    apos: "'",
    approx: "\u2248",
    approxeq: "\u224A",
    aring: "\xE5",
    ascr: "\u{1D4B6}",
    ast: "*",
    asymp: "\u2248",
    asympeq: "\u224D",
    atilde: "\xE3",
    auml: "\xE4",
    awconint: "\u2233",
    awint: "\u2A11",
    bNot: "\u2AED",
    backcong: "\u224C",
    backepsilon: "\u03F6",
    backprime: "\u2035",
    backsim: "\u223D",
    backsimeq: "\u22CD",
    barvee: "\u22BD",
    barwed: "\u2305",
    barwedge: "\u2305",
    bbrk: "\u23B5",
    bbrktbrk: "\u23B6",
    bcong: "\u224C",
    bcy: "\u0431",
    bdquo: "\u201E",
    becaus: "\u2235",
    because: "\u2235",
    bemptyv: "\u29B0",
    bepsi: "\u03F6",
    bernou: "\u212C",
    beta: "\u03B2",
    beth: "\u2136",
    between: "\u226C",
    bfr: "\u{1D51F}",
    bigcap: "\u22C2",
    bigcirc: "\u25EF",
    bigcup: "\u22C3",
    bigodot: "\u2A00",
    bigoplus: "\u2A01",
    bigotimes: "\u2A02",
    bigsqcup: "\u2A06",
    bigstar: "\u2605",
    bigtriangledown: "\u25BD",
    bigtriangleup: "\u25B3",
    biguplus: "\u2A04",
    bigvee: "\u22C1",
    bigwedge: "\u22C0",
    bkarow: "\u290D",
    blacklozenge: "\u29EB",
    blacksquare: "\u25AA",
    blacktriangle: "\u25B4",
    blacktriangledown: "\u25BE",
    blacktriangleleft: "\u25C2",
    blacktriangleright: "\u25B8",
    blank: "\u2423",
    blk12: "\u2592",
    blk14: "\u2591",
    blk34: "\u2593",
    block: "\u2588",
    bne: "=\u20E5",
    bnequiv: "\u2261\u20E5",
    bnot: "\u2310",
    bopf: "\u{1D553}",
    bot: "\u22A5",
    bottom: "\u22A5",
    bowtie: "\u22C8",
    boxDL: "\u2557",
    boxDR: "\u2554",
    boxDl: "\u2556",
    boxDr: "\u2553",
    boxH: "\u2550",
    boxHD: "\u2566",
    boxHU: "\u2569",
    boxHd: "\u2564",
    boxHu: "\u2567",
    boxUL: "\u255D",
    boxUR: "\u255A",
    boxUl: "\u255C",
    boxUr: "\u2559",
    boxV: "\u2551",
    boxVH: "\u256C",
    boxVL: "\u2563",
    boxVR: "\u2560",
    boxVh: "\u256B",
    boxVl: "\u2562",
    boxVr: "\u255F",
    boxbox: "\u29C9",
    boxdL: "\u2555",
    boxdR: "\u2552",
    boxdl: "\u2510",
    boxdr: "\u250C",
    boxh: "\u2500",
    boxhD: "\u2565",
    boxhU: "\u2568",
    boxhd: "\u252C",
    boxhu: "\u2534",
    boxminus: "\u229F",
    boxplus: "\u229E",
    boxtimes: "\u22A0",
    boxuL: "\u255B",
    boxuR: "\u2558",
    boxul: "\u2518",
    boxur: "\u2514",
    boxv: "\u2502",
    boxvH: "\u256A",
    boxvL: "\u2561",
    boxvR: "\u255E",
    boxvh: "\u253C",
    boxvl: "\u2524",
    boxvr: "\u251C",
    bprime: "\u2035",
    breve: "\u02D8",
    brvbar: "\xA6",
    bscr: "\u{1D4B7}",
    bsemi: "\u204F",
    bsim: "\u223D",
    bsime: "\u22CD",
    bsol: "\\",
    bsolb: "\u29C5",
    bsolhsub: "\u27C8",
    bull: "\u2022",
    bullet: "\u2022",
    bump: "\u224E",
    bumpE: "\u2AAE",
    bumpe: "\u224F",
    bumpeq: "\u224F",
    cacute: "\u0107",
    cap: "\u2229",
    capand: "\u2A44",
    capbrcup: "\u2A49",
    capcap: "\u2A4B",
    capcup: "\u2A47",
    capdot: "\u2A40",
    caps: "\u2229\uFE00",
    caret: "\u2041",
    caron: "\u02C7",
    ccaps: "\u2A4D",
    ccaron: "\u010D",
    ccedil: "\xE7",
    ccirc: "\u0109",
    ccups: "\u2A4C",
    ccupssm: "\u2A50",
    cdot: "\u010B",
    cedil: "\xB8",
    cemptyv: "\u29B2",
    cent: "\xA2",
    centerdot: "\xB7",
    cfr: "\u{1D520}",
    chcy: "\u0447",
    check: "\u2713",
    checkmark: "\u2713",
    chi: "\u03C7",
    cir: "\u25CB",
    cirE: "\u29C3",
    circ: "\u02C6",
    circeq: "\u2257",
    circlearrowleft: "\u21BA",
    circlearrowright: "\u21BB",
    circledR: "\xAE",
    circledS: "\u24C8",
    circledast: "\u229B",
    circledcirc: "\u229A",
    circleddash: "\u229D",
    cire: "\u2257",
    cirfnint: "\u2A10",
    cirmid: "\u2AEF",
    cirscir: "\u29C2",
    clubs: "\u2663",
    clubsuit: "\u2663",
    colon: ":",
    colone: "\u2254",
    coloneq: "\u2254",
    comma: ",",
    commat: "@",
    comp: "\u2201",
    compfn: "\u2218",
    complement: "\u2201",
    complexes: "\u2102",
    cong: "\u2245",
    congdot: "\u2A6D",
    conint: "\u222E",
    copf: "\u{1D554}",
    coprod: "\u2210",
    copy: "\xA9",
    copysr: "\u2117",
    crarr: "\u21B5",
    cross: "\u2717",
    cscr: "\u{1D4B8}",
    csub: "\u2ACF",
    csube: "\u2AD1",
    csup: "\u2AD0",
    csupe: "\u2AD2",
    ctdot: "\u22EF",
    cudarrl: "\u2938",
    cudarrr: "\u2935",
    cuepr: "\u22DE",
    cuesc: "\u22DF",
    cularr: "\u21B6",
    cularrp: "\u293D",
    cup: "\u222A",
    cupbrcap: "\u2A48",
    cupcap: "\u2A46",
    cupcup: "\u2A4A",
    cupdot: "\u228D",
    cupor: "\u2A45",
    cups: "\u222A\uFE00",
    curarr: "\u21B7",
    curarrm: "\u293C",
    curlyeqprec: "\u22DE",
    curlyeqsucc: "\u22DF",
    curlyvee: "\u22CE",
    curlywedge: "\u22CF",
    curren: "\xA4",
    curvearrowleft: "\u21B6",
    curvearrowright: "\u21B7",
    cuvee: "\u22CE",
    cuwed: "\u22CF",
    cwconint: "\u2232",
    cwint: "\u2231",
    cylcty: "\u232D",
    dArr: "\u21D3",
    dHar: "\u2965",
    dagger: "\u2020",
    daleth: "\u2138",
    darr: "\u2193",
    dash: "\u2010",
    dashv: "\u22A3",
    dbkarow: "\u290F",
    dblac: "\u02DD",
    dcaron: "\u010F",
    dcy: "\u0434",
    dd: "\u2146",
    ddagger: "\u2021",
    ddarr: "\u21CA",
    ddotseq: "\u2A77",
    deg: "\xB0",
    delta: "\u03B4",
    demptyv: "\u29B1",
    dfisht: "\u297F",
    dfr: "\u{1D521}",
    dharl: "\u21C3",
    dharr: "\u21C2",
    diam: "\u22C4",
    diamond: "\u22C4",
    diamondsuit: "\u2666",
    diams: "\u2666",
    die: "\xA8",
    digamma: "\u03DD",
    disin: "\u22F2",
    div: "\xF7",
    divide: "\xF7",
    divideontimes: "\u22C7",
    divonx: "\u22C7",
    djcy: "\u0452",
    dlcorn: "\u231E",
    dlcrop: "\u230D",
    dollar: "$",
    dopf: "\u{1D555}",
    dot: "\u02D9",
    doteq: "\u2250",
    doteqdot: "\u2251",
    dotminus: "\u2238",
    dotplus: "\u2214",
    dotsquare: "\u22A1",
    doublebarwedge: "\u2306",
    downarrow: "\u2193",
    downdownarrows: "\u21CA",
    downharpoonleft: "\u21C3",
    downharpoonright: "\u21C2",
    drbkarow: "\u2910",
    drcorn: "\u231F",
    drcrop: "\u230C",
    dscr: "\u{1D4B9}",
    dscy: "\u0455",
    dsol: "\u29F6",
    dstrok: "\u0111",
    dtdot: "\u22F1",
    dtri: "\u25BF",
    dtrif: "\u25BE",
    duarr: "\u21F5",
    duhar: "\u296F",
    dwangle: "\u29A6",
    dzcy: "\u045F",
    dzigrarr: "\u27FF",
    eDDot: "\u2A77",
    eDot: "\u2251",
    eacute: "\xE9",
    easter: "\u2A6E",
    ecaron: "\u011B",
    ecir: "\u2256",
    ecirc: "\xEA",
    ecolon: "\u2255",
    ecy: "\u044D",
    edot: "\u0117",
    ee: "\u2147",
    efDot: "\u2252",
    efr: "\u{1D522}",
    eg: "\u2A9A",
    egrave: "\xE8",
    egs: "\u2A96",
    egsdot: "\u2A98",
    el: "\u2A99",
    elinters: "\u23E7",
    ell: "\u2113",
    els: "\u2A95",
    elsdot: "\u2A97",
    emacr: "\u0113",
    empty: "\u2205",
    emptyset: "\u2205",
    emptyv: "\u2205",
    emsp13: "\u2004",
    emsp14: "\u2005",
    emsp: "\u2003",
    eng: "\u014B",
    ensp: "\u2002",
    eogon: "\u0119",
    eopf: "\u{1D556}",
    epar: "\u22D5",
    eparsl: "\u29E3",
    eplus: "\u2A71",
    epsi: "\u03B5",
    epsilon: "\u03B5",
    epsiv: "\u03F5",
    eqcirc: "\u2256",
    eqcolon: "\u2255",
    eqsim: "\u2242",
    eqslantgtr: "\u2A96",
    eqslantless: "\u2A95",
    equals: "=",
    equest: "\u225F",
    equiv: "\u2261",
    equivDD: "\u2A78",
    eqvparsl: "\u29E5",
    erDot: "\u2253",
    erarr: "\u2971",
    escr: "\u212F",
    esdot: "\u2250",
    esim: "\u2242",
    eta: "\u03B7",
    eth: "\xF0",
    euml: "\xEB",
    euro: "\u20AC",
    excl: "!",
    exist: "\u2203",
    expectation: "\u2130",
    exponentiale: "\u2147",
    fallingdotseq: "\u2252",
    fcy: "\u0444",
    female: "\u2640",
    ffilig: "\uFB03",
    fflig: "\uFB00",
    ffllig: "\uFB04",
    ffr: "\u{1D523}",
    filig: "\uFB01",
    fjlig: "fj",
    flat: "\u266D",
    fllig: "\uFB02",
    fltns: "\u25B1",
    fnof: "\u0192",
    fopf: "\u{1D557}",
    forall: "\u2200",
    fork: "\u22D4",
    forkv: "\u2AD9",
    fpartint: "\u2A0D",
    frac12: "\xBD",
    frac13: "\u2153",
    frac14: "\xBC",
    frac15: "\u2155",
    frac16: "\u2159",
    frac18: "\u215B",
    frac23: "\u2154",
    frac25: "\u2156",
    frac34: "\xBE",
    frac35: "\u2157",
    frac38: "\u215C",
    frac45: "\u2158",
    frac56: "\u215A",
    frac58: "\u215D",
    frac78: "\u215E",
    frasl: "\u2044",
    frown: "\u2322",
    fscr: "\u{1D4BB}",
    gE: "\u2267",
    gEl: "\u2A8C",
    gacute: "\u01F5",
    gamma: "\u03B3",
    gammad: "\u03DD",
    gap: "\u2A86",
    gbreve: "\u011F",
    gcirc: "\u011D",
    gcy: "\u0433",
    gdot: "\u0121",
    ge: "\u2265",
    gel: "\u22DB",
    geq: "\u2265",
    geqq: "\u2267",
    geqslant: "\u2A7E",
    ges: "\u2A7E",
    gescc: "\u2AA9",
    gesdot: "\u2A80",
    gesdoto: "\u2A82",
    gesdotol: "\u2A84",
    gesl: "\u22DB\uFE00",
    gesles: "\u2A94",
    gfr: "\u{1D524}",
    gg: "\u226B",
    ggg: "\u22D9",
    gimel: "\u2137",
    gjcy: "\u0453",
    gl: "\u2277",
    glE: "\u2A92",
    gla: "\u2AA5",
    glj: "\u2AA4",
    gnE: "\u2269",
    gnap: "\u2A8A",
    gnapprox: "\u2A8A",
    gne: "\u2A88",
    gneq: "\u2A88",
    gneqq: "\u2269",
    gnsim: "\u22E7",
    gopf: "\u{1D558}",
    grave: "`",
    gscr: "\u210A",
    gsim: "\u2273",
    gsime: "\u2A8E",
    gsiml: "\u2A90",
    gt: ">",
    gtcc: "\u2AA7",
    gtcir: "\u2A7A",
    gtdot: "\u22D7",
    gtlPar: "\u2995",
    gtquest: "\u2A7C",
    gtrapprox: "\u2A86",
    gtrarr: "\u2978",
    gtrdot: "\u22D7",
    gtreqless: "\u22DB",
    gtreqqless: "\u2A8C",
    gtrless: "\u2277",
    gtrsim: "\u2273",
    gvertneqq: "\u2269\uFE00",
    gvnE: "\u2269\uFE00",
    hArr: "\u21D4",
    hairsp: "\u200A",
    half: "\xBD",
    hamilt: "\u210B",
    hardcy: "\u044A",
    harr: "\u2194",
    harrcir: "\u2948",
    harrw: "\u21AD",
    hbar: "\u210F",
    hcirc: "\u0125",
    hearts: "\u2665",
    heartsuit: "\u2665",
    hellip: "\u2026",
    hercon: "\u22B9",
    hfr: "\u{1D525}",
    hksearow: "\u2925",
    hkswarow: "\u2926",
    hoarr: "\u21FF",
    homtht: "\u223B",
    hookleftarrow: "\u21A9",
    hookrightarrow: "\u21AA",
    hopf: "\u{1D559}",
    horbar: "\u2015",
    hscr: "\u{1D4BD}",
    hslash: "\u210F",
    hstrok: "\u0127",
    hybull: "\u2043",
    hyphen: "\u2010",
    iacute: "\xED",
    ic: "\u2063",
    icirc: "\xEE",
    icy: "\u0438",
    iecy: "\u0435",
    iexcl: "\xA1",
    iff: "\u21D4",
    ifr: "\u{1D526}",
    igrave: "\xEC",
    ii: "\u2148",
    iiiint: "\u2A0C",
    iiint: "\u222D",
    iinfin: "\u29DC",
    iiota: "\u2129",
    ijlig: "\u0133",
    imacr: "\u012B",
    image: "\u2111",
    imagline: "\u2110",
    imagpart: "\u2111",
    imath: "\u0131",
    imof: "\u22B7",
    imped: "\u01B5",
    in: "\u2208",
    incare: "\u2105",
    infin: "\u221E",
    infintie: "\u29DD",
    inodot: "\u0131",
    int: "\u222B",
    intcal: "\u22BA",
    integers: "\u2124",
    intercal: "\u22BA",
    intlarhk: "\u2A17",
    intprod: "\u2A3C",
    iocy: "\u0451",
    iogon: "\u012F",
    iopf: "\u{1D55A}",
    iota: "\u03B9",
    iprod: "\u2A3C",
    iquest: "\xBF",
    iscr: "\u{1D4BE}",
    isin: "\u2208",
    isinE: "\u22F9",
    isindot: "\u22F5",
    isins: "\u22F4",
    isinsv: "\u22F3",
    isinv: "\u2208",
    it: "\u2062",
    itilde: "\u0129",
    iukcy: "\u0456",
    iuml: "\xEF",
    jcirc: "\u0135",
    jcy: "\u0439",
    jfr: "\u{1D527}",
    jmath: "\u0237",
    jopf: "\u{1D55B}",
    jscr: "\u{1D4BF}",
    jsercy: "\u0458",
    jukcy: "\u0454",
    kappa: "\u03BA",
    kappav: "\u03F0",
    kcedil: "\u0137",
    kcy: "\u043A",
    kfr: "\u{1D528}",
    kgreen: "\u0138",
    khcy: "\u0445",
    kjcy: "\u045C",
    kopf: "\u{1D55C}",
    kscr: "\u{1D4C0}",
    lAarr: "\u21DA",
    lArr: "\u21D0",
    lAtail: "\u291B",
    lBarr: "\u290E",
    lE: "\u2266",
    lEg: "\u2A8B",
    lHar: "\u2962",
    lacute: "\u013A",
    laemptyv: "\u29B4",
    lagran: "\u2112",
    lambda: "\u03BB",
    lang: "\u27E8",
    langd: "\u2991",
    langle: "\u27E8",
    lap: "\u2A85",
    laquo: "\xAB",
    larr: "\u2190",
    larrb: "\u21E4",
    larrbfs: "\u291F",
    larrfs: "\u291D",
    larrhk: "\u21A9",
    larrlp: "\u21AB",
    larrpl: "\u2939",
    larrsim: "\u2973",
    larrtl: "\u21A2",
    lat: "\u2AAB",
    latail: "\u2919",
    late: "\u2AAD",
    lates: "\u2AAD\uFE00",
    lbarr: "\u290C",
    lbbrk: "\u2772",
    lbrace: "{",
    lbrack: "[",
    lbrke: "\u298B",
    lbrksld: "\u298F",
    lbrkslu: "\u298D",
    lcaron: "\u013E",
    lcedil: "\u013C",
    lceil: "\u2308",
    lcub: "{",
    lcy: "\u043B",
    ldca: "\u2936",
    ldquo: "\u201C",
    ldquor: "\u201E",
    ldrdhar: "\u2967",
    ldrushar: "\u294B",
    ldsh: "\u21B2",
    le: "\u2264",
    leftarrow: "\u2190",
    leftarrowtail: "\u21A2",
    leftharpoondown: "\u21BD",
    leftharpoonup: "\u21BC",
    leftleftarrows: "\u21C7",
    leftrightarrow: "\u2194",
    leftrightarrows: "\u21C6",
    leftrightharpoons: "\u21CB",
    leftrightsquigarrow: "\u21AD",
    leftthreetimes: "\u22CB",
    leg: "\u22DA",
    leq: "\u2264",
    leqq: "\u2266",
    leqslant: "\u2A7D",
    les: "\u2A7D",
    lescc: "\u2AA8",
    lesdot: "\u2A7F",
    lesdoto: "\u2A81",
    lesdotor: "\u2A83",
    lesg: "\u22DA\uFE00",
    lesges: "\u2A93",
    lessapprox: "\u2A85",
    lessdot: "\u22D6",
    lesseqgtr: "\u22DA",
    lesseqqgtr: "\u2A8B",
    lessgtr: "\u2276",
    lesssim: "\u2272",
    lfisht: "\u297C",
    lfloor: "\u230A",
    lfr: "\u{1D529}",
    lg: "\u2276",
    lgE: "\u2A91",
    lhard: "\u21BD",
    lharu: "\u21BC",
    lharul: "\u296A",
    lhblk: "\u2584",
    ljcy: "\u0459",
    ll: "\u226A",
    llarr: "\u21C7",
    llcorner: "\u231E",
    llhard: "\u296B",
    lltri: "\u25FA",
    lmidot: "\u0140",
    lmoust: "\u23B0",
    lmoustache: "\u23B0",
    lnE: "\u2268",
    lnap: "\u2A89",
    lnapprox: "\u2A89",
    lne: "\u2A87",
    lneq: "\u2A87",
    lneqq: "\u2268",
    lnsim: "\u22E6",
    loang: "\u27EC",
    loarr: "\u21FD",
    lobrk: "\u27E6",
    longleftarrow: "\u27F5",
    longleftrightarrow: "\u27F7",
    longmapsto: "\u27FC",
    longrightarrow: "\u27F6",
    looparrowleft: "\u21AB",
    looparrowright: "\u21AC",
    lopar: "\u2985",
    lopf: "\u{1D55D}",
    loplus: "\u2A2D",
    lotimes: "\u2A34",
    lowast: "\u2217",
    lowbar: "_",
    loz: "\u25CA",
    lozenge: "\u25CA",
    lozf: "\u29EB",
    lpar: "(",
    lparlt: "\u2993",
    lrarr: "\u21C6",
    lrcorner: "\u231F",
    lrhar: "\u21CB",
    lrhard: "\u296D",
    lrm: "\u200E",
    lrtri: "\u22BF",
    lsaquo: "\u2039",
    lscr: "\u{1D4C1}",
    lsh: "\u21B0",
    lsim: "\u2272",
    lsime: "\u2A8D",
    lsimg: "\u2A8F",
    lsqb: "[",
    lsquo: "\u2018",
    lsquor: "\u201A",
    lstrok: "\u0142",
    lt: "<",
    ltcc: "\u2AA6",
    ltcir: "\u2A79",
    ltdot: "\u22D6",
    lthree: "\u22CB",
    ltimes: "\u22C9",
    ltlarr: "\u2976",
    ltquest: "\u2A7B",
    ltrPar: "\u2996",
    ltri: "\u25C3",
    ltrie: "\u22B4",
    ltrif: "\u25C2",
    lurdshar: "\u294A",
    luruhar: "\u2966",
    lvertneqq: "\u2268\uFE00",
    lvnE: "\u2268\uFE00",
    mDDot: "\u223A",
    macr: "\xAF",
    male: "\u2642",
    malt: "\u2720",
    maltese: "\u2720",
    map: "\u21A6",
    mapsto: "\u21A6",
    mapstodown: "\u21A7",
    mapstoleft: "\u21A4",
    mapstoup: "\u21A5",
    marker: "\u25AE",
    mcomma: "\u2A29",
    mcy: "\u043C",
    mdash: "\u2014",
    measuredangle: "\u2221",
    mfr: "\u{1D52A}",
    mho: "\u2127",
    micro: "\xB5",
    mid: "\u2223",
    midast: "*",
    midcir: "\u2AF0",
    middot: "\xB7",
    minus: "\u2212",
    minusb: "\u229F",
    minusd: "\u2238",
    minusdu: "\u2A2A",
    mlcp: "\u2ADB",
    mldr: "\u2026",
    mnplus: "\u2213",
    models: "\u22A7",
    mopf: "\u{1D55E}",
    mp: "\u2213",
    mscr: "\u{1D4C2}",
    mstpos: "\u223E",
    mu: "\u03BC",
    multimap: "\u22B8",
    mumap: "\u22B8",
    nGg: "\u22D9\u0338",
    nGt: "\u226B\u20D2",
    nGtv: "\u226B\u0338",
    nLeftarrow: "\u21CD",
    nLeftrightarrow: "\u21CE",
    nLl: "\u22D8\u0338",
    nLt: "\u226A\u20D2",
    nLtv: "\u226A\u0338",
    nRightarrow: "\u21CF",
    nVDash: "\u22AF",
    nVdash: "\u22AE",
    nabla: "\u2207",
    nacute: "\u0144",
    nang: "\u2220\u20D2",
    nap: "\u2249",
    napE: "\u2A70\u0338",
    napid: "\u224B\u0338",
    napos: "\u0149",
    napprox: "\u2249",
    natur: "\u266E",
    natural: "\u266E",
    naturals: "\u2115",
    nbsp: "\xA0",
    nbump: "\u224E\u0338",
    nbumpe: "\u224F\u0338",
    ncap: "\u2A43",
    ncaron: "\u0148",
    ncedil: "\u0146",
    ncong: "\u2247",
    ncongdot: "\u2A6D\u0338",
    ncup: "\u2A42",
    ncy: "\u043D",
    ndash: "\u2013",
    ne: "\u2260",
    neArr: "\u21D7",
    nearhk: "\u2924",
    nearr: "\u2197",
    nearrow: "\u2197",
    nedot: "\u2250\u0338",
    nequiv: "\u2262",
    nesear: "\u2928",
    nesim: "\u2242\u0338",
    nexist: "\u2204",
    nexists: "\u2204",
    nfr: "\u{1D52B}",
    ngE: "\u2267\u0338",
    nge: "\u2271",
    ngeq: "\u2271",
    ngeqq: "\u2267\u0338",
    ngeqslant: "\u2A7E\u0338",
    nges: "\u2A7E\u0338",
    ngsim: "\u2275",
    ngt: "\u226F",
    ngtr: "\u226F",
    nhArr: "\u21CE",
    nharr: "\u21AE",
    nhpar: "\u2AF2",
    ni: "\u220B",
    nis: "\u22FC",
    nisd: "\u22FA",
    niv: "\u220B",
    njcy: "\u045A",
    nlArr: "\u21CD",
    nlE: "\u2266\u0338",
    nlarr: "\u219A",
    nldr: "\u2025",
    nle: "\u2270",
    nleftarrow: "\u219A",
    nleftrightarrow: "\u21AE",
    nleq: "\u2270",
    nleqq: "\u2266\u0338",
    nleqslant: "\u2A7D\u0338",
    nles: "\u2A7D\u0338",
    nless: "\u226E",
    nlsim: "\u2274",
    nlt: "\u226E",
    nltri: "\u22EA",
    nltrie: "\u22EC",
    nmid: "\u2224",
    nopf: "\u{1D55F}",
    not: "\xAC",
    notin: "\u2209",
    notinE: "\u22F9\u0338",
    notindot: "\u22F5\u0338",
    notinva: "\u2209",
    notinvb: "\u22F7",
    notinvc: "\u22F6",
    notni: "\u220C",
    notniva: "\u220C",
    notnivb: "\u22FE",
    notnivc: "\u22FD",
    npar: "\u2226",
    nparallel: "\u2226",
    nparsl: "\u2AFD\u20E5",
    npart: "\u2202\u0338",
    npolint: "\u2A14",
    npr: "\u2280",
    nprcue: "\u22E0",
    npre: "\u2AAF\u0338",
    nprec: "\u2280",
    npreceq: "\u2AAF\u0338",
    nrArr: "\u21CF",
    nrarr: "\u219B",
    nrarrc: "\u2933\u0338",
    nrarrw: "\u219D\u0338",
    nrightarrow: "\u219B",
    nrtri: "\u22EB",
    nrtrie: "\u22ED",
    nsc: "\u2281",
    nsccue: "\u22E1",
    nsce: "\u2AB0\u0338",
    nscr: "\u{1D4C3}",
    nshortmid: "\u2224",
    nshortparallel: "\u2226",
    nsim: "\u2241",
    nsime: "\u2244",
    nsimeq: "\u2244",
    nsmid: "\u2224",
    nspar: "\u2226",
    nsqsube: "\u22E2",
    nsqsupe: "\u22E3",
    nsub: "\u2284",
    nsubE: "\u2AC5\u0338",
    nsube: "\u2288",
    nsubset: "\u2282\u20D2",
    nsubseteq: "\u2288",
    nsubseteqq: "\u2AC5\u0338",
    nsucc: "\u2281",
    nsucceq: "\u2AB0\u0338",
    nsup: "\u2285",
    nsupE: "\u2AC6\u0338",
    nsupe: "\u2289",
    nsupset: "\u2283\u20D2",
    nsupseteq: "\u2289",
    nsupseteqq: "\u2AC6\u0338",
    ntgl: "\u2279",
    ntilde: "\xF1",
    ntlg: "\u2278",
    ntriangleleft: "\u22EA",
    ntrianglelefteq: "\u22EC",
    ntriangleright: "\u22EB",
    ntrianglerighteq: "\u22ED",
    nu: "\u03BD",
    num: "#",
    numero: "\u2116",
    numsp: "\u2007",
    nvDash: "\u22AD",
    nvHarr: "\u2904",
    nvap: "\u224D\u20D2",
    nvdash: "\u22AC",
    nvge: "\u2265\u20D2",
    nvgt: ">\u20D2",
    nvinfin: "\u29DE",
    nvlArr: "\u2902",
    nvle: "\u2264\u20D2",
    nvlt: "<\u20D2",
    nvltrie: "\u22B4\u20D2",
    nvrArr: "\u2903",
    nvrtrie: "\u22B5\u20D2",
    nvsim: "\u223C\u20D2",
    nwArr: "\u21D6",
    nwarhk: "\u2923",
    nwarr: "\u2196",
    nwarrow: "\u2196",
    nwnear: "\u2927",
    oS: "\u24C8",
    oacute: "\xF3",
    oast: "\u229B",
    ocir: "\u229A",
    ocirc: "\xF4",
    ocy: "\u043E",
    odash: "\u229D",
    odblac: "\u0151",
    odiv: "\u2A38",
    odot: "\u2299",
    odsold: "\u29BC",
    oelig: "\u0153",
    ofcir: "\u29BF",
    ofr: "\u{1D52C}",
    ogon: "\u02DB",
    ograve: "\xF2",
    ogt: "\u29C1",
    ohbar: "\u29B5",
    ohm: "\u03A9",
    oint: "\u222E",
    olarr: "\u21BA",
    olcir: "\u29BE",
    olcross: "\u29BB",
    oline: "\u203E",
    olt: "\u29C0",
    omacr: "\u014D",
    omega: "\u03C9",
    omicron: "\u03BF",
    omid: "\u29B6",
    ominus: "\u2296",
    oopf: "\u{1D560}",
    opar: "\u29B7",
    operp: "\u29B9",
    oplus: "\u2295",
    or: "\u2228",
    orarr: "\u21BB",
    ord: "\u2A5D",
    order: "\u2134",
    orderof: "\u2134",
    ordf: "\xAA",
    ordm: "\xBA",
    origof: "\u22B6",
    oror: "\u2A56",
    orslope: "\u2A57",
    orv: "\u2A5B",
    oscr: "\u2134",
    oslash: "\xF8",
    osol: "\u2298",
    otilde: "\xF5",
    otimes: "\u2297",
    otimesas: "\u2A36",
    ouml: "\xF6",
    ovbar: "\u233D",
    par: "\u2225",
    para: "\xB6",
    parallel: "\u2225",
    parsim: "\u2AF3",
    parsl: "\u2AFD",
    part: "\u2202",
    pcy: "\u043F",
    percnt: "%",
    period: ".",
    permil: "\u2030",
    perp: "\u22A5",
    pertenk: "\u2031",
    pfr: "\u{1D52D}",
    phi: "\u03C6",
    phiv: "\u03D5",
    phmmat: "\u2133",
    phone: "\u260E",
    pi: "\u03C0",
    pitchfork: "\u22D4",
    piv: "\u03D6",
    planck: "\u210F",
    planckh: "\u210E",
    plankv: "\u210F",
    plus: "+",
    plusacir: "\u2A23",
    plusb: "\u229E",
    pluscir: "\u2A22",
    plusdo: "\u2214",
    plusdu: "\u2A25",
    pluse: "\u2A72",
    plusmn: "\xB1",
    plussim: "\u2A26",
    plustwo: "\u2A27",
    pm: "\xB1",
    pointint: "\u2A15",
    popf: "\u{1D561}",
    pound: "\xA3",
    pr: "\u227A",
    prE: "\u2AB3",
    prap: "\u2AB7",
    prcue: "\u227C",
    pre: "\u2AAF",
    prec: "\u227A",
    precapprox: "\u2AB7",
    preccurlyeq: "\u227C",
    preceq: "\u2AAF",
    precnapprox: "\u2AB9",
    precneqq: "\u2AB5",
    precnsim: "\u22E8",
    precsim: "\u227E",
    prime: "\u2032",
    primes: "\u2119",
    prnE: "\u2AB5",
    prnap: "\u2AB9",
    prnsim: "\u22E8",
    prod: "\u220F",
    profalar: "\u232E",
    profline: "\u2312",
    profsurf: "\u2313",
    prop: "\u221D",
    propto: "\u221D",
    prsim: "\u227E",
    prurel: "\u22B0",
    pscr: "\u{1D4C5}",
    psi: "\u03C8",
    puncsp: "\u2008",
    qfr: "\u{1D52E}",
    qint: "\u2A0C",
    qopf: "\u{1D562}",
    qprime: "\u2057",
    qscr: "\u{1D4C6}",
    quaternions: "\u210D",
    quatint: "\u2A16",
    quest: "?",
    questeq: "\u225F",
    quot: '"',
    rAarr: "\u21DB",
    rArr: "\u21D2",
    rAtail: "\u291C",
    rBarr: "\u290F",
    rHar: "\u2964",
    race: "\u223D\u0331",
    racute: "\u0155",
    radic: "\u221A",
    raemptyv: "\u29B3",
    rang: "\u27E9",
    rangd: "\u2992",
    range: "\u29A5",
    rangle: "\u27E9",
    raquo: "\xBB",
    rarr: "\u2192",
    rarrap: "\u2975",
    rarrb: "\u21E5",
    rarrbfs: "\u2920",
    rarrc: "\u2933",
    rarrfs: "\u291E",
    rarrhk: "\u21AA",
    rarrlp: "\u21AC",
    rarrpl: "\u2945",
    rarrsim: "\u2974",
    rarrtl: "\u21A3",
    rarrw: "\u219D",
    ratail: "\u291A",
    ratio: "\u2236",
    rationals: "\u211A",
    rbarr: "\u290D",
    rbbrk: "\u2773",
    rbrace: "}",
    rbrack: "]",
    rbrke: "\u298C",
    rbrksld: "\u298E",
    rbrkslu: "\u2990",
    rcaron: "\u0159",
    rcedil: "\u0157",
    rceil: "\u2309",
    rcub: "}",
    rcy: "\u0440",
    rdca: "\u2937",
    rdldhar: "\u2969",
    rdquo: "\u201D",
    rdquor: "\u201D",
    rdsh: "\u21B3",
    real: "\u211C",
    realine: "\u211B",
    realpart: "\u211C",
    reals: "\u211D",
    rect: "\u25AD",
    reg: "\xAE",
    rfisht: "\u297D",
    rfloor: "\u230B",
    rfr: "\u{1D52F}",
    rhard: "\u21C1",
    rharu: "\u21C0",
    rharul: "\u296C",
    rho: "\u03C1",
    rhov: "\u03F1",
    rightarrow: "\u2192",
    rightarrowtail: "\u21A3",
    rightharpoondown: "\u21C1",
    rightharpoonup: "\u21C0",
    rightleftarrows: "\u21C4",
    rightleftharpoons: "\u21CC",
    rightrightarrows: "\u21C9",
    rightsquigarrow: "\u219D",
    rightthreetimes: "\u22CC",
    ring: "\u02DA",
    risingdotseq: "\u2253",
    rlarr: "\u21C4",
    rlhar: "\u21CC",
    rlm: "\u200F",
    rmoust: "\u23B1",
    rmoustache: "\u23B1",
    rnmid: "\u2AEE",
    roang: "\u27ED",
    roarr: "\u21FE",
    robrk: "\u27E7",
    ropar: "\u2986",
    ropf: "\u{1D563}",
    roplus: "\u2A2E",
    rotimes: "\u2A35",
    rpar: ")",
    rpargt: "\u2994",
    rppolint: "\u2A12",
    rrarr: "\u21C9",
    rsaquo: "\u203A",
    rscr: "\u{1D4C7}",
    rsh: "\u21B1",
    rsqb: "]",
    rsquo: "\u2019",
    rsquor: "\u2019",
    rthree: "\u22CC",
    rtimes: "\u22CA",
    rtri: "\u25B9",
    rtrie: "\u22B5",
    rtrif: "\u25B8",
    rtriltri: "\u29CE",
    ruluhar: "\u2968",
    rx: "\u211E",
    sacute: "\u015B",
    sbquo: "\u201A",
    sc: "\u227B",
    scE: "\u2AB4",
    scap: "\u2AB8",
    scaron: "\u0161",
    sccue: "\u227D",
    sce: "\u2AB0",
    scedil: "\u015F",
    scirc: "\u015D",
    scnE: "\u2AB6",
    scnap: "\u2ABA",
    scnsim: "\u22E9",
    scpolint: "\u2A13",
    scsim: "\u227F",
    scy: "\u0441",
    sdot: "\u22C5",
    sdotb: "\u22A1",
    sdote: "\u2A66",
    seArr: "\u21D8",
    searhk: "\u2925",
    searr: "\u2198",
    searrow: "\u2198",
    sect: "\xA7",
    semi: ";",
    seswar: "\u2929",
    setminus: "\u2216",
    setmn: "\u2216",
    sext: "\u2736",
    sfr: "\u{1D530}",
    sfrown: "\u2322",
    sharp: "\u266F",
    shchcy: "\u0449",
    shcy: "\u0448",
    shortmid: "\u2223",
    shortparallel: "\u2225",
    shy: "\xAD",
    sigma: "\u03C3",
    sigmaf: "\u03C2",
    sigmav: "\u03C2",
    sim: "\u223C",
    simdot: "\u2A6A",
    sime: "\u2243",
    simeq: "\u2243",
    simg: "\u2A9E",
    simgE: "\u2AA0",
    siml: "\u2A9D",
    simlE: "\u2A9F",
    simne: "\u2246",
    simplus: "\u2A24",
    simrarr: "\u2972",
    slarr: "\u2190",
    smallsetminus: "\u2216",
    smashp: "\u2A33",
    smeparsl: "\u29E4",
    smid: "\u2223",
    smile: "\u2323",
    smt: "\u2AAA",
    smte: "\u2AAC",
    smtes: "\u2AAC\uFE00",
    softcy: "\u044C",
    sol: "/",
    solb: "\u29C4",
    solbar: "\u233F",
    sopf: "\u{1D564}",
    spades: "\u2660",
    spadesuit: "\u2660",
    spar: "\u2225",
    sqcap: "\u2293",
    sqcaps: "\u2293\uFE00",
    sqcup: "\u2294",
    sqcups: "\u2294\uFE00",
    sqsub: "\u228F",
    sqsube: "\u2291",
    sqsubset: "\u228F",
    sqsubseteq: "\u2291",
    sqsup: "\u2290",
    sqsupe: "\u2292",
    sqsupset: "\u2290",
    sqsupseteq: "\u2292",
    squ: "\u25A1",
    square: "\u25A1",
    squarf: "\u25AA",
    squf: "\u25AA",
    srarr: "\u2192",
    sscr: "\u{1D4C8}",
    ssetmn: "\u2216",
    ssmile: "\u2323",
    sstarf: "\u22C6",
    star: "\u2606",
    starf: "\u2605",
    straightepsilon: "\u03F5",
    straightphi: "\u03D5",
    strns: "\xAF",
    sub: "\u2282",
    subE: "\u2AC5",
    subdot: "\u2ABD",
    sube: "\u2286",
    subedot: "\u2AC3",
    submult: "\u2AC1",
    subnE: "\u2ACB",
    subne: "\u228A",
    subplus: "\u2ABF",
    subrarr: "\u2979",
    subset: "\u2282",
    subseteq: "\u2286",
    subseteqq: "\u2AC5",
    subsetneq: "\u228A",
    subsetneqq: "\u2ACB",
    subsim: "\u2AC7",
    subsub: "\u2AD5",
    subsup: "\u2AD3",
    succ: "\u227B",
    succapprox: "\u2AB8",
    succcurlyeq: "\u227D",
    succeq: "\u2AB0",
    succnapprox: "\u2ABA",
    succneqq: "\u2AB6",
    succnsim: "\u22E9",
    succsim: "\u227F",
    sum: "\u2211",
    sung: "\u266A",
    sup1: "\xB9",
    sup2: "\xB2",
    sup3: "\xB3",
    sup: "\u2283",
    supE: "\u2AC6",
    supdot: "\u2ABE",
    supdsub: "\u2AD8",
    supe: "\u2287",
    supedot: "\u2AC4",
    suphsol: "\u27C9",
    suphsub: "\u2AD7",
    suplarr: "\u297B",
    supmult: "\u2AC2",
    supnE: "\u2ACC",
    supne: "\u228B",
    supplus: "\u2AC0",
    supset: "\u2283",
    supseteq: "\u2287",
    supseteqq: "\u2AC6",
    supsetneq: "\u228B",
    supsetneqq: "\u2ACC",
    supsim: "\u2AC8",
    supsub: "\u2AD4",
    supsup: "\u2AD6",
    swArr: "\u21D9",
    swarhk: "\u2926",
    swarr: "\u2199",
    swarrow: "\u2199",
    swnwar: "\u292A",
    szlig: "\xDF",
    target: "\u2316",
    tau: "\u03C4",
    tbrk: "\u23B4",
    tcaron: "\u0165",
    tcedil: "\u0163",
    tcy: "\u0442",
    tdot: "\u20DB",
    telrec: "\u2315",
    tfr: "\u{1D531}",
    there4: "\u2234",
    therefore: "\u2234",
    theta: "\u03B8",
    thetasym: "\u03D1",
    thetav: "\u03D1",
    thickapprox: "\u2248",
    thicksim: "\u223C",
    thinsp: "\u2009",
    thkap: "\u2248",
    thksim: "\u223C",
    thorn: "\xFE",
    tilde: "\u02DC",
    times: "\xD7",
    timesb: "\u22A0",
    timesbar: "\u2A31",
    timesd: "\u2A30",
    tint: "\u222D",
    toea: "\u2928",
    top: "\u22A4",
    topbot: "\u2336",
    topcir: "\u2AF1",
    topf: "\u{1D565}",
    topfork: "\u2ADA",
    tosa: "\u2929",
    tprime: "\u2034",
    trade: "\u2122",
    triangle: "\u25B5",
    triangledown: "\u25BF",
    triangleleft: "\u25C3",
    trianglelefteq: "\u22B4",
    triangleq: "\u225C",
    triangleright: "\u25B9",
    trianglerighteq: "\u22B5",
    tridot: "\u25EC",
    trie: "\u225C",
    triminus: "\u2A3A",
    triplus: "\u2A39",
    trisb: "\u29CD",
    tritime: "\u2A3B",
    trpezium: "\u23E2",
    tscr: "\u{1D4C9}",
    tscy: "\u0446",
    tshcy: "\u045B",
    tstrok: "\u0167",
    twixt: "\u226C",
    twoheadleftarrow: "\u219E",
    twoheadrightarrow: "\u21A0",
    uArr: "\u21D1",
    uHar: "\u2963",
    uacute: "\xFA",
    uarr: "\u2191",
    ubrcy: "\u045E",
    ubreve: "\u016D",
    ucirc: "\xFB",
    ucy: "\u0443",
    udarr: "\u21C5",
    udblac: "\u0171",
    udhar: "\u296E",
    ufisht: "\u297E",
    ufr: "\u{1D532}",
    ugrave: "\xF9",
    uharl: "\u21BF",
    uharr: "\u21BE",
    uhblk: "\u2580",
    ulcorn: "\u231C",
    ulcorner: "\u231C",
    ulcrop: "\u230F",
    ultri: "\u25F8",
    umacr: "\u016B",
    uml: "\xA8",
    uogon: "\u0173",
    uopf: "\u{1D566}",
    uparrow: "\u2191",
    updownarrow: "\u2195",
    upharpoonleft: "\u21BF",
    upharpoonright: "\u21BE",
    uplus: "\u228E",
    upsi: "\u03C5",
    upsih: "\u03D2",
    upsilon: "\u03C5",
    upuparrows: "\u21C8",
    urcorn: "\u231D",
    urcorner: "\u231D",
    urcrop: "\u230E",
    uring: "\u016F",
    urtri: "\u25F9",
    uscr: "\u{1D4CA}",
    utdot: "\u22F0",
    utilde: "\u0169",
    utri: "\u25B5",
    utrif: "\u25B4",
    uuarr: "\u21C8",
    uuml: "\xFC",
    uwangle: "\u29A7",
    vArr: "\u21D5",
    vBar: "\u2AE8",
    vBarv: "\u2AE9",
    vDash: "\u22A8",
    vangrt: "\u299C",
    varepsilon: "\u03F5",
    varkappa: "\u03F0",
    varnothing: "\u2205",
    varphi: "\u03D5",
    varpi: "\u03D6",
    varpropto: "\u221D",
    varr: "\u2195",
    varrho: "\u03F1",
    varsigma: "\u03C2",
    varsubsetneq: "\u228A\uFE00",
    varsubsetneqq: "\u2ACB\uFE00",
    varsupsetneq: "\u228B\uFE00",
    varsupsetneqq: "\u2ACC\uFE00",
    vartheta: "\u03D1",
    vartriangleleft: "\u22B2",
    vartriangleright: "\u22B3",
    vcy: "\u0432",
    vdash: "\u22A2",
    vee: "\u2228",
    veebar: "\u22BB",
    veeeq: "\u225A",
    vellip: "\u22EE",
    verbar: "|",
    vert: "|",
    vfr: "\u{1D533}",
    vltri: "\u22B2",
    vnsub: "\u2282\u20D2",
    vnsup: "\u2283\u20D2",
    vopf: "\u{1D567}",
    vprop: "\u221D",
    vrtri: "\u22B3",
    vscr: "\u{1D4CB}",
    vsubnE: "\u2ACB\uFE00",
    vsubne: "\u228A\uFE00",
    vsupnE: "\u2ACC\uFE00",
    vsupne: "\u228B\uFE00",
    vzigzag: "\u299A",
    wcirc: "\u0175",
    wedbar: "\u2A5F",
    wedge: "\u2227",
    wedgeq: "\u2259",
    weierp: "\u2118",
    wfr: "\u{1D534}",
    wopf: "\u{1D568}",
    wp: "\u2118",
    wr: "\u2240",
    wreath: "\u2240",
    wscr: "\u{1D4CC}",
    xcap: "\u22C2",
    xcirc: "\u25EF",
    xcup: "\u22C3",
    xdtri: "\u25BD",
    xfr: "\u{1D535}",
    xhArr: "\u27FA",
    xharr: "\u27F7",
    xi: "\u03BE",
    xlArr: "\u27F8",
    xlarr: "\u27F5",
    xmap: "\u27FC",
    xnis: "\u22FB",
    xodot: "\u2A00",
    xopf: "\u{1D569}",
    xoplus: "\u2A01",
    xotime: "\u2A02",
    xrArr: "\u27F9",
    xrarr: "\u27F6",
    xscr: "\u{1D4CD}",
    xsqcup: "\u2A06",
    xuplus: "\u2A04",
    xutri: "\u25B3",
    xvee: "\u22C1",
    xwedge: "\u22C0",
    yacute: "\xFD",
    yacy: "\u044F",
    ycirc: "\u0177",
    ycy: "\u044B",
    yen: "\xA5",
    yfr: "\u{1D536}",
    yicy: "\u0457",
    yopf: "\u{1D56A}",
    yscr: "\u{1D4CE}",
    yucy: "\u044E",
    yuml: "\xFF",
    zacute: "\u017A",
    zcaron: "\u017E",
    zcy: "\u0437",
    zdot: "\u017C",
    zeetrf: "\u2128",
    zeta: "\u03B6",
    zfr: "\u{1D537}",
    zhcy: "\u0436",
    zigrarr: "\u21DD",
    zopf: "\u{1D56B}",
    zscr: "\u{1D4CF}",
    zwj: "\u200D",
    zwnj: "\u200C",
  };

  // node_modules/.pnpm/decode-named-character-reference@1.0.2/node_modules/decode-named-character-reference/index.js
  var own2 = {}.hasOwnProperty;
  function decodeNamedCharacterReference(value) {
    return own2.call(characterEntities, value)
      ? characterEntities[value]
      : false;
  }
  __name(decodeNamedCharacterReference, "decodeNamedCharacterReference");

  // node_modules/.pnpm/micromark-util-chunked@2.0.0/node_modules/micromark-util-chunked/index.js
  function splice(list4, start, remove, items) {
    const end = list4.length;
    let chunkStart = 0;
    let parameters;
    if (start < 0) {
      start = -start > end ? 0 : end + start;
    } else {
      start = start > end ? end : start;
    }
    remove = remove > 0 ? remove : 0;
    if (items.length < 1e4) {
      parameters = Array.from(items);
      parameters.unshift(start, remove);
      list4.splice(...parameters);
    } else {
      if (remove) list4.splice(start, remove);
      while (chunkStart < items.length) {
        parameters = items.slice(chunkStart, chunkStart + 1e4);
        parameters.unshift(start, 0);
        list4.splice(...parameters);
        chunkStart += 1e4;
        start += 1e4;
      }
    }
  }
  __name(splice, "splice");
  function push2(list4, items) {
    if (list4.length > 0) {
      splice(list4, list4.length, 0, items);
      return list4;
    }
    return items;
  }
  __name(push2, "push");

  // node_modules/.pnpm/micromark-util-combine-extensions@2.0.0/node_modules/micromark-util-combine-extensions/index.js
  var hasOwnProperty = {}.hasOwnProperty;
  function combineExtensions(extensions) {
    const all2 = {};
    let index2 = -1;
    while (++index2 < extensions.length) {
      syntaxExtension(all2, extensions[index2]);
    }
    return all2;
  }
  __name(combineExtensions, "combineExtensions");
  function syntaxExtension(all2, extension2) {
    let hook;
    for (hook in extension2) {
      const maybe = hasOwnProperty.call(all2, hook) ? all2[hook] : void 0;
      const left = maybe || (all2[hook] = {});
      const right = extension2[hook];
      let code2;
      if (right) {
        for (code2 in right) {
          if (!hasOwnProperty.call(left, code2)) left[code2] = [];
          const value = right[code2];
          constructs(
            // @ts-expect-error Looks like a list.
            left[code2],
            Array.isArray(value) ? value : value ? [value] : [],
          );
        }
      }
    }
  }
  __name(syntaxExtension, "syntaxExtension");
  function constructs(existing, list4) {
    let index2 = -1;
    const before = [];
    while (++index2 < list4.length) {
      (list4[index2].add === "after" ? existing : before).push(list4[index2]);
    }
    splice(existing, 0, 0, before);
  }
  __name(constructs, "constructs");

  // node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.1/node_modules/micromark-util-decode-numeric-character-reference/index.js
  function decodeNumericCharacterReference(value, base) {
    const code2 = Number.parseInt(value, base);
    if (
      // C0 except for HT, LF, FF, CR, space.
      code2 < 9 ||
      code2 === 11 ||
      (code2 > 13 && code2 < 32) || // Control character (DEL) of C0, and C1 controls.
      (code2 > 126 && code2 < 160) || // Lone high surrogates and low surrogates.
      (code2 > 55295 && code2 < 57344) || // Noncharacters.
      (code2 > 64975 && code2 < 65008) /* eslint-disable no-bitwise */ ||
      (code2 & 65535) === 65535 ||
      (code2 & 65535) === 65534 /* eslint-enable no-bitwise */ ||
      // Out of range
      code2 > 1114111
    ) {
      return "\uFFFD";
    }
    return String.fromCodePoint(code2);
  }
  __name(decodeNumericCharacterReference, "decodeNumericCharacterReference");

  // node_modules/.pnpm/micromark-util-normalize-identifier@2.0.0/node_modules/micromark-util-normalize-identifier/index.js
  function normalizeIdentifier(value) {
    return value
      .replace(/[\t\n\r ]+/g, " ")
      .replace(/^ | $/g, "")
      .toLowerCase()
      .toUpperCase();
  }
  __name(normalizeIdentifier, "normalizeIdentifier");

  // node_modules/.pnpm/micromark-util-character@2.1.0/node_modules/micromark-util-character/index.js
  var asciiAlpha = regexCheck(/[A-Za-z]/);
  var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
  var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
  function asciiControl(code2) {
    return (
      // Special whitespace codes (which have negative values), C0 and Control
      // character DEL
      code2 !== null && (code2 < 32 || code2 === 127)
    );
  }
  __name(asciiControl, "asciiControl");
  var asciiDigit = regexCheck(/\d/);
  var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
  var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
  function markdownLineEnding(code2) {
    return code2 !== null && code2 < -2;
  }
  __name(markdownLineEnding, "markdownLineEnding");
  function markdownLineEndingOrSpace(code2) {
    return code2 !== null && (code2 < 0 || code2 === 32);
  }
  __name(markdownLineEndingOrSpace, "markdownLineEndingOrSpace");
  function markdownSpace(code2) {
    return code2 === -2 || code2 === -1 || code2 === 32;
  }
  __name(markdownSpace, "markdownSpace");
  var unicodePunctuation = regexCheck(/\p{P}|\p{S}/u);
  var unicodeWhitespace = regexCheck(/\s/);
  function regexCheck(regex2) {
    return check;
    function check(code2) {
      return (
        code2 !== null && code2 > -1 && regex2.test(String.fromCharCode(code2))
      );
    }
    __name(check, "check");
  }
  __name(regexCheck, "regexCheck");

  // node_modules/.pnpm/micromark-factory-space@2.0.0/node_modules/micromark-factory-space/index.js
  function factorySpace(effects, ok3, type, max) {
    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
    let size = 0;
    return start;
    function start(code2) {
      if (markdownSpace(code2)) {
        effects.enter(type);
        return prefix2(code2);
      }
      return ok3(code2);
    }
    __name(start, "start");
    function prefix2(code2) {
      if (markdownSpace(code2) && size++ < limit) {
        effects.consume(code2);
        return prefix2;
      }
      effects.exit(type);
      return ok3(code2);
    }
    __name(prefix2, "prefix");
  }
  __name(factorySpace, "factorySpace");

  // node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/content.js
  var content = {
    tokenize: initializeContent,
  };
  function initializeContent(effects) {
    const contentStart = effects.attempt(
      this.parser.constructs.contentInitial,
      afterContentStartConstruct,
      paragraphInitial,
    );
    let previous2;
    return contentStart;
    function afterContentStartConstruct(code2) {
      if (code2 === null) {
        effects.consume(code2);
        return;
      }
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return factorySpace(effects, contentStart, "linePrefix");
    }
    __name(afterContentStartConstruct, "afterContentStartConstruct");
    function paragraphInitial(code2) {
      effects.enter("paragraph");
      return lineStart(code2);
    }
    __name(paragraphInitial, "paragraphInitial");
    function lineStart(code2) {
      const token = effects.enter("chunkText", {
        contentType: "text",
        previous: previous2,
      });
      if (previous2) {
        previous2.next = token;
      }
      previous2 = token;
      return data(code2);
    }
    __name(lineStart, "lineStart");
    function data(code2) {
      if (code2 === null) {
        effects.exit("chunkText");
        effects.exit("paragraph");
        effects.consume(code2);
        return;
      }
      if (markdownLineEnding(code2)) {
        effects.consume(code2);
        effects.exit("chunkText");
        return lineStart;
      }
      effects.consume(code2);
      return data;
    }
    __name(data, "data");
  }
  __name(initializeContent, "initializeContent");

  // node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/document.js
  var document = {
    tokenize: initializeDocument,
  };
  var containerConstruct = {
    tokenize: tokenizeContainer,
  };
  function initializeDocument(effects) {
    const self2 = this;
    const stack = [];
    let continued = 0;
    let childFlow;
    let childToken;
    let lineStartOffset;
    return start;
    function start(code2) {
      if (continued < stack.length) {
        const item = stack[continued];
        self2.containerState = item[1];
        return effects.attempt(
          item[0].continuation,
          documentContinue,
          checkNewContainers,
        )(code2);
      }
      return checkNewContainers(code2);
    }
    __name(start, "start");
    function documentContinue(code2) {
      continued++;
      if (self2.containerState._closeFlow) {
        self2.containerState._closeFlow = void 0;
        if (childFlow) {
          closeFlow();
        }
        const indexBeforeExits = self2.events.length;
        let indexBeforeFlow = indexBeforeExits;
        let point3;
        while (indexBeforeFlow--) {
          if (
            self2.events[indexBeforeFlow][0] === "exit" &&
            self2.events[indexBeforeFlow][1].type === "chunkFlow"
          ) {
            point3 = self2.events[indexBeforeFlow][1].end;
            break;
          }
        }
        exitContainers(continued);
        let index2 = indexBeforeExits;
        while (index2 < self2.events.length) {
          self2.events[index2][1].end = Object.assign({}, point3);
          index2++;
        }
        splice(
          self2.events,
          indexBeforeFlow + 1,
          0,
          self2.events.slice(indexBeforeExits),
        );
        self2.events.length = index2;
        return checkNewContainers(code2);
      }
      return start(code2);
    }
    __name(documentContinue, "documentContinue");
    function checkNewContainers(code2) {
      if (continued === stack.length) {
        if (!childFlow) {
          return documentContinued(code2);
        }
        if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
          return flowStart(code2);
        }
        self2.interrupt = Boolean(
          childFlow.currentConstruct &&
            !childFlow._gfmTableDynamicInterruptHack,
        );
      }
      self2.containerState = {};
      return effects.check(
        containerConstruct,
        thereIsANewContainer,
        thereIsNoNewContainer,
      )(code2);
    }
    __name(checkNewContainers, "checkNewContainers");
    function thereIsANewContainer(code2) {
      if (childFlow) closeFlow();
      exitContainers(continued);
      return documentContinued(code2);
    }
    __name(thereIsANewContainer, "thereIsANewContainer");
    function thereIsNoNewContainer(code2) {
      self2.parser.lazy[self2.now().line] = continued !== stack.length;
      lineStartOffset = self2.now().offset;
      return flowStart(code2);
    }
    __name(thereIsNoNewContainer, "thereIsNoNewContainer");
    function documentContinued(code2) {
      self2.containerState = {};
      return effects.attempt(
        containerConstruct,
        containerContinue,
        flowStart,
      )(code2);
    }
    __name(documentContinued, "documentContinued");
    function containerContinue(code2) {
      continued++;
      stack.push([self2.currentConstruct, self2.containerState]);
      return documentContinued(code2);
    }
    __name(containerContinue, "containerContinue");
    function flowStart(code2) {
      if (code2 === null) {
        if (childFlow) closeFlow();
        exitContainers(0);
        effects.consume(code2);
        return;
      }
      childFlow = childFlow || self2.parser.flow(self2.now());
      effects.enter("chunkFlow", {
        contentType: "flow",
        previous: childToken,
        _tokenizer: childFlow,
      });
      return flowContinue(code2);
    }
    __name(flowStart, "flowStart");
    function flowContinue(code2) {
      if (code2 === null) {
        writeToChild(effects.exit("chunkFlow"), true);
        exitContainers(0);
        effects.consume(code2);
        return;
      }
      if (markdownLineEnding(code2)) {
        effects.consume(code2);
        writeToChild(effects.exit("chunkFlow"));
        continued = 0;
        self2.interrupt = void 0;
        return start;
      }
      effects.consume(code2);
      return flowContinue;
    }
    __name(flowContinue, "flowContinue");
    function writeToChild(token, eof) {
      const stream = self2.sliceStream(token);
      if (eof) stream.push(null);
      token.previous = childToken;
      if (childToken) childToken.next = token;
      childToken = token;
      childFlow.defineSkip(token.start);
      childFlow.write(stream);
      if (self2.parser.lazy[token.start.line]) {
        let index2 = childFlow.events.length;
        while (index2--) {
          if (
            // The token starts before the line ending…
            childFlow.events[index2][1].start.offset < lineStartOffset && // …and either is not ended yet…
            (!childFlow.events[index2][1].end || // …or ends after it.
              childFlow.events[index2][1].end.offset > lineStartOffset)
          ) {
            return;
          }
        }
        const indexBeforeExits = self2.events.length;
        let indexBeforeFlow = indexBeforeExits;
        let seen;
        let point3;
        while (indexBeforeFlow--) {
          if (
            self2.events[indexBeforeFlow][0] === "exit" &&
            self2.events[indexBeforeFlow][1].type === "chunkFlow"
          ) {
            if (seen) {
              point3 = self2.events[indexBeforeFlow][1].end;
              break;
            }
            seen = true;
          }
        }
        exitContainers(continued);
        index2 = indexBeforeExits;
        while (index2 < self2.events.length) {
          self2.events[index2][1].end = Object.assign({}, point3);
          index2++;
        }
        splice(
          self2.events,
          indexBeforeFlow + 1,
          0,
          self2.events.slice(indexBeforeExits),
        );
        self2.events.length = index2;
      }
    }
    __name(writeToChild, "writeToChild");
    function exitContainers(size) {
      let index2 = stack.length;
      while (index2-- > size) {
        const entry = stack[index2];
        self2.containerState = entry[1];
        entry[0].exit.call(self2, effects);
      }
      stack.length = size;
    }
    __name(exitContainers, "exitContainers");
    function closeFlow() {
      childFlow.write([null]);
      childToken = void 0;
      childFlow = void 0;
      self2.containerState._closeFlow = void 0;
    }
    __name(closeFlow, "closeFlow");
  }
  __name(initializeDocument, "initializeDocument");
  function tokenizeContainer(effects, ok3, nok) {
    return factorySpace(
      effects,
      effects.attempt(this.parser.constructs.document, ok3, nok),
      "linePrefix",
      this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4,
    );
  }
  __name(tokenizeContainer, "tokenizeContainer");

  // node_modules/.pnpm/micromark-util-classify-character@2.0.0/node_modules/micromark-util-classify-character/index.js
  function classifyCharacter(code2) {
    if (
      code2 === null ||
      markdownLineEndingOrSpace(code2) ||
      unicodeWhitespace(code2)
    ) {
      return 1;
    }
    if (unicodePunctuation(code2)) {
      return 2;
    }
  }
  __name(classifyCharacter, "classifyCharacter");

  // node_modules/.pnpm/micromark-util-resolve-all@2.0.0/node_modules/micromark-util-resolve-all/index.js
  function resolveAll(constructs2, events, context2) {
    const called = [];
    let index2 = -1;
    while (++index2 < constructs2.length) {
      const resolve = constructs2[index2].resolveAll;
      if (resolve && !called.includes(resolve)) {
        events = resolve(events, context2);
        called.push(resolve);
      }
    }
    return events;
  }
  __name(resolveAll, "resolveAll");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/attention.js
  var attention = {
    name: "attention",
    tokenize: tokenizeAttention,
    resolveAll: resolveAllAttention,
  };
  function resolveAllAttention(events, context2) {
    let index2 = -1;
    let open;
    let group;
    let text4;
    let openingSequence;
    let closingSequence;
    let use;
    let nextEvents;
    let offset;
    while (++index2 < events.length) {
      if (
        events[index2][0] === "enter" &&
        events[index2][1].type === "attentionSequence" &&
        events[index2][1]._close
      ) {
        open = index2;
        while (open--) {
          if (
            events[open][0] === "exit" &&
            events[open][1].type === "attentionSequence" &&
            events[open][1]._open && // If the markers are the same:
            context2.sliceSerialize(events[open][1]).charCodeAt(0) ===
              context2.sliceSerialize(events[index2][1]).charCodeAt(0)
          ) {
            if (
              (events[open][1]._close || events[index2][1]._open) &&
              (events[index2][1].end.offset - events[index2][1].start.offset) %
                3 &&
              !(
                (events[open][1].end.offset -
                  events[open][1].start.offset +
                  events[index2][1].end.offset -
                  events[index2][1].start.offset) %
                3
              )
            ) {
              continue;
            }
            use =
              events[open][1].end.offset - events[open][1].start.offset > 1 &&
              events[index2][1].end.offset - events[index2][1].start.offset > 1
                ? 2
                : 1;
            const start = Object.assign({}, events[open][1].end);
            const end = Object.assign({}, events[index2][1].start);
            movePoint(start, -use);
            movePoint(end, use);
            openingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start,
              end: Object.assign({}, events[open][1].end),
            };
            closingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start: Object.assign({}, events[index2][1].start),
              end,
            };
            text4 = {
              type: use > 1 ? "strongText" : "emphasisText",
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index2][1].start),
            };
            group = {
              type: use > 1 ? "strong" : "emphasis",
              start: Object.assign({}, openingSequence.start),
              end: Object.assign({}, closingSequence.end),
            };
            events[open][1].end = Object.assign({}, openingSequence.start);
            events[index2][1].start = Object.assign({}, closingSequence.end);
            nextEvents = [];
            if (events[open][1].end.offset - events[open][1].start.offset) {
              nextEvents = push2(nextEvents, [
                ["enter", events[open][1], context2],
                ["exit", events[open][1], context2],
              ]);
            }
            nextEvents = push2(nextEvents, [
              ["enter", group, context2],
              ["enter", openingSequence, context2],
              ["exit", openingSequence, context2],
              ["enter", text4, context2],
            ]);
            nextEvents = push2(
              nextEvents,
              resolveAll(
                context2.parser.constructs.insideSpan.null,
                events.slice(open + 1, index2),
                context2,
              ),
            );
            nextEvents = push2(nextEvents, [
              ["exit", text4, context2],
              ["enter", closingSequence, context2],
              ["exit", closingSequence, context2],
              ["exit", group, context2],
            ]);
            if (events[index2][1].end.offset - events[index2][1].start.offset) {
              offset = 2;
              nextEvents = push2(nextEvents, [
                ["enter", events[index2][1], context2],
                ["exit", events[index2][1], context2],
              ]);
            } else {
              offset = 0;
            }
            splice(events, open - 1, index2 - open + 3, nextEvents);
            index2 = open + nextEvents.length - offset - 2;
            break;
          }
        }
      }
    }
    index2 = -1;
    while (++index2 < events.length) {
      if (events[index2][1].type === "attentionSequence") {
        events[index2][1].type = "data";
      }
    }
    return events;
  }
  __name(resolveAllAttention, "resolveAllAttention");
  function tokenizeAttention(effects, ok3) {
    const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
    const previous2 = this.previous;
    const before = classifyCharacter(previous2);
    let marker;
    return start;
    function start(code2) {
      marker = code2;
      effects.enter("attentionSequence");
      return inside(code2);
    }
    __name(start, "start");
    function inside(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        return inside;
      }
      const token = effects.exit("attentionSequence");
      const after = classifyCharacter(code2);
      const open =
        !after || (after === 2 && before) || attentionMarkers2.includes(code2);
      const close =
        !before ||
        (before === 2 && after) ||
        attentionMarkers2.includes(previous2);
      token._open = Boolean(marker === 42 ? open : open && (before || !close));
      token._close = Boolean(marker === 42 ? close : close && (after || !open));
      return ok3(code2);
    }
    __name(inside, "inside");
  }
  __name(tokenizeAttention, "tokenizeAttention");
  function movePoint(point3, offset) {
    point3.column += offset;
    point3.offset += offset;
    point3._bufferIndex += offset;
  }
  __name(movePoint, "movePoint");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/autolink.js
  var autolink = {
    name: "autolink",
    tokenize: tokenizeAutolink,
  };
  function tokenizeAutolink(effects, ok3, nok) {
    let size = 0;
    return start;
    function start(code2) {
      effects.enter("autolink");
      effects.enter("autolinkMarker");
      effects.consume(code2);
      effects.exit("autolinkMarker");
      effects.enter("autolinkProtocol");
      return open;
    }
    __name(start, "start");
    function open(code2) {
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return schemeOrEmailAtext;
      }
      if (code2 === 64) {
        return nok(code2);
      }
      return emailAtext(code2);
    }
    __name(open, "open");
    function schemeOrEmailAtext(code2) {
      if (
        code2 === 43 ||
        code2 === 45 ||
        code2 === 46 ||
        asciiAlphanumeric(code2)
      ) {
        size = 1;
        return schemeInsideOrEmailAtext(code2);
      }
      return emailAtext(code2);
    }
    __name(schemeOrEmailAtext, "schemeOrEmailAtext");
    function schemeInsideOrEmailAtext(code2) {
      if (code2 === 58) {
        effects.consume(code2);
        size = 0;
        return urlInside;
      }
      if (
        (code2 === 43 ||
          code2 === 45 ||
          code2 === 46 ||
          asciiAlphanumeric(code2)) &&
        size++ < 32
      ) {
        effects.consume(code2);
        return schemeInsideOrEmailAtext;
      }
      size = 0;
      return emailAtext(code2);
    }
    __name(schemeInsideOrEmailAtext, "schemeInsideOrEmailAtext");
    function urlInside(code2) {
      if (code2 === 62) {
        effects.exit("autolinkProtocol");
        effects.enter("autolinkMarker");
        effects.consume(code2);
        effects.exit("autolinkMarker");
        effects.exit("autolink");
        return ok3;
      }
      if (
        code2 === null ||
        code2 === 32 ||
        code2 === 60 ||
        asciiControl(code2)
      ) {
        return nok(code2);
      }
      effects.consume(code2);
      return urlInside;
    }
    __name(urlInside, "urlInside");
    function emailAtext(code2) {
      if (code2 === 64) {
        effects.consume(code2);
        return emailAtSignOrDot;
      }
      if (asciiAtext(code2)) {
        effects.consume(code2);
        return emailAtext;
      }
      return nok(code2);
    }
    __name(emailAtext, "emailAtext");
    function emailAtSignOrDot(code2) {
      return asciiAlphanumeric(code2) ? emailLabel(code2) : nok(code2);
    }
    __name(emailAtSignOrDot, "emailAtSignOrDot");
    function emailLabel(code2) {
      if (code2 === 46) {
        effects.consume(code2);
        size = 0;
        return emailAtSignOrDot;
      }
      if (code2 === 62) {
        effects.exit("autolinkProtocol").type = "autolinkEmail";
        effects.enter("autolinkMarker");
        effects.consume(code2);
        effects.exit("autolinkMarker");
        effects.exit("autolink");
        return ok3;
      }
      return emailValue(code2);
    }
    __name(emailLabel, "emailLabel");
    function emailValue(code2) {
      if ((code2 === 45 || asciiAlphanumeric(code2)) && size++ < 63) {
        const next = code2 === 45 ? emailValue : emailLabel;
        effects.consume(code2);
        return next;
      }
      return nok(code2);
    }
    __name(emailValue, "emailValue");
  }
  __name(tokenizeAutolink, "tokenizeAutolink");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/blank-line.js
  var blankLine = {
    tokenize: tokenizeBlankLine,
    partial: true,
  };
  function tokenizeBlankLine(effects, ok3, nok) {
    return start;
    function start(code2) {
      return markdownSpace(code2)
        ? factorySpace(effects, after, "linePrefix")(code2)
        : after(code2);
    }
    __name(start, "start");
    function after(code2) {
      return code2 === null || markdownLineEnding(code2)
        ? ok3(code2)
        : nok(code2);
    }
    __name(after, "after");
  }
  __name(tokenizeBlankLine, "tokenizeBlankLine");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/block-quote.js
  var blockQuote = {
    name: "blockQuote",
    tokenize: tokenizeBlockQuoteStart,
    continuation: {
      tokenize: tokenizeBlockQuoteContinuation,
    },
    exit,
  };
  function tokenizeBlockQuoteStart(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code2) {
      if (code2 === 62) {
        const state = self2.containerState;
        if (!state.open) {
          effects.enter("blockQuote", {
            _container: true,
          });
          state.open = true;
        }
        effects.enter("blockQuotePrefix");
        effects.enter("blockQuoteMarker");
        effects.consume(code2);
        effects.exit("blockQuoteMarker");
        return after;
      }
      return nok(code2);
    }
    __name(start, "start");
    function after(code2) {
      if (markdownSpace(code2)) {
        effects.enter("blockQuotePrefixWhitespace");
        effects.consume(code2);
        effects.exit("blockQuotePrefixWhitespace");
        effects.exit("blockQuotePrefix");
        return ok3;
      }
      effects.exit("blockQuotePrefix");
      return ok3(code2);
    }
    __name(after, "after");
  }
  __name(tokenizeBlockQuoteStart, "tokenizeBlockQuoteStart");
  function tokenizeBlockQuoteContinuation(effects, ok3, nok) {
    const self2 = this;
    return contStart;
    function contStart(code2) {
      if (markdownSpace(code2)) {
        return factorySpace(
          effects,
          contBefore,
          "linePrefix",
          self2.parser.constructs.disable.null.includes("codeIndented")
            ? void 0
            : 4,
        )(code2);
      }
      return contBefore(code2);
    }
    __name(contStart, "contStart");
    function contBefore(code2) {
      return effects.attempt(blockQuote, ok3, nok)(code2);
    }
    __name(contBefore, "contBefore");
  }
  __name(tokenizeBlockQuoteContinuation, "tokenizeBlockQuoteContinuation");
  function exit(effects) {
    effects.exit("blockQuote");
  }
  __name(exit, "exit");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/character-escape.js
  var characterEscape = {
    name: "characterEscape",
    tokenize: tokenizeCharacterEscape,
  };
  function tokenizeCharacterEscape(effects, ok3, nok) {
    return start;
    function start(code2) {
      effects.enter("characterEscape");
      effects.enter("escapeMarker");
      effects.consume(code2);
      effects.exit("escapeMarker");
      return inside;
    }
    __name(start, "start");
    function inside(code2) {
      if (asciiPunctuation(code2)) {
        effects.enter("characterEscapeValue");
        effects.consume(code2);
        effects.exit("characterEscapeValue");
        effects.exit("characterEscape");
        return ok3;
      }
      return nok(code2);
    }
    __name(inside, "inside");
  }
  __name(tokenizeCharacterEscape, "tokenizeCharacterEscape");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/character-reference.js
  var characterReference = {
    name: "characterReference",
    tokenize: tokenizeCharacterReference,
  };
  function tokenizeCharacterReference(effects, ok3, nok) {
    const self2 = this;
    let size = 0;
    let max;
    let test;
    return start;
    function start(code2) {
      effects.enter("characterReference");
      effects.enter("characterReferenceMarker");
      effects.consume(code2);
      effects.exit("characterReferenceMarker");
      return open;
    }
    __name(start, "start");
    function open(code2) {
      if (code2 === 35) {
        effects.enter("characterReferenceMarkerNumeric");
        effects.consume(code2);
        effects.exit("characterReferenceMarkerNumeric");
        return numeric;
      }
      effects.enter("characterReferenceValue");
      max = 31;
      test = asciiAlphanumeric;
      return value(code2);
    }
    __name(open, "open");
    function numeric(code2) {
      if (code2 === 88 || code2 === 120) {
        effects.enter("characterReferenceMarkerHexadecimal");
        effects.consume(code2);
        effects.exit("characterReferenceMarkerHexadecimal");
        effects.enter("characterReferenceValue");
        max = 6;
        test = asciiHexDigit;
        return value;
      }
      effects.enter("characterReferenceValue");
      max = 7;
      test = asciiDigit;
      return value(code2);
    }
    __name(numeric, "numeric");
    function value(code2) {
      if (code2 === 59 && size) {
        const token = effects.exit("characterReferenceValue");
        if (
          test === asciiAlphanumeric &&
          !decodeNamedCharacterReference(self2.sliceSerialize(token))
        ) {
          return nok(code2);
        }
        effects.enter("characterReferenceMarker");
        effects.consume(code2);
        effects.exit("characterReferenceMarker");
        effects.exit("characterReference");
        return ok3;
      }
      if (test(code2) && size++ < max) {
        effects.consume(code2);
        return value;
      }
      return nok(code2);
    }
    __name(value, "value");
  }
  __name(tokenizeCharacterReference, "tokenizeCharacterReference");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/code-fenced.js
  var nonLazyContinuation = {
    tokenize: tokenizeNonLazyContinuation,
    partial: true,
  };
  var codeFenced = {
    name: "codeFenced",
    tokenize: tokenizeCodeFenced,
    concrete: true,
  };
  function tokenizeCodeFenced(effects, ok3, nok) {
    const self2 = this;
    const closeStart = {
      tokenize: tokenizeCloseStart,
      partial: true,
    };
    let initialPrefix = 0;
    let sizeOpen = 0;
    let marker;
    return start;
    function start(code2) {
      return beforeSequenceOpen(code2);
    }
    __name(start, "start");
    function beforeSequenceOpen(code2) {
      const tail = self2.events[self2.events.length - 1];
      initialPrefix =
        tail && tail[1].type === "linePrefix"
          ? tail[2].sliceSerialize(tail[1], true).length
          : 0;
      marker = code2;
      effects.enter("codeFenced");
      effects.enter("codeFencedFence");
      effects.enter("codeFencedFenceSequence");
      return sequenceOpen(code2);
    }
    __name(beforeSequenceOpen, "beforeSequenceOpen");
    function sequenceOpen(code2) {
      if (code2 === marker) {
        sizeOpen++;
        effects.consume(code2);
        return sequenceOpen;
      }
      if (sizeOpen < 3) {
        return nok(code2);
      }
      effects.exit("codeFencedFenceSequence");
      return markdownSpace(code2)
        ? factorySpace(effects, infoBefore, "whitespace")(code2)
        : infoBefore(code2);
    }
    __name(sequenceOpen, "sequenceOpen");
    function infoBefore(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("codeFencedFence");
        return self2.interrupt
          ? ok3(code2)
          : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code2);
      }
      effects.enter("codeFencedFenceInfo");
      effects.enter("chunkString", {
        contentType: "string",
      });
      return info2(code2);
    }
    __name(infoBefore, "infoBefore");
    function info2(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceInfo");
        return infoBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceInfo");
        return factorySpace(effects, metaBefore, "whitespace")(code2);
      }
      if (code2 === 96 && code2 === marker) {
        return nok(code2);
      }
      effects.consume(code2);
      return info2;
    }
    __name(info2, "info");
    function metaBefore(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return infoBefore(code2);
      }
      effects.enter("codeFencedFenceMeta");
      effects.enter("chunkString", {
        contentType: "string",
      });
      return meta(code2);
    }
    __name(metaBefore, "metaBefore");
    function meta(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceMeta");
        return infoBefore(code2);
      }
      if (code2 === 96 && code2 === marker) {
        return nok(code2);
      }
      effects.consume(code2);
      return meta;
    }
    __name(meta, "meta");
    function atNonLazyBreak(code2) {
      return effects.attempt(closeStart, after, contentBefore)(code2);
    }
    __name(atNonLazyBreak, "atNonLazyBreak");
    function contentBefore(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return contentStart;
    }
    __name(contentBefore, "contentBefore");
    function contentStart(code2) {
      return initialPrefix > 0 && markdownSpace(code2)
        ? factorySpace(
            effects,
            beforeContentChunk,
            "linePrefix",
            initialPrefix + 1,
          )(code2)
        : beforeContentChunk(code2);
    }
    __name(contentStart, "contentStart");
    function beforeContentChunk(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code2);
      }
      effects.enter("codeFlowValue");
      return contentChunk(code2);
    }
    __name(beforeContentChunk, "beforeContentChunk");
    function contentChunk(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("codeFlowValue");
        return beforeContentChunk(code2);
      }
      effects.consume(code2);
      return contentChunk;
    }
    __name(contentChunk, "contentChunk");
    function after(code2) {
      effects.exit("codeFenced");
      return ok3(code2);
    }
    __name(after, "after");
    function tokenizeCloseStart(effects2, ok4, nok2) {
      let size = 0;
      return startBefore;
      function startBefore(code2) {
        effects2.enter("lineEnding");
        effects2.consume(code2);
        effects2.exit("lineEnding");
        return start2;
      }
      __name(startBefore, "startBefore");
      function start2(code2) {
        effects2.enter("codeFencedFence");
        return markdownSpace(code2)
          ? factorySpace(
              effects2,
              beforeSequenceClose,
              "linePrefix",
              self2.parser.constructs.disable.null.includes("codeIndented")
                ? void 0
                : 4,
            )(code2)
          : beforeSequenceClose(code2);
      }
      __name(start2, "start");
      function beforeSequenceClose(code2) {
        if (code2 === marker) {
          effects2.enter("codeFencedFenceSequence");
          return sequenceClose(code2);
        }
        return nok2(code2);
      }
      __name(beforeSequenceClose, "beforeSequenceClose");
      function sequenceClose(code2) {
        if (code2 === marker) {
          size++;
          effects2.consume(code2);
          return sequenceClose;
        }
        if (size >= sizeOpen) {
          effects2.exit("codeFencedFenceSequence");
          return markdownSpace(code2)
            ? factorySpace(effects2, sequenceCloseAfter, "whitespace")(code2)
            : sequenceCloseAfter(code2);
        }
        return nok2(code2);
      }
      __name(sequenceClose, "sequenceClose");
      function sequenceCloseAfter(code2) {
        if (code2 === null || markdownLineEnding(code2)) {
          effects2.exit("codeFencedFence");
          return ok4(code2);
        }
        return nok2(code2);
      }
      __name(sequenceCloseAfter, "sequenceCloseAfter");
    }
    __name(tokenizeCloseStart, "tokenizeCloseStart");
  }
  __name(tokenizeCodeFenced, "tokenizeCodeFenced");
  function tokenizeNonLazyContinuation(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return lineStart;
    }
    __name(start, "start");
    function lineStart(code2) {
      return self2.parser.lazy[self2.now().line] ? nok(code2) : ok3(code2);
    }
    __name(lineStart, "lineStart");
  }
  __name(tokenizeNonLazyContinuation, "tokenizeNonLazyContinuation");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/code-indented.js
  var codeIndented = {
    name: "codeIndented",
    tokenize: tokenizeCodeIndented,
  };
  var furtherStart = {
    tokenize: tokenizeFurtherStart,
    partial: true,
  };
  function tokenizeCodeIndented(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code2) {
      effects.enter("codeIndented");
      return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code2);
    }
    __name(start, "start");
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return tail &&
        tail[1].type === "linePrefix" &&
        tail[2].sliceSerialize(tail[1], true).length >= 4
        ? atBreak(code2)
        : nok(code2);
    }
    __name(afterPrefix, "afterPrefix");
    function atBreak(code2) {
      if (code2 === null) {
        return after(code2);
      }
      if (markdownLineEnding(code2)) {
        return effects.attempt(furtherStart, atBreak, after)(code2);
      }
      effects.enter("codeFlowValue");
      return inside(code2);
    }
    __name(atBreak, "atBreak");
    function inside(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("codeFlowValue");
        return atBreak(code2);
      }
      effects.consume(code2);
      return inside;
    }
    __name(inside, "inside");
    function after(code2) {
      effects.exit("codeIndented");
      return ok3(code2);
    }
    __name(after, "after");
  }
  __name(tokenizeCodeIndented, "tokenizeCodeIndented");
  function tokenizeFurtherStart(effects, ok3, nok) {
    const self2 = this;
    return furtherStart2;
    function furtherStart2(code2) {
      if (self2.parser.lazy[self2.now().line]) {
        return nok(code2);
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return furtherStart2;
      }
      return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code2);
    }
    __name(furtherStart2, "furtherStart");
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return tail &&
        tail[1].type === "linePrefix" &&
        tail[2].sliceSerialize(tail[1], true).length >= 4
        ? ok3(code2)
        : markdownLineEnding(code2)
          ? furtherStart2(code2)
          : nok(code2);
    }
    __name(afterPrefix, "afterPrefix");
  }
  __name(tokenizeFurtherStart, "tokenizeFurtherStart");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/code-text.js
  var codeText = {
    name: "codeText",
    tokenize: tokenizeCodeText,
    resolve: resolveCodeText,
    previous,
  };
  function resolveCodeText(events) {
    let tailExitIndex = events.length - 4;
    let headEnterIndex = 3;
    let index2;
    let enter;
    if (
      (events[headEnterIndex][1].type === "lineEnding" ||
        events[headEnterIndex][1].type === "space") &&
      (events[tailExitIndex][1].type === "lineEnding" ||
        events[tailExitIndex][1].type === "space")
    ) {
      index2 = headEnterIndex;
      while (++index2 < tailExitIndex) {
        if (events[index2][1].type === "codeTextData") {
          events[headEnterIndex][1].type = "codeTextPadding";
          events[tailExitIndex][1].type = "codeTextPadding";
          headEnterIndex += 2;
          tailExitIndex -= 2;
          break;
        }
      }
    }
    index2 = headEnterIndex - 1;
    tailExitIndex++;
    while (++index2 <= tailExitIndex) {
      if (enter === void 0) {
        if (
          index2 !== tailExitIndex &&
          events[index2][1].type !== "lineEnding"
        ) {
          enter = index2;
        }
      } else if (
        index2 === tailExitIndex ||
        events[index2][1].type === "lineEnding"
      ) {
        events[enter][1].type = "codeTextData";
        if (index2 !== enter + 2) {
          events[enter][1].end = events[index2 - 1][1].end;
          events.splice(enter + 2, index2 - enter - 2);
          tailExitIndex -= index2 - enter - 2;
          index2 = enter + 2;
        }
        enter = void 0;
      }
    }
    return events;
  }
  __name(resolveCodeText, "resolveCodeText");
  function previous(code2) {
    return (
      code2 !== 96 ||
      this.events[this.events.length - 1][1].type === "characterEscape"
    );
  }
  __name(previous, "previous");
  function tokenizeCodeText(effects, ok3, nok) {
    const self2 = this;
    let sizeOpen = 0;
    let size;
    let token;
    return start;
    function start(code2) {
      effects.enter("codeText");
      effects.enter("codeTextSequence");
      return sequenceOpen(code2);
    }
    __name(start, "start");
    function sequenceOpen(code2) {
      if (code2 === 96) {
        effects.consume(code2);
        sizeOpen++;
        return sequenceOpen;
      }
      effects.exit("codeTextSequence");
      return between2(code2);
    }
    __name(sequenceOpen, "sequenceOpen");
    function between2(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 32) {
        effects.enter("space");
        effects.consume(code2);
        effects.exit("space");
        return between2;
      }
      if (code2 === 96) {
        token = effects.enter("codeTextSequence");
        size = 0;
        return sequenceClose(code2);
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return between2;
      }
      effects.enter("codeTextData");
      return data(code2);
    }
    __name(between2, "between");
    function data(code2) {
      if (
        code2 === null ||
        code2 === 32 ||
        code2 === 96 ||
        markdownLineEnding(code2)
      ) {
        effects.exit("codeTextData");
        return between2(code2);
      }
      effects.consume(code2);
      return data;
    }
    __name(data, "data");
    function sequenceClose(code2) {
      if (code2 === 96) {
        effects.consume(code2);
        size++;
        return sequenceClose;
      }
      if (size === sizeOpen) {
        effects.exit("codeTextSequence");
        effects.exit("codeText");
        return ok3(code2);
      }
      token.type = "codeTextData";
      return data(code2);
    }
    __name(sequenceClose, "sequenceClose");
  }
  __name(tokenizeCodeText, "tokenizeCodeText");

  // node_modules/.pnpm/micromark-util-subtokenize@2.0.1/node_modules/micromark-util-subtokenize/lib/splice-buffer.js
  var SpliceBuffer = class {
    static {
      __name(this, "SpliceBuffer");
    }
    /**
     * @param {ReadonlyArray<T> | null | undefined} [initial]
     *   Initial items (optional).
     * @returns
     *   Splice buffer.
     */
    constructor(initial) {
      this.left = initial ? [...initial] : [];
      this.right = [];
    }
    /**
     * Array access;
     * does not move the cursor.
     *
     * @param {number} index
     *   Index.
     * @return {T}
     *   Item.
     */
    get(index2) {
      if (index2 < 0 || index2 >= this.left.length + this.right.length) {
        throw new RangeError(
          "Cannot access index `" +
            index2 +
            "` in a splice buffer of size `" +
            (this.left.length + this.right.length) +
            "`",
        );
      }
      if (index2 < this.left.length) return this.left[index2];
      return this.right[this.right.length - index2 + this.left.length - 1];
    }
    /**
     * The length of the splice buffer, one greater than the largest index in the
     * array.
     */
    get length() {
      return this.left.length + this.right.length;
    }
    /**
     * Remove and return `list[0]`;
     * moves the cursor to `0`.
     *
     * @returns {T | undefined}
     *   Item, optional.
     */
    shift() {
      this.setCursor(0);
      return this.right.pop();
    }
    /**
     * Slice the buffer to get an array;
     * does not move the cursor.
     *
     * @param {number} start
     *   Start.
     * @param {number | null | undefined} [end]
     *   End (optional).
     * @returns {Array<T>}
     *   Array of items.
     */
    slice(start, end) {
      const stop =
        end === null || end === void 0 ? Number.POSITIVE_INFINITY : end;
      if (stop < this.left.length) {
        return this.left.slice(start, stop);
      }
      if (start > this.left.length) {
        return this.right
          .slice(
            this.right.length - stop + this.left.length,
            this.right.length - start + this.left.length,
          )
          .reverse();
      }
      return this.left
        .slice(start)
        .concat(
          this.right
            .slice(this.right.length - stop + this.left.length)
            .reverse(),
        );
    }
    /**
     * Mimics the behavior of Array.prototype.splice() except for the change of
     * interface necessary to avoid segfaults when patching in very large arrays.
     *
     * This operation moves cursor is moved to `start` and results in the cursor
     * placed after any inserted items.
     *
     * @param {number} start
     *   Start;
     *   zero-based index at which to start changing the array;
     *   negative numbers count backwards from the end of the array and values
     *   that are out-of bounds are clamped to the appropriate end of the array.
     * @param {number | null | undefined} [deleteCount=0]
     *   Delete count (default: `0`);
     *   maximum number of elements to delete, starting from start.
     * @param {Array<T> | null | undefined} [items=[]]
     *   Items to include in place of the deleted items (default: `[]`).
     * @return {Array<T>}
     *   Any removed items.
     */
    splice(start, deleteCount, items) {
      const count = deleteCount || 0;
      this.setCursor(Math.trunc(start));
      const removed = this.right.splice(
        this.right.length - count,
        Number.POSITIVE_INFINITY,
      );
      if (items) chunkedPush(this.left, items);
      return removed.reverse();
    }
    /**
     * Remove and return the highest-numbered item in the array, so
     * `list[list.length - 1]`;
     * Moves the cursor to `length`.
     *
     * @returns {T | undefined}
     *   Item, optional.
     */
    pop() {
      this.setCursor(Number.POSITIVE_INFINITY);
      return this.left.pop();
    }
    /**
     * Inserts a single item to the high-numbered side of the array;
     * moves the cursor to `length`.
     *
     * @param {T} item
     *   Item.
     * @returns {undefined}
     *   Nothing.
     */
    push(item) {
      this.setCursor(Number.POSITIVE_INFINITY);
      this.left.push(item);
    }
    /**
     * Inserts many items to the high-numbered side of the array.
     * Moves the cursor to `length`.
     *
     * @param {Array<T>} items
     *   Items.
     * @returns {undefined}
     *   Nothing.
     */
    pushMany(items) {
      this.setCursor(Number.POSITIVE_INFINITY);
      chunkedPush(this.left, items);
    }
    /**
     * Inserts a single item to the low-numbered side of the array;
     * Moves the cursor to `0`.
     *
     * @param {T} item
     *   Item.
     * @returns {undefined}
     *   Nothing.
     */
    unshift(item) {
      this.setCursor(0);
      this.right.push(item);
    }
    /**
     * Inserts many items to the low-numbered side of the array;
     * moves the cursor to `0`.
     *
     * @param {Array<T>} items
     *   Items.
     * @returns {undefined}
     *   Nothing.
     */
    unshiftMany(items) {
      this.setCursor(0);
      chunkedPush(this.right, items.reverse());
    }
    /**
     * Move the cursor to a specific position in the array. Requires
     * time proportional to the distance moved.
     *
     * If `n < 0`, the cursor will end up at the beginning.
     * If `n > length`, the cursor will end up at the end.
     *
     * @param {number} n
     *   Position.
     * @return {undefined}
     *   Nothing.
     */
    setCursor(n) {
      if (
        n === this.left.length ||
        (n > this.left.length && this.right.length === 0) ||
        (n < 0 && this.left.length === 0)
      )
        return;
      if (n < this.left.length) {
        const removed = this.left.splice(n, Number.POSITIVE_INFINITY);
        chunkedPush(this.right, removed.reverse());
      } else {
        const removed = this.right.splice(
          this.left.length + this.right.length - n,
          Number.POSITIVE_INFINITY,
        );
        chunkedPush(this.left, removed.reverse());
      }
    }
  };
  function chunkedPush(list4, right) {
    let chunkStart = 0;
    if (right.length < 1e4) {
      list4.push(...right);
    } else {
      while (chunkStart < right.length) {
        list4.push(...right.slice(chunkStart, chunkStart + 1e4));
        chunkStart += 1e4;
      }
    }
  }
  __name(chunkedPush, "chunkedPush");

  // node_modules/.pnpm/micromark-util-subtokenize@2.0.1/node_modules/micromark-util-subtokenize/index.js
  function subtokenize(eventsArray) {
    const jumps = {};
    let index2 = -1;
    let event;
    let lineIndex;
    let otherIndex;
    let otherEvent;
    let parameters;
    let subevents;
    let more;
    const events = new SpliceBuffer(eventsArray);
    while (++index2 < events.length) {
      while (index2 in jumps) {
        index2 = jumps[index2];
      }
      event = events.get(index2);
      if (
        index2 &&
        event[1].type === "chunkFlow" &&
        events.get(index2 - 1)[1].type === "listItemPrefix"
      ) {
        subevents = event[1]._tokenizer.events;
        otherIndex = 0;
        if (
          otherIndex < subevents.length &&
          subevents[otherIndex][1].type === "lineEndingBlank"
        ) {
          otherIndex += 2;
        }
        if (
          otherIndex < subevents.length &&
          subevents[otherIndex][1].type === "content"
        ) {
          while (++otherIndex < subevents.length) {
            if (subevents[otherIndex][1].type === "content") {
              break;
            }
            if (subevents[otherIndex][1].type === "chunkText") {
              subevents[otherIndex][1]._isInFirstContentOfListItem = true;
              otherIndex++;
            }
          }
        }
      }
      if (event[0] === "enter") {
        if (event[1].contentType) {
          Object.assign(jumps, subcontent(events, index2));
          index2 = jumps[index2];
          more = true;
        }
      } else if (event[1]._container) {
        otherIndex = index2;
        lineIndex = void 0;
        while (otherIndex--) {
          otherEvent = events.get(otherIndex);
          if (
            otherEvent[1].type === "lineEnding" ||
            otherEvent[1].type === "lineEndingBlank"
          ) {
            if (otherEvent[0] === "enter") {
              if (lineIndex) {
                events.get(lineIndex)[1].type = "lineEndingBlank";
              }
              otherEvent[1].type = "lineEnding";
              lineIndex = otherIndex;
            }
          } else {
            break;
          }
        }
        if (lineIndex) {
          event[1].end = Object.assign({}, events.get(lineIndex)[1].start);
          parameters = events.slice(lineIndex, index2);
          parameters.unshift(event);
          events.splice(lineIndex, index2 - lineIndex + 1, parameters);
        }
      }
    }
    splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));
    return !more;
  }
  __name(subtokenize, "subtokenize");
  function subcontent(events, eventIndex) {
    const token = events.get(eventIndex)[1];
    const context2 = events.get(eventIndex)[2];
    let startPosition = eventIndex - 1;
    const startPositions = [];
    const tokenizer =
      token._tokenizer || context2.parser[token.contentType](token.start);
    const childEvents = tokenizer.events;
    const jumps = [];
    const gaps = {};
    let stream;
    let previous2;
    let index2 = -1;
    let current = token;
    let adjust = 0;
    let start = 0;
    const breaks = [start];
    while (current) {
      while (events.get(++startPosition)[1] !== current) {}
      startPositions.push(startPosition);
      if (!current._tokenizer) {
        stream = context2.sliceStream(current);
        if (!current.next) {
          stream.push(null);
        }
        if (previous2) {
          tokenizer.defineSkip(current.start);
        }
        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = true;
        }
        tokenizer.write(stream);
        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = void 0;
        }
      }
      previous2 = current;
      current = current.next;
    }
    current = token;
    while (++index2 < childEvents.length) {
      if (
        // Find a void token that includes a break.
        childEvents[index2][0] === "exit" &&
        childEvents[index2 - 1][0] === "enter" &&
        childEvents[index2][1].type === childEvents[index2 - 1][1].type &&
        childEvents[index2][1].start.line !== childEvents[index2][1].end.line
      ) {
        start = index2 + 1;
        breaks.push(start);
        current._tokenizer = void 0;
        current.previous = void 0;
        current = current.next;
      }
    }
    tokenizer.events = [];
    if (current) {
      current._tokenizer = void 0;
      current.previous = void 0;
    } else {
      breaks.pop();
    }
    index2 = breaks.length;
    while (index2--) {
      const slice = childEvents.slice(breaks[index2], breaks[index2 + 1]);
      const start2 = startPositions.pop();
      jumps.push([start2, start2 + slice.length - 1]);
      events.splice(start2, 2, slice);
    }
    jumps.reverse();
    index2 = -1;
    while (++index2 < jumps.length) {
      gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];
      adjust += jumps[index2][1] - jumps[index2][0] - 1;
    }
    return gaps;
  }
  __name(subcontent, "subcontent");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/content.js
  var content2 = {
    tokenize: tokenizeContent,
    resolve: resolveContent,
  };
  var continuationConstruct = {
    tokenize: tokenizeContinuation,
    partial: true,
  };
  function resolveContent(events) {
    subtokenize(events);
    return events;
  }
  __name(resolveContent, "resolveContent");
  function tokenizeContent(effects, ok3) {
    let previous2;
    return chunkStart;
    function chunkStart(code2) {
      effects.enter("content");
      previous2 = effects.enter("chunkContent", {
        contentType: "content",
      });
      return chunkInside(code2);
    }
    __name(chunkStart, "chunkStart");
    function chunkInside(code2) {
      if (code2 === null) {
        return contentEnd(code2);
      }
      if (markdownLineEnding(code2)) {
        return effects.check(
          continuationConstruct,
          contentContinue,
          contentEnd,
        )(code2);
      }
      effects.consume(code2);
      return chunkInside;
    }
    __name(chunkInside, "chunkInside");
    function contentEnd(code2) {
      effects.exit("chunkContent");
      effects.exit("content");
      return ok3(code2);
    }
    __name(contentEnd, "contentEnd");
    function contentContinue(code2) {
      effects.consume(code2);
      effects.exit("chunkContent");
      previous2.next = effects.enter("chunkContent", {
        contentType: "content",
        previous: previous2,
      });
      previous2 = previous2.next;
      return chunkInside;
    }
    __name(contentContinue, "contentContinue");
  }
  __name(tokenizeContent, "tokenizeContent");
  function tokenizeContinuation(effects, ok3, nok) {
    const self2 = this;
    return startLookahead;
    function startLookahead(code2) {
      effects.exit("chunkContent");
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return factorySpace(effects, prefixed, "linePrefix");
    }
    __name(startLookahead, "startLookahead");
    function prefixed(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return nok(code2);
      }
      const tail = self2.events[self2.events.length - 1];
      if (
        !self2.parser.constructs.disable.null.includes("codeIndented") &&
        tail &&
        tail[1].type === "linePrefix" &&
        tail[2].sliceSerialize(tail[1], true).length >= 4
      ) {
        return ok3(code2);
      }
      return effects.interrupt(self2.parser.constructs.flow, nok, ok3)(code2);
    }
    __name(prefixed, "prefixed");
  }
  __name(tokenizeContinuation, "tokenizeContinuation");

  // node_modules/.pnpm/micromark-factory-destination@2.0.0/node_modules/micromark-factory-destination/index.js
  function factoryDestination(
    effects,
    ok3,
    nok,
    type,
    literalType,
    literalMarkerType,
    rawType,
    stringType,
    max,
  ) {
    const limit = max || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start;
    function start(code2) {
      if (code2 === 60) {
        effects.enter(type);
        effects.enter(literalType);
        effects.enter(literalMarkerType);
        effects.consume(code2);
        effects.exit(literalMarkerType);
        return enclosedBefore;
      }
      if (
        code2 === null ||
        code2 === 32 ||
        code2 === 41 ||
        asciiControl(code2)
      ) {
        return nok(code2);
      }
      effects.enter(type);
      effects.enter(rawType);
      effects.enter(stringType);
      effects.enter("chunkString", {
        contentType: "string",
      });
      return raw(code2);
    }
    __name(start, "start");
    function enclosedBefore(code2) {
      if (code2 === 62) {
        effects.enter(literalMarkerType);
        effects.consume(code2);
        effects.exit(literalMarkerType);
        effects.exit(literalType);
        effects.exit(type);
        return ok3;
      }
      effects.enter(stringType);
      effects.enter("chunkString", {
        contentType: "string",
      });
      return enclosed(code2);
    }
    __name(enclosedBefore, "enclosedBefore");
    function enclosed(code2) {
      if (code2 === 62) {
        effects.exit("chunkString");
        effects.exit(stringType);
        return enclosedBefore(code2);
      }
      if (code2 === null || code2 === 60 || markdownLineEnding(code2)) {
        return nok(code2);
      }
      effects.consume(code2);
      return code2 === 92 ? enclosedEscape : enclosed;
    }
    __name(enclosed, "enclosed");
    function enclosedEscape(code2) {
      if (code2 === 60 || code2 === 62 || code2 === 92) {
        effects.consume(code2);
        return enclosed;
      }
      return enclosed(code2);
    }
    __name(enclosedEscape, "enclosedEscape");
    function raw(code2) {
      if (
        !balance &&
        (code2 === null || code2 === 41 || markdownLineEndingOrSpace(code2))
      ) {
        effects.exit("chunkString");
        effects.exit(stringType);
        effects.exit(rawType);
        effects.exit(type);
        return ok3(code2);
      }
      if (balance < limit && code2 === 40) {
        effects.consume(code2);
        balance++;
        return raw;
      }
      if (code2 === 41) {
        effects.consume(code2);
        balance--;
        return raw;
      }
      if (
        code2 === null ||
        code2 === 32 ||
        code2 === 40 ||
        asciiControl(code2)
      ) {
        return nok(code2);
      }
      effects.consume(code2);
      return code2 === 92 ? rawEscape : raw;
    }
    __name(raw, "raw");
    function rawEscape(code2) {
      if (code2 === 40 || code2 === 41 || code2 === 92) {
        effects.consume(code2);
        return raw;
      }
      return raw(code2);
    }
    __name(rawEscape, "rawEscape");
  }
  __name(factoryDestination, "factoryDestination");

  // node_modules/.pnpm/micromark-factory-label@2.0.0/node_modules/micromark-factory-label/index.js
  function factoryLabel(effects, ok3, nok, type, markerType, stringType) {
    const self2 = this;
    let size = 0;
    let seen;
    return start;
    function start(code2) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code2);
      effects.exit(markerType);
      effects.enter(stringType);
      return atBreak;
    }
    __name(start, "start");
    function atBreak(code2) {
      if (
        size > 999 ||
        code2 === null ||
        code2 === 91 ||
        (code2 === 93 && !seen) || // To do: remove in the future once we’ve switched from
        // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
        // which doesn’t need this.
        // Hidden footnotes hook.
        /* c8 ignore next 3 */
        (code2 === 94 &&
          !size &&
          "_hiddenFootnoteSupport" in self2.parser.constructs)
      ) {
        return nok(code2);
      }
      if (code2 === 93) {
        effects.exit(stringType);
        effects.enter(markerType);
        effects.consume(code2);
        effects.exit(markerType);
        effects.exit(type);
        return ok3;
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return atBreak;
      }
      effects.enter("chunkString", {
        contentType: "string",
      });
      return labelInside(code2);
    }
    __name(atBreak, "atBreak");
    function labelInside(code2) {
      if (
        code2 === null ||
        code2 === 91 ||
        code2 === 93 ||
        markdownLineEnding(code2) ||
        size++ > 999
      ) {
        effects.exit("chunkString");
        return atBreak(code2);
      }
      effects.consume(code2);
      if (!seen) seen = !markdownSpace(code2);
      return code2 === 92 ? labelEscape : labelInside;
    }
    __name(labelInside, "labelInside");
    function labelEscape(code2) {
      if (code2 === 91 || code2 === 92 || code2 === 93) {
        effects.consume(code2);
        size++;
        return labelInside;
      }
      return labelInside(code2);
    }
    __name(labelEscape, "labelEscape");
  }
  __name(factoryLabel, "factoryLabel");

  // node_modules/.pnpm/micromark-factory-title@2.0.0/node_modules/micromark-factory-title/index.js
  function factoryTitle(effects, ok3, nok, type, markerType, stringType) {
    let marker;
    return start;
    function start(code2) {
      if (code2 === 34 || code2 === 39 || code2 === 40) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code2);
        effects.exit(markerType);
        marker = code2 === 40 ? 41 : code2;
        return begin;
      }
      return nok(code2);
    }
    __name(start, "start");
    function begin(code2) {
      if (code2 === marker) {
        effects.enter(markerType);
        effects.consume(code2);
        effects.exit(markerType);
        effects.exit(type);
        return ok3;
      }
      effects.enter(stringType);
      return atBreak(code2);
    }
    __name(begin, "begin");
    function atBreak(code2) {
      if (code2 === marker) {
        effects.exit(stringType);
        return begin(marker);
      }
      if (code2 === null) {
        return nok(code2);
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return factorySpace(effects, atBreak, "linePrefix");
      }
      effects.enter("chunkString", {
        contentType: "string",
      });
      return inside(code2);
    }
    __name(atBreak, "atBreak");
    function inside(code2) {
      if (code2 === marker || code2 === null || markdownLineEnding(code2)) {
        effects.exit("chunkString");
        return atBreak(code2);
      }
      effects.consume(code2);
      return code2 === 92 ? escape : inside;
    }
    __name(inside, "inside");
    function escape(code2) {
      if (code2 === marker || code2 === 92) {
        effects.consume(code2);
        return inside;
      }
      return inside(code2);
    }
    __name(escape, "escape");
  }
  __name(factoryTitle, "factoryTitle");

  // node_modules/.pnpm/micromark-factory-whitespace@2.0.0/node_modules/micromark-factory-whitespace/index.js
  function factoryWhitespace(effects, ok3) {
    let seen;
    return start;
    function start(code2) {
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        seen = true;
        return start;
      }
      if (markdownSpace(code2)) {
        return factorySpace(
          effects,
          start,
          seen ? "linePrefix" : "lineSuffix",
        )(code2);
      }
      return ok3(code2);
    }
    __name(start, "start");
  }
  __name(factoryWhitespace, "factoryWhitespace");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/definition.js
  var definition = {
    name: "definition",
    tokenize: tokenizeDefinition,
  };
  var titleBefore = {
    tokenize: tokenizeTitleBefore,
    partial: true,
  };
  function tokenizeDefinition(effects, ok3, nok) {
    const self2 = this;
    let identifier;
    return start;
    function start(code2) {
      effects.enter("definition");
      return before(code2);
    }
    __name(start, "start");
    function before(code2) {
      return factoryLabel.call(
        self2,
        effects,
        labelAfter,
        // Note: we don’t need to reset the way `markdown-rs` does.
        nok,
        "definitionLabel",
        "definitionLabelMarker",
        "definitionLabelString",
      )(code2);
    }
    __name(before, "before");
    function labelAfter(code2) {
      identifier = normalizeIdentifier(
        self2
          .sliceSerialize(self2.events[self2.events.length - 1][1])
          .slice(1, -1),
      );
      if (code2 === 58) {
        effects.enter("definitionMarker");
        effects.consume(code2);
        effects.exit("definitionMarker");
        return markerAfter;
      }
      return nok(code2);
    }
    __name(labelAfter, "labelAfter");
    function markerAfter(code2) {
      return markdownLineEndingOrSpace(code2)
        ? factoryWhitespace(effects, destinationBefore)(code2)
        : destinationBefore(code2);
    }
    __name(markerAfter, "markerAfter");
    function destinationBefore(code2) {
      return factoryDestination(
        effects,
        destinationAfter,
        // Note: we don’t need to reset the way `markdown-rs` does.
        nok,
        "definitionDestination",
        "definitionDestinationLiteral",
        "definitionDestinationLiteralMarker",
        "definitionDestinationRaw",
        "definitionDestinationString",
      )(code2);
    }
    __name(destinationBefore, "destinationBefore");
    function destinationAfter(code2) {
      return effects.attempt(titleBefore, after, after)(code2);
    }
    __name(destinationAfter, "destinationAfter");
    function after(code2) {
      return markdownSpace(code2)
        ? factorySpace(effects, afterWhitespace, "whitespace")(code2)
        : afterWhitespace(code2);
    }
    __name(after, "after");
    function afterWhitespace(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("definition");
        self2.parser.defined.push(identifier);
        return ok3(code2);
      }
      return nok(code2);
    }
    __name(afterWhitespace, "afterWhitespace");
  }
  __name(tokenizeDefinition, "tokenizeDefinition");
  function tokenizeTitleBefore(effects, ok3, nok) {
    return titleBefore2;
    function titleBefore2(code2) {
      return markdownLineEndingOrSpace(code2)
        ? factoryWhitespace(effects, beforeMarker)(code2)
        : nok(code2);
    }
    __name(titleBefore2, "titleBefore");
    function beforeMarker(code2) {
      return factoryTitle(
        effects,
        titleAfter,
        nok,
        "definitionTitle",
        "definitionTitleMarker",
        "definitionTitleString",
      )(code2);
    }
    __name(beforeMarker, "beforeMarker");
    function titleAfter(code2) {
      return markdownSpace(code2)
        ? factorySpace(
            effects,
            titleAfterOptionalWhitespace,
            "whitespace",
          )(code2)
        : titleAfterOptionalWhitespace(code2);
    }
    __name(titleAfter, "titleAfter");
    function titleAfterOptionalWhitespace(code2) {
      return code2 === null || markdownLineEnding(code2)
        ? ok3(code2)
        : nok(code2);
    }
    __name(titleAfterOptionalWhitespace, "titleAfterOptionalWhitespace");
  }
  __name(tokenizeTitleBefore, "tokenizeTitleBefore");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/hard-break-escape.js
  var hardBreakEscape = {
    name: "hardBreakEscape",
    tokenize: tokenizeHardBreakEscape,
  };
  function tokenizeHardBreakEscape(effects, ok3, nok) {
    return start;
    function start(code2) {
      effects.enter("hardBreakEscape");
      effects.consume(code2);
      return after;
    }
    __name(start, "start");
    function after(code2) {
      if (markdownLineEnding(code2)) {
        effects.exit("hardBreakEscape");
        return ok3(code2);
      }
      return nok(code2);
    }
    __name(after, "after");
  }
  __name(tokenizeHardBreakEscape, "tokenizeHardBreakEscape");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/heading-atx.js
  var headingAtx = {
    name: "headingAtx",
    tokenize: tokenizeHeadingAtx,
    resolve: resolveHeadingAtx,
  };
  function resolveHeadingAtx(events, context2) {
    let contentEnd = events.length - 2;
    let contentStart = 3;
    let content3;
    let text4;
    if (events[contentStart][1].type === "whitespace") {
      contentStart += 2;
    }
    if (
      contentEnd - 2 > contentStart &&
      events[contentEnd][1].type === "whitespace"
    ) {
      contentEnd -= 2;
    }
    if (
      events[contentEnd][1].type === "atxHeadingSequence" &&
      (contentStart === contentEnd - 1 ||
        (contentEnd - 4 > contentStart &&
          events[contentEnd - 2][1].type === "whitespace"))
    ) {
      contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
    }
    if (contentEnd > contentStart) {
      content3 = {
        type: "atxHeadingText",
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end,
      };
      text4 = {
        type: "chunkText",
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end,
        contentType: "text",
      };
      splice(events, contentStart, contentEnd - contentStart + 1, [
        ["enter", content3, context2],
        ["enter", text4, context2],
        ["exit", text4, context2],
        ["exit", content3, context2],
      ]);
    }
    return events;
  }
  __name(resolveHeadingAtx, "resolveHeadingAtx");
  function tokenizeHeadingAtx(effects, ok3, nok) {
    let size = 0;
    return start;
    function start(code2) {
      effects.enter("atxHeading");
      return before(code2);
    }
    __name(start, "start");
    function before(code2) {
      effects.enter("atxHeadingSequence");
      return sequenceOpen(code2);
    }
    __name(before, "before");
    function sequenceOpen(code2) {
      if (code2 === 35 && size++ < 6) {
        effects.consume(code2);
        return sequenceOpen;
      }
      if (code2 === null || markdownLineEndingOrSpace(code2)) {
        effects.exit("atxHeadingSequence");
        return atBreak(code2);
      }
      return nok(code2);
    }
    __name(sequenceOpen, "sequenceOpen");
    function atBreak(code2) {
      if (code2 === 35) {
        effects.enter("atxHeadingSequence");
        return sequenceFurther(code2);
      }
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("atxHeading");
        return ok3(code2);
      }
      if (markdownSpace(code2)) {
        return factorySpace(effects, atBreak, "whitespace")(code2);
      }
      effects.enter("atxHeadingText");
      return data(code2);
    }
    __name(atBreak, "atBreak");
    function sequenceFurther(code2) {
      if (code2 === 35) {
        effects.consume(code2);
        return sequenceFurther;
      }
      effects.exit("atxHeadingSequence");
      return atBreak(code2);
    }
    __name(sequenceFurther, "sequenceFurther");
    function data(code2) {
      if (code2 === null || code2 === 35 || markdownLineEndingOrSpace(code2)) {
        effects.exit("atxHeadingText");
        return atBreak(code2);
      }
      effects.consume(code2);
      return data;
    }
    __name(data, "data");
  }
  __name(tokenizeHeadingAtx, "tokenizeHeadingAtx");

  // node_modules/.pnpm/micromark-util-html-tag-name@2.0.0/node_modules/micromark-util-html-tag-name/index.js
  var htmlBlockNames = [
    "address",
    "article",
    "aside",
    "base",
    "basefont",
    "blockquote",
    "body",
    "caption",
    "center",
    "col",
    "colgroup",
    "dd",
    "details",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "frame",
    "frameset",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hr",
    "html",
    "iframe",
    "legend",
    "li",
    "link",
    "main",
    "menu",
    "menuitem",
    "nav",
    "noframes",
    "ol",
    "optgroup",
    "option",
    "p",
    "param",
    "search",
    "section",
    "summary",
    "table",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "title",
    "tr",
    "track",
    "ul",
  ];
  var htmlRawNames = ["pre", "script", "style", "textarea"];

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/html-flow.js
  var htmlFlow = {
    name: "htmlFlow",
    tokenize: tokenizeHtmlFlow,
    resolveTo: resolveToHtmlFlow,
    concrete: true,
  };
  var blankLineBefore = {
    tokenize: tokenizeBlankLineBefore,
    partial: true,
  };
  var nonLazyContinuationStart = {
    tokenize: tokenizeNonLazyContinuationStart,
    partial: true,
  };
  function resolveToHtmlFlow(events) {
    let index2 = events.length;
    while (index2--) {
      if (
        events[index2][0] === "enter" &&
        events[index2][1].type === "htmlFlow"
      ) {
        break;
      }
    }
    if (index2 > 1 && events[index2 - 2][1].type === "linePrefix") {
      events[index2][1].start = events[index2 - 2][1].start;
      events[index2 + 1][1].start = events[index2 - 2][1].start;
      events.splice(index2 - 2, 2);
    }
    return events;
  }
  __name(resolveToHtmlFlow, "resolveToHtmlFlow");
  function tokenizeHtmlFlow(effects, ok3, nok) {
    const self2 = this;
    let marker;
    let closingTag;
    let buffer;
    let index2;
    let markerB;
    return start;
    function start(code2) {
      return before(code2);
    }
    __name(start, "start");
    function before(code2) {
      effects.enter("htmlFlow");
      effects.enter("htmlFlowData");
      effects.consume(code2);
      return open;
    }
    __name(before, "before");
    function open(code2) {
      if (code2 === 33) {
        effects.consume(code2);
        return declarationOpen;
      }
      if (code2 === 47) {
        effects.consume(code2);
        closingTag = true;
        return tagCloseStart;
      }
      if (code2 === 63) {
        effects.consume(code2);
        marker = 3;
        return self2.interrupt ? ok3 : continuationDeclarationInside;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        buffer = String.fromCharCode(code2);
        return tagName;
      }
      return nok(code2);
    }
    __name(open, "open");
    function declarationOpen(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        marker = 2;
        return commentOpenInside;
      }
      if (code2 === 91) {
        effects.consume(code2);
        marker = 5;
        index2 = 0;
        return cdataOpenInside;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        marker = 4;
        return self2.interrupt ? ok3 : continuationDeclarationInside;
      }
      return nok(code2);
    }
    __name(declarationOpen, "declarationOpen");
    function commentOpenInside(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return self2.interrupt ? ok3 : continuationDeclarationInside;
      }
      return nok(code2);
    }
    __name(commentOpenInside, "commentOpenInside");
    function cdataOpenInside(code2) {
      const value = "CDATA[";
      if (code2 === value.charCodeAt(index2++)) {
        effects.consume(code2);
        if (index2 === value.length) {
          return self2.interrupt ? ok3 : continuation;
        }
        return cdataOpenInside;
      }
      return nok(code2);
    }
    __name(cdataOpenInside, "cdataOpenInside");
    function tagCloseStart(code2) {
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        buffer = String.fromCharCode(code2);
        return tagName;
      }
      return nok(code2);
    }
    __name(tagCloseStart, "tagCloseStart");
    function tagName(code2) {
      if (
        code2 === null ||
        code2 === 47 ||
        code2 === 62 ||
        markdownLineEndingOrSpace(code2)
      ) {
        const slash = code2 === 47;
        const name = buffer.toLowerCase();
        if (!slash && !closingTag && htmlRawNames.includes(name)) {
          marker = 1;
          return self2.interrupt ? ok3(code2) : continuation(code2);
        }
        if (htmlBlockNames.includes(buffer.toLowerCase())) {
          marker = 6;
          if (slash) {
            effects.consume(code2);
            return basicSelfClosing;
          }
          return self2.interrupt ? ok3(code2) : continuation(code2);
        }
        marker = 7;
        return self2.interrupt && !self2.parser.lazy[self2.now().line]
          ? nok(code2)
          : closingTag
            ? completeClosingTagAfter(code2)
            : completeAttributeNameBefore(code2);
      }
      if (code2 === 45 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        buffer += String.fromCharCode(code2);
        return tagName;
      }
      return nok(code2);
    }
    __name(tagName, "tagName");
    function basicSelfClosing(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        return self2.interrupt ? ok3 : continuation;
      }
      return nok(code2);
    }
    __name(basicSelfClosing, "basicSelfClosing");
    function completeClosingTagAfter(code2) {
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeClosingTagAfter;
      }
      return completeEnd(code2);
    }
    __name(completeClosingTagAfter, "completeClosingTagAfter");
    function completeAttributeNameBefore(code2) {
      if (code2 === 47) {
        effects.consume(code2);
        return completeEnd;
      }
      if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
        effects.consume(code2);
        return completeAttributeName;
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAttributeNameBefore;
      }
      return completeEnd(code2);
    }
    __name(completeAttributeNameBefore, "completeAttributeNameBefore");
    function completeAttributeName(code2) {
      if (
        code2 === 45 ||
        code2 === 46 ||
        code2 === 58 ||
        code2 === 95 ||
        asciiAlphanumeric(code2)
      ) {
        effects.consume(code2);
        return completeAttributeName;
      }
      return completeAttributeNameAfter(code2);
    }
    __name(completeAttributeName, "completeAttributeName");
    function completeAttributeNameAfter(code2) {
      if (code2 === 61) {
        effects.consume(code2);
        return completeAttributeValueBefore;
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAttributeNameAfter;
      }
      return completeAttributeNameBefore(code2);
    }
    __name(completeAttributeNameAfter, "completeAttributeNameAfter");
    function completeAttributeValueBefore(code2) {
      if (
        code2 === null ||
        code2 === 60 ||
        code2 === 61 ||
        code2 === 62 ||
        code2 === 96
      ) {
        return nok(code2);
      }
      if (code2 === 34 || code2 === 39) {
        effects.consume(code2);
        markerB = code2;
        return completeAttributeValueQuoted;
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAttributeValueBefore;
      }
      return completeAttributeValueUnquoted(code2);
    }
    __name(completeAttributeValueBefore, "completeAttributeValueBefore");
    function completeAttributeValueQuoted(code2) {
      if (code2 === markerB) {
        effects.consume(code2);
        markerB = null;
        return completeAttributeValueQuotedAfter;
      }
      if (code2 === null || markdownLineEnding(code2)) {
        return nok(code2);
      }
      effects.consume(code2);
      return completeAttributeValueQuoted;
    }
    __name(completeAttributeValueQuoted, "completeAttributeValueQuoted");
    function completeAttributeValueUnquoted(code2) {
      if (
        code2 === null ||
        code2 === 34 ||
        code2 === 39 ||
        code2 === 47 ||
        code2 === 60 ||
        code2 === 61 ||
        code2 === 62 ||
        code2 === 96 ||
        markdownLineEndingOrSpace(code2)
      ) {
        return completeAttributeNameAfter(code2);
      }
      effects.consume(code2);
      return completeAttributeValueUnquoted;
    }
    __name(completeAttributeValueUnquoted, "completeAttributeValueUnquoted");
    function completeAttributeValueQuotedAfter(code2) {
      if (code2 === 47 || code2 === 62 || markdownSpace(code2)) {
        return completeAttributeNameBefore(code2);
      }
      return nok(code2);
    }
    __name(
      completeAttributeValueQuotedAfter,
      "completeAttributeValueQuotedAfter",
    );
    function completeEnd(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        return completeAfter;
      }
      return nok(code2);
    }
    __name(completeEnd, "completeEnd");
    function completeAfter(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return continuation(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAfter;
      }
      return nok(code2);
    }
    __name(completeAfter, "completeAfter");
    function continuation(code2) {
      if (code2 === 45 && marker === 2) {
        effects.consume(code2);
        return continuationCommentInside;
      }
      if (code2 === 60 && marker === 1) {
        effects.consume(code2);
        return continuationRawTagOpen;
      }
      if (code2 === 62 && marker === 4) {
        effects.consume(code2);
        return continuationClose;
      }
      if (code2 === 63 && marker === 3) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      if (code2 === 93 && marker === 5) {
        effects.consume(code2);
        return continuationCdataInside;
      }
      if (markdownLineEnding(code2) && (marker === 6 || marker === 7)) {
        effects.exit("htmlFlowData");
        return effects.check(
          blankLineBefore,
          continuationAfter,
          continuationStart,
        )(code2);
      }
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("htmlFlowData");
        return continuationStart(code2);
      }
      effects.consume(code2);
      return continuation;
    }
    __name(continuation, "continuation");
    function continuationStart(code2) {
      return effects.check(
        nonLazyContinuationStart,
        continuationStartNonLazy,
        continuationAfter,
      )(code2);
    }
    __name(continuationStart, "continuationStart");
    function continuationStartNonLazy(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return continuationBefore;
    }
    __name(continuationStartNonLazy, "continuationStartNonLazy");
    function continuationBefore(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return continuationStart(code2);
      }
      effects.enter("htmlFlowData");
      return continuation(code2);
    }
    __name(continuationBefore, "continuationBefore");
    function continuationCommentInside(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      return continuation(code2);
    }
    __name(continuationCommentInside, "continuationCommentInside");
    function continuationRawTagOpen(code2) {
      if (code2 === 47) {
        effects.consume(code2);
        buffer = "";
        return continuationRawEndTag;
      }
      return continuation(code2);
    }
    __name(continuationRawTagOpen, "continuationRawTagOpen");
    function continuationRawEndTag(code2) {
      if (code2 === 62) {
        const name = buffer.toLowerCase();
        if (htmlRawNames.includes(name)) {
          effects.consume(code2);
          return continuationClose;
        }
        return continuation(code2);
      }
      if (asciiAlpha(code2) && buffer.length < 8) {
        effects.consume(code2);
        buffer += String.fromCharCode(code2);
        return continuationRawEndTag;
      }
      return continuation(code2);
    }
    __name(continuationRawEndTag, "continuationRawEndTag");
    function continuationCdataInside(code2) {
      if (code2 === 93) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      return continuation(code2);
    }
    __name(continuationCdataInside, "continuationCdataInside");
    function continuationDeclarationInside(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        return continuationClose;
      }
      if (code2 === 45 && marker === 2) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      return continuation(code2);
    }
    __name(continuationDeclarationInside, "continuationDeclarationInside");
    function continuationClose(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("htmlFlowData");
        return continuationAfter(code2);
      }
      effects.consume(code2);
      return continuationClose;
    }
    __name(continuationClose, "continuationClose");
    function continuationAfter(code2) {
      effects.exit("htmlFlow");
      return ok3(code2);
    }
    __name(continuationAfter, "continuationAfter");
  }
  __name(tokenizeHtmlFlow, "tokenizeHtmlFlow");
  function tokenizeNonLazyContinuationStart(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code2) {
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return after;
      }
      return nok(code2);
    }
    __name(start, "start");
    function after(code2) {
      return self2.parser.lazy[self2.now().line] ? nok(code2) : ok3(code2);
    }
    __name(after, "after");
  }
  __name(tokenizeNonLazyContinuationStart, "tokenizeNonLazyContinuationStart");
  function tokenizeBlankLineBefore(effects, ok3, nok) {
    return start;
    function start(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return effects.attempt(blankLine, ok3, nok);
    }
    __name(start, "start");
  }
  __name(tokenizeBlankLineBefore, "tokenizeBlankLineBefore");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/html-text.js
  var htmlText = {
    name: "htmlText",
    tokenize: tokenizeHtmlText,
  };
  function tokenizeHtmlText(effects, ok3, nok) {
    const self2 = this;
    let marker;
    let index2;
    let returnState;
    return start;
    function start(code2) {
      effects.enter("htmlText");
      effects.enter("htmlTextData");
      effects.consume(code2);
      return open;
    }
    __name(start, "start");
    function open(code2) {
      if (code2 === 33) {
        effects.consume(code2);
        return declarationOpen;
      }
      if (code2 === 47) {
        effects.consume(code2);
        return tagCloseStart;
      }
      if (code2 === 63) {
        effects.consume(code2);
        return instruction;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return tagOpen;
      }
      return nok(code2);
    }
    __name(open, "open");
    function declarationOpen(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return commentOpenInside;
      }
      if (code2 === 91) {
        effects.consume(code2);
        index2 = 0;
        return cdataOpenInside;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return declaration;
      }
      return nok(code2);
    }
    __name(declarationOpen, "declarationOpen");
    function commentOpenInside(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return commentEnd;
      }
      return nok(code2);
    }
    __name(commentOpenInside, "commentOpenInside");
    function comment(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 45) {
        effects.consume(code2);
        return commentClose;
      }
      if (markdownLineEnding(code2)) {
        returnState = comment;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return comment;
    }
    __name(comment, "comment");
    function commentClose(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return commentEnd;
      }
      return comment(code2);
    }
    __name(commentClose, "commentClose");
    function commentEnd(code2) {
      return code2 === 62
        ? end(code2)
        : code2 === 45
          ? commentClose(code2)
          : comment(code2);
    }
    __name(commentEnd, "commentEnd");
    function cdataOpenInside(code2) {
      const value = "CDATA[";
      if (code2 === value.charCodeAt(index2++)) {
        effects.consume(code2);
        return index2 === value.length ? cdata : cdataOpenInside;
      }
      return nok(code2);
    }
    __name(cdataOpenInside, "cdataOpenInside");
    function cdata(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 93) {
        effects.consume(code2);
        return cdataClose;
      }
      if (markdownLineEnding(code2)) {
        returnState = cdata;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return cdata;
    }
    __name(cdata, "cdata");
    function cdataClose(code2) {
      if (code2 === 93) {
        effects.consume(code2);
        return cdataEnd;
      }
      return cdata(code2);
    }
    __name(cdataClose, "cdataClose");
    function cdataEnd(code2) {
      if (code2 === 62) {
        return end(code2);
      }
      if (code2 === 93) {
        effects.consume(code2);
        return cdataEnd;
      }
      return cdata(code2);
    }
    __name(cdataEnd, "cdataEnd");
    function declaration(code2) {
      if (code2 === null || code2 === 62) {
        return end(code2);
      }
      if (markdownLineEnding(code2)) {
        returnState = declaration;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return declaration;
    }
    __name(declaration, "declaration");
    function instruction(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 63) {
        effects.consume(code2);
        return instructionClose;
      }
      if (markdownLineEnding(code2)) {
        returnState = instruction;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return instruction;
    }
    __name(instruction, "instruction");
    function instructionClose(code2) {
      return code2 === 62 ? end(code2) : instruction(code2);
    }
    __name(instructionClose, "instructionClose");
    function tagCloseStart(code2) {
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return tagClose;
      }
      return nok(code2);
    }
    __name(tagCloseStart, "tagCloseStart");
    function tagClose(code2) {
      if (code2 === 45 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        return tagClose;
      }
      return tagCloseBetween(code2);
    }
    __name(tagClose, "tagClose");
    function tagCloseBetween(code2) {
      if (markdownLineEnding(code2)) {
        returnState = tagCloseBetween;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagCloseBetween;
      }
      return end(code2);
    }
    __name(tagCloseBetween, "tagCloseBetween");
    function tagOpen(code2) {
      if (code2 === 45 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        return tagOpen;
      }
      if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
        return tagOpenBetween(code2);
      }
      return nok(code2);
    }
    __name(tagOpen, "tagOpen");
    function tagOpenBetween(code2) {
      if (code2 === 47) {
        effects.consume(code2);
        return end;
      }
      if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
        effects.consume(code2);
        return tagOpenAttributeName;
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenBetween;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagOpenBetween;
      }
      return end(code2);
    }
    __name(tagOpenBetween, "tagOpenBetween");
    function tagOpenAttributeName(code2) {
      if (
        code2 === 45 ||
        code2 === 46 ||
        code2 === 58 ||
        code2 === 95 ||
        asciiAlphanumeric(code2)
      ) {
        effects.consume(code2);
        return tagOpenAttributeName;
      }
      return tagOpenAttributeNameAfter(code2);
    }
    __name(tagOpenAttributeName, "tagOpenAttributeName");
    function tagOpenAttributeNameAfter(code2) {
      if (code2 === 61) {
        effects.consume(code2);
        return tagOpenAttributeValueBefore;
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenAttributeNameAfter;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagOpenAttributeNameAfter;
      }
      return tagOpenBetween(code2);
    }
    __name(tagOpenAttributeNameAfter, "tagOpenAttributeNameAfter");
    function tagOpenAttributeValueBefore(code2) {
      if (
        code2 === null ||
        code2 === 60 ||
        code2 === 61 ||
        code2 === 62 ||
        code2 === 96
      ) {
        return nok(code2);
      }
      if (code2 === 34 || code2 === 39) {
        effects.consume(code2);
        marker = code2;
        return tagOpenAttributeValueQuoted;
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenAttributeValueBefore;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagOpenAttributeValueBefore;
      }
      effects.consume(code2);
      return tagOpenAttributeValueUnquoted;
    }
    __name(tagOpenAttributeValueBefore, "tagOpenAttributeValueBefore");
    function tagOpenAttributeValueQuoted(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        marker = void 0;
        return tagOpenAttributeValueQuotedAfter;
      }
      if (code2 === null) {
        return nok(code2);
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenAttributeValueQuoted;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return tagOpenAttributeValueQuoted;
    }
    __name(tagOpenAttributeValueQuoted, "tagOpenAttributeValueQuoted");
    function tagOpenAttributeValueUnquoted(code2) {
      if (
        code2 === null ||
        code2 === 34 ||
        code2 === 39 ||
        code2 === 60 ||
        code2 === 61 ||
        code2 === 96
      ) {
        return nok(code2);
      }
      if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
        return tagOpenBetween(code2);
      }
      effects.consume(code2);
      return tagOpenAttributeValueUnquoted;
    }
    __name(tagOpenAttributeValueUnquoted, "tagOpenAttributeValueUnquoted");
    function tagOpenAttributeValueQuotedAfter(code2) {
      if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
        return tagOpenBetween(code2);
      }
      return nok(code2);
    }
    __name(
      tagOpenAttributeValueQuotedAfter,
      "tagOpenAttributeValueQuotedAfter",
    );
    function end(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        effects.exit("htmlTextData");
        effects.exit("htmlText");
        return ok3;
      }
      return nok(code2);
    }
    __name(end, "end");
    function lineEndingBefore(code2) {
      effects.exit("htmlTextData");
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return lineEndingAfter;
    }
    __name(lineEndingBefore, "lineEndingBefore");
    function lineEndingAfter(code2) {
      return markdownSpace(code2)
        ? factorySpace(
            effects,
            lineEndingAfterPrefix,
            "linePrefix",
            self2.parser.constructs.disable.null.includes("codeIndented")
              ? void 0
              : 4,
          )(code2)
        : lineEndingAfterPrefix(code2);
    }
    __name(lineEndingAfter, "lineEndingAfter");
    function lineEndingAfterPrefix(code2) {
      effects.enter("htmlTextData");
      return returnState(code2);
    }
    __name(lineEndingAfterPrefix, "lineEndingAfterPrefix");
  }
  __name(tokenizeHtmlText, "tokenizeHtmlText");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/label-end.js
  var labelEnd = {
    name: "labelEnd",
    tokenize: tokenizeLabelEnd,
    resolveTo: resolveToLabelEnd,
    resolveAll: resolveAllLabelEnd,
  };
  var resourceConstruct = {
    tokenize: tokenizeResource,
  };
  var referenceFullConstruct = {
    tokenize: tokenizeReferenceFull,
  };
  var referenceCollapsedConstruct = {
    tokenize: tokenizeReferenceCollapsed,
  };
  function resolveAllLabelEnd(events) {
    let index2 = -1;
    while (++index2 < events.length) {
      const token = events[index2][1];
      if (
        token.type === "labelImage" ||
        token.type === "labelLink" ||
        token.type === "labelEnd"
      ) {
        events.splice(index2 + 1, token.type === "labelImage" ? 4 : 2);
        token.type = "data";
        index2++;
      }
    }
    return events;
  }
  __name(resolveAllLabelEnd, "resolveAllLabelEnd");
  function resolveToLabelEnd(events, context2) {
    let index2 = events.length;
    let offset = 0;
    let token;
    let open;
    let close;
    let media;
    while (index2--) {
      token = events[index2][1];
      if (open) {
        if (
          token.type === "link" ||
          (token.type === "labelLink" && token._inactive)
        ) {
          break;
        }
        if (events[index2][0] === "enter" && token.type === "labelLink") {
          token._inactive = true;
        }
      } else if (close) {
        if (
          events[index2][0] === "enter" &&
          (token.type === "labelImage" || token.type === "labelLink") &&
          !token._balanced
        ) {
          open = index2;
          if (token.type !== "labelLink") {
            offset = 2;
            break;
          }
        }
      } else if (token.type === "labelEnd") {
        close = index2;
      }
    }
    const group = {
      type: events[open][1].type === "labelLink" ? "link" : "image",
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[events.length - 1][1].end),
    };
    const label = {
      type: "label",
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[close][1].end),
    };
    const text4 = {
      type: "labelText",
      start: Object.assign({}, events[open + offset + 2][1].end),
      end: Object.assign({}, events[close - 2][1].start),
    };
    media = [
      ["enter", group, context2],
      ["enter", label, context2],
    ];
    media = push2(media, events.slice(open + 1, open + offset + 3));
    media = push2(media, [["enter", text4, context2]]);
    media = push2(
      media,
      resolveAll(
        context2.parser.constructs.insideSpan.null,
        events.slice(open + offset + 4, close - 3),
        context2,
      ),
    );
    media = push2(media, [
      ["exit", text4, context2],
      events[close - 2],
      events[close - 1],
      ["exit", label, context2],
    ]);
    media = push2(media, events.slice(close + 1));
    media = push2(media, [["exit", group, context2]]);
    splice(events, open, events.length, media);
    return events;
  }
  __name(resolveToLabelEnd, "resolveToLabelEnd");
  function tokenizeLabelEnd(effects, ok3, nok) {
    const self2 = this;
    let index2 = self2.events.length;
    let labelStart;
    let defined;
    while (index2--) {
      if (
        (self2.events[index2][1].type === "labelImage" ||
          self2.events[index2][1].type === "labelLink") &&
        !self2.events[index2][1]._balanced
      ) {
        labelStart = self2.events[index2][1];
        break;
      }
    }
    return start;
    function start(code2) {
      if (!labelStart) {
        return nok(code2);
      }
      if (labelStart._inactive) {
        return labelEndNok(code2);
      }
      defined = self2.parser.defined.includes(
        normalizeIdentifier(
          self2.sliceSerialize({
            start: labelStart.end,
            end: self2.now(),
          }),
        ),
      );
      effects.enter("labelEnd");
      effects.enter("labelMarker");
      effects.consume(code2);
      effects.exit("labelMarker");
      effects.exit("labelEnd");
      return after;
    }
    __name(start, "start");
    function after(code2) {
      if (code2 === 40) {
        return effects.attempt(
          resourceConstruct,
          labelEndOk,
          defined ? labelEndOk : labelEndNok,
        )(code2);
      }
      if (code2 === 91) {
        return effects.attempt(
          referenceFullConstruct,
          labelEndOk,
          defined ? referenceNotFull : labelEndNok,
        )(code2);
      }
      return defined ? labelEndOk(code2) : labelEndNok(code2);
    }
    __name(after, "after");
    function referenceNotFull(code2) {
      return effects.attempt(
        referenceCollapsedConstruct,
        labelEndOk,
        labelEndNok,
      )(code2);
    }
    __name(referenceNotFull, "referenceNotFull");
    function labelEndOk(code2) {
      return ok3(code2);
    }
    __name(labelEndOk, "labelEndOk");
    function labelEndNok(code2) {
      labelStart._balanced = true;
      return nok(code2);
    }
    __name(labelEndNok, "labelEndNok");
  }
  __name(tokenizeLabelEnd, "tokenizeLabelEnd");
  function tokenizeResource(effects, ok3, nok) {
    return resourceStart;
    function resourceStart(code2) {
      effects.enter("resource");
      effects.enter("resourceMarker");
      effects.consume(code2);
      effects.exit("resourceMarker");
      return resourceBefore;
    }
    __name(resourceStart, "resourceStart");
    function resourceBefore(code2) {
      return markdownLineEndingOrSpace(code2)
        ? factoryWhitespace(effects, resourceOpen)(code2)
        : resourceOpen(code2);
    }
    __name(resourceBefore, "resourceBefore");
    function resourceOpen(code2) {
      if (code2 === 41) {
        return resourceEnd(code2);
      }
      return factoryDestination(
        effects,
        resourceDestinationAfter,
        resourceDestinationMissing,
        "resourceDestination",
        "resourceDestinationLiteral",
        "resourceDestinationLiteralMarker",
        "resourceDestinationRaw",
        "resourceDestinationString",
        32,
      )(code2);
    }
    __name(resourceOpen, "resourceOpen");
    function resourceDestinationAfter(code2) {
      return markdownLineEndingOrSpace(code2)
        ? factoryWhitespace(effects, resourceBetween)(code2)
        : resourceEnd(code2);
    }
    __name(resourceDestinationAfter, "resourceDestinationAfter");
    function resourceDestinationMissing(code2) {
      return nok(code2);
    }
    __name(resourceDestinationMissing, "resourceDestinationMissing");
    function resourceBetween(code2) {
      if (code2 === 34 || code2 === 39 || code2 === 40) {
        return factoryTitle(
          effects,
          resourceTitleAfter,
          nok,
          "resourceTitle",
          "resourceTitleMarker",
          "resourceTitleString",
        )(code2);
      }
      return resourceEnd(code2);
    }
    __name(resourceBetween, "resourceBetween");
    function resourceTitleAfter(code2) {
      return markdownLineEndingOrSpace(code2)
        ? factoryWhitespace(effects, resourceEnd)(code2)
        : resourceEnd(code2);
    }
    __name(resourceTitleAfter, "resourceTitleAfter");
    function resourceEnd(code2) {
      if (code2 === 41) {
        effects.enter("resourceMarker");
        effects.consume(code2);
        effects.exit("resourceMarker");
        effects.exit("resource");
        return ok3;
      }
      return nok(code2);
    }
    __name(resourceEnd, "resourceEnd");
  }
  __name(tokenizeResource, "tokenizeResource");
  function tokenizeReferenceFull(effects, ok3, nok) {
    const self2 = this;
    return referenceFull;
    function referenceFull(code2) {
      return factoryLabel.call(
        self2,
        effects,
        referenceFullAfter,
        referenceFullMissing,
        "reference",
        "referenceMarker",
        "referenceString",
      )(code2);
    }
    __name(referenceFull, "referenceFull");
    function referenceFullAfter(code2) {
      return self2.parser.defined.includes(
        normalizeIdentifier(
          self2
            .sliceSerialize(self2.events[self2.events.length - 1][1])
            .slice(1, -1),
        ),
      )
        ? ok3(code2)
        : nok(code2);
    }
    __name(referenceFullAfter, "referenceFullAfter");
    function referenceFullMissing(code2) {
      return nok(code2);
    }
    __name(referenceFullMissing, "referenceFullMissing");
  }
  __name(tokenizeReferenceFull, "tokenizeReferenceFull");
  function tokenizeReferenceCollapsed(effects, ok3, nok) {
    return referenceCollapsedStart;
    function referenceCollapsedStart(code2) {
      effects.enter("reference");
      effects.enter("referenceMarker");
      effects.consume(code2);
      effects.exit("referenceMarker");
      return referenceCollapsedOpen;
    }
    __name(referenceCollapsedStart, "referenceCollapsedStart");
    function referenceCollapsedOpen(code2) {
      if (code2 === 93) {
        effects.enter("referenceMarker");
        effects.consume(code2);
        effects.exit("referenceMarker");
        effects.exit("reference");
        return ok3;
      }
      return nok(code2);
    }
    __name(referenceCollapsedOpen, "referenceCollapsedOpen");
  }
  __name(tokenizeReferenceCollapsed, "tokenizeReferenceCollapsed");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/label-start-image.js
  var labelStartImage = {
    name: "labelStartImage",
    tokenize: tokenizeLabelStartImage,
    resolveAll: labelEnd.resolveAll,
  };
  function tokenizeLabelStartImage(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code2) {
      effects.enter("labelImage");
      effects.enter("labelImageMarker");
      effects.consume(code2);
      effects.exit("labelImageMarker");
      return open;
    }
    __name(start, "start");
    function open(code2) {
      if (code2 === 91) {
        effects.enter("labelMarker");
        effects.consume(code2);
        effects.exit("labelMarker");
        effects.exit("labelImage");
        return after;
      }
      return nok(code2);
    }
    __name(open, "open");
    function after(code2) {
      return code2 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs
        ? nok(code2)
        : ok3(code2);
    }
    __name(after, "after");
  }
  __name(tokenizeLabelStartImage, "tokenizeLabelStartImage");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/label-start-link.js
  var labelStartLink = {
    name: "labelStartLink",
    tokenize: tokenizeLabelStartLink,
    resolveAll: labelEnd.resolveAll,
  };
  function tokenizeLabelStartLink(effects, ok3, nok) {
    const self2 = this;
    return start;
    function start(code2) {
      effects.enter("labelLink");
      effects.enter("labelMarker");
      effects.consume(code2);
      effects.exit("labelMarker");
      effects.exit("labelLink");
      return after;
    }
    __name(start, "start");
    function after(code2) {
      return code2 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs
        ? nok(code2)
        : ok3(code2);
    }
    __name(after, "after");
  }
  __name(tokenizeLabelStartLink, "tokenizeLabelStartLink");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/line-ending.js
  var lineEnding = {
    name: "lineEnding",
    tokenize: tokenizeLineEnding,
  };
  function tokenizeLineEnding(effects, ok3) {
    return start;
    function start(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return factorySpace(effects, ok3, "linePrefix");
    }
    __name(start, "start");
  }
  __name(tokenizeLineEnding, "tokenizeLineEnding");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/thematic-break.js
  var thematicBreak = {
    name: "thematicBreak",
    tokenize: tokenizeThematicBreak,
  };
  function tokenizeThematicBreak(effects, ok3, nok) {
    let size = 0;
    let marker;
    return start;
    function start(code2) {
      effects.enter("thematicBreak");
      return before(code2);
    }
    __name(start, "start");
    function before(code2) {
      marker = code2;
      return atBreak(code2);
    }
    __name(before, "before");
    function atBreak(code2) {
      if (code2 === marker) {
        effects.enter("thematicBreakSequence");
        return sequence(code2);
      }
      if (size >= 3 && (code2 === null || markdownLineEnding(code2))) {
        effects.exit("thematicBreak");
        return ok3(code2);
      }
      return nok(code2);
    }
    __name(atBreak, "atBreak");
    function sequence(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        size++;
        return sequence;
      }
      effects.exit("thematicBreakSequence");
      return markdownSpace(code2)
        ? factorySpace(effects, atBreak, "whitespace")(code2)
        : atBreak(code2);
    }
    __name(sequence, "sequence");
  }
  __name(tokenizeThematicBreak, "tokenizeThematicBreak");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/list.js
  var list = {
    name: "list",
    tokenize: tokenizeListStart,
    continuation: {
      tokenize: tokenizeListContinuation,
    },
    exit: tokenizeListEnd,
  };
  var listItemPrefixWhitespaceConstruct = {
    tokenize: tokenizeListItemPrefixWhitespace,
    partial: true,
  };
  var indentConstruct = {
    tokenize: tokenizeIndent,
    partial: true,
  };
  function tokenizeListStart(effects, ok3, nok) {
    const self2 = this;
    const tail = self2.events[self2.events.length - 1];
    let initialSize =
      tail && tail[1].type === "linePrefix"
        ? tail[2].sliceSerialize(tail[1], true).length
        : 0;
    let size = 0;
    return start;
    function start(code2) {
      const kind =
        self2.containerState.type ||
        (code2 === 42 || code2 === 43 || code2 === 45
          ? "listUnordered"
          : "listOrdered");
      if (
        kind === "listUnordered"
          ? !self2.containerState.marker ||
            code2 === self2.containerState.marker
          : asciiDigit(code2)
      ) {
        if (!self2.containerState.type) {
          self2.containerState.type = kind;
          effects.enter(kind, {
            _container: true,
          });
        }
        if (kind === "listUnordered") {
          effects.enter("listItemPrefix");
          return code2 === 42 || code2 === 45
            ? effects.check(thematicBreak, nok, atMarker)(code2)
            : atMarker(code2);
        }
        if (!self2.interrupt || code2 === 49) {
          effects.enter("listItemPrefix");
          effects.enter("listItemValue");
          return inside(code2);
        }
      }
      return nok(code2);
    }
    __name(start, "start");
    function inside(code2) {
      if (asciiDigit(code2) && ++size < 10) {
        effects.consume(code2);
        return inside;
      }
      if (
        (!self2.interrupt || size < 2) &&
        (self2.containerState.marker
          ? code2 === self2.containerState.marker
          : code2 === 41 || code2 === 46)
      ) {
        effects.exit("listItemValue");
        return atMarker(code2);
      }
      return nok(code2);
    }
    __name(inside, "inside");
    function atMarker(code2) {
      effects.enter("listItemMarker");
      effects.consume(code2);
      effects.exit("listItemMarker");
      self2.containerState.marker = self2.containerState.marker || code2;
      return effects.check(
        blankLine,
        // Can’t be empty when interrupting.
        self2.interrupt ? nok : onBlank,
        effects.attempt(
          listItemPrefixWhitespaceConstruct,
          endOfPrefix,
          otherPrefix,
        ),
      );
    }
    __name(atMarker, "atMarker");
    function onBlank(code2) {
      self2.containerState.initialBlankLine = true;
      initialSize++;
      return endOfPrefix(code2);
    }
    __name(onBlank, "onBlank");
    function otherPrefix(code2) {
      if (markdownSpace(code2)) {
        effects.enter("listItemPrefixWhitespace");
        effects.consume(code2);
        effects.exit("listItemPrefixWhitespace");
        return endOfPrefix;
      }
      return nok(code2);
    }
    __name(otherPrefix, "otherPrefix");
    function endOfPrefix(code2) {
      self2.containerState.size =
        initialSize +
        self2.sliceSerialize(effects.exit("listItemPrefix"), true).length;
      return ok3(code2);
    }
    __name(endOfPrefix, "endOfPrefix");
  }
  __name(tokenizeListStart, "tokenizeListStart");
  function tokenizeListContinuation(effects, ok3, nok) {
    const self2 = this;
    self2.containerState._closeFlow = void 0;
    return effects.check(blankLine, onBlank, notBlank);
    function onBlank(code2) {
      self2.containerState.furtherBlankLines =
        self2.containerState.furtherBlankLines ||
        self2.containerState.initialBlankLine;
      return factorySpace(
        effects,
        ok3,
        "listItemIndent",
        self2.containerState.size + 1,
      )(code2);
    }
    __name(onBlank, "onBlank");
    function notBlank(code2) {
      if (self2.containerState.furtherBlankLines || !markdownSpace(code2)) {
        self2.containerState.furtherBlankLines = void 0;
        self2.containerState.initialBlankLine = void 0;
        return notInCurrentItem(code2);
      }
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return effects.attempt(indentConstruct, ok3, notInCurrentItem)(code2);
    }
    __name(notBlank, "notBlank");
    function notInCurrentItem(code2) {
      self2.containerState._closeFlow = true;
      self2.interrupt = void 0;
      return factorySpace(
        effects,
        effects.attempt(list, ok3, nok),
        "linePrefix",
        self2.parser.constructs.disable.null.includes("codeIndented")
          ? void 0
          : 4,
      )(code2);
    }
    __name(notInCurrentItem, "notInCurrentItem");
  }
  __name(tokenizeListContinuation, "tokenizeListContinuation");
  function tokenizeIndent(effects, ok3, nok) {
    const self2 = this;
    return factorySpace(
      effects,
      afterPrefix,
      "listItemIndent",
      self2.containerState.size + 1,
    );
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return tail &&
        tail[1].type === "listItemIndent" &&
        tail[2].sliceSerialize(tail[1], true).length ===
          self2.containerState.size
        ? ok3(code2)
        : nok(code2);
    }
    __name(afterPrefix, "afterPrefix");
  }
  __name(tokenizeIndent, "tokenizeIndent");
  function tokenizeListEnd(effects) {
    effects.exit(this.containerState.type);
  }
  __name(tokenizeListEnd, "tokenizeListEnd");
  function tokenizeListItemPrefixWhitespace(effects, ok3, nok) {
    const self2 = this;
    return factorySpace(
      effects,
      afterPrefix,
      "listItemPrefixWhitespace",
      self2.parser.constructs.disable.null.includes("codeIndented")
        ? void 0
        : 4 + 1,
    );
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return !markdownSpace(code2) &&
        tail &&
        tail[1].type === "listItemPrefixWhitespace"
        ? ok3(code2)
        : nok(code2);
    }
    __name(afterPrefix, "afterPrefix");
  }
  __name(tokenizeListItemPrefixWhitespace, "tokenizeListItemPrefixWhitespace");

  // node_modules/.pnpm/micromark-core-commonmark@2.0.1/node_modules/micromark-core-commonmark/lib/setext-underline.js
  var setextUnderline = {
    name: "setextUnderline",
    tokenize: tokenizeSetextUnderline,
    resolveTo: resolveToSetextUnderline,
  };
  function resolveToSetextUnderline(events, context2) {
    let index2 = events.length;
    let content3;
    let text4;
    let definition3;
    while (index2--) {
      if (events[index2][0] === "enter") {
        if (events[index2][1].type === "content") {
          content3 = index2;
          break;
        }
        if (events[index2][1].type === "paragraph") {
          text4 = index2;
        }
      } else {
        if (events[index2][1].type === "content") {
          events.splice(index2, 1);
        }
        if (!definition3 && events[index2][1].type === "definition") {
          definition3 = index2;
        }
      }
    }
    const heading2 = {
      type: "setextHeading",
      start: Object.assign({}, events[text4][1].start),
      end: Object.assign({}, events[events.length - 1][1].end),
    };
    events[text4][1].type = "setextHeadingText";
    if (definition3) {
      events.splice(text4, 0, ["enter", heading2, context2]);
      events.splice(definition3 + 1, 0, [
        "exit",
        events[content3][1],
        context2,
      ]);
      events[content3][1].end = Object.assign({}, events[definition3][1].end);
    } else {
      events[content3][1] = heading2;
    }
    events.push(["exit", heading2, context2]);
    return events;
  }
  __name(resolveToSetextUnderline, "resolveToSetextUnderline");
  function tokenizeSetextUnderline(effects, ok3, nok) {
    const self2 = this;
    let marker;
    return start;
    function start(code2) {
      let index2 = self2.events.length;
      let paragraph2;
      while (index2--) {
        if (
          self2.events[index2][1].type !== "lineEnding" &&
          self2.events[index2][1].type !== "linePrefix" &&
          self2.events[index2][1].type !== "content"
        ) {
          paragraph2 = self2.events[index2][1].type === "paragraph";
          break;
        }
      }
      if (
        !self2.parser.lazy[self2.now().line] &&
        (self2.interrupt || paragraph2)
      ) {
        effects.enter("setextHeadingLine");
        marker = code2;
        return before(code2);
      }
      return nok(code2);
    }
    __name(start, "start");
    function before(code2) {
      effects.enter("setextHeadingLineSequence");
      return inside(code2);
    }
    __name(before, "before");
    function inside(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        return inside;
      }
      effects.exit("setextHeadingLineSequence");
      return markdownSpace(code2)
        ? factorySpace(effects, after, "lineSuffix")(code2)
        : after(code2);
    }
    __name(inside, "inside");
    function after(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("setextHeadingLine");
        return ok3(code2);
      }
      return nok(code2);
    }
    __name(after, "after");
  }
  __name(tokenizeSetextUnderline, "tokenizeSetextUnderline");

  // node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/flow.js
  var flow = {
    tokenize: initializeFlow,
  };
  function initializeFlow(effects) {
    const self2 = this;
    const initial = effects.attempt(
      // Try to parse a blank line.
      blankLine,
      atBlankEnding,
      // Try to parse initial flow (essentially, only code).
      effects.attempt(
        this.parser.constructs.flowInitial,
        afterConstruct,
        factorySpace(
          effects,
          effects.attempt(
            this.parser.constructs.flow,
            afterConstruct,
            effects.attempt(content2, afterConstruct),
          ),
          "linePrefix",
        ),
      ),
    );
    return initial;
    function atBlankEnding(code2) {
      if (code2 === null) {
        effects.consume(code2);
        return;
      }
      effects.enter("lineEndingBlank");
      effects.consume(code2);
      effects.exit("lineEndingBlank");
      self2.currentConstruct = void 0;
      return initial;
    }
    __name(atBlankEnding, "atBlankEnding");
    function afterConstruct(code2) {
      if (code2 === null) {
        effects.consume(code2);
        return;
      }
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      self2.currentConstruct = void 0;
      return initial;
    }
    __name(afterConstruct, "afterConstruct");
  }
  __name(initializeFlow, "initializeFlow");

  // node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/initialize/text.js
  var resolver = {
    resolveAll: createResolver(),
  };
  var string = initializeFactory("string");
  var text = initializeFactory("text");
  function initializeFactory(field) {
    return {
      tokenize: initializeText,
      resolveAll: createResolver(
        field === "text" ? resolveAllLineSuffixes : void 0,
      ),
    };
    function initializeText(effects) {
      const self2 = this;
      const constructs2 = this.parser.constructs[field];
      const text4 = effects.attempt(constructs2, start, notText);
      return start;
      function start(code2) {
        return atBreak(code2) ? text4(code2) : notText(code2);
      }
      __name(start, "start");
      function notText(code2) {
        if (code2 === null) {
          effects.consume(code2);
          return;
        }
        effects.enter("data");
        effects.consume(code2);
        return data;
      }
      __name(notText, "notText");
      function data(code2) {
        if (atBreak(code2)) {
          effects.exit("data");
          return text4(code2);
        }
        effects.consume(code2);
        return data;
      }
      __name(data, "data");
      function atBreak(code2) {
        if (code2 === null) {
          return true;
        }
        const list4 = constructs2[code2];
        let index2 = -1;
        if (list4) {
          while (++index2 < list4.length) {
            const item = list4[index2];
            if (!item.previous || item.previous.call(self2, self2.previous)) {
              return true;
            }
          }
        }
        return false;
      }
      __name(atBreak, "atBreak");
    }
    __name(initializeText, "initializeText");
  }
  __name(initializeFactory, "initializeFactory");
  function createResolver(extraResolver) {
    return resolveAllText;
    function resolveAllText(events, context2) {
      let index2 = -1;
      let enter;
      while (++index2 <= events.length) {
        if (enter === void 0) {
          if (events[index2] && events[index2][1].type === "data") {
            enter = index2;
            index2++;
          }
        } else if (!events[index2] || events[index2][1].type !== "data") {
          if (index2 !== enter + 2) {
            events[enter][1].end = events[index2 - 1][1].end;
            events.splice(enter + 2, index2 - enter - 2);
            index2 = enter + 2;
          }
          enter = void 0;
        }
      }
      return extraResolver ? extraResolver(events, context2) : events;
    }
    __name(resolveAllText, "resolveAllText");
  }
  __name(createResolver, "createResolver");
  function resolveAllLineSuffixes(events, context2) {
    let eventIndex = 0;
    while (++eventIndex <= events.length) {
      if (
        (eventIndex === events.length ||
          events[eventIndex][1].type === "lineEnding") &&
        events[eventIndex - 1][1].type === "data"
      ) {
        const data = events[eventIndex - 1][1];
        const chunks = context2.sliceStream(data);
        let index2 = chunks.length;
        let bufferIndex = -1;
        let size = 0;
        let tabs;
        while (index2--) {
          const chunk = chunks[index2];
          if (typeof chunk === "string") {
            bufferIndex = chunk.length;
            while (chunk.charCodeAt(bufferIndex - 1) === 32) {
              size++;
              bufferIndex--;
            }
            if (bufferIndex) break;
            bufferIndex = -1;
          } else if (chunk === -2) {
            tabs = true;
            size++;
          } else if (chunk === -1) {
          } else {
            index2++;
            break;
          }
        }
        if (size) {
          const token = {
            type:
              eventIndex === events.length || tabs || size < 2
                ? "lineSuffix"
                : "hardBreakTrailing",
            start: {
              line: data.end.line,
              column: data.end.column - size,
              offset: data.end.offset - size,
              _index: data.start._index + index2,
              _bufferIndex: index2
                ? bufferIndex
                : data.start._bufferIndex + bufferIndex,
            },
            end: Object.assign({}, data.end),
          };
          data.end = Object.assign({}, token.start);
          if (data.start.offset === data.end.offset) {
            Object.assign(data, token);
          } else {
            events.splice(
              eventIndex,
              0,
              ["enter", token, context2],
              ["exit", token, context2],
            );
            eventIndex += 2;
          }
        }
        eventIndex++;
      }
    }
    return events;
  }
  __name(resolveAllLineSuffixes, "resolveAllLineSuffixes");

  // node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/create-tokenizer.js
  function createTokenizer(parser, initialize, from) {
    let point3 = Object.assign(
      from
        ? Object.assign({}, from)
        : {
            line: 1,
            column: 1,
            offset: 0,
          },
      {
        _index: 0,
        _bufferIndex: -1,
      },
    );
    const columnStart = {};
    const resolveAllConstructs = [];
    let chunks = [];
    let stack = [];
    let consumed = true;
    const effects = {
      consume,
      enter,
      exit: exit2,
      attempt: constructFactory(onsuccessfulconstruct),
      check: constructFactory(onsuccessfulcheck),
      interrupt: constructFactory(onsuccessfulcheck, {
        interrupt: true,
      }),
    };
    const context2 = {
      previous: null,
      code: null,
      containerState: {},
      events: [],
      parser,
      sliceStream,
      sliceSerialize,
      now,
      defineSkip,
      write,
    };
    let state = initialize.tokenize.call(context2, effects);
    let expectedCode;
    if (initialize.resolveAll) {
      resolveAllConstructs.push(initialize);
    }
    return context2;
    function write(slice) {
      chunks = push2(chunks, slice);
      main();
      if (chunks[chunks.length - 1] !== null) {
        return [];
      }
      addResult(initialize, 0);
      context2.events = resolveAll(
        resolveAllConstructs,
        context2.events,
        context2,
      );
      return context2.events;
    }
    __name(write, "write");
    function sliceSerialize(token, expandTabs) {
      return serializeChunks(sliceStream(token), expandTabs);
    }
    __name(sliceSerialize, "sliceSerialize");
    function sliceStream(token) {
      return sliceChunks(chunks, token);
    }
    __name(sliceStream, "sliceStream");
    function now() {
      const { line, column, offset, _index, _bufferIndex } = point3;
      return {
        line,
        column,
        offset,
        _index,
        _bufferIndex,
      };
    }
    __name(now, "now");
    function defineSkip(value) {
      columnStart[value.line] = value.column;
      accountForPotentialSkip();
    }
    __name(defineSkip, "defineSkip");
    function main() {
      let chunkIndex;
      while (point3._index < chunks.length) {
        const chunk = chunks[point3._index];
        if (typeof chunk === "string") {
          chunkIndex = point3._index;
          if (point3._bufferIndex < 0) {
            point3._bufferIndex = 0;
          }
          while (
            point3._index === chunkIndex &&
            point3._bufferIndex < chunk.length
          ) {
            go(chunk.charCodeAt(point3._bufferIndex));
          }
        } else {
          go(chunk);
        }
      }
    }
    __name(main, "main");
    function go(code2) {
      consumed = void 0;
      expectedCode = code2;
      state = state(code2);
    }
    __name(go, "go");
    function consume(code2) {
      if (markdownLineEnding(code2)) {
        point3.line++;
        point3.column = 1;
        point3.offset += code2 === -3 ? 2 : 1;
        accountForPotentialSkip();
      } else if (code2 !== -1) {
        point3.column++;
        point3.offset++;
      }
      if (point3._bufferIndex < 0) {
        point3._index++;
      } else {
        point3._bufferIndex++;
        if (point3._bufferIndex === chunks[point3._index].length) {
          point3._bufferIndex = -1;
          point3._index++;
        }
      }
      context2.previous = code2;
      consumed = true;
    }
    __name(consume, "consume");
    function enter(type, fields) {
      const token = fields || {};
      token.type = type;
      token.start = now();
      context2.events.push(["enter", token, context2]);
      stack.push(token);
      return token;
    }
    __name(enter, "enter");
    function exit2(type) {
      const token = stack.pop();
      token.end = now();
      context2.events.push(["exit", token, context2]);
      return token;
    }
    __name(exit2, "exit");
    function onsuccessfulconstruct(construct, info2) {
      addResult(construct, info2.from);
    }
    __name(onsuccessfulconstruct, "onsuccessfulconstruct");
    function onsuccessfulcheck(_, info2) {
      info2.restore();
    }
    __name(onsuccessfulcheck, "onsuccessfulcheck");
    function constructFactory(onreturn, fields) {
      return hook;
      function hook(constructs2, returnState, bogusState) {
        let listOfConstructs;
        let constructIndex;
        let currentConstruct;
        let info2;
        return Array.isArray(constructs2)
          ? handleListOfConstructs(constructs2)
          : "tokenize" in constructs2
            ? // @ts-expect-error Looks like a construct.
              handleListOfConstructs([constructs2])
            : handleMapOfConstructs(constructs2);
        function handleMapOfConstructs(map4) {
          return start;
          function start(code2) {
            const def = code2 !== null && map4[code2];
            const all2 = code2 !== null && map4.null;
            const list4 = [
              // To do: add more extension tests.
              /* c8 ignore next 2 */
              ...(Array.isArray(def) ? def : def ? [def] : []),
              ...(Array.isArray(all2) ? all2 : all2 ? [all2] : []),
            ];
            return handleListOfConstructs(list4)(code2);
          }
          __name(start, "start");
        }
        __name(handleMapOfConstructs, "handleMapOfConstructs");
        function handleListOfConstructs(list4) {
          listOfConstructs = list4;
          constructIndex = 0;
          if (list4.length === 0) {
            return bogusState;
          }
          return handleConstruct(list4[constructIndex]);
        }
        __name(handleListOfConstructs, "handleListOfConstructs");
        function handleConstruct(construct) {
          return start;
          function start(code2) {
            info2 = store();
            currentConstruct = construct;
            if (!construct.partial) {
              context2.currentConstruct = construct;
            }
            if (
              construct.name &&
              context2.parser.constructs.disable.null.includes(construct.name)
            ) {
              return nok(code2);
            }
            return construct.tokenize.call(
              // If we do have fields, create an object w/ `context` as its
              // prototype.
              // This allows a “live binding”, which is needed for `interrupt`.
              fields
                ? Object.assign(Object.create(context2), fields)
                : context2,
              effects,
              ok3,
              nok,
            )(code2);
          }
          __name(start, "start");
        }
        __name(handleConstruct, "handleConstruct");
        function ok3(code2) {
          consumed = true;
          onreturn(currentConstruct, info2);
          return returnState;
        }
        __name(ok3, "ok");
        function nok(code2) {
          consumed = true;
          info2.restore();
          if (++constructIndex < listOfConstructs.length) {
            return handleConstruct(listOfConstructs[constructIndex]);
          }
          return bogusState;
        }
        __name(nok, "nok");
      }
      __name(hook, "hook");
    }
    __name(constructFactory, "constructFactory");
    function addResult(construct, from2) {
      if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
        resolveAllConstructs.push(construct);
      }
      if (construct.resolve) {
        splice(
          context2.events,
          from2,
          context2.events.length - from2,
          construct.resolve(context2.events.slice(from2), context2),
        );
      }
      if (construct.resolveTo) {
        context2.events = construct.resolveTo(context2.events, context2);
      }
    }
    __name(addResult, "addResult");
    function store() {
      const startPoint = now();
      const startPrevious = context2.previous;
      const startCurrentConstruct = context2.currentConstruct;
      const startEventsIndex = context2.events.length;
      const startStack = Array.from(stack);
      return {
        restore,
        from: startEventsIndex,
      };
      function restore() {
        point3 = startPoint;
        context2.previous = startPrevious;
        context2.currentConstruct = startCurrentConstruct;
        context2.events.length = startEventsIndex;
        stack = startStack;
        accountForPotentialSkip();
      }
      __name(restore, "restore");
    }
    __name(store, "store");
    function accountForPotentialSkip() {
      if (point3.line in columnStart && point3.column < 2) {
        point3.column = columnStart[point3.line];
        point3.offset += columnStart[point3.line] - 1;
      }
    }
    __name(accountForPotentialSkip, "accountForPotentialSkip");
  }
  __name(createTokenizer, "createTokenizer");
  function sliceChunks(chunks, token) {
    const startIndex = token.start._index;
    const startBufferIndex = token.start._bufferIndex;
    const endIndex = token.end._index;
    const endBufferIndex = token.end._bufferIndex;
    let view;
    if (startIndex === endIndex) {
      view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
    } else {
      view = chunks.slice(startIndex, endIndex);
      if (startBufferIndex > -1) {
        const head = view[0];
        if (typeof head === "string") {
          view[0] = head.slice(startBufferIndex);
        } else {
          view.shift();
        }
      }
      if (endBufferIndex > 0) {
        view.push(chunks[endIndex].slice(0, endBufferIndex));
      }
    }
    return view;
  }
  __name(sliceChunks, "sliceChunks");
  function serializeChunks(chunks, expandTabs) {
    let index2 = -1;
    const result = [];
    let atTab;
    while (++index2 < chunks.length) {
      const chunk = chunks[index2];
      let value;
      if (typeof chunk === "string") {
        value = chunk;
      } else
        switch (chunk) {
          case -5: {
            value = "\r";
            break;
          }
          case -4: {
            value = "\n";
            break;
          }
          case -3: {
            value = "\r\n";
            break;
          }
          case -2: {
            value = expandTabs ? " " : "	";
            break;
          }
          case -1: {
            if (!expandTabs && atTab) continue;
            value = " ";
            break;
          }
          default: {
            value = String.fromCharCode(chunk);
          }
        }
      atTab = chunk === -2;
      result.push(value);
    }
    return result.join("");
  }
  __name(serializeChunks, "serializeChunks");

  // node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/constructs.js
  var constructs_exports = {};
  __export(constructs_exports, {
    attentionMarkers: () => attentionMarkers,
    contentInitial: () => contentInitial,
    disable: () => disable,
    document: () => document2,
    flow: () => flow2,
    flowInitial: () => flowInitial,
    insideSpan: () => insideSpan,
    string: () => string2,
    text: () => text2,
  });
  var document2 = {
    [42]: list,
    [43]: list,
    [45]: list,
    [48]: list,
    [49]: list,
    [50]: list,
    [51]: list,
    [52]: list,
    [53]: list,
    [54]: list,
    [55]: list,
    [56]: list,
    [57]: list,
    [62]: blockQuote,
  };
  var contentInitial = {
    [91]: definition,
  };
  var flowInitial = {
    [-2]: codeIndented,
    [-1]: codeIndented,
    [32]: codeIndented,
  };
  var flow2 = {
    [35]: headingAtx,
    [42]: thematicBreak,
    [45]: [setextUnderline, thematicBreak],
    [60]: htmlFlow,
    [61]: setextUnderline,
    [95]: thematicBreak,
    [96]: codeFenced,
    [126]: codeFenced,
  };
  var string2 = {
    [38]: characterReference,
    [92]: characterEscape,
  };
  var text2 = {
    [-5]: lineEnding,
    [-4]: lineEnding,
    [-3]: lineEnding,
    [33]: labelStartImage,
    [38]: characterReference,
    [42]: attention,
    [60]: [autolink, htmlText],
    [91]: labelStartLink,
    [92]: [hardBreakEscape, characterEscape],
    [93]: labelEnd,
    [95]: attention,
    [96]: codeText,
  };
  var insideSpan = {
    null: [attention, resolver],
  };
  var attentionMarkers = {
    null: [42, 95],
  };
  var disable = {
    null: [],
  };

  // node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/parse.js
  function parse2(options) {
    const settings = options || {};
    const constructs2 =
      /** @type {FullNormalizedExtension} */
      combineExtensions([constructs_exports, ...(settings.extensions || [])]);
    const parser = {
      defined: [],
      lazy: {},
      constructs: constructs2,
      content: create(content),
      document: create(document),
      flow: create(flow),
      string: create(string),
      text: create(text),
    };
    return parser;
    function create(initial) {
      return creator;
      function creator(from) {
        return createTokenizer(parser, initial, from);
      }
      __name(creator, "creator");
    }
    __name(create, "create");
  }
  __name(parse2, "parse");

  // node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/postprocess.js
  function postprocess(events) {
    while (!subtokenize(events)) {}
    return events;
  }
  __name(postprocess, "postprocess");

  // node_modules/.pnpm/micromark@4.0.0/node_modules/micromark/lib/preprocess.js
  var search = /[\0\t\n\r]/g;
  function preprocess() {
    let column = 1;
    let buffer = "";
    let start = true;
    let atCarriageReturn;
    return preprocessor;
    function preprocessor(value, encoding, end) {
      const chunks = [];
      let match;
      let next;
      let startPosition;
      let endPosition;
      let code2;
      value =
        buffer +
        (typeof value === "string"
          ? value.toString()
          : new TextDecoder(encoding || void 0).decode(value));
      startPosition = 0;
      buffer = "";
      if (start) {
        if (value.charCodeAt(0) === 65279) {
          startPosition++;
        }
        start = void 0;
      }
      while (startPosition < value.length) {
        search.lastIndex = startPosition;
        match = search.exec(value);
        endPosition =
          match && match.index !== void 0 ? match.index : value.length;
        code2 = value.charCodeAt(endPosition);
        if (!match) {
          buffer = value.slice(startPosition);
          break;
        }
        if (code2 === 10 && startPosition === endPosition && atCarriageReturn) {
          chunks.push(-3);
          atCarriageReturn = void 0;
        } else {
          if (atCarriageReturn) {
            chunks.push(-5);
            atCarriageReturn = void 0;
          }
          if (startPosition < endPosition) {
            chunks.push(value.slice(startPosition, endPosition));
            column += endPosition - startPosition;
          }
          switch (code2) {
            case 0: {
              chunks.push(65533);
              column++;
              break;
            }
            case 9: {
              next = Math.ceil(column / 4) * 4;
              chunks.push(-2);
              while (column++ < next) chunks.push(-1);
              break;
            }
            case 10: {
              chunks.push(-4);
              column = 1;
              break;
            }
            default: {
              atCarriageReturn = true;
              column = 1;
            }
          }
        }
        startPosition = endPosition + 1;
      }
      if (end) {
        if (atCarriageReturn) chunks.push(-5);
        if (buffer) chunks.push(buffer);
        chunks.push(null);
      }
      return chunks;
    }
    __name(preprocessor, "preprocessor");
  }
  __name(preprocess, "preprocess");

  // node_modules/.pnpm/micromark-util-decode-string@2.0.0/node_modules/micromark-util-decode-string/index.js
  var characterEscapeOrReference =
    /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
  function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode);
  }
  __name(decodeString, "decodeString");
  function decode($0, $1, $2) {
    if ($1) {
      return $1;
    }
    const head = $2.charCodeAt(0);
    if (head === 35) {
      const head2 = $2.charCodeAt(1);
      const hex = head2 === 120 || head2 === 88;
      return decodeNumericCharacterReference(
        $2.slice(hex ? 2 : 1),
        hex ? 16 : 10,
      );
    }
    return decodeNamedCharacterReference($2) || $0;
  }
  __name(decode, "decode");

  // node_modules/.pnpm/mdast-util-from-markdown@2.0.1/node_modules/mdast-util-from-markdown/lib/index.js
  var own3 = {}.hasOwnProperty;
  function fromMarkdown(value, encoding, options) {
    if (typeof encoding !== "string") {
      options = encoding;
      encoding = void 0;
    }
    return compiler(options)(
      postprocess(
        parse2(options)
          .document()
          .write(preprocess()(value, encoding, true)),
      ),
    );
  }
  __name(fromMarkdown, "fromMarkdown");
  function compiler(options) {
    const config = {
      transforms: [],
      canContainEols: [
        "emphasis",
        "fragment",
        "heading",
        "paragraph",
        "strong",
      ],
      enter: {
        autolink: opener(link2),
        autolinkProtocol: onenterdata,
        autolinkEmail: onenterdata,
        atxHeading: opener(heading2),
        blockQuote: opener(blockQuote2),
        characterEscape: onenterdata,
        characterReference: onenterdata,
        codeFenced: opener(codeFlow),
        codeFencedFenceInfo: buffer,
        codeFencedFenceMeta: buffer,
        codeIndented: opener(codeFlow, buffer),
        codeText: opener(codeText2, buffer),
        codeTextData: onenterdata,
        data: onenterdata,
        codeFlowValue: onenterdata,
        definition: opener(definition3),
        definitionDestinationString: buffer,
        definitionLabelString: buffer,
        definitionTitleString: buffer,
        emphasis: opener(emphasis2),
        hardBreakEscape: opener(hardBreak2),
        hardBreakTrailing: opener(hardBreak2),
        htmlFlow: opener(html2, buffer),
        htmlFlowData: onenterdata,
        htmlText: opener(html2, buffer),
        htmlTextData: onenterdata,
        image: opener(image2),
        label: buffer,
        link: opener(link2),
        listItem: opener(listItem2),
        listItemValue: onenterlistitemvalue,
        listOrdered: opener(list4, onenterlistordered),
        listUnordered: opener(list4),
        paragraph: opener(paragraph2),
        reference: onenterreference,
        referenceString: buffer,
        resourceDestinationString: buffer,
        resourceTitleString: buffer,
        setextHeading: opener(heading2),
        strong: opener(strong2),
        thematicBreak: opener(thematicBreak3),
      },
      exit: {
        atxHeading: closer(),
        atxHeadingSequence: onexitatxheadingsequence,
        autolink: closer(),
        autolinkEmail: onexitautolinkemail,
        autolinkProtocol: onexitautolinkprotocol,
        blockQuote: closer(),
        characterEscapeValue: onexitdata,
        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
        characterReferenceValue: onexitcharacterreferencevalue,
        characterReference: onexitcharacterreference,
        codeFenced: closer(onexitcodefenced),
        codeFencedFence: onexitcodefencedfence,
        codeFencedFenceInfo: onexitcodefencedfenceinfo,
        codeFencedFenceMeta: onexitcodefencedfencemeta,
        codeFlowValue: onexitdata,
        codeIndented: closer(onexitcodeindented),
        codeText: closer(onexitcodetext),
        codeTextData: onexitdata,
        data: onexitdata,
        definition: closer(),
        definitionDestinationString: onexitdefinitiondestinationstring,
        definitionLabelString: onexitdefinitionlabelstring,
        definitionTitleString: onexitdefinitiontitlestring,
        emphasis: closer(),
        hardBreakEscape: closer(onexithardbreak),
        hardBreakTrailing: closer(onexithardbreak),
        htmlFlow: closer(onexithtmlflow),
        htmlFlowData: onexitdata,
        htmlText: closer(onexithtmltext),
        htmlTextData: onexitdata,
        image: closer(onexitimage),
        label: onexitlabel,
        labelText: onexitlabeltext,
        lineEnding: onexitlineending,
        link: closer(onexitlink),
        listItem: closer(),
        listOrdered: closer(),
        listUnordered: closer(),
        paragraph: closer(),
        referenceString: onexitreferencestring,
        resourceDestinationString: onexitresourcedestinationstring,
        resourceTitleString: onexitresourcetitlestring,
        resource: onexitresource,
        setextHeading: closer(onexitsetextheading),
        setextHeadingLineSequence: onexitsetextheadinglinesequence,
        setextHeadingText: onexitsetextheadingtext,
        strong: closer(),
        thematicBreak: closer(),
      },
    };
    configure(config, (options || {}).mdastExtensions || []);
    const data = {};
    return compile;
    function compile(events) {
      let tree = {
        type: "root",
        children: [],
      };
      const context2 = {
        stack: [tree],
        tokenStack: [],
        config,
        enter,
        exit: exit2,
        buffer,
        resume,
        data,
      };
      const listStack = [];
      let index2 = -1;
      while (++index2 < events.length) {
        if (
          events[index2][1].type === "listOrdered" ||
          events[index2][1].type === "listUnordered"
        ) {
          if (events[index2][0] === "enter") {
            listStack.push(index2);
          } else {
            const tail = listStack.pop();
            index2 = prepareList(events, tail, index2);
          }
        }
      }
      index2 = -1;
      while (++index2 < events.length) {
        const handler = config[events[index2][0]];
        if (own3.call(handler, events[index2][1].type)) {
          handler[events[index2][1].type].call(
            Object.assign(
              {
                sliceSerialize: events[index2][2].sliceSerialize,
              },
              context2,
            ),
            events[index2][1],
          );
        }
      }
      if (context2.tokenStack.length > 0) {
        const tail = context2.tokenStack[context2.tokenStack.length - 1];
        const handler = tail[1] || defaultOnError;
        handler.call(context2, void 0, tail[0]);
      }
      tree.position = {
        start: point2(
          events.length > 0
            ? events[0][1].start
            : {
                line: 1,
                column: 1,
                offset: 0,
              },
        ),
        end: point2(
          events.length > 0
            ? events[events.length - 2][1].end
            : {
                line: 1,
                column: 1,
                offset: 0,
              },
        ),
      };
      index2 = -1;
      while (++index2 < config.transforms.length) {
        tree = config.transforms[index2](tree) || tree;
      }
      return tree;
    }
    __name(compile, "compile");
    function prepareList(events, start, length) {
      let index2 = start - 1;
      let containerBalance = -1;
      let listSpread = false;
      let listItem3;
      let lineIndex;
      let firstBlankLineIndex;
      let atMarker;
      while (++index2 <= length) {
        const event = events[index2];
        switch (event[1].type) {
          case "listUnordered":
          case "listOrdered":
          case "blockQuote": {
            if (event[0] === "enter") {
              containerBalance++;
            } else {
              containerBalance--;
            }
            atMarker = void 0;
            break;
          }
          case "lineEndingBlank": {
            if (event[0] === "enter") {
              if (
                listItem3 &&
                !atMarker &&
                !containerBalance &&
                !firstBlankLineIndex
              ) {
                firstBlankLineIndex = index2;
              }
              atMarker = void 0;
            }
            break;
          }
          case "linePrefix":
          case "listItemValue":
          case "listItemMarker":
          case "listItemPrefix":
          case "listItemPrefixWhitespace": {
            break;
          }
          default: {
            atMarker = void 0;
          }
        }
        if (
          (!containerBalance &&
            event[0] === "enter" &&
            event[1].type === "listItemPrefix") ||
          (containerBalance === -1 &&
            event[0] === "exit" &&
            (event[1].type === "listUnordered" ||
              event[1].type === "listOrdered"))
        ) {
          if (listItem3) {
            let tailIndex = index2;
            lineIndex = void 0;
            while (tailIndex--) {
              const tailEvent = events[tailIndex];
              if (
                tailEvent[1].type === "lineEnding" ||
                tailEvent[1].type === "lineEndingBlank"
              ) {
                if (tailEvent[0] === "exit") continue;
                if (lineIndex) {
                  events[lineIndex][1].type = "lineEndingBlank";
                  listSpread = true;
                }
                tailEvent[1].type = "lineEnding";
                lineIndex = tailIndex;
              } else if (
                tailEvent[1].type === "linePrefix" ||
                tailEvent[1].type === "blockQuotePrefix" ||
                tailEvent[1].type === "blockQuotePrefixWhitespace" ||
                tailEvent[1].type === "blockQuoteMarker" ||
                tailEvent[1].type === "listItemIndent"
              ) {
              } else {
                break;
              }
            }
            if (
              firstBlankLineIndex &&
              (!lineIndex || firstBlankLineIndex < lineIndex)
            ) {
              listItem3._spread = true;
            }
            listItem3.end = Object.assign(
              {},
              lineIndex ? events[lineIndex][1].start : event[1].end,
            );
            events.splice(lineIndex || index2, 0, [
              "exit",
              listItem3,
              event[2],
            ]);
            index2++;
            length++;
          }
          if (event[1].type === "listItemPrefix") {
            const item = {
              type: "listItem",
              _spread: false,
              start: Object.assign({}, event[1].start),
              // @ts-expect-error: we’ll add `end` in a second.
              end: void 0,
            };
            listItem3 = item;
            events.splice(index2, 0, ["enter", item, event[2]]);
            index2++;
            length++;
            firstBlankLineIndex = void 0;
            atMarker = true;
          }
        }
      }
      events[start][1]._spread = listSpread;
      return length;
    }
    __name(prepareList, "prepareList");
    function opener(create, and) {
      return open;
      function open(token) {
        enter.call(this, create(token), token);
        if (and) and.call(this, token);
      }
      __name(open, "open");
    }
    __name(opener, "opener");
    function buffer() {
      this.stack.push({
        type: "fragment",
        children: [],
      });
    }
    __name(buffer, "buffer");
    function enter(node2, token, errorHandler) {
      const parent = this.stack[this.stack.length - 1];
      const siblings = parent.children;
      siblings.push(node2);
      this.stack.push(node2);
      this.tokenStack.push([token, errorHandler]);
      node2.position = {
        start: point2(token.start),
        // @ts-expect-error: `end` will be patched later.
        end: void 0,
      };
    }
    __name(enter, "enter");
    function closer(and) {
      return close;
      function close(token) {
        if (and) and.call(this, token);
        exit2.call(this, token);
      }
      __name(close, "close");
    }
    __name(closer, "closer");
    function exit2(token, onExitError) {
      const node2 = this.stack.pop();
      const open = this.tokenStack.pop();
      if (!open) {
        throw new Error(
          "Cannot close `" +
            token.type +
            "` (" +
            stringifyPosition({
              start: token.start,
              end: token.end,
            }) +
            "): it\u2019s not open",
        );
      } else if (open[0].type !== token.type) {
        if (onExitError) {
          onExitError.call(this, token, open[0]);
        } else {
          const handler = open[1] || defaultOnError;
          handler.call(this, token, open[0]);
        }
      }
      node2.position.end = point2(token.end);
    }
    __name(exit2, "exit");
    function resume() {
      return toString(this.stack.pop());
    }
    __name(resume, "resume");
    function onenterlistordered() {
      this.data.expectingFirstListItemValue = true;
    }
    __name(onenterlistordered, "onenterlistordered");
    function onenterlistitemvalue(token) {
      if (this.data.expectingFirstListItemValue) {
        const ancestor = this.stack[this.stack.length - 2];
        ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
        this.data.expectingFirstListItemValue = void 0;
      }
    }
    __name(onenterlistitemvalue, "onenterlistitemvalue");
    function onexitcodefencedfenceinfo() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.lang = data2;
    }
    __name(onexitcodefencedfenceinfo, "onexitcodefencedfenceinfo");
    function onexitcodefencedfencemeta() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.meta = data2;
    }
    __name(onexitcodefencedfencemeta, "onexitcodefencedfencemeta");
    function onexitcodefencedfence() {
      if (this.data.flowCodeInside) return;
      this.buffer();
      this.data.flowCodeInside = true;
    }
    __name(onexitcodefencedfence, "onexitcodefencedfence");
    function onexitcodefenced() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
      this.data.flowCodeInside = void 0;
    }
    __name(onexitcodefenced, "onexitcodefenced");
    function onexitcodeindented() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2.replace(/(\r?\n|\r)$/g, "");
    }
    __name(onexitcodeindented, "onexitcodeindented");
    function onexitdefinitionlabelstring(token) {
      const label = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.label = label;
      node2.identifier = normalizeIdentifier(
        this.sliceSerialize(token),
      ).toLowerCase();
    }
    __name(onexitdefinitionlabelstring, "onexitdefinitionlabelstring");
    function onexitdefinitiontitlestring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.title = data2;
    }
    __name(onexitdefinitiontitlestring, "onexitdefinitiontitlestring");
    function onexitdefinitiondestinationstring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.url = data2;
    }
    __name(
      onexitdefinitiondestinationstring,
      "onexitdefinitiondestinationstring",
    );
    function onexitatxheadingsequence(token) {
      const node2 = this.stack[this.stack.length - 1];
      if (!node2.depth) {
        const depth = this.sliceSerialize(token).length;
        node2.depth = depth;
      }
    }
    __name(onexitatxheadingsequence, "onexitatxheadingsequence");
    function onexitsetextheadingtext() {
      this.data.setextHeadingSlurpLineEnding = true;
    }
    __name(onexitsetextheadingtext, "onexitsetextheadingtext");
    function onexitsetextheadinglinesequence(token) {
      const node2 = this.stack[this.stack.length - 1];
      node2.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;
    }
    __name(onexitsetextheadinglinesequence, "onexitsetextheadinglinesequence");
    function onexitsetextheading() {
      this.data.setextHeadingSlurpLineEnding = void 0;
    }
    __name(onexitsetextheading, "onexitsetextheading");
    function onenterdata(token) {
      const node2 = this.stack[this.stack.length - 1];
      const siblings = node2.children;
      let tail = siblings[siblings.length - 1];
      if (!tail || tail.type !== "text") {
        tail = text4();
        tail.position = {
          start: point2(token.start),
          // @ts-expect-error: we’ll add `end` later.
          end: void 0,
        };
        siblings.push(tail);
      }
      this.stack.push(tail);
    }
    __name(onenterdata, "onenterdata");
    function onexitdata(token) {
      const tail = this.stack.pop();
      tail.value += this.sliceSerialize(token);
      tail.position.end = point2(token.end);
    }
    __name(onexitdata, "onexitdata");
    function onexitlineending(token) {
      const context2 = this.stack[this.stack.length - 1];
      if (this.data.atHardBreak) {
        const tail = context2.children[context2.children.length - 1];
        tail.position.end = point2(token.end);
        this.data.atHardBreak = void 0;
        return;
      }
      if (
        !this.data.setextHeadingSlurpLineEnding &&
        config.canContainEols.includes(context2.type)
      ) {
        onenterdata.call(this, token);
        onexitdata.call(this, token);
      }
    }
    __name(onexitlineending, "onexitlineending");
    function onexithardbreak() {
      this.data.atHardBreak = true;
    }
    __name(onexithardbreak, "onexithardbreak");
    function onexithtmlflow() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2;
    }
    __name(onexithtmlflow, "onexithtmlflow");
    function onexithtmltext() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2;
    }
    __name(onexithtmltext, "onexithtmltext");
    function onexitcodetext() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.value = data2;
    }
    __name(onexitcodetext, "onexitcodetext");
    function onexitlink() {
      const node2 = this.stack[this.stack.length - 1];
      if (this.data.inReference) {
        const referenceType = this.data.referenceType || "shortcut";
        node2.type += "Reference";
        node2.referenceType = referenceType;
        delete node2.url;
        delete node2.title;
      } else {
        delete node2.identifier;
        delete node2.label;
      }
      this.data.referenceType = void 0;
    }
    __name(onexitlink, "onexitlink");
    function onexitimage() {
      const node2 = this.stack[this.stack.length - 1];
      if (this.data.inReference) {
        const referenceType = this.data.referenceType || "shortcut";
        node2.type += "Reference";
        node2.referenceType = referenceType;
        delete node2.url;
        delete node2.title;
      } else {
        delete node2.identifier;
        delete node2.label;
      }
      this.data.referenceType = void 0;
    }
    __name(onexitimage, "onexitimage");
    function onexitlabeltext(token) {
      const string3 = this.sliceSerialize(token);
      const ancestor = this.stack[this.stack.length - 2];
      ancestor.label = decodeString(string3);
      ancestor.identifier = normalizeIdentifier(string3).toLowerCase();
    }
    __name(onexitlabeltext, "onexitlabeltext");
    function onexitlabel() {
      const fragment = this.stack[this.stack.length - 1];
      const value = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      this.data.inReference = true;
      if (node2.type === "link") {
        const children = fragment.children;
        node2.children = children;
      } else {
        node2.alt = value;
      }
    }
    __name(onexitlabel, "onexitlabel");
    function onexitresourcedestinationstring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.url = data2;
    }
    __name(onexitresourcedestinationstring, "onexitresourcedestinationstring");
    function onexitresourcetitlestring() {
      const data2 = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.title = data2;
    }
    __name(onexitresourcetitlestring, "onexitresourcetitlestring");
    function onexitresource() {
      this.data.inReference = void 0;
    }
    __name(onexitresource, "onexitresource");
    function onenterreference() {
      this.data.referenceType = "collapsed";
    }
    __name(onenterreference, "onenterreference");
    function onexitreferencestring(token) {
      const label = this.resume();
      const node2 = this.stack[this.stack.length - 1];
      node2.label = label;
      node2.identifier = normalizeIdentifier(
        this.sliceSerialize(token),
      ).toLowerCase();
      this.data.referenceType = "full";
    }
    __name(onexitreferencestring, "onexitreferencestring");
    function onexitcharacterreferencemarker(token) {
      this.data.characterReferenceType = token.type;
    }
    __name(onexitcharacterreferencemarker, "onexitcharacterreferencemarker");
    function onexitcharacterreferencevalue(token) {
      const data2 = this.sliceSerialize(token);
      const type = this.data.characterReferenceType;
      let value;
      if (type) {
        value = decodeNumericCharacterReference(
          data2,
          type === "characterReferenceMarkerNumeric" ? 10 : 16,
        );
        this.data.characterReferenceType = void 0;
      } else {
        const result = decodeNamedCharacterReference(data2);
        value = result;
      }
      const tail = this.stack[this.stack.length - 1];
      tail.value += value;
    }
    __name(onexitcharacterreferencevalue, "onexitcharacterreferencevalue");
    function onexitcharacterreference(token) {
      const tail = this.stack.pop();
      tail.position.end = point2(token.end);
    }
    __name(onexitcharacterreference, "onexitcharacterreference");
    function onexitautolinkprotocol(token) {
      onexitdata.call(this, token);
      const node2 = this.stack[this.stack.length - 1];
      node2.url = this.sliceSerialize(token);
    }
    __name(onexitautolinkprotocol, "onexitautolinkprotocol");
    function onexitautolinkemail(token) {
      onexitdata.call(this, token);
      const node2 = this.stack[this.stack.length - 1];
      node2.url = "mailto:" + this.sliceSerialize(token);
    }
    __name(onexitautolinkemail, "onexitautolinkemail");
    function blockQuote2() {
      return {
        type: "blockquote",
        children: [],
      };
    }
    __name(blockQuote2, "blockQuote");
    function codeFlow() {
      return {
        type: "code",
        lang: null,
        meta: null,
        value: "",
      };
    }
    __name(codeFlow, "codeFlow");
    function codeText2() {
      return {
        type: "inlineCode",
        value: "",
      };
    }
    __name(codeText2, "codeText");
    function definition3() {
      return {
        type: "definition",
        identifier: "",
        label: null,
        title: null,
        url: "",
      };
    }
    __name(definition3, "definition");
    function emphasis2() {
      return {
        type: "emphasis",
        children: [],
      };
    }
    __name(emphasis2, "emphasis");
    function heading2() {
      return {
        type: "heading",
        // @ts-expect-error `depth` will be set later.
        depth: 0,
        children: [],
      };
    }
    __name(heading2, "heading");
    function hardBreak2() {
      return {
        type: "break",
      };
    }
    __name(hardBreak2, "hardBreak");
    function html2() {
      return {
        type: "html",
        value: "",
      };
    }
    __name(html2, "html");
    function image2() {
      return {
        type: "image",
        title: null,
        url: "",
        alt: null,
      };
    }
    __name(image2, "image");
    function link2() {
      return {
        type: "link",
        title: null,
        url: "",
        children: [],
      };
    }
    __name(link2, "link");
    function list4(token) {
      return {
        type: "list",
        ordered: token.type === "listOrdered",
        start: null,
        spread: token._spread,
        children: [],
      };
    }
    __name(list4, "list");
    function listItem2(token) {
      return {
        type: "listItem",
        spread: token._spread,
        checked: null,
        children: [],
      };
    }
    __name(listItem2, "listItem");
    function paragraph2() {
      return {
        type: "paragraph",
        children: [],
      };
    }
    __name(paragraph2, "paragraph");
    function strong2() {
      return {
        type: "strong",
        children: [],
      };
    }
    __name(strong2, "strong");
    function text4() {
      return {
        type: "text",
        value: "",
      };
    }
    __name(text4, "text");
    function thematicBreak3() {
      return {
        type: "thematicBreak",
      };
    }
    __name(thematicBreak3, "thematicBreak");
  }
  __name(compiler, "compiler");
  function point2(d) {
    return {
      line: d.line,
      column: d.column,
      offset: d.offset,
    };
  }
  __name(point2, "point");
  function configure(combined, extensions) {
    let index2 = -1;
    while (++index2 < extensions.length) {
      const value = extensions[index2];
      if (Array.isArray(value)) {
        configure(combined, value);
      } else {
        extension(combined, value);
      }
    }
  }
  __name(configure, "configure");
  function extension(combined, extension2) {
    let key;
    for (key in extension2) {
      if (own3.call(extension2, key)) {
        switch (key) {
          case "canContainEols": {
            const right = extension2[key];
            if (right) {
              combined[key].push(...right);
            }
            break;
          }
          case "transforms": {
            const right = extension2[key];
            if (right) {
              combined[key].push(...right);
            }
            break;
          }
          case "enter":
          case "exit": {
            const right = extension2[key];
            if (right) {
              Object.assign(combined[key], right);
            }
            break;
          }
        }
      }
    }
  }
  __name(extension, "extension");
  function defaultOnError(left, right) {
    if (left) {
      throw new Error(
        "Cannot close `" +
          left.type +
          "` (" +
          stringifyPosition({
            start: left.start,
            end: left.end,
          }) +
          "): a different token (`" +
          right.type +
          "`, " +
          stringifyPosition({
            start: right.start,
            end: right.end,
          }) +
          ") is open",
      );
    } else {
      throw new Error(
        "Cannot close document, a token (`" +
          right.type +
          "`, " +
          stringifyPosition({
            start: right.start,
            end: right.end,
          }) +
          ") is still open",
      );
    }
  }
  __name(defaultOnError, "defaultOnError");

  // node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js
  function remarkParse(options) {
    const self2 = this;
    self2.parser = parser;
    function parser(doc) {
      return fromMarkdown(doc, {
        ...self2.data("settings"),
        ...options,
        // Note: these options are not in the readme.
        // The goal is for them to be set by plugins on `data` instead of being
        // passed by users.
        extensions: self2.data("micromarkExtensions") || [],
        mdastExtensions: self2.data("fromMarkdownExtensions") || [],
      });
    }
    __name(parser, "parser");
  }
  __name(remarkParse, "remarkParse");

  // node_modules/.pnpm/zwitch@2.0.4/node_modules/zwitch/index.js
  var own4 = {}.hasOwnProperty;
  function zwitch(key, options) {
    const settings = options || {};
    function one2(value, ...parameters) {
      let fn = one2.invalid;
      const handlers = one2.handlers;
      if (value && own4.call(value, key)) {
        const id = String(value[key]);
        fn = own4.call(handlers, id) ? handlers[id] : one2.unknown;
      }
      if (fn) {
        return fn.call(this, value, ...parameters);
      }
    }
    __name(one2, "one");
    one2.handlers = settings.handlers || {};
    one2.invalid = settings.invalid;
    one2.unknown = settings.unknown;
    return one2;
  }
  __name(zwitch, "zwitch");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/configure.js
  var own5 = {}.hasOwnProperty;
  function configure2(base, extension2) {
    let index2 = -1;
    let key;
    if (extension2.extensions) {
      while (++index2 < extension2.extensions.length) {
        configure2(base, extension2.extensions[index2]);
      }
    }
    for (key in extension2) {
      if (own5.call(extension2, key)) {
        switch (key) {
          case "extensions": {
            break;
          }
          /* c8 ignore next 4 */
          case "unsafe": {
            list2(base[key], extension2[key]);
            break;
          }
          case "join": {
            list2(base[key], extension2[key]);
            break;
          }
          case "handlers": {
            map(base[key], extension2[key]);
            break;
          }
          default: {
            base.options[key] = extension2[key];
          }
        }
      }
    }
    return base;
  }
  __name(configure2, "configure");
  function list2(left, right) {
    if (right) {
      left.push(...right);
    }
  }
  __name(list2, "list");
  function map(left, right) {
    if (right) {
      Object.assign(left, right);
    }
  }
  __name(map, "map");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js
  function blockquote(node2, _, state, info2) {
    const exit2 = state.enter("blockquote");
    const tracker = state.createTracker(info2);
    tracker.move("> ");
    tracker.shift(2);
    const value = state.indentLines(
      state.containerFlow(node2, tracker.current()),
      map2,
    );
    exit2();
    return value;
  }
  __name(blockquote, "blockquote");
  function map2(line, _, blank) {
    return ">" + (blank ? "" : " ") + line;
  }
  __name(map2, "map");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
  function patternInScope(stack, pattern) {
    return (
      listInScope(stack, pattern.inConstruct, true) &&
      !listInScope(stack, pattern.notInConstruct, false)
    );
  }
  __name(patternInScope, "patternInScope");
  function listInScope(stack, list4, none) {
    if (typeof list4 === "string") {
      list4 = [list4];
    }
    if (!list4 || list4.length === 0) {
      return none;
    }
    let index2 = -1;
    while (++index2 < list4.length) {
      if (stack.includes(list4[index2])) {
        return true;
      }
    }
    return false;
  }
  __name(listInScope, "listInScope");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/break.js
  function hardBreak(_, _1, state, info2) {
    let index2 = -1;
    while (++index2 < state.unsafe.length) {
      if (
        state.unsafe[index2].character === "\n" &&
        patternInScope(state.stack, state.unsafe[index2])
      ) {
        return /[ \t]/.test(info2.before) ? "" : " ";
      }
    }
    return "\\\n";
  }
  __name(hardBreak, "hardBreak");

  // node_modules/.pnpm/longest-streak@3.1.0/node_modules/longest-streak/index.js
  function longestStreak(value, substring) {
    const source = String(value);
    let index2 = source.indexOf(substring);
    let expected = index2;
    let count = 0;
    let max = 0;
    if (typeof substring !== "string") {
      throw new TypeError("Expected substring");
    }
    while (index2 !== -1) {
      if (index2 === expected) {
        if (++count > max) {
          max = count;
        }
      } else {
        count = 1;
      }
      expected = index2 + substring.length;
      index2 = source.indexOf(substring, expected);
    }
    return max;
  }
  __name(longestStreak, "longestStreak");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js
  function formatCodeAsIndented(node2, state) {
    return Boolean(
      state.options.fences === false &&
        node2.value && // If there’s no info…
        !node2.lang && // And there’s a non-whitespace character…
        /[^ \r\n]/.test(node2.value) && // And the value doesn’t start or end in a blank…
        !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node2.value),
    );
  }
  __name(formatCodeAsIndented, "formatCodeAsIndented");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-fence.js
  function checkFence(state) {
    const marker = state.options.fence || "`";
    if (marker !== "`" && marker !== "~") {
      throw new Error(
        "Cannot serialize code with `" +
          marker +
          "` for `options.fence`, expected `` ` `` or `~`",
      );
    }
    return marker;
  }
  __name(checkFence, "checkFence");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/code.js
  function code(node2, _, state, info2) {
    const marker = checkFence(state);
    const raw = node2.value || "";
    const suffix = marker === "`" ? "GraveAccent" : "Tilde";
    if (formatCodeAsIndented(node2, state)) {
      const exit3 = state.enter("codeIndented");
      const value2 = state.indentLines(raw, map3);
      exit3();
      return value2;
    }
    const tracker = state.createTracker(info2);
    const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
    const exit2 = state.enter("codeFenced");
    let value = tracker.move(sequence);
    if (node2.lang) {
      const subexit = state.enter(`codeFencedLang${suffix}`);
      value += tracker.move(
        state.safe(node2.lang, {
          before: value,
          after: " ",
          encode: ["`"],
          ...tracker.current(),
        }),
      );
      subexit();
    }
    if (node2.lang && node2.meta) {
      const subexit = state.enter(`codeFencedMeta${suffix}`);
      value += tracker.move(" ");
      value += tracker.move(
        state.safe(node2.meta, {
          before: value,
          after: "\n",
          encode: ["`"],
          ...tracker.current(),
        }),
      );
      subexit();
    }
    value += tracker.move("\n");
    if (raw) {
      value += tracker.move(raw + "\n");
    }
    value += tracker.move(sequence);
    exit2();
    return value;
  }
  __name(code, "code");
  function map3(line, _, blank) {
    return (blank ? "" : "    ") + line;
  }
  __name(map3, "map");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-quote.js
  function checkQuote(state) {
    const marker = state.options.quote || '"';
    if (marker !== '"' && marker !== "'") {
      throw new Error(
        "Cannot serialize title with `" +
          marker +
          "` for `options.quote`, expected `\"`, or `'`",
      );
    }
    return marker;
  }
  __name(checkQuote, "checkQuote");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/definition.js
  function definition2(node2, _, state, info2) {
    const quote = checkQuote(state);
    const suffix = quote === '"' ? "Quote" : "Apostrophe";
    const exit2 = state.enter("definition");
    let subexit = state.enter("label");
    const tracker = state.createTracker(info2);
    let value = tracker.move("[");
    value += tracker.move(
      state.safe(state.associationId(node2), {
        before: value,
        after: "]",
        ...tracker.current(),
      }),
    );
    value += tracker.move("]: ");
    subexit();
    if (
      // If there’s no url, or…
      !node2.url || // If there are control characters or whitespace.
      /[\0- \u007F]/.test(node2.url)
    ) {
      subexit = state.enter("destinationLiteral");
      value += tracker.move("<");
      value += tracker.move(
        state.safe(node2.url, {
          before: value,
          after: ">",
          ...tracker.current(),
        }),
      );
      value += tracker.move(">");
    } else {
      subexit = state.enter("destinationRaw");
      value += tracker.move(
        state.safe(node2.url, {
          before: value,
          after: node2.title ? " " : "\n",
          ...tracker.current(),
        }),
      );
    }
    subexit();
    if (node2.title) {
      subexit = state.enter(`title${suffix}`);
      value += tracker.move(" " + quote);
      value += tracker.move(
        state.safe(node2.title, {
          before: value,
          after: quote,
          ...tracker.current(),
        }),
      );
      value += tracker.move(quote);
      subexit();
    }
    exit2();
    return value;
  }
  __name(definition2, "definition");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js
  function checkEmphasis(state) {
    const marker = state.options.emphasis || "*";
    if (marker !== "*" && marker !== "_") {
      throw new Error(
        "Cannot serialize emphasis with `" +
          marker +
          "` for `options.emphasis`, expected `*`, or `_`",
      );
    }
    return marker;
  }
  __name(checkEmphasis, "checkEmphasis");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js
  emphasis.peek = emphasisPeek;
  function emphasis(node2, _, state, info2) {
    const marker = checkEmphasis(state);
    const exit2 = state.enter("emphasis");
    const tracker = state.createTracker(info2);
    let value = tracker.move(marker);
    value += tracker.move(
      state.containerPhrasing(node2, {
        before: value,
        after: marker,
        ...tracker.current(),
      }),
    );
    value += tracker.move(marker);
    exit2();
    return value;
  }
  __name(emphasis, "emphasis");
  function emphasisPeek(_, _1, state) {
    return state.options.emphasis || "*";
  }
  __name(emphasisPeek, "emphasisPeek");

  // node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/lib/index.js
  var convert =
    // Note: overloads in JSDoc can’t yet use different `@template`s.
    /**
     * @type {(
     *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &
     *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &
     *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &
     *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &
     *   ((test?: Test) => Check)
     * )}
     */
    /**
     * @param {Test} [test]
     * @returns {Check}
     */
    /* @__PURE__ */ __name(function (test) {
      if (test === null || test === void 0) {
        return ok2;
      }
      if (typeof test === "function") {
        return castFactory(test);
      }
      if (typeof test === "object") {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
      }
      if (typeof test === "string") {
        return typeFactory(test);
      }
      throw new Error("Expected function, string, or object as test");
    }, "convert");
  function anyFactory(tests) {
    const checks = [];
    let index2 = -1;
    while (++index2 < tests.length) {
      checks[index2] = convert(tests[index2]);
    }
    return castFactory(any);
    function any(...parameters) {
      let index3 = -1;
      while (++index3 < checks.length) {
        if (checks[index3].apply(this, parameters)) return true;
      }
      return false;
    }
    __name(any, "any");
  }
  __name(anyFactory, "anyFactory");
  function propsFactory(check) {
    const checkAsRecord =
      /** @type {Record<string, unknown>} */
      check;
    return castFactory(all2);
    function all2(node2) {
      const nodeAsRecord =
        /** @type {Record<string, unknown>} */
        /** @type {unknown} */
        node2;
      let key;
      for (key in check) {
        if (nodeAsRecord[key] !== checkAsRecord[key]) return false;
      }
      return true;
    }
    __name(all2, "all");
  }
  __name(propsFactory, "propsFactory");
  function typeFactory(check) {
    return castFactory(type);
    function type(node2) {
      return node2 && node2.type === check;
    }
    __name(type, "type");
  }
  __name(typeFactory, "typeFactory");
  function castFactory(testFunction) {
    return check;
    function check(value, index2, parent) {
      return Boolean(
        looksLikeANode(value) &&
          testFunction.call(
            this,
            value,
            typeof index2 === "number" ? index2 : void 0,
            parent || void 0,
          ),
      );
    }
    __name(check, "check");
  }
  __name(castFactory, "castFactory");
  function ok2() {
    return true;
  }
  __name(ok2, "ok");
  function looksLikeANode(value) {
    return value !== null && typeof value === "object" && "type" in value;
  }
  __name(looksLikeANode, "looksLikeANode");

  // node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/color.node.js
  function color(d) {
    return "\x1B[33m" + d + "\x1B[39m";
  }
  __name(color, "color");

  // node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js
  var empty = [];
  var CONTINUE = true;
  var EXIT = false;
  var SKIP = "skip";
  function visitParents(tree, test, visitor, reverse) {
    let check;
    if (typeof test === "function" && typeof visitor !== "function") {
      reverse = visitor;
      visitor = test;
    } else {
      check = test;
    }
    const is2 = convert(check);
    const step = reverse ? -1 : 1;
    factory(tree, void 0, [])();
    function factory(node2, index2, parents) {
      const value =
        /** @type {Record<string, unknown>} */
        node2 && typeof node2 === "object" ? node2 : {};
      if (typeof value.type === "string") {
        const name =
          // `hast`
          typeof value.tagName === "string"
            ? value.tagName
            : // `xast`
              typeof value.name === "string"
              ? value.name
              : void 0;
        Object.defineProperty(visit2, "name", {
          value:
            "node (" + color(node2.type + (name ? "<" + name + ">" : "")) + ")",
        });
      }
      return visit2;
      function visit2() {
        let result = empty;
        let subresult;
        let offset;
        let grandparents;
        if (
          !test ||
          is2(node2, index2, parents[parents.length - 1] || void 0)
        ) {
          result = toResult(visitor(node2, parents));
          if (result[0] === EXIT) {
            return result;
          }
        }
        if ("children" in node2 && node2.children) {
          const nodeAsParent =
            /** @type {UnistParent} */
            node2;
          if (nodeAsParent.children && result[0] !== SKIP) {
            offset = (reverse ? nodeAsParent.children.length : -1) + step;
            grandparents = parents.concat(nodeAsParent);
            while (offset > -1 && offset < nodeAsParent.children.length) {
              const child = nodeAsParent.children[offset];
              subresult = factory(child, offset, grandparents)();
              if (subresult[0] === EXIT) {
                return subresult;
              }
              offset =
                typeof subresult[1] === "number" ? subresult[1] : offset + step;
            }
          }
        }
        return result;
      }
      __name(visit2, "visit");
    }
    __name(factory, "factory");
  }
  __name(visitParents, "visitParents");
  function toResult(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === "number") {
      return [CONTINUE, value];
    }
    return value === null || value === void 0 ? empty : [value];
  }
  __name(toResult, "toResult");

  // node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js
  function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {
    let reverse;
    let test;
    let visitor;
    if (
      typeof testOrVisitor === "function" &&
      typeof visitorOrReverse !== "function"
    ) {
      test = void 0;
      visitor = testOrVisitor;
      reverse = visitorOrReverse;
    } else {
      test = testOrVisitor;
      visitor = visitorOrReverse;
      reverse = maybeReverse;
    }
    visitParents(tree, test, overload, reverse);
    function overload(node2, parents) {
      const parent = parents[parents.length - 1];
      const index2 = parent ? parent.children.indexOf(node2) : void 0;
      return visitor(node2, index2, parent);
    }
    __name(overload, "overload");
  }
  __name(visit, "visit");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js
  function formatHeadingAsSetext(node2, state) {
    let literalWithBreak = false;
    visit(node2, function (node3) {
      if (
        ("value" in node3 && /\r?\n|\r/.test(node3.value)) ||
        node3.type === "break"
      ) {
        literalWithBreak = true;
        return EXIT;
      }
    });
    return Boolean(
      (!node2.depth || node2.depth < 3) &&
        toString(node2) &&
        (state.options.setext || literalWithBreak),
    );
  }
  __name(formatHeadingAsSetext, "formatHeadingAsSetext");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/heading.js
  function heading(node2, _, state, info2) {
    const rank = Math.max(Math.min(6, node2.depth || 1), 1);
    const tracker = state.createTracker(info2);
    if (formatHeadingAsSetext(node2, state)) {
      const exit3 = state.enter("headingSetext");
      const subexit2 = state.enter("phrasing");
      const value2 = state.containerPhrasing(node2, {
        ...tracker.current(),
        before: "\n",
        after: "\n",
      });
      subexit2();
      exit3();
      return (
        value2 +
        "\n" +
        (rank === 1 ? "=" : "-").repeat(
          // The whole size…
          value2.length - // Minus the position of the character after the last EOL (or
            // 0 if there is none)…
            (Math.max(value2.lastIndexOf("\r"), value2.lastIndexOf("\n")) + 1),
        )
      );
    }
    const sequence = "#".repeat(rank);
    const exit2 = state.enter("headingAtx");
    const subexit = state.enter("phrasing");
    tracker.move(sequence + " ");
    let value = state.containerPhrasing(node2, {
      before: "# ",
      after: "\n",
      ...tracker.current(),
    });
    if (/^[\t ]/.test(value)) {
      value =
        "&#x" +
        value.charCodeAt(0).toString(16).toUpperCase() +
        ";" +
        value.slice(1);
    }
    value = value ? sequence + " " + value : sequence;
    if (state.options.closeAtx) {
      value += " " + sequence;
    }
    subexit();
    exit2();
    return value;
  }
  __name(heading, "heading");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/html.js
  html.peek = htmlPeek;
  function html(node2) {
    return node2.value || "";
  }
  __name(html, "html");
  function htmlPeek() {
    return "<";
  }
  __name(htmlPeek, "htmlPeek");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/image.js
  image.peek = imagePeek;
  function image(node2, _, state, info2) {
    const quote = checkQuote(state);
    const suffix = quote === '"' ? "Quote" : "Apostrophe";
    const exit2 = state.enter("image");
    let subexit = state.enter("label");
    const tracker = state.createTracker(info2);
    let value = tracker.move("![");
    value += tracker.move(
      state.safe(node2.alt, {
        before: value,
        after: "]",
        ...tracker.current(),
      }),
    );
    value += tracker.move("](");
    subexit();
    if (
      // If there’s no url but there is a title…
      (!node2.url && node2.title) || // If there are control characters or whitespace.
      /[\0- \u007F]/.test(node2.url)
    ) {
      subexit = state.enter("destinationLiteral");
      value += tracker.move("<");
      value += tracker.move(
        state.safe(node2.url, {
          before: value,
          after: ">",
          ...tracker.current(),
        }),
      );
      value += tracker.move(">");
    } else {
      subexit = state.enter("destinationRaw");
      value += tracker.move(
        state.safe(node2.url, {
          before: value,
          after: node2.title ? " " : ")",
          ...tracker.current(),
        }),
      );
    }
    subexit();
    if (node2.title) {
      subexit = state.enter(`title${suffix}`);
      value += tracker.move(" " + quote);
      value += tracker.move(
        state.safe(node2.title, {
          before: value,
          after: quote,
          ...tracker.current(),
        }),
      );
      value += tracker.move(quote);
      subexit();
    }
    value += tracker.move(")");
    exit2();
    return value;
  }
  __name(image, "image");
  function imagePeek() {
    return "!";
  }
  __name(imagePeek, "imagePeek");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js
  imageReference.peek = imageReferencePeek;
  function imageReference(node2, _, state, info2) {
    const type = node2.referenceType;
    const exit2 = state.enter("imageReference");
    let subexit = state.enter("label");
    const tracker = state.createTracker(info2);
    let value = tracker.move("![");
    const alt = state.safe(node2.alt, {
      before: value,
      after: "]",
      ...tracker.current(),
    });
    value += tracker.move(alt + "][");
    subexit();
    const stack = state.stack;
    state.stack = [];
    subexit = state.enter("reference");
    const reference = state.safe(state.associationId(node2), {
      before: value,
      after: "]",
      ...tracker.current(),
    });
    subexit();
    state.stack = stack;
    exit2();
    if (type === "full" || !alt || alt !== reference) {
      value += tracker.move(reference + "]");
    } else if (type === "shortcut") {
      value = value.slice(0, -1);
    } else {
      value += tracker.move("]");
    }
    return value;
  }
  __name(imageReference, "imageReference");
  function imageReferencePeek() {
    return "!";
  }
  __name(imageReferencePeek, "imageReferencePeek");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
  inlineCode.peek = inlineCodePeek;
  function inlineCode(node2, _, state) {
    let value = node2.value || "";
    let sequence = "`";
    let index2 = -1;
    while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value)) {
      sequence += "`";
    }
    if (
      /[^ \r\n]/.test(value) &&
      ((/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value)) ||
        /^`|`$/.test(value))
    ) {
      value = " " + value + " ";
    }
    while (++index2 < state.unsafe.length) {
      const pattern = state.unsafe[index2];
      const expression = state.compilePattern(pattern);
      let match;
      if (!pattern.atBreak) continue;
      while ((match = expression.exec(value))) {
        let position2 = match.index;
        if (
          value.charCodeAt(position2) === 10 &&
          value.charCodeAt(position2 - 1) === 13
        ) {
          position2--;
        }
        value = value.slice(0, position2) + " " + value.slice(match.index + 1);
      }
    }
    return sequence + value + sequence;
  }
  __name(inlineCode, "inlineCode");
  function inlineCodePeek() {
    return "`";
  }
  __name(inlineCodePeek, "inlineCodePeek");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js
  function formatLinkAsAutolink(node2, state) {
    const raw = toString(node2);
    return Boolean(
      !state.options.resourceLink && // If there’s a url…
        node2.url && // And there’s a no title…
        !node2.title && // And the content of `node` is a single text node…
        node2.children &&
        node2.children.length === 1 &&
        node2.children[0].type === "text" && // And if the url is the same as the content…
        (raw === node2.url || "mailto:" + raw === node2.url) && // And that starts w/ a protocol…
        /^[a-z][a-z+.-]+:/i.test(node2.url) && // And that doesn’t contain ASCII control codes (character escapes and
        // references don’t work), space, or angle brackets…
        !/[\0- <>\u007F]/.test(node2.url),
    );
  }
  __name(formatLinkAsAutolink, "formatLinkAsAutolink");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/link.js
  link.peek = linkPeek;
  function link(node2, _, state, info2) {
    const quote = checkQuote(state);
    const suffix = quote === '"' ? "Quote" : "Apostrophe";
    const tracker = state.createTracker(info2);
    let exit2;
    let subexit;
    if (formatLinkAsAutolink(node2, state)) {
      const stack = state.stack;
      state.stack = [];
      exit2 = state.enter("autolink");
      let value2 = tracker.move("<");
      value2 += tracker.move(
        state.containerPhrasing(node2, {
          before: value2,
          after: ">",
          ...tracker.current(),
        }),
      );
      value2 += tracker.move(">");
      exit2();
      state.stack = stack;
      return value2;
    }
    exit2 = state.enter("link");
    subexit = state.enter("label");
    let value = tracker.move("[");
    value += tracker.move(
      state.containerPhrasing(node2, {
        before: value,
        after: "](",
        ...tracker.current(),
      }),
    );
    value += tracker.move("](");
    subexit();
    if (
      // If there’s no url but there is a title…
      (!node2.url && node2.title) || // If there are control characters or whitespace.
      /[\0- \u007F]/.test(node2.url)
    ) {
      subexit = state.enter("destinationLiteral");
      value += tracker.move("<");
      value += tracker.move(
        state.safe(node2.url, {
          before: value,
          after: ">",
          ...tracker.current(),
        }),
      );
      value += tracker.move(">");
    } else {
      subexit = state.enter("destinationRaw");
      value += tracker.move(
        state.safe(node2.url, {
          before: value,
          after: node2.title ? " " : ")",
          ...tracker.current(),
        }),
      );
    }
    subexit();
    if (node2.title) {
      subexit = state.enter(`title${suffix}`);
      value += tracker.move(" " + quote);
      value += tracker.move(
        state.safe(node2.title, {
          before: value,
          after: quote,
          ...tracker.current(),
        }),
      );
      value += tracker.move(quote);
      subexit();
    }
    value += tracker.move(")");
    exit2();
    return value;
  }
  __name(link, "link");
  function linkPeek(node2, _, state) {
    return formatLinkAsAutolink(node2, state) ? "<" : "[";
  }
  __name(linkPeek, "linkPeek");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js
  linkReference.peek = linkReferencePeek;
  function linkReference(node2, _, state, info2) {
    const type = node2.referenceType;
    const exit2 = state.enter("linkReference");
    let subexit = state.enter("label");
    const tracker = state.createTracker(info2);
    let value = tracker.move("[");
    const text4 = state.containerPhrasing(node2, {
      before: value,
      after: "]",
      ...tracker.current(),
    });
    value += tracker.move(text4 + "][");
    subexit();
    const stack = state.stack;
    state.stack = [];
    subexit = state.enter("reference");
    const reference = state.safe(state.associationId(node2), {
      before: value,
      after: "]",
      ...tracker.current(),
    });
    subexit();
    state.stack = stack;
    exit2();
    if (type === "full" || !text4 || text4 !== reference) {
      value += tracker.move(reference + "]");
    } else if (type === "shortcut") {
      value = value.slice(0, -1);
    } else {
      value += tracker.move("]");
    }
    return value;
  }
  __name(linkReference, "linkReference");
  function linkReferencePeek() {
    return "[";
  }
  __name(linkReferencePeek, "linkReferencePeek");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
  function checkBullet(state) {
    const marker = state.options.bullet || "*";
    if (marker !== "*" && marker !== "+" && marker !== "-") {
      throw new Error(
        "Cannot serialize items with `" +
          marker +
          "` for `options.bullet`, expected `*`, `+`, or `-`",
      );
    }
    return marker;
  }
  __name(checkBullet, "checkBullet");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js
  function checkBulletOther(state) {
    const bullet = checkBullet(state);
    const bulletOther = state.options.bulletOther;
    if (!bulletOther) {
      return bullet === "*" ? "-" : "*";
    }
    if (bulletOther !== "*" && bulletOther !== "+" && bulletOther !== "-") {
      throw new Error(
        "Cannot serialize items with `" +
          bulletOther +
          "` for `options.bulletOther`, expected `*`, `+`, or `-`",
      );
    }
    if (bulletOther === bullet) {
      throw new Error(
        "Expected `bullet` (`" +
          bullet +
          "`) and `bulletOther` (`" +
          bulletOther +
          "`) to be different",
      );
    }
    return bulletOther;
  }
  __name(checkBulletOther, "checkBulletOther");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js
  function checkBulletOrdered(state) {
    const marker = state.options.bulletOrdered || ".";
    if (marker !== "." && marker !== ")") {
      throw new Error(
        "Cannot serialize items with `" +
          marker +
          "` for `options.bulletOrdered`, expected `.` or `)`",
      );
    }
    return marker;
  }
  __name(checkBulletOrdered, "checkBulletOrdered");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-rule.js
  function checkRule(state) {
    const marker = state.options.rule || "*";
    if (marker !== "*" && marker !== "-" && marker !== "_") {
      throw new Error(
        "Cannot serialize rules with `" +
          marker +
          "` for `options.rule`, expected `*`, `-`, or `_`",
      );
    }
    return marker;
  }
  __name(checkRule, "checkRule");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/list.js
  function list3(node2, parent, state, info2) {
    const exit2 = state.enter("list");
    const bulletCurrent = state.bulletCurrent;
    let bullet = node2.ordered ? checkBulletOrdered(state) : checkBullet(state);
    const bulletOther = node2.ordered
      ? bullet === "."
        ? ")"
        : "."
      : checkBulletOther(state);
    let useDifferentMarker =
      parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false;
    if (!node2.ordered) {
      const firstListItem = node2.children ? node2.children[0] : void 0;
      if (
        // Bullet could be used as a thematic break marker:
        (bullet === "*" || bullet === "-") && // Empty first list item:
        firstListItem &&
        (!firstListItem.children || !firstListItem.children[0]) && // Directly in two other list items:
        state.stack[state.stack.length - 1] === "list" &&
        state.stack[state.stack.length - 2] === "listItem" &&
        state.stack[state.stack.length - 3] === "list" &&
        state.stack[state.stack.length - 4] === "listItem" && // That are each the first child.
        state.indexStack[state.indexStack.length - 1] === 0 &&
        state.indexStack[state.indexStack.length - 2] === 0 &&
        state.indexStack[state.indexStack.length - 3] === 0
      ) {
        useDifferentMarker = true;
      }
      if (checkRule(state) === bullet && firstListItem) {
        let index2 = -1;
        while (++index2 < node2.children.length) {
          const item = node2.children[index2];
          if (
            item &&
            item.type === "listItem" &&
            item.children &&
            item.children[0] &&
            item.children[0].type === "thematicBreak"
          ) {
            useDifferentMarker = true;
            break;
          }
        }
      }
    }
    if (useDifferentMarker) {
      bullet = bulletOther;
    }
    state.bulletCurrent = bullet;
    const value = state.containerFlow(node2, info2);
    state.bulletLastUsed = bullet;
    state.bulletCurrent = bulletCurrent;
    exit2();
    return value;
  }
  __name(list3, "list");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
  function checkListItemIndent(state) {
    const style = state.options.listItemIndent || "one";
    if (style !== "tab" && style !== "one" && style !== "mixed") {
      throw new Error(
        "Cannot serialize items with `" +
          style +
          "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`",
      );
    }
    return style;
  }
  __name(checkListItemIndent, "checkListItemIndent");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/list-item.js
  function listItem(node2, parent, state, info2) {
    const listItemIndent = checkListItemIndent(state);
    let bullet = state.bulletCurrent || checkBullet(state);
    if (parent && parent.type === "list" && parent.ordered) {
      bullet =
        (typeof parent.start === "number" && parent.start > -1
          ? parent.start
          : 1) +
        (state.options.incrementListMarker === false
          ? 0
          : parent.children.indexOf(node2)) +
        bullet;
    }
    let size = bullet.length + 1;
    if (
      listItemIndent === "tab" ||
      (listItemIndent === "mixed" &&
        ((parent && parent.type === "list" && parent.spread) || node2.spread))
    ) {
      size = Math.ceil(size / 4) * 4;
    }
    const tracker = state.createTracker(info2);
    tracker.move(bullet + " ".repeat(size - bullet.length));
    tracker.shift(size);
    const exit2 = state.enter("listItem");
    const value = state.indentLines(
      state.containerFlow(node2, tracker.current()),
      map4,
    );
    exit2();
    return value;
    function map4(line, index2, blank) {
      if (index2) {
        return (blank ? "" : " ".repeat(size)) + line;
      }
      return (
        (blank ? bullet : bullet + " ".repeat(size - bullet.length)) + line
      );
    }
    __name(map4, "map");
  }
  __name(listItem, "listItem");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js
  function paragraph(node2, _, state, info2) {
    const exit2 = state.enter("paragraph");
    const subexit = state.enter("phrasing");
    const value = state.containerPhrasing(node2, info2);
    subexit();
    exit2();
    return value;
  }
  __name(paragraph, "paragraph");

  // node_modules/.pnpm/mdast-util-phrasing@4.1.0/node_modules/mdast-util-phrasing/lib/index.js
  var phrasing =
    /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */
    convert([
      "break",
      "delete",
      "emphasis",
      // To do: next major: removed since footnotes were added to GFM.
      "footnote",
      "footnoteReference",
      "image",
      "imageReference",
      "inlineCode",
      // Enabled by `mdast-util-math`:
      "inlineMath",
      "link",
      "linkReference",
      // Enabled by `mdast-util-mdx`:
      "mdxJsxTextElement",
      // Enabled by `mdast-util-mdx`:
      "mdxTextExpression",
      "strong",
      "text",
      // Enabled by `mdast-util-directive`:
      "textDirective",
    ]);

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/root.js
  function root(node2, _, state, info2) {
    const hasPhrasing = node2.children.some(function (d) {
      return phrasing(d);
    });
    const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow;
    return fn.call(state, node2, info2);
  }
  __name(root, "root");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-strong.js
  function checkStrong(state) {
    const marker = state.options.strong || "*";
    if (marker !== "*" && marker !== "_") {
      throw new Error(
        "Cannot serialize strong with `" +
          marker +
          "` for `options.strong`, expected `*`, or `_`",
      );
    }
    return marker;
  }
  __name(checkStrong, "checkStrong");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/strong.js
  strong.peek = strongPeek;
  function strong(node2, _, state, info2) {
    const marker = checkStrong(state);
    const exit2 = state.enter("strong");
    const tracker = state.createTracker(info2);
    let value = tracker.move(marker + marker);
    value += tracker.move(
      state.containerPhrasing(node2, {
        before: value,
        after: marker,
        ...tracker.current(),
      }),
    );
    value += tracker.move(marker + marker);
    exit2();
    return value;
  }
  __name(strong, "strong");
  function strongPeek(_, _1, state) {
    return state.options.strong || "*";
  }
  __name(strongPeek, "strongPeek");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/text.js
  function text3(node2, _, state, info2) {
    return state.safe(node2.value, info2);
  }
  __name(text3, "text");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js
  function checkRuleRepetition(state) {
    const repetition = state.options.ruleRepetition || 3;
    if (repetition < 3) {
      throw new Error(
        "Cannot serialize rules with repetition `" +
          repetition +
          "` for `options.ruleRepetition`, expected `3` or more",
      );
    }
    return repetition;
  }
  __name(checkRuleRepetition, "checkRuleRepetition");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js
  function thematicBreak2(_, _1, state) {
    const value = (
      checkRule(state) + (state.options.ruleSpaces ? " " : "")
    ).repeat(checkRuleRepetition(state));
    return state.options.ruleSpaces ? value.slice(0, -1) : value;
  }
  __name(thematicBreak2, "thematicBreak");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/handle/index.js
  var handle = {
    blockquote,
    break: hardBreak,
    code,
    definition: definition2,
    emphasis,
    hardBreak,
    heading,
    html,
    image,
    imageReference,
    inlineCode,
    link,
    linkReference,
    list: list3,
    listItem,
    paragraph,
    root,
    strong,
    text: text3,
    thematicBreak: thematicBreak2,
  };

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/join.js
  var join = [joinDefaults];
  function joinDefaults(left, right, parent, state) {
    if (
      right.type === "code" &&
      formatCodeAsIndented(right, state) &&
      (left.type === "list" ||
        (left.type === right.type && formatCodeAsIndented(left, state)))
    ) {
      return false;
    }
    if ("spread" in parent && typeof parent.spread === "boolean") {
      if (
        left.type === "paragraph" && // Two paragraphs.
        (left.type === right.type ||
          right.type === "definition" || // Paragraph followed by a setext heading.
          (right.type === "heading" && formatHeadingAsSetext(right, state)))
      ) {
        return;
      }
      return parent.spread ? 1 : 0;
    }
  }
  __name(joinDefaults, "joinDefaults");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/unsafe.js
  var fullPhrasingSpans = [
    "autolink",
    "destinationLiteral",
    "destinationRaw",
    "reference",
    "titleQuote",
    "titleApostrophe",
  ];
  var unsafe = [
    { character: "	", after: "[\\r\\n]", inConstruct: "phrasing" },
    { character: "	", before: "[\\r\\n]", inConstruct: "phrasing" },
    {
      character: "	",
      inConstruct: ["codeFencedLangGraveAccent", "codeFencedLangTilde"],
    },
    {
      character: "\r",
      inConstruct: [
        "codeFencedLangGraveAccent",
        "codeFencedLangTilde",
        "codeFencedMetaGraveAccent",
        "codeFencedMetaTilde",
        "destinationLiteral",
        "headingAtx",
      ],
    },
    {
      character: "\n",
      inConstruct: [
        "codeFencedLangGraveAccent",
        "codeFencedLangTilde",
        "codeFencedMetaGraveAccent",
        "codeFencedMetaTilde",
        "destinationLiteral",
        "headingAtx",
      ],
    },
    { character: " ", after: "[\\r\\n]", inConstruct: "phrasing" },
    { character: " ", before: "[\\r\\n]", inConstruct: "phrasing" },
    {
      character: " ",
      inConstruct: ["codeFencedLangGraveAccent", "codeFencedLangTilde"],
    },
    // An exclamation mark can start an image, if it is followed by a link or
    // a link reference.
    {
      character: "!",
      after: "\\[",
      inConstruct: "phrasing",
      notInConstruct: fullPhrasingSpans,
    },
    // A quote can break out of a title.
    { character: '"', inConstruct: "titleQuote" },
    // A number sign could start an ATX heading if it starts a line.
    { atBreak: true, character: "#" },
    { character: "#", inConstruct: "headingAtx", after: "(?:[\r\n]|$)" },
    // Dollar sign and percentage are not used in markdown.
    // An ampersand could start a character reference.
    { character: "&", after: "[#A-Za-z]", inConstruct: "phrasing" },
    // An apostrophe can break out of a title.
    { character: "'", inConstruct: "titleApostrophe" },
    // A left paren could break out of a destination raw.
    { character: "(", inConstruct: "destinationRaw" },
    // A left paren followed by `]` could make something into a link or image.
    {
      before: "\\]",
      character: "(",
      inConstruct: "phrasing",
      notInConstruct: fullPhrasingSpans,
    },
    // A right paren could start a list item or break out of a destination
    // raw.
    { atBreak: true, before: "\\d+", character: ")" },
    { character: ")", inConstruct: "destinationRaw" },
    // An asterisk can start thematic breaks, list items, emphasis, strong.
    { atBreak: true, character: "*", after: "(?:[ 	\r\n*])" },
    {
      character: "*",
      inConstruct: "phrasing",
      notInConstruct: fullPhrasingSpans,
    },
    // A plus sign could start a list item.
    { atBreak: true, character: "+", after: "(?:[ 	\r\n])" },
    // A dash can start thematic breaks, list items, and setext heading
    // underlines.
    { atBreak: true, character: "-", after: "(?:[ 	\r\n-])" },
    // A dot could start a list item.
    { atBreak: true, before: "\\d+", character: ".", after: "(?:[ 	\r\n]|$)" },
    // Slash, colon, and semicolon are not used in markdown for constructs.
    // A less than can start html (flow or text) or an autolink.
    // HTML could start with an exclamation mark (declaration, cdata, comment),
    // slash (closing tag), question mark (instruction), or a letter (tag).
    // An autolink also starts with a letter.
    // Finally, it could break out of a destination literal.
    { atBreak: true, character: "<", after: "[!/?A-Za-z]" },
    {
      character: "<",
      after: "[!/?A-Za-z]",
      inConstruct: "phrasing",
      notInConstruct: fullPhrasingSpans,
    },
    { character: "<", inConstruct: "destinationLiteral" },
    // An equals to can start setext heading underlines.
    { atBreak: true, character: "=" },
    // A greater than can start block quotes and it can break out of a
    // destination literal.
    { atBreak: true, character: ">" },
    { character: ">", inConstruct: "destinationLiteral" },
    // Question mark and at sign are not used in markdown for constructs.
    // A left bracket can start definitions, references, labels,
    { atBreak: true, character: "[" },
    {
      character: "[",
      inConstruct: "phrasing",
      notInConstruct: fullPhrasingSpans,
    },
    { character: "[", inConstruct: ["label", "reference"] },
    // A backslash can start an escape (when followed by punctuation) or a
    // hard break (when followed by an eol).
    // Note: typical escapes are handled in `safe`!
    { character: "\\", after: "[\\r\\n]", inConstruct: "phrasing" },
    // A right bracket can exit labels.
    { character: "]", inConstruct: ["label", "reference"] },
    // Caret is not used in markdown for constructs.
    // An underscore can start emphasis, strong, or a thematic break.
    { atBreak: true, character: "_" },
    {
      character: "_",
      inConstruct: "phrasing",
      notInConstruct: fullPhrasingSpans,
    },
    // A grave accent can start code (fenced or text), or it can break out of
    // a grave accent code fence.
    { atBreak: true, character: "`" },
    {
      character: "`",
      inConstruct: ["codeFencedLangGraveAccent", "codeFencedMetaGraveAccent"],
    },
    {
      character: "`",
      inConstruct: "phrasing",
      notInConstruct: fullPhrasingSpans,
    },
    // Left brace, vertical bar, right brace are not used in markdown for
    // constructs.
    // A tilde can start code (fenced).
    { atBreak: true, character: "~" },
  ];

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/association.js
  function association(node2) {
    if (node2.label || !node2.identifier) {
      return node2.label || "";
    }
    return decodeString(node2.identifier);
  }
  __name(association, "association");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/compile-pattern.js
  function compilePattern(pattern) {
    if (!pattern._compiled) {
      const before =
        (pattern.atBreak ? "[\\r\\n][\\t ]*" : "") +
        (pattern.before ? "(?:" + pattern.before + ")" : "");
      pattern._compiled = new RegExp(
        (before ? "(" + before + ")" : "") +
          (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? "\\" : "") +
          pattern.character +
          (pattern.after ? "(?:" + pattern.after + ")" : ""),
        "g",
      );
    }
    return pattern._compiled;
  }
  __name(compilePattern, "compilePattern");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js
  function containerPhrasing(parent, state, info2) {
    const indexStack = state.indexStack;
    const children = parent.children || [];
    const results = [];
    let index2 = -1;
    let before = info2.before;
    indexStack.push(-1);
    let tracker = state.createTracker(info2);
    while (++index2 < children.length) {
      const child = children[index2];
      let after;
      indexStack[indexStack.length - 1] = index2;
      if (index2 + 1 < children.length) {
        let handle2 = state.handle.handlers[children[index2 + 1].type];
        if (handle2 && handle2.peek) handle2 = handle2.peek;
        after = handle2
          ? handle2(children[index2 + 1], parent, state, {
              before: "",
              after: "",
              ...tracker.current(),
            }).charAt(0)
          : "";
      } else {
        after = info2.after;
      }
      if (
        results.length > 0 &&
        (before === "\r" || before === "\n") &&
        child.type === "html"
      ) {
        results[results.length - 1] = results[results.length - 1].replace(
          /(\r?\n|\r)$/,
          " ",
        );
        before = " ";
        tracker = state.createTracker(info2);
        tracker.move(results.join(""));
      }
      results.push(
        tracker.move(
          state.handle(child, parent, state, {
            ...tracker.current(),
            before,
            after,
          }),
        ),
      );
      before = results[results.length - 1].slice(-1);
    }
    indexStack.pop();
    return results.join("");
  }
  __name(containerPhrasing, "containerPhrasing");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/container-flow.js
  function containerFlow(parent, state, info2) {
    const indexStack = state.indexStack;
    const children = parent.children || [];
    const tracker = state.createTracker(info2);
    const results = [];
    let index2 = -1;
    indexStack.push(-1);
    while (++index2 < children.length) {
      const child = children[index2];
      indexStack[indexStack.length - 1] = index2;
      results.push(
        tracker.move(
          state.handle(child, parent, state, {
            before: "\n",
            after: "\n",
            ...tracker.current(),
          }),
        ),
      );
      if (child.type !== "list") {
        state.bulletLastUsed = void 0;
      }
      if (index2 < children.length - 1) {
        results.push(
          tracker.move(between(child, children[index2 + 1], parent, state)),
        );
      }
    }
    indexStack.pop();
    return results.join("");
  }
  __name(containerFlow, "containerFlow");
  function between(left, right, parent, state) {
    let index2 = state.join.length;
    while (index2--) {
      const result = state.join[index2](left, right, parent, state);
      if (result === true || result === 1) {
        break;
      }
      if (typeof result === "number") {
        return "\n".repeat(1 + result);
      }
      if (result === false) {
        return "\n\n<!---->\n\n";
      }
    }
    return "\n\n";
  }
  __name(between, "between");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js
  var eol = /\r?\n|\r/g;
  function indentLines(value, map4) {
    const result = [];
    let start = 0;
    let line = 0;
    let match;
    while ((match = eol.exec(value))) {
      one2(value.slice(start, match.index));
      result.push(match[0]);
      start = match.index + match[0].length;
      line++;
    }
    one2(value.slice(start));
    return result.join("");
    function one2(value2) {
      result.push(map4(value2, line, !value2));
    }
    __name(one2, "one");
  }
  __name(indentLines, "indentLines");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/safe.js
  function safe(state, input, config) {
    const value = (config.before || "") + (input || "") + (config.after || "");
    const positions = [];
    const result = [];
    const infos = {};
    let index2 = -1;
    while (++index2 < state.unsafe.length) {
      const pattern = state.unsafe[index2];
      if (!patternInScope(state.stack, pattern)) {
        continue;
      }
      const expression = state.compilePattern(pattern);
      let match;
      while ((match = expression.exec(value))) {
        const before = "before" in pattern || Boolean(pattern.atBreak);
        const after = "after" in pattern;
        const position2 = match.index + (before ? match[1].length : 0);
        if (positions.includes(position2)) {
          if (infos[position2].before && !before) {
            infos[position2].before = false;
          }
          if (infos[position2].after && !after) {
            infos[position2].after = false;
          }
        } else {
          positions.push(position2);
          infos[position2] = { before, after };
        }
      }
    }
    positions.sort(numerical);
    let start = config.before ? config.before.length : 0;
    const end = value.length - (config.after ? config.after.length : 0);
    index2 = -1;
    while (++index2 < positions.length) {
      const position2 = positions[index2];
      if (position2 < start || position2 >= end) {
        continue;
      }
      if (
        (position2 + 1 < end &&
          positions[index2 + 1] === position2 + 1 &&
          infos[position2].after &&
          !infos[position2 + 1].before &&
          !infos[position2 + 1].after) ||
        (positions[index2 - 1] === position2 - 1 &&
          infos[position2].before &&
          !infos[position2 - 1].before &&
          !infos[position2 - 1].after)
      ) {
        continue;
      }
      if (start !== position2) {
        result.push(escapeBackslashes(value.slice(start, position2), "\\"));
      }
      start = position2;
      if (
        /[!-/:-@[-`{-~]/.test(value.charAt(position2)) &&
        (!config.encode || !config.encode.includes(value.charAt(position2)))
      ) {
        result.push("\\");
      } else {
        result.push(
          "&#x" + value.charCodeAt(position2).toString(16).toUpperCase() + ";",
        );
        start++;
      }
    }
    result.push(escapeBackslashes(value.slice(start, end), config.after));
    return result.join("");
  }
  __name(safe, "safe");
  function numerical(a, b) {
    return a - b;
  }
  __name(numerical, "numerical");
  function escapeBackslashes(value, after) {
    const expression = /\\(?=[!-/:-@[-`{-~])/g;
    const positions = [];
    const results = [];
    const whole = value + after;
    let index2 = -1;
    let start = 0;
    let match;
    while ((match = expression.exec(whole))) {
      positions.push(match.index);
    }
    while (++index2 < positions.length) {
      if (start !== positions[index2]) {
        results.push(value.slice(start, positions[index2]));
      }
      results.push("\\");
      start = positions[index2];
    }
    results.push(value.slice(start));
    return results.join("");
  }
  __name(escapeBackslashes, "escapeBackslashes");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/util/track.js
  function track(config) {
    const options = config || {};
    const now = options.now || {};
    let lineShift = options.lineShift || 0;
    let line = now.line || 1;
    let column = now.column || 1;
    return { move, current, shift };
    function current() {
      return { now: { line, column }, lineShift };
    }
    __name(current, "current");
    function shift(value) {
      lineShift += value;
    }
    __name(shift, "shift");
    function move(input) {
      const value = input || "";
      const chunks = value.split(/\r?\n|\r/g);
      const tail = chunks[chunks.length - 1];
      line += chunks.length - 1;
      column =
        chunks.length === 1
          ? column + tail.length
          : 1 + tail.length + lineShift;
      return value;
    }
    __name(move, "move");
  }
  __name(track, "track");

  // node_modules/.pnpm/mdast-util-to-markdown@2.1.0/node_modules/mdast-util-to-markdown/lib/index.js
  function toMarkdown(tree, options = {}) {
    const state = {
      enter,
      indentLines,
      associationId: association,
      containerPhrasing: containerPhrasingBound,
      containerFlow: containerFlowBound,
      createTracker: track,
      compilePattern,
      safe: safeBound,
      stack: [],
      unsafe: [...unsafe],
      join: [...join],
      // @ts-expect-error: GFM / frontmatter are typed in `mdast` but not defined
      // here.
      handlers: { ...handle },
      options: {},
      indexStack: [],
      // @ts-expect-error: add `handle` in a second.
      handle: void 0,
    };
    configure2(state, options);
    if (state.options.tightDefinitions) {
      state.join.push(joinDefinition);
    }
    state.handle = zwitch("type", {
      invalid,
      unknown,
      handlers: state.handlers,
    });
    let result = state.handle(tree, void 0, state, {
      before: "\n",
      after: "\n",
      now: { line: 1, column: 1 },
      lineShift: 0,
    });
    if (
      result &&
      result.charCodeAt(result.length - 1) !== 10 &&
      result.charCodeAt(result.length - 1) !== 13
    ) {
      result += "\n";
    }
    return result;
    function enter(name) {
      state.stack.push(name);
      return exit2;
      function exit2() {
        state.stack.pop();
      }
      __name(exit2, "exit");
    }
    __name(enter, "enter");
  }
  __name(toMarkdown, "toMarkdown");
  function invalid(value) {
    throw new Error("Cannot handle value `" + value + "`, expected node");
  }
  __name(invalid, "invalid");
  function unknown(value) {
    const node2 =
      /** @type {Nodes} */
      value;
    throw new Error("Cannot handle unknown node `" + node2.type + "`");
  }
  __name(unknown, "unknown");
  function joinDefinition(left, right) {
    if (left.type === "definition" && left.type === right.type) {
      return 0;
    }
  }
  __name(joinDefinition, "joinDefinition");
  function containerPhrasingBound(parent, info2) {
    return containerPhrasing(parent, this, info2);
  }
  __name(containerPhrasingBound, "containerPhrasingBound");
  function containerFlowBound(parent, info2) {
    return containerFlow(parent, this, info2);
  }
  __name(containerFlowBound, "containerFlowBound");
  function safeBound(value, config) {
    return safe(this, value, config);
  }
  __name(safeBound, "safeBound");

  // node_modules/.pnpm/remark-stringify@11.0.0/node_modules/remark-stringify/lib/index.js
  function remarkStringify(options) {
    const self2 = this;
    self2.compiler = compiler2;
    function compiler2(tree) {
      return toMarkdown(tree, {
        ...self2.data("settings"),
        ...options,
        // Note: this option is not in the readme.
        // The goal is for it to be set by plugins on `data` instead of being
        // passed by users.
        extensions: self2.data("toMarkdownExtensions") || [],
      });
    }
    __name(compiler2, "compiler");
  }
  __name(remarkStringify, "remarkStringify");

  // src/utils.ts
  var import_get_packages = __toESM(require_manypkg_get_packages_cjs());
  var BumpLevels = {
    dep: 0,
    patch: 1,
    minor: 2,
    major: 3,
  };
  async function getVersionsByDirectory(cwd) {
    let { packages } = await (0, import_get_packages.getPackages)(cwd);
    return new Map(packages.map((x) => [x.dir, x.packageJson.version]));
  }
  __name(getVersionsByDirectory, "getVersionsByDirectory");
  async function getChangedPackages(cwd, previousVersions) {
    let { packages } = await (0, import_get_packages.getPackages)(cwd);
    let changedPackages = /* @__PURE__ */ new Set();
    for (let pkg of packages) {
      const previousVersion = previousVersions.get(pkg.dir);
      if (previousVersion !== pkg.packageJson.version) {
        changedPackages.add(pkg);
      }
    }
    return [...changedPackages];
  }
  __name(getChangedPackages, "getChangedPackages");
  function getChangelogEntry(changelog, version2) {
    let ast = unified().use(remarkParse).parse(changelog);
    let highestLevel = BumpLevels.dep;
    let nodes = ast.children;
    let headingStartInfo;
    let endIndex;
    for (let i = 0; i < nodes.length; i++) {
      let node2 = nodes[i];
      if (node2.type === "heading") {
        let stringified = toString(node2);
        let match = stringified.toLowerCase().match(/(major|minor|patch)/);
        if (match !== null) {
          let level = BumpLevels[match[0]];
          highestLevel = Math.max(level, highestLevel);
        }
        if (headingStartInfo === void 0 && stringified === version2) {
          headingStartInfo = {
            index: i,
            depth: node2.depth,
          };
          continue;
        }
        if (
          endIndex === void 0 &&
          headingStartInfo !== void 0 &&
          headingStartInfo.depth === node2.depth
        ) {
          endIndex = i;
          break;
        }
      }
    }
    if (headingStartInfo) {
      ast.children = ast.children.slice(headingStartInfo.index + 1, endIndex);
    }
    return {
      content: unified().use(remarkStringify).stringify(ast),
      highestLevel,
    };
  }
  __name(getChangelogEntry, "getChangelogEntry");
  function sortTheThings(a, b) {
    if (a.private === b.private) {
      return b.highestLevel - a.highestLevel;
    }
    if (a.private) {
      return 1;
    }
    return -1;
  }
  __name(sortTheThings, "sortTheThings");

  // node_modules/.pnpm/@changesets+pre@2.0.1/node_modules/@changesets/pre/dist/changesets-pre.esm.js
  var fs = __toESM(require_lib3());
  var import_path = __toESM(__require("path"));
  var import_get_packages2 = __toESM(require_get_packages_cjs());

  // node_modules/.pnpm/@changesets+errors@0.2.0/node_modules/@changesets/errors/dist/changesets-errors.esm.js
  var import_extendable_error = __toESM(require_bld());
  var GitError = class extends import_extendable_error.default {
    static {
      __name(this, "GitError");
    }
    constructor(code2, message) {
      super(`${message}, exit code: ${code2}`);
      this.code = code2;
    }
  };

  // node_modules/.pnpm/@changesets+pre@2.0.1/node_modules/@changesets/pre/dist/changesets-pre.esm.js
  async function readPreState(cwd) {
    let preStatePath = import_path.default.resolve(
      cwd,
      ".changeset",
      "pre.json",
    );
    let preState;
    try {
      let contents = await fs.readFile(preStatePath, "utf8");
      try {
        preState = JSON.parse(contents);
      } catch (err) {
        if (err instanceof SyntaxError) {
          console.error("error parsing json:", contents);
        }
        throw err;
      }
    } catch (err) {
      if (err.code !== "ENOENT") {
        throw err;
      }
    }
    return preState;
  }
  __name(readPreState, "readPreState");

  // node_modules/.pnpm/@changesets+read@0.6.1/node_modules/@changesets/read/dist/changesets-read.esm.js
  var fs2 = __toESM(require_lib3());
  var import_fs_extra = __toESM(require_lib3());
  var import_path2 = __toESM(__require("path"));

  // node_modules/.pnpm/@changesets+parse@0.4.0/node_modules/@changesets/parse/dist/changesets-parse.esm.js
  var import_js_yaml = __toESM(require_js_yaml3());
  var mdRegex = /\s*---([^]*?)\n\s*---(\s*(?:\n|$)[^]*)/;
  function parseChangesetFile(contents) {
    const execResult = mdRegex.exec(contents);
    if (!execResult) {
      throw new Error(
        `could not parse changeset - invalid frontmatter: ${contents}`,
      );
    }
    let [, roughReleases, roughSummary] = execResult;
    let summary = roughSummary.trim();
    let releases;
    try {
      const yamlStuff = import_js_yaml.default.safeLoad(roughReleases);
      if (yamlStuff) {
        releases = Object.entries(yamlStuff).map(([name, type]) => ({
          name,
          type,
        }));
      } else {
        releases = [];
      }
    } catch (e) {
      throw new Error(
        `could not parse changeset - invalid frontmatter: ${contents}`,
      );
    }
    if (!releases) {
      throw new Error(`could not parse changeset - unknown error: ${contents}`);
    }
    return {
      releases,
      summary,
    };
  }
  __name(parseChangesetFile, "parseChangesetFile");

  // node_modules/.pnpm/@changesets+git@3.0.1/node_modules/@changesets/git/dist/changesets-git.esm.js
  var import_spawndamnit = __toESM(require_spawndamnit());
  var import_get_packages3 = __toESM(require_get_packages_cjs());
  var import_is_subdir = __toESM(require_is_subdir());
  var import_micromatch = __toESM(require_micromatch());
  async function getDivergedCommit(cwd, ref) {
    const cmd = await (0, import_spawndamnit.default)(
      "git",
      ["merge-base", ref, "HEAD"],
      {
        cwd,
      },
    );
    if (cmd.code !== 0) {
      throw new Error(
        `Failed to find where HEAD diverged from ${ref}. Does ${ref} exist?`,
      );
    }
    return cmd.stdout.toString().trim();
  }
  __name(getDivergedCommit, "getDivergedCommit");
  async function getChangedChangesetFilesSinceRef({ cwd, ref }) {
    try {
      const divergedAt = await getDivergedCommit(cwd, ref);
      const cmd = await (0, import_spawndamnit.default)(
        "git",
        ["diff", "--name-only", "--diff-filter=d", divergedAt],
        {
          cwd,
        },
      );
      let tester = /.changeset\/[^/]+\.md$/;
      const files = cmd.stdout
        .toString()
        .trim()
        .split("\n")
        .filter((file) => tester.test(file));
      return files;
    } catch (err) {
      if (err instanceof GitError) return [];
      throw err;
    }
  }
  __name(getChangedChangesetFilesSinceRef, "getChangedChangesetFilesSinceRef");

  // node_modules/.pnpm/@changesets+read@0.6.1/node_modules/@changesets/read/dist/changesets-read.esm.js
  var import_picocolors2 = __toESM(require_picocolors());
  var import_p_filter = __toESM(require_p_filter());

  // node_modules/.pnpm/@changesets+logger@0.1.1/node_modules/@changesets/logger/dist/changesets-logger.esm.js
  var import_picocolors = __toESM(require_picocolors());
  var import_util = __toESM(__require("util"));
  var prefix = "\u{1F98B} ";
  function format(args, customPrefix) {
    let fullPrefix =
      prefix + (customPrefix === void 0 ? "" : " " + customPrefix);
    return (
      fullPrefix +
      import_util.default
        .format("", ...args)
        .split("\n")
        .join("\n" + fullPrefix + " ")
    );
  }
  __name(format, "format");
  function warn(...args) {
    console.warn(format(args, import_picocolors.default.yellow("warn")));
  }
  __name(warn, "warn");

  // node_modules/.pnpm/@changesets+read@0.6.1/node_modules/@changesets/read/dist/changesets-read.esm.js
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true,
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  __name(_defineProperty, "_defineProperty");
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  __name(ownKeys, "ownKeys");
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(
          target,
          Object.getOwnPropertyDescriptors(source),
        );
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(
            target,
            key,
            Object.getOwnPropertyDescriptor(source, key),
          );
        });
      }
    }
    return target;
  }
  __name(_objectSpread2, "_objectSpread2");
  var importantSeparator = import_picocolors2.default.red(
    "===============================IMPORTANT!===============================",
  );
  var importantEnd = import_picocolors2.default.red(
    "----------------------------------------------------------------------",
  );
  async function getOldChangesets(changesetBase, dirs) {
    let changesets = await (0, import_p_filter.default)(dirs, async (dir) =>
      (
        await fs2.lstat(import_path2.default.join(changesetBase, dir))
      ).isDirectory(),
    );
    const changesetContents = changesets.map(async (changesetDir) => {
      const jsonPath = import_path2.default.join(
        changesetBase,
        changesetDir,
        "changes.json",
      );
      const [summary, json] = await Promise.all([
        fs2.readFile(
          import_path2.default.join(changesetBase, changesetDir, "changes.md"),
          "utf-8",
        ),
        fs2.readJson(jsonPath),
      ]);
      return {
        releases: json.releases,
        summary,
        id: changesetDir,
      };
    });
    return Promise.all(changesetContents);
  }
  __name(getOldChangesets, "getOldChangesets");
  async function getOldChangesetsAndWarn(changesetBase, dirs) {
    let oldChangesets = await getOldChangesets(changesetBase, dirs);
    if (oldChangesets.length === 0) {
      return [];
    }
    warn(importantSeparator);
    warn("There were old changesets from version 1 found");
    warn(
      "These are being applied now but the dependents graph may have changed",
    );
    warn("Make sure you validate all your dependencies");
    warn(
      "In a future major version, we will no longer apply these old changesets, and will instead throw here",
    );
    warn(importantEnd);
    return oldChangesets;
  }
  __name(getOldChangesetsAndWarn, "getOldChangesetsAndWarn");
  async function filterChangesetsSinceRef(changesets, changesetBase, sinceRef) {
    const newChangesets = await getChangedChangesetFilesSinceRef({
      cwd: changesetBase,
      ref: sinceRef,
    });
    const newHashes = newChangesets.map((c) => c.split("/")[1]);
    return changesets.filter((dir) => newHashes.includes(dir));
  }
  __name(filterChangesetsSinceRef, "filterChangesetsSinceRef");
  async function getChangesets(cwd, sinceRef) {
    let changesetBase = import_path2.default.join(cwd, ".changeset");
    let contents;
    try {
      contents = await import_fs_extra.default.readdir(changesetBase);
    } catch (err) {
      if (err.code === "ENOENT") {
        throw new Error("There is no .changeset directory in this project");
      }
      throw err;
    }
    if (sinceRef !== void 0) {
      contents = await filterChangesetsSinceRef(
        contents,
        changesetBase,
        sinceRef,
      );
    }
    let oldChangesetsPromise = getOldChangesetsAndWarn(changesetBase, contents);
    let changesets = contents.filter(
      (file) =>
        !file.startsWith(".") && file.endsWith(".md") && file !== "README.md",
    );
    const changesetContents = changesets.map(async (file) => {
      const changeset = await import_fs_extra.default.readFile(
        import_path2.default.join(changesetBase, file),
        "utf-8",
      );
      return _objectSpread2(
        _objectSpread2({}, parseChangesetFile(changeset)),
        {},
        {
          id: file.replace(".md", ""),
        },
      );
    });
    return [
      ...(await oldChangesetsPromise),
      ...(await Promise.all(changesetContents)),
    ];
  }
  __name(getChangesets, "getChangesets");

  // src/readChangesetState.ts
  async function readChangesetState(cwd = process.cwd()) {
    let preState = await readPreState(cwd);
    let changesets = await getChangesets(cwd);
    if (preState !== void 0 && preState.mode === "pre") {
      let changesetsToFilter = new Set(preState.changesets);
      return {
        preState,
        changesets: changesets.filter((x) => !changesetsToFilter.has(x.id)),
      };
    }
    return {
      preState: void 0,
      changesets,
    };
  }
  __name(readChangesetState, "readChangesetState");

  // src/run.ts
  var import_resolve_from = __toESM(require_resolve_from());

  // node_modules/.pnpm/@octokit+plugin-throttling@9.3.1_@octokit+core@5.2.0/node_modules/@octokit/plugin-throttling/dist-bundle/index.js
  var import_light = __toESM(require_light(), 1);
  var VERSION = "0.0.0-development";
  var noop = /* @__PURE__ */ __name(() => Promise.resolve(), "noop");
  function wrapRequest(state, request, options) {
    return state.retryLimiter.schedule(doRequest, state, request, options);
  }
  __name(wrapRequest, "wrapRequest");
  async function doRequest(state, request, options) {
    const isWrite = options.method !== "GET" && options.method !== "HEAD";
    const { pathname } = new URL(options.url, "http://github.test");
    const isSearch =
      options.method === "GET" && pathname.startsWith("/search/");
    const isGraphQL = pathname.startsWith("/graphql");
    const retryCount = ~~request.retryCount;
    const jobOptions = retryCount > 0 ? { priority: 0, weight: 0 } : {};
    if (state.clustering) {
      jobOptions.expiration = 1e3 * 60;
    }
    if (isWrite || isGraphQL) {
      await state.write.key(state.id).schedule(jobOptions, noop);
    }
    if (isWrite && state.triggersNotification(pathname)) {
      await state.notifications.key(state.id).schedule(jobOptions, noop);
    }
    if (isSearch) {
      await state.search.key(state.id).schedule(jobOptions, noop);
    }
    const req = state.global
      .key(state.id)
      .schedule(jobOptions, request, options);
    if (isGraphQL) {
      const res = await req;
      if (
        res.data.errors != null &&
        res.data.errors.some((error) => error.type === "RATE_LIMITED")
      ) {
        const error = Object.assign(new Error("GraphQL Rate Limit Exceeded"), {
          response: res,
          data: res.data,
        });
        throw error;
      }
    }
    return req;
  }
  __name(doRequest, "doRequest");
  var triggers_notification_paths_default = [
    "/orgs/{org}/invitations",
    "/orgs/{org}/invitations/{invitation_id}",
    "/orgs/{org}/teams/{team_slug}/discussions",
    "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments",
    "/repos/{owner}/{repo}/collaborators/{username}",
    "/repos/{owner}/{repo}/commits/{commit_sha}/comments",
    "/repos/{owner}/{repo}/issues",
    "/repos/{owner}/{repo}/issues/{issue_number}/comments",
    "/repos/{owner}/{repo}/pulls",
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments",
    "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies",
    "/repos/{owner}/{repo}/pulls/{pull_number}/merge",
    "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers",
    "/repos/{owner}/{repo}/pulls/{pull_number}/reviews",
    "/repos/{owner}/{repo}/releases",
    "/teams/{team_id}/discussions",
    "/teams/{team_id}/discussions/{discussion_number}/comments",
  ];
  function routeMatcher(paths) {
    const regexes = paths.map((path4) =>
      path4
        .split("/")
        .map((c) => (c.startsWith("{") ? "(?:.+?)" : c))
        .join("/"),
    );
    const regex2 = `^(?:${regexes.map((r) => `(?:${r})`).join("|")})[^/]*$`;
    return new RegExp(regex2, "i");
  }
  __name(routeMatcher, "routeMatcher");
  var regex = routeMatcher(triggers_notification_paths_default);
  var triggersNotification = regex.test.bind(regex);
  var groups = {};
  var createGroups = /* @__PURE__ */ __name(function (Bottleneck, common) {
    groups.global = new Bottleneck.Group({
      id: "octokit-global",
      maxConcurrent: 10,
      ...common,
    });
    groups.search = new Bottleneck.Group({
      id: "octokit-search",
      maxConcurrent: 1,
      minTime: 2e3,
      ...common,
    });
    groups.write = new Bottleneck.Group({
      id: "octokit-write",
      maxConcurrent: 1,
      minTime: 1e3,
      ...common,
    });
    groups.notifications = new Bottleneck.Group({
      id: "octokit-notifications",
      maxConcurrent: 1,
      minTime: 3e3,
      ...common,
    });
  }, "createGroups");
  function throttling(octokit, octokitOptions) {
    const {
      enabled = true,
      Bottleneck = import_light.default,
      id = "no-id",
      timeout = 1e3 * 60 * 2,
      // Redis TTL: 2 minutes
      connection,
    } = octokitOptions.throttle || {};
    if (!enabled) {
      return {};
    }
    const common = { connection, timeout };
    if (groups.global == null) {
      createGroups(Bottleneck, common);
    }
    const state = Object.assign(
      {
        clustering: connection != null,
        triggersNotification,
        fallbackSecondaryRateRetryAfter: 60,
        retryAfterBaseValue: 1e3,
        retryLimiter: new Bottleneck(),
        id,
        ...groups,
      },
      octokitOptions.throttle,
    );
    if (
      typeof state.onSecondaryRateLimit !== "function" ||
      typeof state.onRateLimit !== "function"
    ) {
      throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);
    }
    const events = {};
    const emitter = new Bottleneck.Events(events);
    events.on("secondary-limit", state.onSecondaryRateLimit);
    events.on("rate-limit", state.onRateLimit);
    events.on("error", (e) =>
      octokit.log.warn("Error in throttling-plugin limit handler", e),
    );
    state.retryLimiter.on("failed", async function (error, info2) {
      const [state2, request, options] = info2.args;
      const { pathname } = new URL(options.url, "http://github.test");
      const shouldRetryGraphQL =
        pathname.startsWith("/graphql") && error.status !== 401;
      if (!(shouldRetryGraphQL || error.status === 403)) {
        return;
      }
      const retryCount = ~~request.retryCount;
      request.retryCount = retryCount;
      options.request.retryCount = retryCount;
      const { wantRetry, retryAfter = 0 } = await (async function () {
        if (/\bsecondary rate\b/i.test(error.message)) {
          const retryAfter2 =
            Number(error.response.headers["retry-after"]) ||
            state2.fallbackSecondaryRateRetryAfter;
          const wantRetry2 = await emitter.trigger(
            "secondary-limit",
            retryAfter2,
            options,
            octokit,
            retryCount,
          );
          return { wantRetry: wantRetry2, retryAfter: retryAfter2 };
        }
        if (
          (error.response.headers != null &&
            error.response.headers["x-ratelimit-remaining"] === "0") ||
          (error.response.data?.errors ?? []).some(
            (error2) => error2.type === "RATE_LIMITED",
          )
        ) {
          const rateLimitReset = new Date(
            ~~error.response.headers["x-ratelimit-reset"] * 1e3,
          ).getTime();
          const retryAfter2 = Math.max(
            // Add one second so we retry _after_ the reset time
            // https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#exceeding-the-rate-limit
            Math.ceil((rateLimitReset - Date.now()) / 1e3) + 1,
            0,
          );
          const wantRetry2 = await emitter.trigger(
            "rate-limit",
            retryAfter2,
            options,
            octokit,
            retryCount,
          );
          return { wantRetry: wantRetry2, retryAfter: retryAfter2 };
        }
        return {};
      })();
      if (wantRetry) {
        request.retryCount++;
        return retryAfter * state2.retryAfterBaseValue;
      }
    });
    octokit.hook.wrap("request", wrapRequest.bind(null, state));
    return {};
  }
  __name(throttling, "throttling");
  throttling.VERSION = VERSION;
  throttling.triggersNotification = triggersNotification;

  // src/run.ts
  var MAX_CHARACTERS_PER_MESSAGE = 6e4;
  var setupOctokit = /* @__PURE__ */ __name((githubToken) => {
    return new (import_utils.GitHub.plugin(throttling))(
      (0, import_utils.getOctokitOptions)(githubToken, {
        throttle: {
          onRateLimit: /* @__PURE__ */ __name(
            (retryAfter, options, octokit, retryCount) => {
              core.warning(
                `Request quota exhausted for request ${options.method} ${options.url}`,
              );
              if (retryCount <= 2) {
                core.info(`Retrying after ${retryAfter} seconds!`);
                return true;
              }
            },
            "onRateLimit",
          ),
          onSecondaryRateLimit: /* @__PURE__ */ __name(
            (retryAfter, options, octokit, retryCount) => {
              core.warning(
                `SecondaryRateLimit detected for request ${options.method} ${options.url}`,
              );
              if (retryCount <= 2) {
                core.info(`Retrying after ${retryAfter} seconds!`);
                return true;
              }
            },
            "onSecondaryRateLimit",
          ),
        },
      }),
    );
  }, "setupOctokit");
  var createRelease = /* @__PURE__ */ __name(
    async (octokit, { pkg, tagName }) => {
      try {
        let changelogFileName = import_path3.default.join(
          pkg.dir,
          "CHANGELOG.md",
        );
        let changelog = await import_fs_extra2.default.readFile(
          changelogFileName,
          "utf8",
        );
        let changelogEntry = getChangelogEntry(
          changelog,
          pkg.packageJson.version,
        );
        if (!changelogEntry) {
          throw new Error(
            `Could not find changelog entry for ${pkg.packageJson.name}@${pkg.packageJson.version}`,
          );
        }
        await octokit.rest.repos.createRelease({
          name: tagName,
          tag_name: tagName,
          body: changelogEntry.content,
          prerelease: pkg.packageJson.version.includes("-"),
          ...github.context.repo,
        });
      } catch (err) {
        if (
          err &&
          typeof err === "object" &&
          "code" in err &&
          err.code !== "ENOENT"
        ) {
          throw err;
        }
      }
    },
    "createRelease",
  );
  async function runPublish({
    script,
    githubToken,
    createGithubReleases,
    cwd = process.cwd(),
  }) {
    const octokit = setupOctokit(githubToken);
    let [publishCommand, ...publishArgs] = script.split(/\s+/);
    let changesetPublishOutput = await (0, import_exec2.getExecOutput)(
      publishCommand,
      publishArgs,
      { cwd },
    );
    await pushTags();
    let { packages, tool } = await (0, import_get_packages4.getPackages)(cwd);
    let releasedPackages = [];
    if (tool !== "root") {
      let newTagRegex = /New tag:\s+(@[^/]+\/[^@]+|[^/]+)@([^\s]+)/;
      let packagesByName = new Map(
        packages.map((x) => [x.packageJson.name, x]),
      );
      for (let line of changesetPublishOutput.stdout.split("\n")) {
        let match = line.match(newTagRegex);
        if (match === null) {
          continue;
        }
        let pkgName = match[1];
        let pkg = packagesByName.get(pkgName);
        if (pkg === void 0) {
          throw new Error(
            `Package "${pkgName}" not found.This is probably a bug in the action, please open an issue`,
          );
        }
        releasedPackages.push(pkg);
      }
      if (createGithubReleases) {
        await Promise.all(
          releasedPackages.map((pkg) =>
            createRelease(octokit, {
              pkg,
              tagName: `${pkg.packageJson.name}@${pkg.packageJson.version}`,
            }),
          ),
        );
      }
    } else {
      if (packages.length === 0) {
        throw new Error(
          `No package found.This is probably a bug in the action, please open an issue`,
        );
      }
      let pkg = packages[0];
      let newTagRegex = /New tag:/;
      for (let line of changesetPublishOutput.stdout.split("\n")) {
        let match = line.match(newTagRegex);
        if (match) {
          releasedPackages.push(pkg);
          if (createGithubReleases) {
            await createRelease(octokit, {
              pkg,
              tagName: `v${pkg.packageJson.version}`,
            });
          }
          break;
        }
      }
    }
    if (releasedPackages.length) {
      return {
        published: true,
        publishedPackages: releasedPackages.map((pkg) => ({
          name: pkg.packageJson.name,
          version: pkg.packageJson.version,
        })),
      };
    }
    return { published: false };
  }
  __name(runPublish, "runPublish");
  var requireChangesetsCliPkgJson = /* @__PURE__ */ __name((cwd) => {
    try {
      return __require(
        (0, import_resolve_from.default)(cwd, "@changesets/cli/package.json"),
      );
    } catch (err) {
      if (
        err &&
        typeof err === "object" &&
        "code" in err &&
        err.code === "MODULE_NOT_FOUND"
      ) {
        throw new Error(
          `Have you forgotten to install \`@changesets/cli\` in "${cwd}"?`,
        );
      }
      throw err;
    }
  }, "requireChangesetsCliPkgJson");
  async function getVersionPrBody({
    hasPublishScript,
    preState,
    changedPackagesInfo,
    prBodyMaxCharacters,
    branch,
  }) {
    let messageHeader = `This PR was opened by the [Changesets release](https://github.com/changesets/action) GitHub action. When you're ready to do a release, you can merge this and ${hasPublishScript ? `the packages will be published to npm automatically` : `publish to npm yourself or [setup this action to publish automatically](https://github.com/changesets/action#with-publishing)`}. If you're not ready to do a release yet, that's fine, whenever you add more changesets to ${branch}, this PR will be updated.
`;
    let messagePrestate = !!preState
      ? `\u26A0\uFE0F\u26A0\uFE0F\u26A0\uFE0F\u26A0\uFE0F\u26A0\uFE0F\u26A0\uFE0F

\`${branch}\` is currently in **pre mode** so this branch has prereleases rather than normal releases. If you want to exit prereleases, run \`changeset pre exit\` on \`${branch}\`.

\u26A0\uFE0F\u26A0\uFE0F\u26A0\uFE0F\u26A0\uFE0F\u26A0\uFE0F\u26A0\uFE0F
`
      : "";
    let messageReleasesHeading = `# Releases`;
    let fullMessage = [
      messageHeader,
      messagePrestate,
      messageReleasesHeading,
      ...changedPackagesInfo.map(
        (info2) => `${info2.header}

${info2.content}`,
      ),
    ].join("\n");
    if (fullMessage.length > prBodyMaxCharacters) {
      fullMessage = [
        messageHeader,
        messagePrestate,
        messageReleasesHeading,
        `
> The changelog information of each package has been omitted from this message, as the content exceeds the size limit.
`,
        ...changedPackagesInfo.map(
          (info2) => `${info2.header}

`,
        ),
      ].join("\n");
    }
    if (fullMessage.length > prBodyMaxCharacters) {
      fullMessage = [
        messageHeader,
        messagePrestate,
        messageReleasesHeading,
        `
> All release information have been omitted from this message, as the content exceeds the size limit.`,
      ].join("\n");
    }
    return fullMessage;
  }
  __name(getVersionPrBody, "getVersionPrBody");
  async function runVersion({
    script,
    githubToken,
    cwd = process.cwd(),
    prTitle = "Version Packages",
    commitMessage = "Version Packages",
    hasPublishScript = false,
    prBodyMaxCharacters = MAX_CHARACTERS_PER_MESSAGE,
    branch,
  }) {
    const octokit = setupOctokit(githubToken);
    let repo = `${github.context.repo.owner}/${github.context.repo.repo}`;
    branch = branch ?? github.context.ref.replace("refs/heads/", "");
    let versionBranch = `changeset-release/${branch}`;
    let { preState } = await readChangesetState(cwd);
    await switchToMaybeExistingBranch(versionBranch);
    await reset(github.context.sha);
    let versionsByDirectory = await getVersionsByDirectory(cwd);
    if (script) {
      let [versionCommand, ...versionArgs] = script.split(/\s+/);
      await (0, import_exec2.exec)(versionCommand, versionArgs, { cwd });
    } else {
      let changesetsCliPkgJson = requireChangesetsCliPkgJson(cwd);
      let cmd = semver.lt(changesetsCliPkgJson.version, "2.0.0")
        ? "bump"
        : "version";
      await (0, import_exec2.exec)(
        "node",
        [(0, import_resolve_from.default)(cwd, "@changesets/cli/bin.js"), cmd],
        {
          cwd,
        },
      );
    }
    const existingPullRequestsPromise = octokit.rest.pulls.list({
      ...github.context.repo,
      state: "open",
      head: `${github.context.repo.owner}:${versionBranch}`,
      base: branch,
    });
    let changedPackages = await getChangedPackages(cwd, versionsByDirectory);
    let changedPackagesInfoPromises = Promise.all(
      changedPackages.map(async (pkg) => {
        let changelogContents = await import_fs_extra2.default.readFile(
          import_path3.default.join(pkg.dir, "CHANGELOG.md"),
          "utf8",
        );
        let entry = getChangelogEntry(
          changelogContents,
          pkg.packageJson.version,
        );
        return {
          highestLevel: entry.highestLevel,
          private: !!pkg.packageJson.private,
          content: entry.content,
          header: `## ${pkg.packageJson.name}@${pkg.packageJson.version}`,
        };
      }),
    );
    const finalPrTitle = `${prTitle}${!!preState ? ` (${preState.tag})` : ""}`;
    if (!(await checkIfClean())) {
      const finalCommitMessage = `${commitMessage}${!!preState ? ` (${preState.tag})` : ""}`;
      await commitAll(finalCommitMessage);
    }
    await push(versionBranch, { force: true });
    let existingPullRequests = await existingPullRequestsPromise;
    core.info(JSON.stringify(existingPullRequests.data, null, 2));
    const changedPackagesInfo = (await changedPackagesInfoPromises)
      .filter((x) => x)
      .sort(sortTheThings);
    let prBody = await getVersionPrBody({
      hasPublishScript,
      preState,
      branch,
      changedPackagesInfo,
      prBodyMaxCharacters,
    });
    if (existingPullRequests.data.length === 0) {
      core.info("creating pull request");
      const { data: newPullRequest } = await octokit.rest.pulls.create({
        base: branch,
        head: versionBranch,
        title: finalPrTitle,
        body: prBody,
        ...github.context.repo,
      });
      return {
        pullRequestNumber: newPullRequest.number,
      };
    } else {
      const [pullRequest] = existingPullRequests.data;
      core.info(`updating found pull request #${pullRequest.number}`);
      await octokit.rest.pulls.update({
        pull_number: pullRequest.number,
        title: finalPrTitle,
        body: prBody,
        ...github.context.repo,
        state: "open",
      });
      return {
        pullRequestNumber: pullRequest.number,
      };
    }
  }
  __name(runVersion, "runVersion");

  // src/pkgUtils.ts
  var import_core = __toESM(require_core());
  var import_fs_extra3 = __toESM(require_lib2());
  var REGISTRY_OPTIONS = ["npm", "github", "custom"];
  var NPM_AUTH_RE = /^\s*\/\/registry\.npmjs\.org\/:[_-]authToken=/i;
  var GITHUB_AUTH_RE = /^\s*\/\/npm.pkg.github.com\/:[_-]authToken=/i;
  var userNpmrcPath = `${process.env.HOME}/.npmrc`;
  var userYarnrcPath = `${process.env.HOME}/.yarnrc.yml`;
  function getPackageManager() {
    return import_fs_extra3.default.existsSync(userYarnrcPath) ? "yarn" : "npm";
  }
  __name(getPackageManager, "getPackageManager");
  async function loadNpmRc(registry) {
    const packageManager = getPackageManager();
    if (import_fs_extra3.default.existsSync(userNpmrcPath)) {
      import_core.default.info("Found existing user .npmrc file");
      const userNpmrcContent = await import_fs_extra3.default.readFile(
        userNpmrcPath,
        "utf8",
      );
      if (registry && REGISTRY_OPTIONS.includes(registry)) {
        import_core.default.info(`Using ${registry} auth option`);
      } else if (registry) {
        import_core.default.setFailed(
          `Invalid registry option ${registry}. Allowed values are ${REGISTRY_OPTIONS.join(", ")}`,
        );
      }
      const authLine = userNpmrcContent.split("\n").find((line) => {
        switch (registry) {
          case "npm":
            return NPM_AUTH_RE.test(line);
          case "github":
            return GITHUB_AUTH_RE.test(line);
          case "custom":
            const re = import_core.default.getInput("registryAuthCheck");
            if (!re) {
              import_core.default.setFailed(
                "Custom auth option requires a custom authTokenCheck input",
              );
            }
            return new RegExp(re).test(line);
        }
      });
      if (authLine) {
        import_core.default.info(
          "Found existing auth token for the npm registry in the user .npmrc file",
        );
      } else {
        import_core.default.info(
          "Didn't find existing auth token for the npm registry in the user .npmrc file, creating one",
        );
        import_fs_extra3.default.appendFileSync(
          userNpmrcPath,
          `
//registry.npmjs.org/:_authToken=${process.env.NPM_TOKEN}
`,
        );
      }
    } else {
      import_core.default.info("No user .npmrc file found, creating one");
      import_fs_extra3.default.writeFileSync(
        userNpmrcPath,
        `//registry.npmjs.org/:_authToken=${process.env.NPM_TOKEN}
`,
      );
    }
  }
  __name(loadNpmRc, "loadNpmRc");

  // src/index.ts
  var getOptionalInput = /* @__PURE__ */ __name(
    (name) => import_core2.default.getInput(name) || void 0,
    "getOptionalInput",
  );
  void (async () => {
    let githubToken = process.env.GITHUB_TOKEN;
    if (!githubToken) {
      import_core2.default.setFailed(
        "Please add the GITHUB_TOKEN to the changesets action",
      );
      return;
    }
    const inputCwd = import_core2.default.getInput("cwd");
    if (inputCwd) {
      import_core2.default.info(
        "changing directory to the one given as the input",
      );
      process.chdir(inputCwd);
    }
    const setupGitUser = import_core2.default.getBooleanInput("setupGitUser");
    if (setupGitUser) {
      import_core2.default.info("setting git user");
      await setupUser();
    }
    import_core2.default.info("setting GitHub credentials");
    await import_fs_extra4.default.writeFile(
      `${process.env.HOME}/.netrc`,
      `machine github.com
login github-actions[bot]
password ${githubToken}`,
    );
    let { changesets } = await readChangesetState();
    let publishScript = import_core2.default.getInput("publish");
    const registry = import_core2.default.getInput("registry");
    let hasChangesets = changesets.length !== 0;
    const hasNonEmptyChangesets = changesets.some(
      (changeset) => changeset.releases.length > 0,
    );
    let hasPublishScript = !!publishScript;
    import_core2.default.setOutput("published", "false");
    import_core2.default.setOutput("publishedPackages", "[]");
    import_core2.default.setOutput("hasChangesets", String(hasChangesets));
    switch (true) {
      case !hasChangesets && !hasPublishScript:
        import_core2.default.info("No changesets found");
        return;
      case !hasChangesets && hasPublishScript: {
        import_core2.default.info(
          "No changesets found, attempting to publish any unpublished packages to npm",
        );
        await loadNpmRc(registry);
        const result = await runPublish({
          script: publishScript,
          githubToken,
          createGithubReleases: import_core2.default.getBooleanInput(
            "createGithubReleases",
          ),
        });
        if (result.published) {
          import_core2.default.setOutput("published", "true");
          import_core2.default.setOutput(
            "publishedPackages",
            JSON.stringify(result.publishedPackages),
          );
        }
        return;
      }
      case hasChangesets && !hasNonEmptyChangesets:
        import_core2.default.info("All changesets are empty; not creating PR");
        return;
      case hasChangesets:
        const { pullRequestNumber } = await runVersion({
          script: getOptionalInput("version"),
          githubToken,
          prTitle: getOptionalInput("title"),
          commitMessage: getOptionalInput("commit"),
          hasPublishScript,
          branch: getOptionalInput("branch"),
        });
        import_core2.default.setOutput(
          "pullRequestNumber",
          String(pullRequestNumber),
        );
        return;
    }
  })().catch((err) => {
    import_core2.default.error(err);
    import_core2.default.setFailed(err.message);
  });
})();
/*! Bundled license information:

undici/lib/fetch/body.js:
  (*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)

undici/lib/websocket/frame.js:
  (*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> *)

is-extglob/index.js:
  (*!
   * is-extglob <https://github.com/jonschlinkert/is-extglob>
   *
   * Copyright (c) 2014-2016, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

is-glob/index.js:
  (*!
   * is-glob <https://github.com/jonschlinkert/is-glob>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

is-number/index.js:
  (*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

to-regex-range/index.js:
  (*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   *)

fill-range/index.js:
  (*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   *)

queue-microtask/index.js:
  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

run-parallel/index.js:
  (*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

@babel/runtime/helpers/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)

is-windows/index.js:
  (*!
   * is-windows <https://github.com/jonschlinkert/is-windows>
   *
   * Copyright © 2015-2018, Jon Schlinkert.
   * Released under the MIT License.
   *)
*/
//# sourceMappingURL=index.js.map
